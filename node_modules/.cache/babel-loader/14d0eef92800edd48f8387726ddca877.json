{"ast":null,"code":"'use strict';\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar Option = _react2['default'].createClass({\n  displayName: 'Option',\n  propTypes: {\n    children: _react2['default'].PropTypes.node,\n    className: _react2['default'].PropTypes.string,\n    // className (based on mouse position)\n    instancePrefix: _react2['default'].PropTypes.string.isRequired,\n    // unique prefix for the ids (used for aria)\n    isDisabled: _react2['default'].PropTypes.bool,\n    // the option is disabled\n    isFocused: _react2['default'].PropTypes.bool,\n    // the option is focused\n    isSelected: _react2['default'].PropTypes.bool,\n    // the option is selected\n    onFocus: _react2['default'].PropTypes.func,\n    // method to handle mouseEnter on option element\n    onSelect: _react2['default'].PropTypes.func,\n    // method to handle click on option element\n    onUnfocus: _react2['default'].PropTypes.func,\n    // method to handle mouseLeave on option element\n    option: _react2['default'].PropTypes.object.isRequired,\n    // object that is base for that option\n    optionIndex: _react2['default'].PropTypes.number\n  },\n  // index of the option, used to generate unique ids for aria\n  blockEvent: function blockEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (event.target.tagName !== 'A' || !('href' in event.target)) {\n      return;\n    }\n\n    if (event.target.target) {\n      window.open(event.target.href, event.target.target);\n    } else {\n      window.location.href = event.target.href;\n    }\n  },\n  handleMouseDown: function handleMouseDown(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.props.onSelect(this.props.option, event);\n  },\n  handleMouseEnter: function handleMouseEnter(event) {\n    this.onFocus(event);\n  },\n  handleMouseMove: function handleMouseMove(event) {\n    this.onFocus(event);\n  },\n  handleTouchEnd: function handleTouchEnd(event) {\n    // Check if the view is being dragged, In this case\n    // we don't want to fire the click event (because the user only wants to scroll)\n    if (this.dragging) return;\n    this.handleMouseDown(event);\n  },\n  handleTouchMove: function handleTouchMove(event) {\n    // Set a flag that the view is being dragged\n    this.dragging = true;\n  },\n  handleTouchStart: function handleTouchStart(event) {\n    // Set a flag that the view is not being dragged\n    this.dragging = false;\n  },\n  onFocus: function onFocus(event) {\n    if (!this.props.isFocused) {\n      this.props.onFocus(this.props.option, event);\n    }\n  },\n  render: function render() {\n    var _props = this.props;\n    var option = _props.option;\n    var instancePrefix = _props.instancePrefix;\n    var optionIndex = _props.optionIndex;\n    var className = (0, _classnames2['default'])(this.props.className, option.className);\n    return option.disabled ? _react2['default'].createElement('div', {\n      className: className,\n      onMouseDown: this.blockEvent,\n      onClick: this.blockEvent\n    }, this.props.children) : _react2['default'].createElement('div', {\n      className: className,\n      style: option.style,\n      role: 'option',\n      onMouseDown: this.handleMouseDown,\n      onMouseEnter: this.handleMouseEnter,\n      onMouseMove: this.handleMouseMove,\n      onTouchStart: this.handleTouchStart,\n      onTouchMove: this.handleTouchMove,\n      onTouchEnd: this.handleTouchEnd,\n      id: instancePrefix + '-option-' + optionIndex,\n      title: option.title\n    }, this.props.children);\n  }\n});\n\nmodule.exports = Option;","map":null,"metadata":{},"sourceType":"script"}