{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable no-nested-ternary  */\n\n\nimport React, { Component } from 'react';\nimport styled from 'styled-jss';\nimport PropTypes from 'prop-types';\nvar Wrapper = styled('li')(function (_ref) {\n  var isOpen = _ref.isOpen,\n      slideSpeed = _ref.slideSpeed,\n      backgroundColor = _ref.backgroundColor,\n      size = _ref.size,\n      iconColor = _ref.iconColor,\n      spacing = _ref.spacing,\n      direction = _ref.direction;\n  return {\n    backgroundColor: backgroundColor,\n    display: 'flex',\n    border: 'none',\n    borderRadius: '50%',\n    boxShadow: '0 0 4px rgba(0,0,0,.14),0 4px 8px rgba(0,0,0,.28)',\n    cursor: 'pointer',\n    outline: 'none',\n    padding: '0',\n    WebkitUserDrag: 'none',\n    fontWeight: 'bold',\n    justifyContent: 'center',\n    alignItems: 'center',\n    opacity: isOpen ? 1 : 0,\n    transition: 'all ' + slideSpeed + 'ms',\n    width: size,\n    height: size,\n    marginTop: direction === 'down' ? spacing : 0,\n    marginBottom: direction === 'up' ? spacing : 0,\n    marginLeft: direction === 'right' ? spacing : 0,\n    marginRight: direction === 'left' ? spacing : 0,\n    color: iconColor\n  };\n});\n\nvar ChildButton = function (_Component) {\n  _inherits(ChildButton, _Component);\n\n  function ChildButton() {\n    _classCallCheck(this, ChildButton);\n\n    return _possibleConstructorReturn(this, _Component.apply(this, arguments));\n  }\n\n  ChildButton.prototype.render = function render() {\n    var _props = this.props,\n        icon = _props.icon,\n        index = _props.index,\n        direction = _props.direction,\n        size = _props.size,\n        spacing = _props.spacing,\n        isOpen = _props.isOpen,\n        onClick = _props.onClick;\n    var offsetX = direction === 'right' ? (size + spacing) * index : direction === 'left' ? (size + spacing) * index * -1 : 0;\n    var offsetY = direction === 'down' ? (size + spacing) * index : direction === 'up' ? (size + spacing) * index * -1 : 0;\n    return React.createElement(Wrapper, _extends({}, this.props, {\n      onClick: isOpen ? onClick : null,\n      style: {\n        transform: 'translate(' + (isOpen ? 0 : -offsetX) + 'px, ' + (isOpen ? 0 : -offsetY) + 'px)'\n      }\n    }), icon);\n  };\n\n  return ChildButton;\n}(Component);\n\nChildButton.propTypes = {\n  icon: PropTypes.node.isRequired,\n  direction: PropTypes.string,\n  index: PropTypes.number,\n  onClick: PropTypes.func,\n  isOpen: PropTypes.bool,\n  size: PropTypes.number,\n  spacing: PropTypes.number\n};\nChildButton.defaultProps = {\n  direction: 'up',\n  index: 1,\n  iconColor: 'black',\n  size: '40',\n  spacing: 0,\n  isOpen: false,\n  onClick: null\n};\nexport default ChildButton;","map":null,"metadata":{},"sourceType":"module"}