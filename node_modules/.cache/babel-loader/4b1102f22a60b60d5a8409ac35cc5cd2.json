{"ast":null,"code":"'use strict';\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar Value = _react2['default'].createClass({\n  displayName: 'Value',\n  propTypes: {\n    children: _react2['default'].PropTypes.node,\n    disabled: _react2['default'].PropTypes.bool,\n    // disabled prop passed to ReactSelect\n    id: _react2['default'].PropTypes.string,\n    // Unique id for the value - used for aria\n    onClick: _react2['default'].PropTypes.func,\n    // method to handle click on value label\n    onRemove: _react2['default'].PropTypes.func,\n    // method to handle removal of the value\n    value: _react2['default'].PropTypes.object.isRequired\n  },\n  // the option object for this value\n  handleMouseDown: function handleMouseDown(event) {\n    if (event.type === 'mousedown' && event.button !== 0) {\n      return;\n    }\n\n    if (this.props.onClick) {\n      event.stopPropagation();\n      this.props.onClick(this.props.value, event);\n      return;\n    }\n\n    if (this.props.value.href) {\n      event.stopPropagation();\n    }\n  },\n  onRemove: function onRemove(event) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.props.onRemove(this.props.value);\n  },\n  handleTouchEndRemove: function handleTouchEndRemove(event) {\n    // Check if the view is being dragged, In this case\n    // we don't want to fire the click event (because the user only wants to scroll)\n    if (this.dragging) return; // Fire the mouse events\n\n    this.onRemove(event);\n  },\n  handleTouchMove: function handleTouchMove(event) {\n    // Set a flag that the view is being dragged\n    this.dragging = true;\n  },\n  handleTouchStart: function handleTouchStart(event) {\n    // Set a flag that the view is not being dragged\n    this.dragging = false;\n  },\n  renderRemoveIcon: function renderRemoveIcon() {\n    if (this.props.disabled || !this.props.onRemove) return;\n    return _react2['default'].createElement('span', {\n      className: 'Select-value-icon',\n      'aria-hidden': 'true',\n      onMouseDown: this.onRemove,\n      onTouchEnd: this.handleTouchEndRemove,\n      onTouchStart: this.handleTouchStart,\n      onTouchMove: this.handleTouchMove\n    }, 'Ã—');\n  },\n  renderLabel: function renderLabel() {\n    var className = 'Select-value-label';\n    return this.props.onClick || this.props.value.href ? _react2['default'].createElement('a', {\n      className: className,\n      href: this.props.value.href,\n      target: this.props.value.target,\n      onMouseDown: this.handleMouseDown,\n      onTouchEnd: this.handleMouseDown\n    }, this.props.children) : _react2['default'].createElement('span', {\n      className: className,\n      role: 'option',\n      'aria-selected': 'true',\n      id: this.props.id\n    }, this.props.children);\n  },\n  render: function render() {\n    return _react2['default'].createElement('div', {\n      className: (0, _classnames2['default'])('Select-value', this.props.value.className),\n      style: this.props.value.style,\n      title: this.props.value.title\n    }, this.renderRemoveIcon(), this.renderLabel());\n  }\n});\n\nmodule.exports = Value;","map":null,"metadata":{},"sourceType":"script"}