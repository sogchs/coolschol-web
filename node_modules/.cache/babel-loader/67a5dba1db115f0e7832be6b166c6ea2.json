{"ast":null,"code":"(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.Select = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function e(t, n, r) {\n    function s(o, u) {\n      if (!n[o]) {\n        if (!t[o]) {\n          var a = typeof require == \"function\" && require;\n          if (!u && a) return a(o, !0);\n          if (i) return i(o, !0);\n          var f = new Error(\"Cannot find module '\" + o + \"'\");\n          throw f.code = \"MODULE_NOT_FOUND\", f;\n        }\n\n        var l = n[o] = {\n          exports: {}\n        };\n        t[o][0].call(l.exports, function (e) {\n          var n = t[o][1][e];\n          return s(n ? n : e);\n        }, l, l.exports, e, t, n, r);\n      }\n\n      return n[o].exports;\n    }\n\n    var i = typeof require == \"function\" && require;\n\n    for (var o = 0; o < r.length; o++) {\n      s(r[o]);\n    }\n\n    return s;\n  }({\n    1: [function (require, module, exports) {\n      (function (global) {\n        'use strict';\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n\n        var _extends = Object.assign || function (target) {\n          for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            for (var key in source) {\n              if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n              }\n            }\n          }\n\n          return target;\n        };\n\n        var _createClass = function () {\n          function defineProperties(target, props) {\n            for (var i = 0; i < props.length; i++) {\n              var descriptor = props[i];\n              descriptor.enumerable = descriptor.enumerable || false;\n              descriptor.configurable = true;\n              if ('value' in descriptor) descriptor.writable = true;\n              Object.defineProperty(target, descriptor.key, descriptor);\n            }\n          }\n\n          return function (Constructor, protoProps, staticProps) {\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\n            if (staticProps) defineProperties(Constructor, staticProps);\n            return Constructor;\n          };\n        }();\n\n        var _get = function get(_x, _x2, _x3) {\n          var _again = true;\n\n          _function: while (_again) {\n            var object = _x,\n                property = _x2,\n                receiver = _x3;\n            _again = false;\n            if (object === null) object = Function.prototype;\n            var desc = Object.getOwnPropertyDescriptor(object, property);\n\n            if (desc === undefined) {\n              var parent = Object.getPrototypeOf(object);\n\n              if (parent === null) {\n                return undefined;\n              } else {\n                _x = parent;\n                _x2 = property;\n                _x3 = receiver;\n                _again = true;\n                desc = parent = undefined;\n                continue _function;\n              }\n            } else if ('value' in desc) {\n              return desc.value;\n            } else {\n              var getter = desc.get;\n\n              if (getter === undefined) {\n                return undefined;\n              }\n\n              return getter.call(receiver);\n            }\n          }\n        };\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            'default': obj\n          };\n        }\n\n        function _defineProperty(obj, key, value) {\n          if (key in obj) {\n            Object.defineProperty(obj, key, {\n              value: value,\n              enumerable: true,\n              configurable: true,\n              writable: true\n            });\n          } else {\n            obj[key] = value;\n          }\n\n          return obj;\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError('Cannot call a class as a function');\n          }\n        }\n\n        function _inherits(subClass, superClass) {\n          if (typeof superClass !== 'function' && superClass !== null) {\n            throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);\n          }\n\n          subClass.prototype = Object.create(superClass && superClass.prototype, {\n            constructor: {\n              value: subClass,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n          if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n        }\n\n        var _react = typeof window !== \"undefined\" ? window['React'] : typeof global !== \"undefined\" ? global['React'] : null;\n\n        var _react2 = _interopRequireDefault(_react);\n\n        var _Select = require('./Select');\n\n        var _Select2 = _interopRequireDefault(_Select);\n\n        var _utilsStripDiacritics = require('./utils/stripDiacritics');\n\n        var _utilsStripDiacritics2 = _interopRequireDefault(_utilsStripDiacritics);\n\n        var propTypes = {\n          autoload: _react2['default'].PropTypes.bool.isRequired,\n          // automatically call the `loadOptions` prop on-mount; defaults to true\n          cache: _react2['default'].PropTypes.any,\n          // object to use to cache results; set to null/false to disable caching\n          children: _react2['default'].PropTypes.func.isRequired,\n          // Child function responsible for creating the inner Select component; (props: Object): PropTypes.element\n          ignoreAccents: _react2['default'].PropTypes.bool,\n          // strip diacritics when filtering; defaults to true\n          ignoreCase: _react2['default'].PropTypes.bool,\n          // perform case-insensitive filtering; defaults to true\n          loadingPlaceholder: _react2['default'].PropTypes.oneOfType([// replaces the placeholder while options are loading\n          _react2['default'].PropTypes.string, _react2['default'].PropTypes.node]),\n          loadOptions: _react2['default'].PropTypes.func.isRequired,\n          // callback to load options asynchronously; (inputValue: string, callback: Function): ?Promise\n          multi: _react2['default'].PropTypes.bool,\n          // multi-value input\n          options: _react.PropTypes.array.isRequired,\n          // array of options\n          placeholder: _react2['default'].PropTypes.oneOfType([// field placeholder, displayed when there's no value (shared with Select)\n          _react2['default'].PropTypes.string, _react2['default'].PropTypes.node]),\n          noResultsText: _react2['default'].PropTypes.oneOfType([// field noResultsText, displayed when no options come back from the server\n          _react2['default'].PropTypes.string, _react2['default'].PropTypes.node]),\n          onChange: _react2['default'].PropTypes.func,\n          // onChange handler: function (newValue) {}\n          searchPromptText: _react2['default'].PropTypes.oneOfType([// label to prompt for search input\n          _react2['default'].PropTypes.string, _react2['default'].PropTypes.node]),\n          onInputChange: _react2['default'].PropTypes.func,\n          // optional for keeping track of what is being typed\n          value: _react2['default'].PropTypes.any\n        }; // initial field value\n\n        var defaultCache = {};\n        var defaultProps = {\n          autoload: true,\n          cache: defaultCache,\n          children: defaultChildren,\n          ignoreAccents: true,\n          ignoreCase: true,\n          loadingPlaceholder: 'Loading...',\n          options: [],\n          searchPromptText: 'Type to search'\n        };\n\n        var Async = function (_Component) {\n          _inherits(Async, _Component);\n\n          function Async(props, context) {\n            _classCallCheck(this, Async);\n\n            _get(Object.getPrototypeOf(Async.prototype), 'constructor', this).call(this, props, context);\n\n            this._cache = props.cache === defaultCache ? {} : props.cache;\n            this.state = {\n              isLoading: false,\n              options: props.options\n            };\n            this._onInputChange = this._onInputChange.bind(this);\n          }\n\n          _createClass(Async, [{\n            key: 'componentDidMount',\n            value: function componentDidMount() {\n              var autoload = this.props.autoload;\n\n              if (autoload) {\n                this.loadOptions('');\n              }\n            }\n          }, {\n            key: 'componentWillUpdate',\n            value: function componentWillUpdate(nextProps, nextState) {\n              var _this = this;\n\n              var propertiesToSync = ['isLoading', 'options'];\n              propertiesToSync.forEach(function (prop) {\n                if (_this.props[prop] !== nextProps[prop]) {\n                  _this.setState(_defineProperty({}, prop, nextProps[prop]));\n                }\n              });\n            }\n          }, {\n            key: 'clearOptions',\n            value: function clearOptions() {\n              this.setState({\n                options: []\n              });\n            }\n          }, {\n            key: 'loadOptions',\n            value: function loadOptions(inputValue) {\n              var _this2 = this;\n\n              var loadOptions = this.props.loadOptions;\n              var cache = this._cache;\n\n              if (cache && cache.hasOwnProperty(inputValue)) {\n                this.setState({\n                  options: cache[inputValue]\n                });\n                return;\n              }\n\n              var callback = function callback(error, data) {\n                if (callback === _this2._callback) {\n                  _this2._callback = null;\n                  var options = data && data.options || [];\n\n                  if (cache) {\n                    cache[inputValue] = options;\n                  }\n\n                  _this2.setState({\n                    isLoading: false,\n                    options: options\n                  });\n                }\n              }; // Ignore all but the most recent request\n\n\n              this._callback = callback;\n              var promise = loadOptions(inputValue, callback);\n\n              if (promise) {\n                promise.then(function (data) {\n                  return callback(null, data);\n                }, function (error) {\n                  return callback(error);\n                });\n              }\n\n              if (this._callback && !this.state.isLoading) {\n                this.setState({\n                  isLoading: true\n                });\n              }\n\n              return inputValue;\n            }\n          }, {\n            key: '_onInputChange',\n            value: function _onInputChange(inputValue) {\n              var _props = this.props;\n              var ignoreAccents = _props.ignoreAccents;\n              var ignoreCase = _props.ignoreCase;\n              var onInputChange = _props.onInputChange;\n              var newInputValue = inputValue;\n\n              if (onInputChange) {\n                var value = onInputChange(newInputValue); // Note: != used deliberately here to catch undefined and null\n\n                if (value != null && typeof value !== 'object') {\n                  newInputValue = '' + value;\n                }\n              }\n\n              var transformedInputValue = newInputValue;\n\n              if (ignoreAccents) {\n                transformedInputValue = (0, _utilsStripDiacritics2['default'])(transformedInputValue);\n              }\n\n              if (ignoreCase) {\n                transformedInputValue = transformedInputValue.toLowerCase();\n              }\n\n              this.loadOptions(transformedInputValue); // Return new input value, but without applying toLowerCase() to avoid modifying the user's view case of the input while typing.\n\n              return newInputValue;\n            }\n          }, {\n            key: 'inputValue',\n            value: function inputValue() {\n              if (this.select) {\n                return this.select.state.inputValue;\n              }\n\n              return '';\n            }\n          }, {\n            key: 'noResultsText',\n            value: function noResultsText() {\n              var _props2 = this.props;\n              var loadingPlaceholder = _props2.loadingPlaceholder;\n              var noResultsText = _props2.noResultsText;\n              var searchPromptText = _props2.searchPromptText;\n              var isLoading = this.state.isLoading;\n              var inputValue = this.inputValue();\n\n              if (isLoading) {\n                return loadingPlaceholder;\n              }\n\n              if (inputValue && noResultsText) {\n                return noResultsText;\n              }\n\n              return searchPromptText;\n            }\n          }, {\n            key: 'focus',\n            value: function focus() {\n              this.select.focus();\n            }\n          }, {\n            key: 'render',\n            value: function render() {\n              var _this3 = this;\n\n              var _props3 = this.props;\n              var children = _props3.children;\n              var loadingPlaceholder = _props3.loadingPlaceholder;\n              var placeholder = _props3.placeholder;\n              var _state = this.state;\n              var isLoading = _state.isLoading;\n              var options = _state.options;\n              var props = {\n                noResultsText: this.noResultsText(),\n                placeholder: isLoading ? loadingPlaceholder : placeholder,\n                options: isLoading && loadingPlaceholder ? [] : options,\n                ref: function ref(_ref) {\n                  return _this3.select = _ref;\n                }\n              };\n              return children(_extends({}, this.props, props, {\n                isLoading: isLoading,\n                onInputChange: this._onInputChange\n              }));\n            }\n          }]);\n\n          return Async;\n        }(_react.Component);\n\n        exports['default'] = Async;\n        Async.propTypes = propTypes;\n        Async.defaultProps = defaultProps;\n\n        function defaultChildren(props) {\n          return _react2['default'].createElement(_Select2['default'], props);\n        }\n\n        ;\n        module.exports = exports['default'];\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"./Select\": 7,\n      \"./utils/stripDiacritics\": 13\n    }],\n    2: [function (require, module, exports) {\n      (function (global) {\n        'use strict';\n\n        var _extends = Object.assign || function (target) {\n          for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            for (var key in source) {\n              if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n              }\n            }\n          }\n\n          return target;\n        };\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            'default': obj\n          };\n        }\n\n        var _react = typeof window !== \"undefined\" ? window['React'] : typeof global !== \"undefined\" ? global['React'] : null;\n\n        var _react2 = _interopRequireDefault(_react);\n\n        var _Select = require('./Select');\n\n        var _Select2 = _interopRequireDefault(_Select);\n\n        function reduce(obj) {\n          var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n          return Object.keys(obj).reduce(function (props, key) {\n            var value = obj[key];\n            if (value !== undefined) props[key] = value;\n            return props;\n          }, props);\n        }\n\n        var AsyncCreatable = _react2['default'].createClass({\n          displayName: 'AsyncCreatableSelect',\n          focus: function focus() {\n            this.select.focus();\n          },\n          render: function render() {\n            var _this = this;\n\n            return _react2['default'].createElement(_Select2['default'].Async, this.props, function (asyncProps) {\n              return _react2['default'].createElement(_Select2['default'].Creatable, _this.props, function (creatableProps) {\n                return _react2['default'].createElement(_Select2['default'], _extends({}, reduce(asyncProps, reduce(creatableProps, {})), {\n                  onInputChange: function onInputChange(input) {\n                    creatableProps.onInputChange(input);\n                    return asyncProps.onInputChange(input);\n                  },\n                  ref: function ref(_ref7) {\n                    _this.select = _ref7;\n                    creatableProps.ref(_ref7);\n                    asyncProps.ref(_ref7);\n                  }\n                }));\n              });\n            });\n          }\n        });\n\n        module.exports = AsyncCreatable;\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"./Select\": 7\n    }],\n    3: [function (require, module, exports) {\n      (function (global) {\n        'use strict';\n\n        var _extends = Object.assign || function (target) {\n          for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            for (var key in source) {\n              if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n              }\n            }\n          }\n\n          return target;\n        };\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            'default': obj\n          };\n        }\n\n        function _objectWithoutProperties(obj, keys) {\n          var target = {};\n\n          for (var i in obj) {\n            if (keys.indexOf(i) >= 0) continue;\n            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n            target[i] = obj[i];\n          }\n\n          return target;\n        }\n\n        var _react = typeof window !== \"undefined\" ? window['React'] : typeof global !== \"undefined\" ? global['React'] : null;\n\n        var _react2 = _interopRequireDefault(_react);\n\n        var _Select = require('./Select');\n\n        var _Select2 = _interopRequireDefault(_Select);\n\n        var _utilsDefaultFilterOptions = require('./utils/defaultFilterOptions');\n\n        var _utilsDefaultFilterOptions2 = _interopRequireDefault(_utilsDefaultFilterOptions);\n\n        var _utilsDefaultMenuRenderer = require('./utils/defaultMenuRenderer');\n\n        var _utilsDefaultMenuRenderer2 = _interopRequireDefault(_utilsDefaultMenuRenderer);\n\n        var Creatable = _react2['default'].createClass({\n          displayName: 'CreatableSelect',\n          propTypes: {\n            // Child function responsible for creating the inner Select component\n            // This component can be used to compose HOCs (eg Creatable and Async)\n            // (props: Object): PropTypes.element\n            children: _react2['default'].PropTypes.func,\n            // See Select.propTypes.filterOptions\n            filterOptions: _react2['default'].PropTypes.any,\n            // Searches for any matching option within the set of options.\n            // This function prevents duplicate options from being created.\n            // ({ option: Object, options: Array, labelKey: string, valueKey: string }): boolean\n            isOptionUnique: _react2['default'].PropTypes.func,\n            // Determines if the current input text represents a valid option.\n            // ({ label: string }): boolean\n            isValidNewOption: _react2['default'].PropTypes.func,\n            // See Select.propTypes.menuRenderer\n            menuRenderer: _react2['default'].PropTypes.any,\n            // Factory to create new option.\n            // ({ label: string, labelKey: string, valueKey: string }): Object\n            newOptionCreator: _react2['default'].PropTypes.func,\n            // input change handler: function (inputValue) {}\n            onInputChange: _react2['default'].PropTypes.func,\n            // input keyDown handler: function (event) {}\n            onInputKeyDown: _react2['default'].PropTypes.func,\n            // new option click handler: function (option) {}\n            onNewOptionClick: _react2['default'].PropTypes.func,\n            // See Select.propTypes.options\n            options: _react2['default'].PropTypes.array,\n            // Creates prompt/placeholder option text.\n            // (filterText: string): string\n            promptTextCreator: _react2['default'].PropTypes.func,\n            // Decides if a keyDown event (eg its `keyCode`) should result in the creation of a new option.\n            shouldKeyDownEventCreateNewOption: _react2['default'].PropTypes.func\n          },\n          // Default prop methods\n          statics: {\n            isOptionUnique: isOptionUnique,\n            isValidNewOption: isValidNewOption,\n            newOptionCreator: newOptionCreator,\n            promptTextCreator: promptTextCreator,\n            shouldKeyDownEventCreateNewOption: shouldKeyDownEventCreateNewOption\n          },\n          getDefaultProps: function getDefaultProps() {\n            return {\n              filterOptions: _utilsDefaultFilterOptions2['default'],\n              isOptionUnique: isOptionUnique,\n              isValidNewOption: isValidNewOption,\n              menuRenderer: _utilsDefaultMenuRenderer2['default'],\n              newOptionCreator: newOptionCreator,\n              promptTextCreator: promptTextCreator,\n              shouldKeyDownEventCreateNewOption: shouldKeyDownEventCreateNewOption\n            };\n          },\n          createNewOption: function createNewOption() {\n            var _props = this.props;\n            var isValidNewOption = _props.isValidNewOption;\n            var newOptionCreator = _props.newOptionCreator;\n            var onNewOptionClick = _props.onNewOptionClick;\n            var _props$options = _props.options;\n            var options = _props$options === undefined ? [] : _props$options;\n            var shouldKeyDownEventCreateNewOption = _props.shouldKeyDownEventCreateNewOption;\n\n            if (isValidNewOption({\n              label: this.inputValue\n            })) {\n              var option = newOptionCreator({\n                label: this.inputValue,\n                labelKey: this.labelKey,\n                valueKey: this.valueKey\n              });\n\n              var _isOptionUnique = this.isOptionUnique({\n                option: option\n              }); // Don't add the same option twice.\n\n\n              if (_isOptionUnique) {\n                if (onNewOptionClick) {\n                  onNewOptionClick(option);\n                } else {\n                  options.unshift(option);\n                  this.select.selectValue(option);\n                }\n              }\n            }\n          },\n          filterOptions: function filterOptions() {\n            var _props2 = this.props;\n            var filterOptions = _props2.filterOptions;\n            var isValidNewOption = _props2.isValidNewOption;\n            var options = _props2.options;\n            var promptTextCreator = _props2.promptTextCreator; // TRICKY Check currently selected options as well.\n            // Don't display a create-prompt for a value that's selected.\n            // This covers async edge-cases where a newly-created Option isn't yet in the async-loaded array.\n\n            var excludeOptions = arguments[2] || [];\n            var filteredOptions = filterOptions.apply(undefined, arguments) || [];\n\n            if (isValidNewOption({\n              label: this.inputValue\n            })) {\n              var _newOptionCreator = this.props.newOptionCreator;\n\n              var option = _newOptionCreator({\n                label: this.inputValue,\n                labelKey: this.labelKey,\n                valueKey: this.valueKey\n              }); // TRICKY Compare to all options (not just filtered options) in case option has already been selected).\n              // For multi-selects, this would remove it from the filtered list.\n\n\n              var _isOptionUnique2 = this.isOptionUnique({\n                option: option,\n                options: excludeOptions.concat(filteredOptions)\n              });\n\n              if (_isOptionUnique2) {\n                var _prompt = promptTextCreator(this.inputValue);\n\n                this._createPlaceholderOption = _newOptionCreator({\n                  label: _prompt,\n                  labelKey: this.labelKey,\n                  valueKey: this.valueKey\n                });\n                filteredOptions.unshift(this._createPlaceholderOption);\n              }\n            }\n\n            return filteredOptions;\n          },\n          isOptionUnique: function isOptionUnique(_ref2) {\n            var option = _ref2.option;\n            var options = _ref2.options;\n            var isOptionUnique = this.props.isOptionUnique;\n            options = options || this.select.filterFlatOptions();\n            return isOptionUnique({\n              labelKey: this.labelKey,\n              option: option,\n              options: options,\n              valueKey: this.valueKey\n            });\n          },\n          menuRenderer: function menuRenderer(params) {\n            var menuRenderer = this.props.menuRenderer;\n            return menuRenderer(_extends({}, params, {\n              onSelect: this.onOptionSelect,\n              selectValue: this.onOptionSelect\n            }));\n          },\n          onInputChange: function onInputChange(input) {\n            var onInputChange = this.props.onInputChange;\n\n            if (onInputChange) {\n              onInputChange(input);\n            } // This value may be needed in between Select mounts (when this.select is null)\n\n\n            this.inputValue = input;\n          },\n          onInputKeyDown: function onInputKeyDown(event) {\n            var _props3 = this.props;\n            var shouldKeyDownEventCreateNewOption = _props3.shouldKeyDownEventCreateNewOption;\n            var onInputKeyDown = _props3.onInputKeyDown;\n            var focusedOption = this.select.getFocusedOption();\n\n            if (focusedOption && focusedOption === this._createPlaceholderOption && shouldKeyDownEventCreateNewOption({\n              keyCode: event.keyCode\n            })) {\n              this.createNewOption(); // Prevent decorated Select from doing anything additional with this keyDown event\n\n              event.preventDefault();\n            } else if (onInputKeyDown) {\n              onInputKeyDown(event);\n            }\n          },\n          onOptionSelect: function onOptionSelect(option, event) {\n            if (option === this._createPlaceholderOption) {\n              this.createNewOption();\n            } else {\n              this.select.selectValue(option);\n            }\n          },\n          focus: function focus() {\n            this.select.focus();\n          },\n          render: function render() {\n            var _this = this;\n\n            var _props4 = this.props;\n            var newOptionCreator = _props4.newOptionCreator;\n            var shouldKeyDownEventCreateNewOption = _props4.shouldKeyDownEventCreateNewOption;\n\n            var restProps = _objectWithoutProperties(_props4, ['newOptionCreator', 'shouldKeyDownEventCreateNewOption']);\n\n            var children = this.props.children; // We can't use destructuring default values to set the children,\n            // because it won't apply work if `children` is null. A falsy check is\n            // more reliable in real world use-cases.\n\n            if (!children) {\n              children = defaultChildren;\n            }\n\n            var props = _extends({}, restProps, {\n              allowCreate: true,\n              filterOptions: this.filterOptions,\n              menuRenderer: this.menuRenderer,\n              onInputChange: this.onInputChange,\n              onInputKeyDown: this.onInputKeyDown,\n              ref: function ref(_ref) {\n                _this.select = _ref; // These values may be needed in between Select mounts (when this.select is null)\n\n                if (_ref) {\n                  _this.labelKey = _ref.props.labelKey;\n                  _this.valueKey = _ref.props.valueKey;\n                }\n              }\n            });\n\n            return children(props);\n          }\n        });\n\n        function defaultChildren(props) {\n          return _react2['default'].createElement(_Select2['default'], props);\n        }\n\n        ;\n\n        function isOptionUnique(_ref3) {\n          var option = _ref3.option;\n          var options = _ref3.options;\n          var labelKey = _ref3.labelKey;\n          var valueKey = _ref3.valueKey;\n          return options.filter(function (existingOption) {\n            return existingOption[labelKey] === option[labelKey] || existingOption[valueKey] === option[valueKey];\n          }).length === 0;\n        }\n\n        ;\n\n        function isValidNewOption(_ref4) {\n          var label = _ref4.label;\n          return !!label;\n        }\n\n        ;\n\n        function newOptionCreator(_ref5) {\n          var label = _ref5.label;\n          var labelKey = _ref5.labelKey;\n          var valueKey = _ref5.valueKey;\n          var option = {};\n          option[valueKey] = label;\n          option[labelKey] = label;\n          option.className = 'Select-create-option-placeholder';\n          return option;\n        }\n\n        ;\n\n        function promptTextCreator(label) {\n          return 'Create option \"' + label + '\"';\n        }\n\n        function shouldKeyDownEventCreateNewOption(_ref6) {\n          var keyCode = _ref6.keyCode;\n\n          switch (keyCode) {\n            case 9: // TAB\n\n            case 13: // ENTER\n\n            case 188:\n              // COMMA\n              return true;\n          }\n\n          return false;\n        }\n\n        ;\n        module.exports = Creatable;\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"./Select\": 7,\n      \"./utils/defaultFilterOptions\": 11,\n      \"./utils/defaultMenuRenderer\": 12\n    }],\n    4: [function (require, module, exports) {\n      (function (global) {\n        'use strict';\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            'default': obj\n          };\n        }\n\n        var _react = typeof window !== \"undefined\" ? window['React'] : typeof global !== \"undefined\" ? global['React'] : null;\n\n        var _react2 = _interopRequireDefault(_react);\n\n        var Dropdown = _react2['default'].createClass({\n          displayName: 'Dropdown',\n          propTypes: {\n            children: _react2['default'].PropTypes.node\n          },\n          render: function render() {\n            // This component adds no markup\n            return this.props.children;\n          }\n        });\n\n        module.exports = Dropdown;\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    5: [function (require, module, exports) {\n      (function (global) {\n        'use strict';\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            'default': obj\n          };\n        }\n\n        var _react = typeof window !== \"undefined\" ? window['React'] : typeof global !== \"undefined\" ? global['React'] : null;\n\n        var _react2 = _interopRequireDefault(_react);\n\n        var _classnames = typeof window !== \"undefined\" ? window['classNames'] : typeof global !== \"undefined\" ? global['classNames'] : null;\n\n        var _classnames2 = _interopRequireDefault(_classnames);\n\n        var Option = _react2['default'].createClass({\n          displayName: 'Option',\n          propTypes: {\n            children: _react2['default'].PropTypes.node,\n            className: _react2['default'].PropTypes.string,\n            // className (based on mouse position)\n            instancePrefix: _react2['default'].PropTypes.string.isRequired,\n            // unique prefix for the ids (used for aria)\n            isDisabled: _react2['default'].PropTypes.bool,\n            // the option is disabled\n            isFocused: _react2['default'].PropTypes.bool,\n            // the option is focused\n            isSelected: _react2['default'].PropTypes.bool,\n            // the option is selected\n            onFocus: _react2['default'].PropTypes.func,\n            // method to handle mouseEnter on option element\n            onSelect: _react2['default'].PropTypes.func,\n            // method to handle click on option element\n            onUnfocus: _react2['default'].PropTypes.func,\n            // method to handle mouseLeave on option element\n            option: _react2['default'].PropTypes.object.isRequired,\n            // object that is base for that option\n            optionIndex: _react2['default'].PropTypes.number\n          },\n          // index of the option, used to generate unique ids for aria\n          blockEvent: function blockEvent(event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            if (event.target.tagName !== 'A' || !('href' in event.target)) {\n              return;\n            }\n\n            if (event.target.target) {\n              window.open(event.target.href, event.target.target);\n            } else {\n              window.location.href = event.target.href;\n            }\n          },\n          handleMouseDown: function handleMouseDown(event) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.props.onSelect(this.props.option, event);\n          },\n          handleMouseEnter: function handleMouseEnter(event) {\n            this.onFocus(event);\n          },\n          handleMouseMove: function handleMouseMove(event) {\n            this.onFocus(event);\n          },\n          handleTouchEnd: function handleTouchEnd(event) {\n            // Check if the view is being dragged, In this case\n            // we don't want to fire the click event (because the user only wants to scroll)\n            if (this.dragging) return;\n            this.handleMouseDown(event);\n          },\n          handleTouchMove: function handleTouchMove(event) {\n            // Set a flag that the view is being dragged\n            this.dragging = true;\n          },\n          handleTouchStart: function handleTouchStart(event) {\n            // Set a flag that the view is not being dragged\n            this.dragging = false;\n          },\n          onFocus: function onFocus(event) {\n            if (!this.props.isFocused) {\n              this.props.onFocus(this.props.option, event);\n            }\n          },\n          render: function render() {\n            var _props = this.props;\n            var option = _props.option;\n            var instancePrefix = _props.instancePrefix;\n            var optionIndex = _props.optionIndex;\n            var className = (0, _classnames2['default'])(this.props.className, option.className);\n            return option.disabled ? _react2['default'].createElement('div', {\n              className: className,\n              onMouseDown: this.blockEvent,\n              onClick: this.blockEvent\n            }, this.props.children) : _react2['default'].createElement('div', {\n              className: className,\n              style: option.style,\n              role: 'option',\n              onMouseDown: this.handleMouseDown,\n              onMouseEnter: this.handleMouseEnter,\n              onMouseMove: this.handleMouseMove,\n              onTouchStart: this.handleTouchStart,\n              onTouchMove: this.handleTouchMove,\n              onTouchEnd: this.handleTouchEnd,\n              id: instancePrefix + '-option-' + optionIndex,\n              title: option.title\n            }, this.props.children);\n          }\n        });\n\n        module.exports = Option;\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    6: [function (require, module, exports) {\n      (function (global) {\n        'use strict';\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            'default': obj\n          };\n        }\n\n        var _react = typeof window !== \"undefined\" ? window['React'] : typeof global !== \"undefined\" ? global['React'] : null;\n\n        var _react2 = _interopRequireDefault(_react);\n\n        var _classnames = typeof window !== \"undefined\" ? window['classNames'] : typeof global !== \"undefined\" ? global['classNames'] : null;\n\n        var _classnames2 = _interopRequireDefault(_classnames);\n\n        var OptionGroup = _react2['default'].createClass({\n          displayName: 'OptionGroup',\n          propTypes: {\n            children: _react2['default'].PropTypes.any,\n            className: _react2['default'].PropTypes.string,\n            // className (based on mouse position)\n            label: _react2['default'].PropTypes.node,\n            // the heading to show above the child options\n            option: _react2['default'].PropTypes.object.isRequired\n          },\n          // object that is base for that option group\n          blockEvent: function blockEvent(event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            if (event.target.tagName !== 'A' || !('href' in event.target)) {\n              return;\n            }\n\n            if (event.target.target) {\n              window.open(event.target.href, event.target.target);\n            } else {\n              window.location.href = event.target.href;\n            }\n          },\n          handleMouseDown: function handleMouseDown(event) {\n            event.preventDefault();\n            event.stopPropagation();\n          },\n          handleTouchEnd: function handleTouchEnd(event) {\n            // Check if the view is being dragged, In this case\n            // we don't want to fire the click event (because the user only wants to scroll)\n            if (this.dragging) return;\n            this.handleMouseDown(event);\n          },\n          handleTouchMove: function handleTouchMove(event) {\n            // Set a flag that the view is being dragged\n            this.dragging = true;\n          },\n          handleTouchStart: function handleTouchStart(event) {\n            // Set a flag that the view is not being dragged\n            this.dragging = false;\n          },\n          render: function render() {\n            var option = this.props.option;\n            var className = (0, _classnames2['default'])(this.props.className, option.className);\n            return option.disabled ? _react2['default'].createElement('div', {\n              className: className,\n              onMouseDown: this.blockEvent,\n              onClick: this.blockEvent\n            }, this.props.children) : _react2['default'].createElement('div', {\n              className: className,\n              style: option.style,\n              onMouseDown: this.handleMouseDown,\n              onMouseEnter: this.handleMouseEnter,\n              onMouseMove: this.handleMouseMove,\n              onTouchStart: this.handleTouchStart,\n              onTouchMove: this.handleTouchMove,\n              onTouchEnd: this.handleTouchEnd,\n              title: option.title\n            }, _react2['default'].createElement('div', {\n              className: 'Select-option-group-label'\n            }, this.props.label), this.props.children);\n          }\n        });\n\n        module.exports = OptionGroup;\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    7: [function (require, module, exports) {\n      (function (global) {\n        /*!\n          Copyright (c) 2016 Jed Watson.\n          Licensed under the MIT License (MIT), see\n          http://jedwatson.github.io/react-select\n        */\n        'use strict';\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n\n        var _extends = Object.assign || function (target) {\n          for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            for (var key in source) {\n              if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n              }\n            }\n          }\n\n          return target;\n        };\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            'default': obj\n          };\n        }\n\n        function _objectWithoutProperties(obj, keys) {\n          var target = {};\n\n          for (var i in obj) {\n            if (keys.indexOf(i) >= 0) continue;\n            if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n            target[i] = obj[i];\n          }\n\n          return target;\n        }\n\n        function _defineProperty(obj, key, value) {\n          if (key in obj) {\n            Object.defineProperty(obj, key, {\n              value: value,\n              enumerable: true,\n              configurable: true,\n              writable: true\n            });\n          } else {\n            obj[key] = value;\n          }\n\n          return obj;\n        }\n\n        var _react = typeof window !== \"undefined\" ? window['React'] : typeof global !== \"undefined\" ? global['React'] : null;\n\n        var _react2 = _interopRequireDefault(_react);\n\n        var _reactDom = typeof window !== \"undefined\" ? window['ReactDOM'] : typeof global !== \"undefined\" ? global['ReactDOM'] : null;\n\n        var _reactDom2 = _interopRequireDefault(_reactDom);\n\n        var _reactInputAutosize = typeof window !== \"undefined\" ? window['AutosizeInput'] : typeof global !== \"undefined\" ? global['AutosizeInput'] : null;\n\n        var _reactInputAutosize2 = _interopRequireDefault(_reactInputAutosize);\n\n        var _classnames = typeof window !== \"undefined\" ? window['classNames'] : typeof global !== \"undefined\" ? global['classNames'] : null;\n\n        var _classnames2 = _interopRequireDefault(_classnames);\n\n        var _utilsDefaultArrowRenderer = require('./utils/defaultArrowRenderer');\n\n        var _utilsDefaultArrowRenderer2 = _interopRequireDefault(_utilsDefaultArrowRenderer);\n\n        var _utilsDefaultFilterOptions = require('./utils/defaultFilterOptions');\n\n        var _utilsDefaultFilterOptions2 = _interopRequireDefault(_utilsDefaultFilterOptions);\n\n        var _utilsDefaultMenuRenderer = require('./utils/defaultMenuRenderer');\n\n        var _utilsDefaultMenuRenderer2 = _interopRequireDefault(_utilsDefaultMenuRenderer);\n\n        var _utilsDefaultClearRenderer = require('./utils/defaultClearRenderer');\n\n        var _utilsDefaultClearRenderer2 = _interopRequireDefault(_utilsDefaultClearRenderer);\n\n        var _utilsStripDiacritics = require('./utils/stripDiacritics');\n\n        var _utilsStripDiacritics2 = _interopRequireDefault(_utilsStripDiacritics);\n\n        var _Async = require('./Async');\n\n        var _Async2 = _interopRequireDefault(_Async);\n\n        var _AsyncCreatable = require('./AsyncCreatable');\n\n        var _AsyncCreatable2 = _interopRequireDefault(_AsyncCreatable);\n\n        var _Creatable = require('./Creatable');\n\n        var _Creatable2 = _interopRequireDefault(_Creatable);\n\n        var _Dropdown = require('./Dropdown');\n\n        var _Dropdown2 = _interopRequireDefault(_Dropdown);\n\n        var _Option = require('./Option');\n\n        var _Option2 = _interopRequireDefault(_Option);\n\n        var _OptionGroup = require('./OptionGroup');\n\n        var _OptionGroup2 = _interopRequireDefault(_OptionGroup);\n\n        var _Value = require('./Value');\n\n        var _Value2 = _interopRequireDefault(_Value);\n\n        function clone(obj) {\n          var copy = {};\n\n          for (var attr in obj) {\n            if (obj.hasOwnProperty(attr)) {\n              copy[attr] = obj[attr];\n            }\n\n            ;\n          }\n\n          return copy;\n        }\n\n        function isGroup(option) {\n          return option && Array.isArray(option.options);\n        }\n\n        function stringifyValue(value) {\n          var valueType = typeof value;\n\n          if (valueType === 'string') {\n            return value;\n          } else if (valueType === 'object') {\n            return JSON.stringify(value);\n          } else if (valueType === 'number' || valueType === 'boolean') {\n            return String(value);\n          } else {\n            return '';\n          }\n        }\n\n        var stringOrNode = _react2['default'].PropTypes.oneOfType([_react2['default'].PropTypes.string, _react2['default'].PropTypes.node]);\n\n        var instanceId = 1;\n        var invalidOptions = {};\n\n        var Select = _react2['default'].createClass({\n          displayName: 'Select',\n          propTypes: {\n            addLabelText: _react2['default'].PropTypes.string,\n            // placeholder displayed when you want to add a label on a multi-value input\n            'aria-describedby': _react2['default'].PropTypes.string,\n            // HTML ID(s) of element(s) that should be used to describe this input (for assistive tech)\n            'aria-label': _react2['default'].PropTypes.string,\n            // Aria label (for assistive tech)\n            'aria-labelledby': _react2['default'].PropTypes.string,\n            // HTML ID of an element that should be used as the label (for assistive tech)\n            arrowRenderer: _react2['default'].PropTypes.func,\n            // Create drop-down caret element\n            autoBlur: _react2['default'].PropTypes.bool,\n            // automatically blur the component when an option is selected\n            autofocus: _react2['default'].PropTypes.bool,\n            // autofocus the component on mount\n            autosize: _react2['default'].PropTypes.bool,\n            // whether to enable autosizing or not\n            backspaceRemoves: _react2['default'].PropTypes.bool,\n            // whether backspace removes an item if there is no text input\n            backspaceToRemoveMessage: _react2['default'].PropTypes.string,\n            // Message to use for screenreaders to press backspace to remove the current item - {label} is replaced with the item label\n            className: _react2['default'].PropTypes.string,\n            // className for the outer element\n            clearAllText: stringOrNode,\n            // title for the \"clear\" control when multi: true\n            clearRenderer: _react2['default'].PropTypes.func,\n            // create clearable x element\n            clearValueText: stringOrNode,\n            // title for the \"clear\" control\n            clearable: _react2['default'].PropTypes.bool,\n            // should it be possible to reset value\n            deleteRemoves: _react2['default'].PropTypes.bool,\n            // whether backspace removes an item if there is no text input\n            delimiter: _react2['default'].PropTypes.string,\n            // delimiter to use to join multiple values for the hidden field value\n            disabled: _react2['default'].PropTypes.bool,\n            // whether the Select is disabled or not\n            dropdownComponent: _react2['default'].PropTypes.func,\n            // dropdown component to render the menu in\n            escapeClearsValue: _react2['default'].PropTypes.bool,\n            // whether escape clears the value when the menu is closed\n            filterOption: _react2['default'].PropTypes.func,\n            // method to filter a single option (option, filterString)\n            filterOptions: _react2['default'].PropTypes.any,\n            // boolean to enable default filtering or function to filter the options array ([options], filterString, [values])\n            ignoreAccents: _react2['default'].PropTypes.bool,\n            // whether to strip diacritics when filtering\n            ignoreCase: _react2['default'].PropTypes.bool,\n            // whether to perform case-insensitive filtering\n            inputProps: _react2['default'].PropTypes.object,\n            // custom attributes for the Input\n            inputRenderer: _react2['default'].PropTypes.func,\n            // returns a custom input component\n            instanceId: _react2['default'].PropTypes.string,\n            // set the components instanceId\n            isLoading: _react2['default'].PropTypes.bool,\n            // whether the Select is loading externally or not (such as options being loaded)\n            isOpen: _react2['default'].PropTypes.bool,\n            // whether the Select dropdown menu is open or not\n            joinValues: _react2['default'].PropTypes.bool,\n            // joins multiple values into a single form field with the delimiter (legacy mode)\n            labelKey: _react2['default'].PropTypes.string,\n            // path of the label value in option objects\n            matchPos: _react2['default'].PropTypes.string,\n            // (any|start) match the start or entire string when filtering\n            matchProp: _react2['default'].PropTypes.string,\n            // (any|label|value) which option property to filter on\n            menuBuffer: _react2['default'].PropTypes.number,\n            // optional buffer (in px) between the bottom of the viewport and the bottom of the menu\n            menuContainerStyle: _react2['default'].PropTypes.object,\n            // optional style to apply to the menu container\n            menuRenderer: _react2['default'].PropTypes.func,\n            // renders a custom menu with options\n            menuStyle: _react2['default'].PropTypes.object,\n            // optional style to apply to the menu\n            multi: _react2['default'].PropTypes.bool,\n            // multi-value input\n            name: _react2['default'].PropTypes.string,\n            // generates a hidden <input /> tag with this field name for html forms\n            noResultsText: stringOrNode,\n            // placeholder displayed when there are no matching search results\n            onBlur: _react2['default'].PropTypes.func,\n            // onBlur handler: function (event) {}\n            onBlurResetsInput: _react2['default'].PropTypes.bool,\n            // whether input is cleared on blur\n            onChange: _react2['default'].PropTypes.func,\n            // onChange handler: function (newValue) {}\n            onClose: _react2['default'].PropTypes.func,\n            // fires when the menu is closed\n            onCloseResetsInput: _react2['default'].PropTypes.bool,\n            // whether input is cleared when menu is closed through the arrow\n            onFocus: _react2['default'].PropTypes.func,\n            // onFocus handler: function (event) {}\n            onInputChange: _react2['default'].PropTypes.func,\n            // onInputChange handler: function (inputValue) {}\n            onInputKeyDown: _react2['default'].PropTypes.func,\n            // input keyDown handler: function (event) {}\n            onMenuScrollToBottom: _react2['default'].PropTypes.func,\n            // fires when the menu is scrolled to the bottom; can be used to paginate options\n            onOpen: _react2['default'].PropTypes.func,\n            // fires when the menu is opened\n            onValueClick: _react2['default'].PropTypes.func,\n            // onClick handler for value labels: function (value, event) {}\n            openAfterFocus: _react2['default'].PropTypes.bool,\n            // boolean to enable opening dropdown when focused\n            openOnFocus: _react2['default'].PropTypes.bool,\n            // always open options menu on focus\n            optionClassName: _react2['default'].PropTypes.string,\n            // additional class(es) to apply to the <Option /> elements\n            optionComponent: _react2['default'].PropTypes.func,\n            // option component to render in dropdown\n            optionGroupComponent: _react2['default'].PropTypes.func,\n            // option group component to render in dropdown\n            optionRenderer: _react2['default'].PropTypes.func,\n            // optionRenderer: function (option) {}\n            options: _react2['default'].PropTypes.array,\n            // array of options\n            pageSize: _react2['default'].PropTypes.number,\n            // number of entries to page when using page up/down keys\n            placeholder: stringOrNode,\n            // field placeholder, displayed when there's no value\n            renderInvalidValues: _react2['default'].PropTypes.bool,\n            // boolean to enable rendering values that do not match any options\n            required: _react2['default'].PropTypes.bool,\n            // applies HTML5 required attribute when needed\n            resetValue: _react2['default'].PropTypes.any,\n            // value to use when you clear the control\n            scrollMenuIntoView: _react2['default'].PropTypes.bool,\n            // boolean to enable the viewport to shift so that the full menu fully visible when engaged\n            searchable: _react2['default'].PropTypes.bool,\n            // whether to enable searching feature or not\n            simpleValue: _react2['default'].PropTypes.bool,\n            // pass the value to onChange as a simple value (legacy pre 1.0 mode), defaults to false\n            style: _react2['default'].PropTypes.object,\n            // optional style to apply to the control\n            tabIndex: _react2['default'].PropTypes.string,\n            // optional tab index of the control\n            tabSelectsValue: _react2['default'].PropTypes.bool,\n            // whether to treat tabbing out while focused to be value selection\n            value: _react2['default'].PropTypes.any,\n            // initial field value\n            valueComponent: _react2['default'].PropTypes.func,\n            // value component to render\n            valueKey: _react2['default'].PropTypes.string,\n            // path of the label value in option objects\n            valueRenderer: _react2['default'].PropTypes.func,\n            // valueRenderer: function (option) {}\n            wrapperStyle: _react2['default'].PropTypes.object\n          },\n          // optional style to apply to the component wrapper\n          statics: {\n            Async: _Async2['default'],\n            AsyncCreatable: _AsyncCreatable2['default'],\n            Creatable: _Creatable2['default']\n          },\n          getDefaultProps: function getDefaultProps() {\n            return {\n              addLabelText: 'Add \"{label}\"?',\n              arrowRenderer: _utilsDefaultArrowRenderer2['default'],\n              autosize: true,\n              backspaceRemoves: true,\n              backspaceToRemoveMessage: 'Press backspace to remove {label}',\n              clearable: true,\n              clearAllText: 'Clear all',\n              clearRenderer: _utilsDefaultClearRenderer2['default'],\n              clearValueText: 'Clear value',\n              deleteRemoves: true,\n              delimiter: ',',\n              disabled: false,\n              dropdownComponent: _Dropdown2['default'],\n              escapeClearsValue: true,\n              filterOptions: _utilsDefaultFilterOptions2['default'],\n              ignoreAccents: true,\n              ignoreCase: true,\n              inputProps: {},\n              isLoading: false,\n              joinValues: false,\n              labelKey: 'label',\n              matchPos: 'any',\n              matchProp: 'any',\n              menuBuffer: 0,\n              menuRenderer: _utilsDefaultMenuRenderer2['default'],\n              multi: false,\n              noResultsText: 'No results found',\n              onBlurResetsInput: true,\n              onCloseResetsInput: true,\n              openAfterFocus: false,\n              optionComponent: _Option2['default'],\n              optionGroupComponent: _OptionGroup2['default'],\n              pageSize: 5,\n              placeholder: 'Select...',\n              renderInvalidValues: false,\n              required: false,\n              scrollMenuIntoView: true,\n              searchable: true,\n              simpleValue: false,\n              tabSelectsValue: true,\n              valueComponent: _Value2['default'],\n              valueKey: 'value'\n            };\n          },\n          getInitialState: function getInitialState() {\n            return {\n              inputValue: '',\n              isFocused: false,\n              isOpen: this.props.isOpen != null ? this.props.isOpen : false,\n              isPseudoFocused: false,\n              required: false\n            };\n          },\n          componentWillMount: function componentWillMount() {\n            this._flatOptions = this.flattenOptions(this.props.options);\n            this._instancePrefix = 'react-select-' + (this.props.instanceId || ++instanceId) + '-';\n            var valueArray = this.getValueArray(this.props.value);\n\n            if (this.props.required) {\n              this.setState({\n                required: this.handleRequired(valueArray[0], this.props.multi)\n              });\n            }\n          },\n          componentDidMount: function componentDidMount() {\n            if (this.props.autofocus) {\n              this.focus();\n            }\n          },\n          componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n            if (nextProps.options !== this.props.options) {\n              this._flatOptions = this.flattenOptions(nextProps.options);\n            }\n\n            var valueArray = this.getValueArray(nextProps.value, nextProps);\n\n            if (!nextProps.isOpen && this.props.isOpen) {\n              this.closeMenu();\n            }\n\n            if (nextProps.required) {\n              this.setState({\n                required: this.handleRequired(valueArray[0], nextProps.multi)\n              });\n            }\n          },\n          componentWillUpdate: function componentWillUpdate(nextProps, nextState) {\n            if (nextState.isOpen !== this.state.isOpen) {\n              this.toggleTouchOutsideEvent(nextState.isOpen);\n              var handler = nextState.isOpen ? nextProps.onOpen : nextProps.onClose;\n              handler && handler();\n            }\n          },\n          componentDidUpdate: function componentDidUpdate(prevProps, prevState) {\n            // focus to the selected option\n            if (this.menu && this.focused && this.state.isOpen && !this.hasScrolledToOption) {\n              var focusedOptionNode = _reactDom2['default'].findDOMNode(this.focused);\n\n              var focusedOptionPreviousSibling = focusedOptionNode.previousSibling;\n              var focusedOptionParent = focusedOptionNode.parentElement;\n\n              var menuNode = _reactDom2['default'].findDOMNode(this.menu);\n\n              if (focusedOptionPreviousSibling) {\n                menuNode.scrollTop = focusedOptionPreviousSibling.offsetTop;\n              } else if (focusedOptionParent && focusedOptionParent === 'Select-menu') {\n                menuNode.scrollTop = focusedOptionParent.offsetTop;\n              } else {\n                menuNode.scrollTop = focusedOptionNode.offsetTop;\n              }\n\n              var paddingTop = parseInt(window.getComputedStyle(menuNode, null).paddingTop, 10);\n              if (menuNode.scrollTop <= paddingTop) menuNode.scrollTop = 0;\n              this.hasScrolledToOption = true;\n            } else if (!this.state.isOpen) {\n              this.hasScrolledToOption = false;\n            }\n\n            if (this._scrollToFocusedOptionOnUpdate && this.focused && this.menu) {\n              this._scrollToFocusedOptionOnUpdate = false;\n\n              var focusedDOM = _reactDom2['default'].findDOMNode(this.focused);\n\n              var menuDOM = _reactDom2['default'].findDOMNode(this.menu);\n\n              var focusedRect = focusedDOM.getBoundingClientRect();\n              var menuRect = menuDOM.getBoundingClientRect();\n\n              if (focusedRect.bottom > menuRect.bottom || focusedRect.top < menuRect.top) {\n                menuDOM.scrollTop = focusedDOM.offsetTop + focusedDOM.clientHeight - menuDOM.offsetHeight;\n              }\n            }\n\n            if (this.props.scrollMenuIntoView && this.menuContainer) {\n              var menuContainerRect = this.menuContainer.getBoundingClientRect();\n\n              if (window.innerHeight < menuContainerRect.bottom + this.props.menuBuffer) {\n                window.scrollBy(0, menuContainerRect.bottom + this.props.menuBuffer - window.innerHeight);\n              }\n            }\n\n            if (prevProps.disabled !== this.props.disabled) {\n              this.setState({\n                isFocused: false\n              }); // eslint-disable-line react/no-did-update-set-state\n\n              this.closeMenu();\n            }\n          },\n          componentWillUnmount: function componentWillUnmount() {\n            if (!document.removeEventListener && document.detachEvent) {\n              document.detachEvent('ontouchstart', this.handleTouchOutside);\n            } else {\n              document.removeEventListener('touchstart', this.handleTouchOutside);\n            }\n          },\n          toggleTouchOutsideEvent: function toggleTouchOutsideEvent(enabled) {\n            if (enabled) {\n              if (!document.addEventListener && document.attachEvent) {\n                document.attachEvent('ontouchstart', this.handleTouchOutside);\n              } else {\n                document.addEventListener('touchstart', this.handleTouchOutside);\n              }\n            } else {\n              if (!document.removeEventListener && document.detachEvent) {\n                document.detachEvent('ontouchstart', this.handleTouchOutside);\n              } else {\n                document.removeEventListener('touchstart', this.handleTouchOutside);\n              }\n            }\n          },\n          handleTouchOutside: function handleTouchOutside(event) {\n            // handle touch outside on ios to dismiss menu\n            if (this.wrapper && !this.wrapper.contains(event.target) && this.menuContainer && !this.menuContainer.contains(event.target)) {\n              this.closeMenu();\n            }\n          },\n          focus: function focus() {\n            if (!this.input) return;\n            this.input.focus();\n\n            if (this.props.openAfterFocus) {\n              this.setState({\n                isOpen: true\n              });\n            }\n          },\n          blurInput: function blurInput() {\n            if (!this.input) return;\n            this.input.blur();\n          },\n          handleTouchMove: function handleTouchMove(event) {\n            // Set a flag that the view is being dragged\n            this.dragging = true;\n          },\n          handleTouchStart: function handleTouchStart(event) {\n            // Set a flag that the view is not being dragged\n            this.dragging = false;\n          },\n          handleTouchEnd: function handleTouchEnd(event) {\n            // Check if the view is being dragged, In this case\n            // we don't want to fire the click event (because the user only wants to scroll)\n            if (this.dragging) return; // Fire the mouse events\n\n            this.handleMouseDown(event);\n          },\n          handleTouchEndClearValue: function handleTouchEndClearValue(event) {\n            // Check if the view is being dragged, In this case\n            // we don't want to fire the click event (because the user only wants to scroll)\n            if (this.dragging) return; // Clear the value\n\n            this.clearValue(event);\n          },\n          handleMouseDown: function handleMouseDown(event) {\n            // if the event was triggered by a mousedown and not the primary\n            // button, or if the component is disabled, ignore it.\n            if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {\n              return;\n            }\n\n            if (event.target.tagName === 'INPUT') {\n              return;\n            } // prevent default event handlers\n\n\n            event.stopPropagation();\n            event.preventDefault(); // for the non-searchable select, toggle the menu\n\n            if (!this.props.searchable) {\n              this.focus();\n              return this.setState({\n                isOpen: !this.state.isOpen\n              });\n            }\n\n            if (this.state.isFocused) {\n              // On iOS, we can get into a state where we think the input is focused but it isn't really,\n              // since iOS ignores programmatic calls to input.focus() that weren't triggered by a click event.\n              // Call focus() again here to be safe.\n              this.focus();\n              var input = this.input;\n\n              if (typeof input.getInput === 'function') {\n                // Get the actual DOM input if the ref is an <AutosizeInput /> component\n                input = input.getInput();\n              } // clears the value so that the cursor will be at the end of input when the component re-renders\n\n\n              input.value = ''; // if the input is focused, ensure the menu is open\n\n              this.setState({\n                isOpen: true,\n                isPseudoFocused: false\n              });\n            } else {\n              // otherwise, focus the input and open the menu\n              this._openAfterFocus = this.props.openOnFocus;\n              this.focus();\n            }\n          },\n          handleMouseDownOnArrow: function handleMouseDownOnArrow(event) {\n            // if the event was triggered by a mousedown and not the primary\n            // button, or if the component is disabled, ignore it.\n            if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {\n              return;\n            } // If the menu isn't open, let the event bubble to the main handleMouseDown\n\n\n            if (!this.state.isOpen) {\n              return;\n            } // prevent default event handlers\n\n\n            event.stopPropagation();\n            event.preventDefault(); // close the menu\n\n            this.closeMenu();\n          },\n          handleMouseDownOnMenu: function handleMouseDownOnMenu(event) {\n            // if the event was triggered by a mousedown and not the primary\n            // button, or if the component is disabled, ignore it.\n            if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {\n              return;\n            }\n\n            event.stopPropagation();\n            event.preventDefault();\n            this._openAfterFocus = true;\n            this.focus();\n          },\n          closeMenu: function closeMenu() {\n            var _this = this;\n\n            if (this.props.onCloseResetsInput) {\n              this.setState({\n                isOpen: false,\n                isPseudoFocused: this.state.isFocused && !this.props.multi,\n                inputValue: ''\n              }, function () {\n                if (_this.props.onInputChange) _this.props.onInputChange('');\n              });\n            } else {\n              this.setState({\n                isOpen: false,\n                isPseudoFocused: this.state.isFocused && !this.props.multi,\n                inputValue: this.state.inputValue\n              });\n            }\n\n            this.hasScrolledToOption = false;\n          },\n          handleInputFocus: function handleInputFocus(event) {\n            if (this.props.disabled) return;\n            var isOpen = this.state.isOpen || this._openAfterFocus || this.props.openOnFocus;\n\n            if (this.props.onFocus) {\n              this.props.onFocus(event);\n            }\n\n            this.setState({\n              isFocused: true,\n              isOpen: isOpen\n            });\n            this._openAfterFocus = false;\n          },\n          handleInputBlur: function handleInputBlur(event) {\n            // The check for menu.contains(activeElement) is necessary to prevent IE11's scrollbar from closing the menu in certain contexts.\n            if (this.menu && (this.menu === document.activeElement || this.menu.contains(document.activeElement))) {\n              this.focus();\n              return;\n            }\n\n            if (this.props.onBlur) {\n              this.props.onBlur(event);\n            }\n\n            var onBlurredState = {\n              isFocused: false,\n              isOpen: false,\n              isPseudoFocused: false\n            };\n\n            if (this.props.onBlurResetsInput) {\n              onBlurredState.inputValue = '';\n            }\n\n            this.setState(onBlurredState);\n          },\n          handleInputChange: function handleInputChange(event) {\n            var newInputValue = event.target.value;\n\n            if (this.state.inputValue !== event.target.value && this.props.onInputChange) {\n              var nextState = this.props.onInputChange(newInputValue); // Note: != used deliberately here to catch undefined and null\n\n              if (nextState != null && typeof nextState !== 'object') {\n                newInputValue = '' + nextState;\n              }\n            }\n\n            this.setState({\n              isOpen: true,\n              isPseudoFocused: false,\n              inputValue: newInputValue\n            });\n          },\n          handleKeyDown: function handleKeyDown(event) {\n            if (this.props.disabled) return;\n\n            if (typeof this.props.onInputKeyDown === 'function') {\n              this.props.onInputKeyDown(event);\n\n              if (event.defaultPrevented) {\n                return;\n              }\n            }\n\n            switch (event.keyCode) {\n              case 8:\n                // backspace\n                if (!this.state.inputValue && this.props.backspaceRemoves) {\n                  event.preventDefault();\n                  this.popValue();\n                }\n\n                return;\n\n              case 9:\n                // tab\n                if (event.shiftKey || !this.state.isOpen || !this.props.tabSelectsValue) {\n                  return;\n                }\n\n                this.selectFocusedOption();\n                return;\n\n              case 13:\n                // enter\n                if (!this.state.isOpen) {\n                  this.setState({\n                    isOpen: true\n                  });\n                  return;\n                }\n\n                ;\n                event.stopPropagation();\n                this.selectFocusedOption();\n                break;\n\n              case 27:\n                // escape\n                if (this.state.isOpen) {\n                  this.closeMenu();\n                  event.stopPropagation();\n                } else if (this.props.clearable && this.props.escapeClearsValue) {\n                  this.clearValue(event);\n                  event.stopPropagation();\n                }\n\n                break;\n\n              case 38:\n                // up\n                this.focusPreviousOption();\n                break;\n\n              case 40:\n                // down\n                this.focusNextOption();\n                break;\n\n              case 33:\n                // page up\n                this.focusPageUpOption();\n                break;\n\n              case 34:\n                // page down\n                this.focusPageDownOption();\n                break;\n\n              case 35:\n                // end key\n                if (event.shiftKey) {\n                  return;\n                }\n\n                this.focusEndOption();\n                break;\n\n              case 36:\n                // home key\n                if (event.shiftKey) {\n                  return;\n                }\n\n                this.focusStartOption();\n                break;\n\n              case 46:\n                // backspace\n                if (!this.state.inputValue && this.props.deleteRemoves) {\n                  event.preventDefault();\n                  this.popValue();\n                }\n\n                return;\n\n              default:\n                return;\n            }\n\n            event.preventDefault();\n          },\n          handleValueClick: function handleValueClick(option, event) {\n            if (!this.props.onValueClick) return;\n            this.props.onValueClick(option, event);\n          },\n          handleMenuScroll: function handleMenuScroll(event) {\n            if (!this.props.onMenuScrollToBottom) return;\n            var target = event.target;\n\n            if (target.scrollHeight > target.offsetHeight && !(target.scrollHeight - target.offsetHeight - target.scrollTop)) {\n              this.props.onMenuScrollToBottom();\n            }\n          },\n          handleRequired: function handleRequired(value, multi) {\n            if (!value) return true;\n            return multi ? value.length === 0 : Object.keys(value).length === 0;\n          },\n          getOptionLabel: function getOptionLabel(op) {\n            return op[this.props.labelKey];\n          },\n\n          /**\n           * Turns a value into an array from the given options\n           * @param\t{String|Number|Array}\tvalue\t\t- the value of the select input\n           * @param\t{Object}\t\tnextProps\t- optionally specify the nextProps so the returned array uses the latest configuration\n           * @returns\t{Array}\tthe value of the select represented in an array\n           */\n          getValueArray: function getValueArray(value, nextProps) {\n            var _this2 = this;\n            /** support optionally passing in the `nextProps` so `componentWillReceiveProps` updates will function as expected */\n\n\n            var props = typeof nextProps === 'object' ? nextProps : this.props;\n\n            if (props.multi) {\n              if (typeof value === 'string') value = value.split(props.delimiter);\n\n              if (!Array.isArray(value)) {\n                if (value === null || value === undefined) return [];\n                value = [value];\n              }\n\n              return value.map(function (value) {\n                return _this2.expandValue(value, props);\n              }).filter(function (i) {\n                return i;\n              });\n            }\n\n            var expandedValue = this.expandValue(value, props);\n            return expandedValue ? [expandedValue] : [];\n          },\n\n          /**\n           * Retrieve a value from the given options and valueKey\n           * @param\t{String|Number|Array}\tvalue\t- the selected value(s)\n           * @param\t{Object}\t\tprops\t- the Select component's props (or nextProps)\n           */\n          expandValue: function expandValue(value, props) {\n            var valueType = typeof value;\n            if (valueType !== 'string' && valueType !== 'number' && valueType !== 'boolean') return value;\n            var _props = this.props;\n            var labelKey = _props.labelKey;\n            var valueKey = _props.valueKey;\n            var renderInvalidValues = _props.renderInvalidValues;\n            var options = this._flatOptions;\n            if (!options || value === '') return;\n\n            for (var i = 0; i < options.length; i++) {\n              if (options[i][valueKey] === value) return options[i];\n            } // no matching option, return an invalid option if renderInvalidValues is enabled\n\n\n            if (renderInvalidValues) {\n              var _ref;\n\n              invalidOptions[value] = invalidOptions[value] || (_ref = {\n                invalid: true\n              }, _defineProperty(_ref, labelKey, value), _defineProperty(_ref, valueKey, value), _ref);\n              return invalidOptions[value];\n            }\n          },\n          setValue: function setValue(value) {\n            var _this3 = this;\n\n            if (this.props.autoBlur) {\n              this.blurInput();\n            }\n\n            if (!this.props.onChange) return;\n\n            if (this.props.required) {\n              var required = this.handleRequired(value, this.props.multi);\n              this.setState({\n                required: required\n              });\n            }\n\n            if (this.props.simpleValue && value) {\n              value = this.props.multi ? value.map(function (i) {\n                return i[_this3.props.valueKey];\n              }).join(this.props.delimiter) : value[this.props.valueKey];\n            }\n\n            this.props.onChange(value);\n          },\n          selectValue: function selectValue(value) {\n            var _this4 = this; //NOTE: update value in the callback to make sure the input value is empty so that there are no styling issues (Chrome had issue otherwise)\n\n\n            this.hasScrolledToOption = false;\n\n            if (this.props.multi) {\n              this.setState({\n                inputValue: '',\n                focusedIndex: null\n              }, function () {\n                _this4.addValue(value);\n\n                if (_this4.props.onInputChange) _this4.props.onInputChange('');\n              });\n            } else {\n              this.setState({\n                isOpen: false,\n                inputValue: '',\n                isPseudoFocused: this.state.isFocused\n              }, function () {\n                _this4.setValue(value);\n\n                if (_this4.props.onInputChange) _this4.props.onInputChange('');\n              });\n            }\n          },\n          addValue: function addValue(value) {\n            var valueArray = this.getValueArray(this.props.value);\n\n            var visibleOptions = this._visibleOptions.filter(function (val) {\n              return !val.disabled;\n            });\n\n            var lastValueIndex = visibleOptions.indexOf(value);\n            this.setValue(valueArray.concat(value));\n\n            if (visibleOptions.length - 1 === lastValueIndex) {\n              // the last option was selected; focus the second-last one\n              this.focusOption(visibleOptions[lastValueIndex - 1]);\n            } else if (visibleOptions.length > lastValueIndex) {\n              // focus the option below the selected one\n              this.focusOption(visibleOptions[lastValueIndex + 1]);\n            }\n          },\n          popValue: function popValue() {\n            var valueArray = this.getValueArray(this.props.value);\n            if (!valueArray.length) return;\n            if (valueArray[valueArray.length - 1].clearableValue === false) return;\n            this.setValue(valueArray.slice(0, valueArray.length - 1));\n          },\n          removeValue: function removeValue(value) {\n            var valueArray = this.getValueArray(this.props.value);\n            this.setValue(valueArray.filter(function (i) {\n              return i !== value;\n            }));\n          },\n          clearValue: function clearValue(event) {\n            var _this5 = this; // if the event was triggered by a mousedown and not the primary\n            // button, ignore it.\n\n\n            if (event && event.type === 'mousedown' && event.button !== 0) {\n              return;\n            }\n\n            event.stopPropagation();\n            event.preventDefault();\n            this.setValue(this.getResetValue());\n            this.setState({\n              isOpen: false,\n              inputValue: ''\n            }, function () {\n              _this5.focus();\n\n              if (_this5.props.onInputChange) _this5.props.onInputChange('');\n            });\n          },\n          getResetValue: function getResetValue() {\n            if (this.props.resetValue !== undefined) {\n              return this.props.resetValue;\n            } else if (this.props.multi) {\n              return [];\n            } else {\n              return null;\n            }\n          },\n          focusOption: function focusOption(option) {\n            this.setState({\n              focusedOption: option\n            });\n          },\n          focusNextOption: function focusNextOption() {\n            this.focusAdjacentOption('next');\n          },\n          focusPreviousOption: function focusPreviousOption() {\n            this.focusAdjacentOption('previous');\n          },\n          focusPageUpOption: function focusPageUpOption() {\n            this.focusAdjacentOption('page_up');\n          },\n          focusPageDownOption: function focusPageDownOption() {\n            this.focusAdjacentOption('page_down');\n          },\n          focusStartOption: function focusStartOption() {\n            this.focusAdjacentOption('start');\n          },\n          focusEndOption: function focusEndOption() {\n            this.focusAdjacentOption('end');\n          },\n          focusAdjacentOption: function focusAdjacentOption(dir) {\n            var _this6 = this;\n\n            var options = this._visibleOptions.map(function (option, index) {\n              return {\n                option: option,\n                index: index\n              };\n            }).filter(function (option) {\n              return !option.option.disabled;\n            });\n\n            this._scrollToFocusedOptionOnUpdate = true;\n\n            if (!this.state.isOpen) {\n              this.setState({\n                isOpen: true,\n                inputValue: '',\n                focusedOption: this._focusedOption || (options.length ? options[dir === 'next' ? 0 : options.length - 1].option : null)\n              }, function () {\n                if (_this6.props.onInputChange) _this6.props.onInputChange('');\n              });\n              return;\n            }\n\n            if (!options.length) return;\n            var focusedIndex = -1;\n\n            for (var i = 0; i < options.length; i++) {\n              if (this._focusedOption === options[i].option) {\n                focusedIndex = i;\n                break;\n              }\n            }\n\n            if (dir === 'next' && focusedIndex !== -1) {\n              focusedIndex = (focusedIndex + 1) % options.length;\n            } else if (dir === 'previous') {\n              if (focusedIndex > 0) {\n                focusedIndex = focusedIndex - 1;\n              } else {\n                focusedIndex = options.length - 1;\n              }\n            } else if (dir === 'start') {\n              focusedIndex = 0;\n            } else if (dir === 'end') {\n              focusedIndex = options.length - 1;\n            } else if (dir === 'page_up') {\n              var potentialIndex = focusedIndex - this.props.pageSize;\n\n              if (potentialIndex < 0) {\n                focusedIndex = 0;\n              } else {\n                focusedIndex = potentialIndex;\n              }\n            } else if (dir === 'page_down') {\n              var potentialIndex = focusedIndex + this.props.pageSize;\n\n              if (potentialIndex > options.length - 1) {\n                focusedIndex = options.length - 1;\n              } else {\n                focusedIndex = potentialIndex;\n              }\n            }\n\n            if (focusedIndex === -1) {\n              focusedIndex = 0;\n            }\n\n            this.setState({\n              focusedIndex: options[focusedIndex].index,\n              focusedOption: options[focusedIndex].option\n            });\n          },\n          getFocusedOption: function getFocusedOption() {\n            return this._focusedOption;\n          },\n          getInputValue: function getInputValue() {\n            return this.state.inputValue;\n          },\n          selectFocusedOption: function selectFocusedOption() {\n            if (this._focusedOption) {\n              return this.selectValue(this._focusedOption);\n            }\n          },\n          renderLoading: function renderLoading() {\n            if (!this.props.isLoading) return;\n            return _react2['default'].createElement('span', {\n              className: 'Select-loading-zone',\n              'aria-hidden': 'true'\n            }, _react2['default'].createElement('span', {\n              className: 'Select-loading'\n            }));\n          },\n          renderValue: function renderValue(valueArray, isOpen) {\n            var _this7 = this;\n\n            var renderLabel = this.props.valueRenderer || this.getOptionLabel;\n            var ValueComponent = this.props.valueComponent;\n\n            if (!valueArray.length) {\n              return !this.state.inputValue ? _react2['default'].createElement('div', {\n                className: 'Select-placeholder'\n              }, this.props.placeholder) : null;\n            }\n\n            var onClick = this.props.onValueClick ? this.handleValueClick : null;\n\n            if (this.props.multi) {\n              return valueArray.map(function (value, i) {\n                return _react2['default'].createElement(ValueComponent, {\n                  id: _this7._instancePrefix + '-value-' + i,\n                  instancePrefix: _this7._instancePrefix,\n                  disabled: _this7.props.disabled || value.clearableValue === false,\n                  key: 'value-' + i + '-' + value[_this7.props.valueKey],\n                  onClick: onClick,\n                  onRemove: _this7.removeValue,\n                  value: value\n                }, renderLabel(value, i), _react2['default'].createElement('span', {\n                  className: 'Select-aria-only'\n                }, ' '));\n              });\n            } else if (!this.state.inputValue) {\n              if (isOpen) onClick = null;\n              return _react2['default'].createElement(ValueComponent, {\n                id: this._instancePrefix + '-value-item',\n                disabled: this.props.disabled,\n                instancePrefix: this._instancePrefix,\n                onClick: onClick,\n                value: valueArray[0]\n              }, renderLabel(valueArray[0]));\n            }\n          },\n          renderInput: function renderInput(valueArray, focusedOptionIndex) {\n            var _classNames,\n                _this8 = this;\n\n            var className = (0, _classnames2['default'])('Select-input', this.props.inputProps.className);\n            var isOpen = !!this.state.isOpen;\n            var ariaOwns = (0, _classnames2['default'])((_classNames = {}, _defineProperty(_classNames, this._instancePrefix + '-list', isOpen), _defineProperty(_classNames, this._instancePrefix + '-backspace-remove-message', this.props.multi && !this.props.disabled && this.state.isFocused && !this.state.inputValue), _classNames)); // TODO: Check how this project includes Object.assign()\n\n            var inputProps = _extends({}, this.props.inputProps, {\n              role: 'combobox',\n              'aria-expanded': '' + isOpen,\n              'aria-owns': ariaOwns,\n              'aria-haspopup': '' + isOpen,\n              'aria-activedescendant': isOpen ? this._instancePrefix + '-option-' + focusedOptionIndex : this._instancePrefix + '-value',\n              'aria-describedby': this.props['aria-describedby'],\n              'aria-labelledby': this.props['aria-labelledby'],\n              'aria-label': this.props['aria-label'],\n              className: className,\n              tabIndex: this.props.tabIndex,\n              onBlur: this.handleInputBlur,\n              onChange: this.handleInputChange,\n              onFocus: this.handleInputFocus,\n              ref: function ref(_ref2) {\n                return _this8.input = _ref2;\n              },\n              required: this.state.required,\n              value: this.state.inputValue\n            });\n\n            if (this.props.inputRenderer) {\n              return this.props.inputRenderer(inputProps);\n            }\n\n            if (this.props.disabled || !this.props.searchable) {\n              var _props$inputProps = this.props.inputProps;\n              var inputClassName = _props$inputProps.inputClassName;\n\n              var divProps = _objectWithoutProperties(_props$inputProps, ['inputClassName']);\n\n              return _react2['default'].createElement('div', _extends({}, divProps, {\n                role: 'combobox',\n                'aria-expanded': isOpen,\n                'aria-owns': isOpen ? this._instancePrefix + '-list' : this._instancePrefix + '-value',\n                'aria-activedescendant': isOpen ? this._instancePrefix + '-option-' + focusedOptionIndex : this._instancePrefix + '-value',\n                className: className,\n                tabIndex: this.props.tabIndex || 0,\n                onBlur: this.handleInputBlur,\n                onFocus: this.handleInputFocus,\n                ref: function ref(_ref8) {\n                  return _this8.input = _ref8;\n                },\n                'aria-readonly': '' + !!this.props.disabled,\n                style: {\n                  border: 0,\n                  width: 1,\n                  display: 'inline-block'\n                }\n              }));\n            }\n\n            if (this.props.autosize) {\n              return _react2['default'].createElement(_reactInputAutosize2['default'], _extends({}, inputProps, {\n                minWidth: '5'\n              }));\n            }\n\n            return _react2['default'].createElement('div', {\n              className: className\n            }, _react2['default'].createElement('input', inputProps));\n          },\n          renderClear: function renderClear() {\n            if (!this.props.clearable || !this.props.value || this.props.value === 0 || this.props.multi && !this.props.value.length || this.props.disabled || this.props.isLoading) return;\n            var clear = this.props.clearRenderer();\n            return _react2['default'].createElement('span', {\n              className: 'Select-clear-zone',\n              title: this.props.multi ? this.props.clearAllText : this.props.clearValueText,\n              'aria-label': this.props.multi ? this.props.clearAllText : this.props.clearValueText,\n              onMouseDown: this.clearValue,\n              onTouchStart: this.handleTouchStart,\n              onTouchMove: this.handleTouchMove,\n              onTouchEnd: this.handleTouchEndClearValue\n            }, clear);\n          },\n          renderArrow: function renderArrow() {\n            var onMouseDown = this.handleMouseDownOnArrow;\n            var isOpen = this.state.isOpen;\n            var arrow = this.props.arrowRenderer({\n              onMouseDown: onMouseDown,\n              isOpen: isOpen\n            });\n            return _react2['default'].createElement('span', {\n              className: 'Select-arrow-zone',\n              onMouseDown: onMouseDown\n            }, arrow);\n          },\n          filterFlatOptions: function filterFlatOptions(excludeOptions) {\n            var filterValue = this.state.inputValue;\n            var flatOptions = this._flatOptions;\n\n            if (this.props.filterOptions) {\n              // Maintain backwards compatibility with boolean attribute\n              var filterOptions = typeof this.props.filterOptions === 'function' ? this.props.filterOptions : _utilsDefaultFilterOptions2['default'];\n              return filterOptions(flatOptions, filterValue, excludeOptions, {\n                filterOption: this.props.filterOption,\n                ignoreAccents: this.props.ignoreAccents,\n                ignoreCase: this.props.ignoreCase,\n                labelKey: this.props.labelKey,\n                matchPos: this.props.matchPos,\n                matchProp: this.props.matchProp,\n                valueKey: this.props.valueKey\n              });\n            } else {\n              return flatOptions;\n            }\n          },\n          flattenOptions: function flattenOptions(options, group) {\n            if (!options) return [];\n            var flatOptions = [];\n\n            for (var i = 0; i < options.length; i++) {\n              // We clone each option with a pointer to its parent group for efficient unflattening\n              var optionCopy = clone(options[i]);\n              optionCopy.isInTree = false;\n\n              if (group) {\n                optionCopy.group = group;\n              }\n\n              if (isGroup(optionCopy)) {\n                flatOptions = flatOptions.concat(this.flattenOptions(optionCopy.options, optionCopy));\n                optionCopy.options = [];\n              } else {\n                flatOptions.push(optionCopy);\n              }\n            }\n\n            return flatOptions;\n          },\n          unflattenOptions: function unflattenOptions(flatOptions) {\n            var groupedOptions = [];\n            var parent = undefined,\n                child = undefined; // Remove all ancestor groups from the tree\n\n            flatOptions.forEach(function (option) {\n              option.isInTree = false;\n              parent = option.group;\n\n              while (parent) {\n                if (parent.isInTree) {\n                  parent.options = [];\n                  parent.isInTree = false;\n                }\n\n                parent = parent.group;\n              }\n            }); // Now reconstruct the options tree\n\n            flatOptions.forEach(function (option) {\n              child = option;\n              parent = child.group;\n\n              while (parent) {\n                if (!child.isInTree) {\n                  parent.options.push(child);\n                  child.isInTree = true;\n                }\n\n                child = parent;\n                parent = child.group;\n              }\n\n              if (!child.isInTree) {\n                groupedOptions.push(child);\n                child.isInTree = true;\n              }\n            });\n            return groupedOptions;\n          },\n          onOptionRef: function onOptionRef(ref, isFocused) {\n            if (isFocused) {\n              this.focused = ref;\n            }\n          },\n          renderMenu: function renderMenu(options, valueArray, focusedOption) {\n            if (options && options.length) {\n              return this.props.menuRenderer({\n                focusedOption: focusedOption,\n                focusOption: this.focusOption,\n                instancePrefix: this._instancePrefix,\n                labelKey: this.props.labelKey,\n                onFocus: this.focusOption,\n                onOptionRef: this.onOptionRef,\n                onSelect: this.selectValue,\n                optionClassName: this.props.optionClassName,\n                optionComponent: this.props.optionComponent,\n                optionGroupComponent: this.props.optionGroupComponent,\n                optionRenderer: this.props.optionRenderer || this.getOptionLabel,\n                options: options,\n                selectValue: this.selectValue,\n                valueArray: valueArray,\n                valueKey: this.props.valueKey\n              });\n            } else if (this.props.noResultsText) {\n              return _react2['default'].createElement('div', {\n                className: 'Select-noresults'\n              }, this.props.noResultsText);\n            } else {\n              return null;\n            }\n          },\n          renderHiddenField: function renderHiddenField(valueArray) {\n            var _this9 = this;\n\n            if (!this.props.name) return;\n\n            if (this.props.joinValues) {\n              var value = valueArray.map(function (i) {\n                return stringifyValue(i[_this9.props.valueKey]);\n              }).join(this.props.delimiter);\n              return _react2['default'].createElement('input', {\n                type: 'hidden',\n                ref: function ref(_ref9) {\n                  return _this9.value = _ref9;\n                },\n                name: this.props.name,\n                value: value,\n                disabled: this.props.disabled\n              });\n            }\n\n            return valueArray.map(function (item, index) {\n              return _react2['default'].createElement('input', {\n                key: 'hidden.' + index,\n                type: 'hidden',\n                ref: 'value' + index,\n                name: _this9.props.name,\n                value: stringifyValue(item[_this9.props.valueKey]),\n                disabled: _this9.props.disabled\n              });\n            });\n          },\n          getFocusableOptionIndex: function getFocusableOptionIndex(selectedOption) {\n            var options = this._visibleOptions;\n            if (!options.length) return null;\n            var focusedOption = this.state.focusedOption || selectedOption;\n\n            if (focusedOption && !focusedOption.disabled) {\n              var focusedOptionIndex = -1;\n              options.some(function (option, index) {\n                var isOptionEqual = option.value === focusedOption.value;\n\n                if (isOptionEqual) {\n                  focusedOptionIndex = index;\n                }\n\n                return isOptionEqual;\n              });\n\n              if (focusedOptionIndex !== -1) {\n                return focusedOptionIndex;\n              }\n            }\n\n            for (var i = 0; i < options.length; i++) {\n              if (!options[i].disabled) return i;\n            }\n\n            return null;\n          },\n          renderOuter: function renderOuter(options, valueArray, focusedOption) {\n            var _this10 = this;\n\n            var Dropdown = this.props.dropdownComponent;\n            var menu = this.renderMenu(options, valueArray, focusedOption);\n\n            if (!menu) {\n              return null;\n            }\n\n            return _react2['default'].createElement(Dropdown, null, _react2['default'].createElement('div', {\n              ref: function ref(_ref10) {\n                return _this10.menuContainer = _ref10;\n              },\n              className: 'Select-menu-outer',\n              style: this.props.menuContainerStyle\n            }, _react2['default'].createElement('div', {\n              ref: function ref(_ref11) {\n                return _this10.menu = _ref11;\n              },\n              role: 'listbox',\n              className: 'Select-menu',\n              id: this._instancePrefix + '-list',\n              style: this.props.menuStyle,\n              onScroll: this.handleMenuScroll,\n              onMouseDown: this.handleMouseDownOnMenu\n            }, menu)));\n          },\n          render: function render() {\n            var _this11 = this;\n\n            var valueArray = this.getValueArray(this.props.value);\n            this._visibleOptions = this.filterFlatOptions(this.props.multi ? valueArray : null);\n            var options = this.unflattenOptions(this._visibleOptions);\n            var isOpen = typeof this.props.isOpen === 'boolean' ? this.props.isOpen : this.state.isOpen;\n            var focusedOptionIndex = this.getFocusableOptionIndex(valueArray[0]);\n            var focusedOption = null;\n\n            if (focusedOptionIndex !== null) {\n              focusedOption = this._focusedOption = this._visibleOptions[focusedOptionIndex];\n            } else {\n              focusedOption = this._focusedOption = null;\n            }\n\n            var className = (0, _classnames2['default'])('Select', this.props.className, {\n              'Select--multi': this.props.multi,\n              'Select--single': !this.props.multi,\n              'is-disabled': this.props.disabled,\n              'is-focused': this.state.isFocused,\n              'is-loading': this.props.isLoading,\n              'is-open': isOpen,\n              'is-pseudo-focused': this.state.isPseudoFocused,\n              'is-searchable': this.props.searchable,\n              'has-value': valueArray.length\n            });\n            var removeMessage = null;\n\n            if (this.props.multi && !this.props.disabled && valueArray.length && !this.state.inputValue && this.state.isFocused && this.props.backspaceRemoves) {\n              removeMessage = _react2['default'].createElement('span', {\n                id: this._instancePrefix + '-backspace-remove-message',\n                className: 'Select-aria-only',\n                'aria-live': 'assertive'\n              }, this.props.backspaceToRemoveMessage.replace('{label}', valueArray[valueArray.length - 1][this.props.labelKey]));\n            }\n\n            return _react2['default'].createElement('div', {\n              ref: function ref(_ref12) {\n                return _this11.wrapper = _ref12;\n              },\n              className: className,\n              style: this.props.wrapperStyle\n            }, this.renderHiddenField(valueArray), _react2['default'].createElement('div', {\n              ref: function ref(_ref13) {\n                return _this11.control = _ref13;\n              },\n              className: 'Select-control',\n              style: this.props.style,\n              onKeyDown: this.handleKeyDown,\n              onMouseDown: this.handleMouseDown,\n              onTouchEnd: this.handleTouchEnd,\n              onTouchStart: this.handleTouchStart,\n              onTouchMove: this.handleTouchMove\n            }, _react2['default'].createElement('span', {\n              className: 'Select-multi-value-wrapper',\n              id: this._instancePrefix + '-value'\n            }, this.renderValue(valueArray, isOpen), this.renderInput(valueArray, focusedOptionIndex)), removeMessage, this.renderLoading(), this.renderClear(), this.renderArrow()), isOpen ? this.renderOuter(options, !this.props.multi ? valueArray : null, focusedOption) : null);\n          }\n        });\n\n        Select.stripDiacritics = _utilsStripDiacritics2['default'];\n        exports['default'] = Select;\n        module.exports = exports['default'];\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {\n      \"./Async\": 1,\n      \"./AsyncCreatable\": 2,\n      \"./Creatable\": 3,\n      \"./Dropdown\": 4,\n      \"./Option\": 5,\n      \"./OptionGroup\": 6,\n      \"./Value\": 8,\n      \"./utils/defaultArrowRenderer\": 9,\n      \"./utils/defaultClearRenderer\": 10,\n      \"./utils/defaultFilterOptions\": 11,\n      \"./utils/defaultMenuRenderer\": 12,\n      \"./utils/stripDiacritics\": 13\n    }],\n    8: [function (require, module, exports) {\n      (function (global) {\n        'use strict';\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            'default': obj\n          };\n        }\n\n        var _react = typeof window !== \"undefined\" ? window['React'] : typeof global !== \"undefined\" ? global['React'] : null;\n\n        var _react2 = _interopRequireDefault(_react);\n\n        var _classnames = typeof window !== \"undefined\" ? window['classNames'] : typeof global !== \"undefined\" ? global['classNames'] : null;\n\n        var _classnames2 = _interopRequireDefault(_classnames);\n\n        var Value = _react2['default'].createClass({\n          displayName: 'Value',\n          propTypes: {\n            children: _react2['default'].PropTypes.node,\n            disabled: _react2['default'].PropTypes.bool,\n            // disabled prop passed to ReactSelect\n            id: _react2['default'].PropTypes.string,\n            // Unique id for the value - used for aria\n            onClick: _react2['default'].PropTypes.func,\n            // method to handle click on value label\n            onRemove: _react2['default'].PropTypes.func,\n            // method to handle removal of the value\n            value: _react2['default'].PropTypes.object.isRequired\n          },\n          // the option object for this value\n          handleMouseDown: function handleMouseDown(event) {\n            if (event.type === 'mousedown' && event.button !== 0) {\n              return;\n            }\n\n            if (this.props.onClick) {\n              event.stopPropagation();\n              this.props.onClick(this.props.value, event);\n              return;\n            }\n\n            if (this.props.value.href) {\n              event.stopPropagation();\n            }\n          },\n          onRemove: function onRemove(event) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.props.onRemove(this.props.value);\n          },\n          handleTouchEndRemove: function handleTouchEndRemove(event) {\n            // Check if the view is being dragged, In this case\n            // we don't want to fire the click event (because the user only wants to scroll)\n            if (this.dragging) return; // Fire the mouse events\n\n            this.onRemove(event);\n          },\n          handleTouchMove: function handleTouchMove(event) {\n            // Set a flag that the view is being dragged\n            this.dragging = true;\n          },\n          handleTouchStart: function handleTouchStart(event) {\n            // Set a flag that the view is not being dragged\n            this.dragging = false;\n          },\n          renderRemoveIcon: function renderRemoveIcon() {\n            if (this.props.disabled || !this.props.onRemove) return;\n            return _react2['default'].createElement('span', {\n              className: 'Select-value-icon',\n              'aria-hidden': 'true',\n              onMouseDown: this.onRemove,\n              onTouchEnd: this.handleTouchEndRemove,\n              onTouchStart: this.handleTouchStart,\n              onTouchMove: this.handleTouchMove\n            }, '×');\n          },\n          renderLabel: function renderLabel() {\n            var className = 'Select-value-label';\n            return this.props.onClick || this.props.value.href ? _react2['default'].createElement('a', {\n              className: className,\n              href: this.props.value.href,\n              target: this.props.value.target,\n              onMouseDown: this.handleMouseDown,\n              onTouchEnd: this.handleMouseDown\n            }, this.props.children) : _react2['default'].createElement('span', {\n              className: className,\n              role: 'option',\n              'aria-selected': 'true',\n              id: this.props.id\n            }, this.props.children);\n          },\n          render: function render() {\n            return _react2['default'].createElement('div', {\n              className: (0, _classnames2['default'])('Select-value', this.props.value.className),\n              style: this.props.value.style,\n              title: this.props.value.title\n            }, this.renderRemoveIcon(), this.renderLabel());\n          }\n        });\n\n        module.exports = Value;\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    9: [function (require, module, exports) {\n      (function (global) {\n        \"use strict\";\n\n        Object.defineProperty(exports, \"__esModule\", {\n          value: true\n        });\n        exports[\"default\"] = arrowRenderer;\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            \"default\": obj\n          };\n        }\n\n        var _react = typeof window !== \"undefined\" ? window['React'] : typeof global !== \"undefined\" ? global['React'] : null;\n\n        var _react2 = _interopRequireDefault(_react);\n\n        function arrowRenderer(_ref) {\n          var onMouseDown = _ref.onMouseDown;\n          return _react2[\"default\"].createElement(\"span\", {\n            className: \"Select-arrow\",\n            onMouseDown: onMouseDown\n          });\n        }\n\n        ;\n        module.exports = exports[\"default\"];\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    10: [function (require, module, exports) {\n      (function (global) {\n        'use strict';\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        exports['default'] = clearRenderer;\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            'default': obj\n          };\n        }\n\n        var _react = typeof window !== \"undefined\" ? window['React'] : typeof global !== \"undefined\" ? global['React'] : null;\n\n        var _react2 = _interopRequireDefault(_react);\n\n        function clearRenderer() {\n          return _react2['default'].createElement('span', {\n            className: 'Select-clear',\n            dangerouslySetInnerHTML: {\n              __html: '&times;'\n            }\n          });\n        }\n\n        ;\n        module.exports = exports['default'];\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    11: [function (require, module, exports) {\n      'use strict';\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          'default': obj\n        };\n      }\n\n      var _stripDiacritics = require('./stripDiacritics');\n\n      var _stripDiacritics2 = _interopRequireDefault(_stripDiacritics);\n\n      function filterOptions(options, filterValue, excludeOptions, props) {\n        var _this = this;\n\n        if (props.ignoreAccents) {\n          filterValue = (0, _stripDiacritics2['default'])(filterValue);\n        }\n\n        if (props.ignoreCase) {\n          filterValue = filterValue.toLowerCase();\n        }\n\n        if (excludeOptions) excludeOptions = excludeOptions.map(function (i) {\n          return i[props.valueKey];\n        });\n        return options.filter(function (option) {\n          if (excludeOptions && excludeOptions.indexOf(option[props.valueKey]) > -1) return false;\n          if (props.filterOption) return props.filterOption.call(_this, option, filterValue);\n          if (!filterValue) return true;\n          var valueTest = String(option[props.valueKey]);\n          var labelTest = String(option[props.labelKey]);\n\n          if (props.ignoreAccents) {\n            if (props.matchProp !== 'label') valueTest = (0, _stripDiacritics2['default'])(valueTest);\n            if (props.matchProp !== 'value') labelTest = (0, _stripDiacritics2['default'])(labelTest);\n          }\n\n          if (props.ignoreCase) {\n            if (props.matchProp !== 'label') valueTest = valueTest.toLowerCase();\n            if (props.matchProp !== 'value') labelTest = labelTest.toLowerCase();\n          }\n\n          return props.matchPos === 'start' ? props.matchProp !== 'label' && valueTest.substr(0, filterValue.length) === filterValue || props.matchProp !== 'value' && labelTest.substr(0, filterValue.length) === filterValue : props.matchProp !== 'label' && valueTest.indexOf(filterValue) >= 0 || props.matchProp !== 'value' && labelTest.indexOf(filterValue) >= 0;\n        });\n      }\n\n      module.exports = filterOptions;\n    }, {\n      \"./stripDiacritics\": 13\n    }],\n    12: [function (require, module, exports) {\n      (function (global) {\n        'use strict';\n\n        function _interopRequireDefault(obj) {\n          return obj && obj.__esModule ? obj : {\n            'default': obj\n          };\n        }\n\n        var _classnames = typeof window !== \"undefined\" ? window['classNames'] : typeof global !== \"undefined\" ? global['classNames'] : null;\n\n        var _classnames2 = _interopRequireDefault(_classnames);\n\n        var _react = typeof window !== \"undefined\" ? window['React'] : typeof global !== \"undefined\" ? global['React'] : null;\n\n        var _react2 = _interopRequireDefault(_react);\n\n        function isGroup(option) {\n          return option && Array.isArray(option.options);\n        }\n\n        function menuRenderer(_ref) {\n          var focusedOption = _ref.focusedOption;\n          var instancePrefix = _ref.instancePrefix;\n          var labelKey = _ref.labelKey;\n          var onFocus = _ref.onFocus;\n          var onOptionRef = _ref.onOptionRef;\n          var onSelect = _ref.onSelect;\n          var optionClassName = _ref.optionClassName;\n          var optionComponent = _ref.optionComponent;\n          var optionGroupComponent = _ref.optionGroupComponent;\n          var optionRenderer = _ref.optionRenderer;\n          var options = _ref.options;\n          var valueArray = _ref.valueArray;\n          var valueKey = _ref.valueKey;\n          var OptionGroup = optionGroupComponent;\n          var Option = optionComponent;\n          var renderLabel = optionRenderer || this.getOptionLabel;\n\n          var renderOptions = function renderOptions(optionsSubset) {\n            return optionsSubset.map(function (option, i) {\n              if (isGroup(option)) {\n                var optionGroupClass = (0, _classnames2['default'])({\n                  'Select-option-group': true\n                });\n                return _react2['default'].createElement(OptionGroup, {\n                  className: optionGroupClass,\n                  key: 'option-group-' + i,\n                  label: renderLabel(option),\n                  option: option,\n                  optionIndex: i\n                }, renderOptions(option.options));\n              } else {\n                var _ret = function () {\n                  var isSelected = valueArray && valueArray.indexOf(option) > -1;\n                  var isFocused = option === focusedOption;\n                  var optionRef = isFocused ? 'focused' : null;\n                  var optionClass = (0, _classnames2['default'])(optionClassName, {\n                    'Select-option': true,\n                    'is-selected': isSelected,\n                    'is-focused': isFocused,\n                    'is-disabled': option.disabled\n                  });\n                  return {\n                    v: _react2['default'].createElement(Option, {\n                      className: optionClass,\n                      instancePrefix: instancePrefix,\n                      isDisabled: option.disabled,\n                      isFocused: isFocused,\n                      isSelected: isSelected,\n                      key: 'option-' + i + '-' + option[valueKey],\n                      onFocus: onFocus,\n                      onSelect: onSelect,\n                      option: option,\n                      optionIndex: i,\n                      ref: function ref(_ref14) {\n                        onOptionRef(_ref14, isFocused);\n                      }\n                    }, renderLabel(option, i))\n                  };\n                }();\n\n                if (typeof _ret === 'object') return _ret.v;\n              }\n            });\n          };\n\n          return renderOptions(options);\n        }\n\n        module.exports = menuRenderer;\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}],\n    13: [function (require, module, exports) {\n      'use strict';\n\n      var map = [{\n        'base': 'A',\n        'letters': /[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g\n      }, {\n        'base': 'AA',\n        'letters': /[\\uA732]/g\n      }, {\n        'base': 'AE',\n        'letters': /[\\u00C6\\u01FC\\u01E2]/g\n      }, {\n        'base': 'AO',\n        'letters': /[\\uA734]/g\n      }, {\n        'base': 'AU',\n        'letters': /[\\uA736]/g\n      }, {\n        'base': 'AV',\n        'letters': /[\\uA738\\uA73A]/g\n      }, {\n        'base': 'AY',\n        'letters': /[\\uA73C]/g\n      }, {\n        'base': 'B',\n        'letters': /[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181]/g\n      }, {\n        'base': 'C',\n        'letters': /[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E]/g\n      }, {\n        'base': 'D',\n        'letters': /[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779]/g\n      }, {\n        'base': 'DZ',\n        'letters': /[\\u01F1\\u01C4]/g\n      }, {\n        'base': 'Dz',\n        'letters': /[\\u01F2\\u01C5]/g\n      }, {\n        'base': 'E',\n        'letters': /[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E]/g\n      }, {\n        'base': 'F',\n        'letters': /[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B]/g\n      }, {\n        'base': 'G',\n        'letters': /[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E]/g\n      }, {\n        'base': 'H',\n        'letters': /[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D]/g\n      }, {\n        'base': 'I',\n        'letters': /[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197]/g\n      }, {\n        'base': 'J',\n        'letters': /[\\u004A\\u24BF\\uFF2A\\u0134\\u0248]/g\n      }, {\n        'base': 'K',\n        'letters': /[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2]/g\n      }, {\n        'base': 'L',\n        'letters': /[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780]/g\n      }, {\n        'base': 'LJ',\n        'letters': /[\\u01C7]/g\n      }, {\n        'base': 'Lj',\n        'letters': /[\\u01C8]/g\n      }, {\n        'base': 'M',\n        'letters': /[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C]/g\n      }, {\n        'base': 'N',\n        'letters': /[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4]/g\n      }, {\n        'base': 'NJ',\n        'letters': /[\\u01CA]/g\n      }, {\n        'base': 'Nj',\n        'letters': /[\\u01CB]/g\n      }, {\n        'base': 'O',\n        'letters': /[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C]/g\n      }, {\n        'base': 'OI',\n        'letters': /[\\u01A2]/g\n      }, {\n        'base': 'OO',\n        'letters': /[\\uA74E]/g\n      }, {\n        'base': 'OU',\n        'letters': /[\\u0222]/g\n      }, {\n        'base': 'P',\n        'letters': /[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754]/g\n      }, {\n        'base': 'Q',\n        'letters': /[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A]/g\n      }, {\n        'base': 'R',\n        'letters': /[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782]/g\n      }, {\n        'base': 'S',\n        'letters': /[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784]/g\n      }, {\n        'base': 'T',\n        'letters': /[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786]/g\n      }, {\n        'base': 'TZ',\n        'letters': /[\\uA728]/g\n      }, {\n        'base': 'U',\n        'letters': /[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244]/g\n      }, {\n        'base': 'V',\n        'letters': /[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245]/g\n      }, {\n        'base': 'VY',\n        'letters': /[\\uA760]/g\n      }, {\n        'base': 'W',\n        'letters': /[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72]/g\n      }, {\n        'base': 'X',\n        'letters': /[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C]/g\n      }, {\n        'base': 'Y',\n        'letters': /[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE]/g\n      }, {\n        'base': 'Z',\n        'letters': /[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762]/g\n      }, {\n        'base': 'a',\n        'letters': /[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/g\n      }, {\n        'base': 'aa',\n        'letters': /[\\uA733]/g\n      }, {\n        'base': 'ae',\n        'letters': /[\\u00E6\\u01FD\\u01E3]/g\n      }, {\n        'base': 'ao',\n        'letters': /[\\uA735]/g\n      }, {\n        'base': 'au',\n        'letters': /[\\uA737]/g\n      }, {\n        'base': 'av',\n        'letters': /[\\uA739\\uA73B]/g\n      }, {\n        'base': 'ay',\n        'letters': /[\\uA73D]/g\n      }, {\n        'base': 'b',\n        'letters': /[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/g\n      }, {\n        'base': 'c',\n        'letters': /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g\n      }, {\n        'base': 'd',\n        'letters': /[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/g\n      }, {\n        'base': 'dz',\n        'letters': /[\\u01F3\\u01C6]/g\n      }, {\n        'base': 'e',\n        'letters': /[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/g\n      }, {\n        'base': 'f',\n        'letters': /[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/g\n      }, {\n        'base': 'g',\n        'letters': /[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/g\n      }, {\n        'base': 'h',\n        'letters': /[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/g\n      }, {\n        'base': 'hv',\n        'letters': /[\\u0195]/g\n      }, {\n        'base': 'i',\n        'letters': /[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/g\n      }, {\n        'base': 'j',\n        'letters': /[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/g\n      }, {\n        'base': 'k',\n        'letters': /[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/g\n      }, {\n        'base': 'l',\n        'letters': /[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/g\n      }, {\n        'base': 'lj',\n        'letters': /[\\u01C9]/g\n      }, {\n        'base': 'm',\n        'letters': /[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/g\n      }, {\n        'base': 'n',\n        'letters': /[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/g\n      }, {\n        'base': 'nj',\n        'letters': /[\\u01CC]/g\n      }, {\n        'base': 'o',\n        'letters': /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g\n      }, {\n        'base': 'oi',\n        'letters': /[\\u01A3]/g\n      }, {\n        'base': 'ou',\n        'letters': /[\\u0223]/g\n      }, {\n        'base': 'oo',\n        'letters': /[\\uA74F]/g\n      }, {\n        'base': 'p',\n        'letters': /[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/g\n      }, {\n        'base': 'q',\n        'letters': /[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/g\n      }, {\n        'base': 'r',\n        'letters': /[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/g\n      }, {\n        'base': 's',\n        'letters': /[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/g\n      }, {\n        'base': 't',\n        'letters': /[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/g\n      }, {\n        'base': 'tz',\n        'letters': /[\\uA729]/g\n      }, {\n        'base': 'u',\n        'letters': /[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/g\n      }, {\n        'base': 'v',\n        'letters': /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g\n      }, {\n        'base': 'vy',\n        'letters': /[\\uA761]/g\n      }, {\n        'base': 'w',\n        'letters': /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g\n      }, {\n        'base': 'x',\n        'letters': /[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/g\n      }, {\n        'base': 'y',\n        'letters': /[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/g\n      }, {\n        'base': 'z',\n        'letters': /[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/g\n      }];\n\n      module.exports = function stripDiacritics(str) {\n        for (var i = 0; i < map.length; i++) {\n          str = str.replace(map[i].letters, map[i].base);\n        }\n\n        return str;\n      };\n    }, {}]\n  }, {}, [7])(7);\n});","map":null,"metadata":{},"sourceType":"script"}