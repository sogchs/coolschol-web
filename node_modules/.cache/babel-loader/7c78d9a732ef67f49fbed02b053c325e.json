{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar email_1 = require(\"../tests/email\");\n\nvar hasprotocol_1 = require(\"../tests/hasprotocol\");\n\nvar lists_1 = require(\"../lists\");\n\nvar ip_1 = require(\"../tests/ip\");\n\nvar url_1 = require(\"../tests/url\");\n\nfunction default_1(inputArr, options) {\n  return inputArr.map(function (fragment, index) {\n    var encoded = encodeURI(fragment); // quick validations\n    // 1\n\n    if (encoded.indexOf(\".\") < 1 && !hasprotocol_1.default(encoded)) return fragment;\n    var urlObj = null;\n    var protocol = hasprotocol_1.default(encoded) || \"\"; // remove the protocol before proceeding to any other test\n\n    if (protocol) encoded = encoded.substr(protocol.length); // test 1: it's a file\n\n    if (options.files && protocol === \"file:///\" && encoded.split(/\\/|\\\\/).length - 1) {\n      urlObj = {\n        reason: \"file\",\n        protocol: protocol,\n        raw: fragment,\n        encoded: encoded\n      };\n    } // test 2: it's a URL\n\n\n    if (!urlObj && options.urls && url_1.default(encoded)) {\n      urlObj = {\n        reason: \"url\",\n        protocol: protocol ? protocol : typeof options.defaultProtocol === \"function\" ? options.defaultProtocol(fragment) : options.defaultProtocol,\n        raw: fragment,\n        encoded: encoded\n      };\n    } // test 3: it's an email\n\n\n    if (!urlObj && options.emails && email_1.default(encoded)) {\n      urlObj = {\n        reason: \"email\",\n        protocol: \"mailto:\",\n        raw: fragment,\n        encoded: encoded\n      };\n    } // test 4: it's an IP\n\n\n    if (!urlObj && options.ips && ip_1.default(encoded)) {\n      urlObj = {\n        reason: \"ip\",\n        protocol: protocol ? protocol : typeof options.defaultProtocol === \"function\" ? options.defaultProtocol(fragment) : options.defaultProtocol,\n        raw: fragment,\n        encoded: encoded\n      };\n    }\n\n    if (!urlObj) return fragment;else {\n      if ((inputArr[index - 1] === \"'\" || inputArr[index - 1] === '\"') && ~lists_1.htmlAttrs.indexOf(inputArr[index - 2])) return fragment;\n      return urlObj;\n    }\n  });\n}\n\nexports.default = default_1;","map":null,"metadata":{},"sourceType":"script"}