{"ast":null,"code":"(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require(\"react\"));else if (typeof define === 'function' && define.amd) define([\"react\"], factory);else {\n    var a = typeof exports === 'object' ? factory(require(\"react\")) : factory(root[\"React\"]);\n\n    for (var i in a) {\n      (typeof exports === 'object' ? exports : root)[i] = a[i];\n    }\n  }\n})(this, function (__WEBPACK_EXTERNAL_MODULE_122__) {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // identity function for calling harmony imports with the correct context\n\n      /******/\n\n      __webpack_require__.i = function (value) {\n        return value;\n      };\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 123);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /* WEBPACK VAR INJECTION */\n      (function (module) {\n        //! moment.js\n        //! version : 2.18.1\n        //! authors : Tim Wood, Iskren Chernev, Moment.js contributors\n        //! license : MIT\n        //! momentjs.com\n        ;\n\n        (function (global, factory) {\n          true ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();\n        })(this, function () {\n          'use strict';\n\n          var hookCallback;\n\n          function hooks() {\n            return hookCallback.apply(null, arguments);\n          } // This is done to register the method called with moment()\n          // without creating circular dependencies.\n\n\n          function setHookCallback(callback) {\n            hookCallback = callback;\n          }\n\n          function isArray(input) {\n            return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n          }\n\n          function isObject(input) {\n            // IE8 will treat undefined and null as object if it wasn't for\n            // input != null\n            return input != null && Object.prototype.toString.call(input) === '[object Object]';\n          }\n\n          function isObjectEmpty(obj) {\n            var k;\n\n            for (k in obj) {\n              // even if its not own property I'd still call it non-empty\n              return false;\n            }\n\n            return true;\n          }\n\n          function isUndefined(input) {\n            return input === void 0;\n          }\n\n          function isNumber(input) {\n            return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n          }\n\n          function isDate(input) {\n            return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n          }\n\n          function map(arr, fn) {\n            var res = [],\n                i;\n\n            for (i = 0; i < arr.length; ++i) {\n              res.push(fn(arr[i], i));\n            }\n\n            return res;\n          }\n\n          function hasOwnProp(a, b) {\n            return Object.prototype.hasOwnProperty.call(a, b);\n          }\n\n          function extend(a, b) {\n            for (var i in b) {\n              if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n              }\n            }\n\n            if (hasOwnProp(b, 'toString')) {\n              a.toString = b.toString;\n            }\n\n            if (hasOwnProp(b, 'valueOf')) {\n              a.valueOf = b.valueOf;\n            }\n\n            return a;\n          }\n\n          function createUTC(input, format, locale, strict) {\n            return createLocalOrUTC(input, format, locale, strict, true).utc();\n          }\n\n          function defaultParsingFlags() {\n            // We need to deep clone this object.\n            return {\n              empty: false,\n              unusedTokens: [],\n              unusedInput: [],\n              overflow: -2,\n              charsLeftOver: 0,\n              nullInput: false,\n              invalidMonth: null,\n              invalidFormat: false,\n              userInvalidated: false,\n              iso: false,\n              parsedDateParts: [],\n              meridiem: null,\n              rfc2822: false,\n              weekdayMismatch: false\n            };\n          }\n\n          function getParsingFlags(m) {\n            if (m._pf == null) {\n              m._pf = defaultParsingFlags();\n            }\n\n            return m._pf;\n          }\n\n          var some;\n\n          if (Array.prototype.some) {\n            some = Array.prototype.some;\n          } else {\n            some = function some(fun) {\n              var t = Object(this);\n              var len = t.length >>> 0;\n\n              for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                  return true;\n                }\n              }\n\n              return false;\n            };\n          }\n\n          var some$1 = some;\n\n          function isValid(m) {\n            if (m._isValid == null) {\n              var flags = getParsingFlags(m);\n              var parsedParts = some$1.call(flags.parsedDateParts, function (i) {\n                return i != null;\n              });\n              var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);\n\n              if (m._strict) {\n                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;\n              }\n\n              if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n              } else {\n                return isNowValid;\n              }\n            }\n\n            return m._isValid;\n          }\n\n          function createInvalid(flags) {\n            var m = createUTC(NaN);\n\n            if (flags != null) {\n              extend(getParsingFlags(m), flags);\n            } else {\n              getParsingFlags(m).userInvalidated = true;\n            }\n\n            return m;\n          } // Plugins that add properties should also add the key here (null value),\n          // so we can properly clone ourselves.\n\n\n          var momentProperties = hooks.momentProperties = [];\n\n          function copyConfig(to, from) {\n            var i, prop, val;\n\n            if (!isUndefined(from._isAMomentObject)) {\n              to._isAMomentObject = from._isAMomentObject;\n            }\n\n            if (!isUndefined(from._i)) {\n              to._i = from._i;\n            }\n\n            if (!isUndefined(from._f)) {\n              to._f = from._f;\n            }\n\n            if (!isUndefined(from._l)) {\n              to._l = from._l;\n            }\n\n            if (!isUndefined(from._strict)) {\n              to._strict = from._strict;\n            }\n\n            if (!isUndefined(from._tzm)) {\n              to._tzm = from._tzm;\n            }\n\n            if (!isUndefined(from._isUTC)) {\n              to._isUTC = from._isUTC;\n            }\n\n            if (!isUndefined(from._offset)) {\n              to._offset = from._offset;\n            }\n\n            if (!isUndefined(from._pf)) {\n              to._pf = getParsingFlags(from);\n            }\n\n            if (!isUndefined(from._locale)) {\n              to._locale = from._locale;\n            }\n\n            if (momentProperties.length > 0) {\n              for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n\n                if (!isUndefined(val)) {\n                  to[prop] = val;\n                }\n              }\n            }\n\n            return to;\n          }\n\n          var updateInProgress = false; // Moment prototype object\n\n          function Moment(config) {\n            copyConfig(this, config);\n            this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n\n            if (!this.isValid()) {\n              this._d = new Date(NaN);\n            } // Prevent infinite loop in case updateOffset creates new moment\n            // objects.\n\n\n            if (updateInProgress === false) {\n              updateInProgress = true;\n              hooks.updateOffset(this);\n              updateInProgress = false;\n            }\n          }\n\n          function isMoment(obj) {\n            return obj instanceof Moment || obj != null && obj._isAMomentObject != null;\n          }\n\n          function absFloor(number) {\n            if (number < 0) {\n              // -0 -> 0\n              return Math.ceil(number) || 0;\n            } else {\n              return Math.floor(number);\n            }\n          }\n\n          function toInt(argumentForCoercion) {\n            var coercedNumber = +argumentForCoercion,\n                value = 0;\n\n            if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n              value = absFloor(coercedNumber);\n            }\n\n            return value;\n          } // compare two arrays, return the number of differences\n\n\n          function compareArrays(array1, array2, dontConvert) {\n            var len = Math.min(array1.length, array2.length),\n                lengthDiff = Math.abs(array1.length - array2.length),\n                diffs = 0,\n                i;\n\n            for (i = 0; i < len; i++) {\n              if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {\n                diffs++;\n              }\n            }\n\n            return diffs + lengthDiff;\n          }\n\n          function warn(msg) {\n            if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {\n              console.warn('Deprecation warning: ' + msg);\n            }\n          }\n\n          function deprecate(msg, fn) {\n            var firstTime = true;\n            return extend(function () {\n              if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n              }\n\n              if (firstTime) {\n                var args = [];\n                var arg;\n\n                for (var i = 0; i < arguments.length; i++) {\n                  arg = '';\n\n                  if (typeof arguments[i] === 'object') {\n                    arg += '\\n[' + i + '] ';\n\n                    for (var key in arguments[0]) {\n                      arg += key + ': ' + arguments[0][key] + ', ';\n                    }\n\n                    arg = arg.slice(0, -2); // Remove trailing comma and space\n                  } else {\n                    arg = arguments[i];\n                  }\n\n                  args.push(arg);\n                }\n\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + new Error().stack);\n                firstTime = false;\n              }\n\n              return fn.apply(this, arguments);\n            }, fn);\n          }\n\n          var deprecations = {};\n\n          function deprecateSimple(name, msg) {\n            if (hooks.deprecationHandler != null) {\n              hooks.deprecationHandler(name, msg);\n            }\n\n            if (!deprecations[name]) {\n              warn(msg);\n              deprecations[name] = true;\n            }\n          }\n\n          hooks.suppressDeprecationWarnings = false;\n          hooks.deprecationHandler = null;\n\n          function isFunction(input) {\n            return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n          }\n\n          function set(config) {\n            var prop, i;\n\n            for (i in config) {\n              prop = config[i];\n\n              if (isFunction(prop)) {\n                this[i] = prop;\n              } else {\n                this['_' + i] = prop;\n              }\n            }\n\n            this._config = config; // Lenient ordinal parsing accepts just a number in addition to\n            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n            // TODO: Remove \"ordinalParse\" fallback in next major release.\n\n            this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + '|' + /\\d{1,2}/.source);\n          }\n\n          function mergeConfigs(parentConfig, childConfig) {\n            var res = extend({}, parentConfig),\n                prop;\n\n            for (prop in childConfig) {\n              if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                  res[prop] = {};\n                  extend(res[prop], parentConfig[prop]);\n                  extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                  res[prop] = childConfig[prop];\n                } else {\n                  delete res[prop];\n                }\n              }\n            }\n\n            for (prop in parentConfig) {\n              if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n              }\n            }\n\n            return res;\n          }\n\n          function Locale(config) {\n            if (config != null) {\n              this.set(config);\n            }\n          }\n\n          var keys;\n\n          if (Object.keys) {\n            keys = Object.keys;\n          } else {\n            keys = function keys(obj) {\n              var i,\n                  res = [];\n\n              for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                  res.push(i);\n                }\n              }\n\n              return res;\n            };\n          }\n\n          var keys$1 = keys;\n          var defaultCalendar = {\n            sameDay: '[Today at] LT',\n            nextDay: '[Tomorrow at] LT',\n            nextWeek: 'dddd [at] LT',\n            lastDay: '[Yesterday at] LT',\n            lastWeek: '[Last] dddd [at] LT',\n            sameElse: 'L'\n          };\n\n          function calendar(key, mom, now) {\n            var output = this._calendar[key] || this._calendar['sameElse'];\n            return isFunction(output) ? output.call(mom, now) : output;\n          }\n\n          var defaultLongDateFormat = {\n            LTS: 'h:mm:ss A',\n            LT: 'h:mm A',\n            L: 'MM/DD/YYYY',\n            LL: 'MMMM D, YYYY',\n            LLL: 'MMMM D, YYYY h:mm A',\n            LLLL: 'dddd, MMMM D, YYYY h:mm A'\n          };\n\n          function longDateFormat(key) {\n            var format = this._longDateFormat[key],\n                formatUpper = this._longDateFormat[key.toUpperCase()];\n\n            if (format || !formatUpper) {\n              return format;\n            }\n\n            this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n              return val.slice(1);\n            });\n            return this._longDateFormat[key];\n          }\n\n          var defaultInvalidDate = 'Invalid date';\n\n          function invalidDate() {\n            return this._invalidDate;\n          }\n\n          var defaultOrdinal = '%d';\n          var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n          function ordinal(number) {\n            return this._ordinal.replace('%d', number);\n          }\n\n          var defaultRelativeTime = {\n            future: 'in %s',\n            past: '%s ago',\n            s: 'a few seconds',\n            ss: '%d seconds',\n            m: 'a minute',\n            mm: '%d minutes',\n            h: 'an hour',\n            hh: '%d hours',\n            d: 'a day',\n            dd: '%d days',\n            M: 'a month',\n            MM: '%d months',\n            y: 'a year',\n            yy: '%d years'\n          };\n\n          function relativeTime(number, withoutSuffix, string, isFuture) {\n            var output = this._relativeTime[string];\n            return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);\n          }\n\n          function pastFuture(diff, output) {\n            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n            return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n          }\n\n          var aliases = {};\n\n          function addUnitAlias(unit, shorthand) {\n            var lowerCase = unit.toLowerCase();\n            aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n          }\n\n          function normalizeUnits(units) {\n            return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n          }\n\n          function normalizeObjectUnits(inputObject) {\n            var normalizedInput = {},\n                normalizedProp,\n                prop;\n\n            for (prop in inputObject) {\n              if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n\n                if (normalizedProp) {\n                  normalizedInput[normalizedProp] = inputObject[prop];\n                }\n              }\n            }\n\n            return normalizedInput;\n          }\n\n          var priorities = {};\n\n          function addUnitPriority(unit, priority) {\n            priorities[unit] = priority;\n          }\n\n          function getPrioritizedUnits(unitsObj) {\n            var units = [];\n\n            for (var u in unitsObj) {\n              units.push({\n                unit: u,\n                priority: priorities[u]\n              });\n            }\n\n            units.sort(function (a, b) {\n              return a.priority - b.priority;\n            });\n            return units;\n          }\n\n          function makeGetSet(unit, keepTime) {\n            return function (value) {\n              if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n              } else {\n                return get(this, unit);\n              }\n            };\n          }\n\n          function get(mom, unit) {\n            return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n          }\n\n          function set$1(mom, unit, value) {\n            if (mom.isValid()) {\n              mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n          } // MOMENTS\n\n\n          function stringGet(units) {\n            units = normalizeUnits(units);\n\n            if (isFunction(this[units])) {\n              return this[units]();\n            }\n\n            return this;\n          }\n\n          function stringSet(units, value) {\n            if (typeof units === 'object') {\n              units = normalizeObjectUnits(units);\n              var prioritized = getPrioritizedUnits(units);\n\n              for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n              }\n            } else {\n              units = normalizeUnits(units);\n\n              if (isFunction(this[units])) {\n                return this[units](value);\n              }\n            }\n\n            return this;\n          }\n\n          function zeroFill(number, targetLength, forceSign) {\n            var absNumber = '' + Math.abs(number),\n                zerosToFill = targetLength - absNumber.length,\n                sign = number >= 0;\n            return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n          }\n\n          var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n          var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n          var formatFunctions = {};\n          var formatTokenFunctions = {}; // token:    'M'\n          // padded:   ['MM', 2]\n          // ordinal:  'Mo'\n          // callback: function () { this.month() + 1 }\n\n          function addFormatToken(token, padded, ordinal, callback) {\n            var func = callback;\n\n            if (typeof callback === 'string') {\n              func = function func() {\n                return this[callback]();\n              };\n            }\n\n            if (token) {\n              formatTokenFunctions[token] = func;\n            }\n\n            if (padded) {\n              formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n              };\n            }\n\n            if (ordinal) {\n              formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n              };\n            }\n          }\n\n          function removeFormattingTokens(input) {\n            if (input.match(/\\[[\\s\\S]/)) {\n              return input.replace(/^\\[|\\]$/g, '');\n            }\n\n            return input.replace(/\\\\/g, '');\n          }\n\n          function makeFormatFunction(format) {\n            var array = format.match(formattingTokens),\n                i,\n                length;\n\n            for (i = 0, length = array.length; i < length; i++) {\n              if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n              } else {\n                array[i] = removeFormattingTokens(array[i]);\n              }\n            }\n\n            return function (mom) {\n              var output = '',\n                  i;\n\n              for (i = 0; i < length; i++) {\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n              }\n\n              return output;\n            };\n          } // format date using native date object\n\n\n          function formatMoment(m, format) {\n            if (!m.isValid()) {\n              return m.localeData().invalidDate();\n            }\n\n            format = expandFormat(format, m.localeData());\n            formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n            return formatFunctions[format](m);\n          }\n\n          function expandFormat(format, locale) {\n            var i = 5;\n\n            function replaceLongDateFormatTokens(input) {\n              return locale.longDateFormat(input) || input;\n            }\n\n            localFormattingTokens.lastIndex = 0;\n\n            while (i >= 0 && localFormattingTokens.test(format)) {\n              format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n              localFormattingTokens.lastIndex = 0;\n              i -= 1;\n            }\n\n            return format;\n          }\n\n          var match1 = /\\d/; //       0 - 9\n\n          var match2 = /\\d\\d/; //      00 - 99\n\n          var match3 = /\\d{3}/; //     000 - 999\n\n          var match4 = /\\d{4}/; //    0000 - 9999\n\n          var match6 = /[+-]?\\d{6}/; // -999999 - 999999\n\n          var match1to2 = /\\d\\d?/; //       0 - 99\n\n          var match3to4 = /\\d\\d\\d\\d?/; //     999 - 9999\n\n          var match5to6 = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n\n          var match1to3 = /\\d{1,3}/; //       0 - 999\n\n          var match1to4 = /\\d{1,4}/; //       0 - 9999\n\n          var match1to6 = /[+-]?\\d{1,6}/; // -999999 - 999999\n\n          var matchUnsigned = /\\d+/; //       0 - inf\n\n          var matchSigned = /[+-]?\\d+/; //    -inf - inf\n\n          var matchOffset = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n\n          var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n          var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n          // any word (or two) characters or numbers including two/three word month in arabic.\n          // includes scottish gaelic two word and hyphenated months\n\n          var matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n          var regexes = {};\n\n          function addRegexToken(token, regex, strictRegex) {\n            regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n              return isStrict && strictRegex ? strictRegex : regex;\n            };\n          }\n\n          function getParseRegexForToken(token, config) {\n            if (!hasOwnProp(regexes, token)) {\n              return new RegExp(unescapeFormat(token));\n            }\n\n            return regexes[token](config._strict, config._locale);\n          } // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n\n\n          function unescapeFormat(s) {\n            return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n              return p1 || p2 || p3 || p4;\n            }));\n          }\n\n          function regexEscape(s) {\n            return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n          }\n\n          var tokens = {};\n\n          function addParseToken(token, callback) {\n            var i,\n                func = callback;\n\n            if (typeof token === 'string') {\n              token = [token];\n            }\n\n            if (isNumber(callback)) {\n              func = function func(input, array) {\n                array[callback] = toInt(input);\n              };\n            }\n\n            for (i = 0; i < token.length; i++) {\n              tokens[token[i]] = func;\n            }\n          }\n\n          function addWeekParseToken(token, callback) {\n            addParseToken(token, function (input, array, config, token) {\n              config._w = config._w || {};\n              callback(input, config._w, config, token);\n            });\n          }\n\n          function addTimeToArrayFromToken(token, input, config) {\n            if (input != null && hasOwnProp(tokens, token)) {\n              tokens[token](input, config._a, config, token);\n            }\n          }\n\n          var YEAR = 0;\n          var MONTH = 1;\n          var DATE = 2;\n          var HOUR = 3;\n          var MINUTE = 4;\n          var SECOND = 5;\n          var MILLISECOND = 6;\n          var WEEK = 7;\n          var WEEKDAY = 8;\n          var indexOf;\n\n          if (Array.prototype.indexOf) {\n            indexOf = Array.prototype.indexOf;\n          } else {\n            indexOf = function indexOf(o) {\n              // I know\n              var i;\n\n              for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                  return i;\n                }\n              }\n\n              return -1;\n            };\n          }\n\n          var indexOf$1 = indexOf;\n\n          function daysInMonth(year, month) {\n            return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();\n          } // FORMATTING\n\n\n          addFormatToken('M', ['MM', 2], 'Mo', function () {\n            return this.month() + 1;\n          });\n          addFormatToken('MMM', 0, 0, function (format) {\n            return this.localeData().monthsShort(this, format);\n          });\n          addFormatToken('MMMM', 0, 0, function (format) {\n            return this.localeData().months(this, format);\n          }); // ALIASES\n\n          addUnitAlias('month', 'M'); // PRIORITY\n\n          addUnitPriority('month', 8); // PARSING\n\n          addRegexToken('M', match1to2);\n          addRegexToken('MM', match1to2, match2);\n          addRegexToken('MMM', function (isStrict, locale) {\n            return locale.monthsShortRegex(isStrict);\n          });\n          addRegexToken('MMMM', function (isStrict, locale) {\n            return locale.monthsRegex(isStrict);\n          });\n          addParseToken(['M', 'MM'], function (input, array) {\n            array[MONTH] = toInt(input) - 1;\n          });\n          addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n            var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.\n\n\n            if (month != null) {\n              array[MONTH] = month;\n            } else {\n              getParsingFlags(config).invalidMonth = input;\n            }\n          }); // LOCALES\n\n          var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n          var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n\n          function localeMonths(m, format) {\n            if (!m) {\n              return isArray(this._months) ? this._months : this._months['standalone'];\n            }\n\n            return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n          }\n\n          var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n\n          function localeMonthsShort(m, format) {\n            if (!m) {\n              return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort['standalone'];\n            }\n\n            return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n          }\n\n          function handleStrictParse(monthName, format, strict) {\n            var i,\n                ii,\n                mom,\n                llc = monthName.toLocaleLowerCase();\n\n            if (!this._monthsParse) {\n              // this is not used\n              this._monthsParse = [];\n              this._longMonthsParse = [];\n              this._shortMonthsParse = [];\n\n              for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n              }\n            }\n\n            if (strict) {\n              if (format === 'MMM') {\n                ii = indexOf$1.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n              } else {\n                ii = indexOf$1.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n              }\n            } else {\n              if (format === 'MMM') {\n                ii = indexOf$1.call(this._shortMonthsParse, llc);\n\n                if (ii !== -1) {\n                  return ii;\n                }\n\n                ii = indexOf$1.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n              } else {\n                ii = indexOf$1.call(this._longMonthsParse, llc);\n\n                if (ii !== -1) {\n                  return ii;\n                }\n\n                ii = indexOf$1.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n              }\n            }\n          }\n\n          function localeMonthsParse(monthName, format, strict) {\n            var i, mom, regex;\n\n            if (this._monthsParseExact) {\n              return handleStrictParse.call(this, monthName, format, strict);\n            }\n\n            if (!this._monthsParse) {\n              this._monthsParse = [];\n              this._longMonthsParse = [];\n              this._shortMonthsParse = [];\n            } // TODO: add sorting\n            // Sorting makes sure if one month (or abbr) is a prefix of another\n            // see sorting in computeMonthsParse\n\n\n            for (i = 0; i < 12; i++) {\n              // make the regex if we don't have it already\n              mom = createUTC([2000, i]);\n\n              if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n              }\n\n              if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n              } // test the regex\n\n\n              if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n              } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n              } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n              }\n            }\n          } // MOMENTS\n\n\n          function setMonth(mom, value) {\n            var dayOfMonth;\n\n            if (!mom.isValid()) {\n              // No op\n              return mom;\n            }\n\n            if (typeof value === 'string') {\n              if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n              } else {\n                value = mom.localeData().monthsParse(value); // TODO: Another silent failure?\n\n                if (!isNumber(value)) {\n                  return mom;\n                }\n              }\n            }\n\n            dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n\n            mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n\n            return mom;\n          }\n\n          function getSetMonth(value) {\n            if (value != null) {\n              setMonth(this, value);\n              hooks.updateOffset(this, true);\n              return this;\n            } else {\n              return get(this, 'Month');\n            }\n          }\n\n          function getDaysInMonth() {\n            return daysInMonth(this.year(), this.month());\n          }\n\n          var defaultMonthsShortRegex = matchWord;\n\n          function monthsShortRegex(isStrict) {\n            if (this._monthsParseExact) {\n              if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n              }\n\n              if (isStrict) {\n                return this._monthsShortStrictRegex;\n              } else {\n                return this._monthsShortRegex;\n              }\n            } else {\n              if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n              }\n\n              return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;\n            }\n          }\n\n          var defaultMonthsRegex = matchWord;\n\n          function monthsRegex(isStrict) {\n            if (this._monthsParseExact) {\n              if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n              }\n\n              if (isStrict) {\n                return this._monthsStrictRegex;\n              } else {\n                return this._monthsRegex;\n              }\n            } else {\n              if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n              }\n\n              return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;\n            }\n          }\n\n          function computeMonthsParse() {\n            function cmpLenRev(a, b) {\n              return b.length - a.length;\n            }\n\n            var shortPieces = [],\n                longPieces = [],\n                mixedPieces = [],\n                i,\n                mom;\n\n            for (i = 0; i < 12; i++) {\n              // make the regex if we don't have it already\n              mom = createUTC([2000, i]);\n              shortPieces.push(this.monthsShort(mom, ''));\n              longPieces.push(this.months(mom, ''));\n              mixedPieces.push(this.months(mom, ''));\n              mixedPieces.push(this.monthsShort(mom, ''));\n            } // Sorting makes sure if one month (or abbr) is a prefix of another it\n            // will match the longer piece.\n\n\n            shortPieces.sort(cmpLenRev);\n            longPieces.sort(cmpLenRev);\n            mixedPieces.sort(cmpLenRev);\n\n            for (i = 0; i < 12; i++) {\n              shortPieces[i] = regexEscape(shortPieces[i]);\n              longPieces[i] = regexEscape(longPieces[i]);\n            }\n\n            for (i = 0; i < 24; i++) {\n              mixedPieces[i] = regexEscape(mixedPieces[i]);\n            }\n\n            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n            this._monthsShortRegex = this._monthsRegex;\n            this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n            this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n          } // FORMATTING\n\n\n          addFormatToken('Y', 0, 0, function () {\n            var y = this.year();\n            return y <= 9999 ? '' + y : '+' + y;\n          });\n          addFormatToken(0, ['YY', 2], 0, function () {\n            return this.year() % 100;\n          });\n          addFormatToken(0, ['YYYY', 4], 0, 'year');\n          addFormatToken(0, ['YYYYY', 5], 0, 'year');\n          addFormatToken(0, ['YYYYYY', 6, true], 0, 'year'); // ALIASES\n\n          addUnitAlias('year', 'y'); // PRIORITIES\n\n          addUnitPriority('year', 1); // PARSING\n\n          addRegexToken('Y', matchSigned);\n          addRegexToken('YY', match1to2, match2);\n          addRegexToken('YYYY', match1to4, match4);\n          addRegexToken('YYYYY', match1to6, match6);\n          addRegexToken('YYYYYY', match1to6, match6);\n          addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n          addParseToken('YYYY', function (input, array) {\n            array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n          });\n          addParseToken('YY', function (input, array) {\n            array[YEAR] = hooks.parseTwoDigitYear(input);\n          });\n          addParseToken('Y', function (input, array) {\n            array[YEAR] = parseInt(input, 10);\n          }); // HELPERS\n\n          function daysInYear(year) {\n            return isLeapYear(year) ? 366 : 365;\n          }\n\n          function isLeapYear(year) {\n            return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n          } // HOOKS\n\n\n          hooks.parseTwoDigitYear = function (input) {\n            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n          }; // MOMENTS\n\n\n          var getSetYear = makeGetSet('FullYear', true);\n\n          function getIsLeapYear() {\n            return isLeapYear(this.year());\n          }\n\n          function createDate(y, m, d, h, M, s, ms) {\n            // can't just apply() to create a date:\n            // https://stackoverflow.com/q/181348\n            var date = new Date(y, m, d, h, M, s, ms); // the date constructor remaps years 0-99 to 1900-1999\n\n            if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {\n              date.setFullYear(y);\n            }\n\n            return date;\n          }\n\n          function createUTCDate(y) {\n            var date = new Date(Date.UTC.apply(null, arguments)); // the Date.UTC function remaps years 0-99 to 1900-1999\n\n            if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {\n              date.setUTCFullYear(y);\n            }\n\n            return date;\n          } // start-of-first-week - start-of-year\n\n\n          function firstWeekOffset(year, dow, doy) {\n            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n                // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n            return -fwdlw + fwd - 1;\n          } // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n\n\n          function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n            var localWeekday = (7 + weekday - dow) % 7,\n                weekOffset = firstWeekOffset(year, dow, doy),\n                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n                resYear,\n                resDayOfYear;\n\n            if (dayOfYear <= 0) {\n              resYear = year - 1;\n              resDayOfYear = daysInYear(resYear) + dayOfYear;\n            } else if (dayOfYear > daysInYear(year)) {\n              resYear = year + 1;\n              resDayOfYear = dayOfYear - daysInYear(year);\n            } else {\n              resYear = year;\n              resDayOfYear = dayOfYear;\n            }\n\n            return {\n              year: resYear,\n              dayOfYear: resDayOfYear\n            };\n          }\n\n          function weekOfYear(mom, dow, doy) {\n            var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n                resWeek,\n                resYear;\n\n            if (week < 1) {\n              resYear = mom.year() - 1;\n              resWeek = week + weeksInYear(resYear, dow, doy);\n            } else if (week > weeksInYear(mom.year(), dow, doy)) {\n              resWeek = week - weeksInYear(mom.year(), dow, doy);\n              resYear = mom.year() + 1;\n            } else {\n              resYear = mom.year();\n              resWeek = week;\n            }\n\n            return {\n              week: resWeek,\n              year: resYear\n            };\n          }\n\n          function weeksInYear(year, dow, doy) {\n            var weekOffset = firstWeekOffset(year, dow, doy),\n                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n          } // FORMATTING\n\n\n          addFormatToken('w', ['ww', 2], 'wo', 'week');\n          addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek'); // ALIASES\n\n          addUnitAlias('week', 'w');\n          addUnitAlias('isoWeek', 'W'); // PRIORITIES\n\n          addUnitPriority('week', 5);\n          addUnitPriority('isoWeek', 5); // PARSING\n\n          addRegexToken('w', match1to2);\n          addRegexToken('ww', match1to2, match2);\n          addRegexToken('W', match1to2);\n          addRegexToken('WW', match1to2, match2);\n          addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n            week[token.substr(0, 1)] = toInt(input);\n          }); // HELPERS\n          // LOCALES\n\n          function localeWeek(mom) {\n            return weekOfYear(mom, this._week.dow, this._week.doy).week;\n          }\n\n          var defaultLocaleWeek = {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n          };\n\n          function localeFirstDayOfWeek() {\n            return this._week.dow;\n          }\n\n          function localeFirstDayOfYear() {\n            return this._week.doy;\n          } // MOMENTS\n\n\n          function getSetWeek(input) {\n            var week = this.localeData().week(this);\n            return input == null ? week : this.add((input - week) * 7, 'd');\n          }\n\n          function getSetISOWeek(input) {\n            var week = weekOfYear(this, 1, 4).week;\n            return input == null ? week : this.add((input - week) * 7, 'd');\n          } // FORMATTING\n\n\n          addFormatToken('d', 0, 'do', 'day');\n          addFormatToken('dd', 0, 0, function (format) {\n            return this.localeData().weekdaysMin(this, format);\n          });\n          addFormatToken('ddd', 0, 0, function (format) {\n            return this.localeData().weekdaysShort(this, format);\n          });\n          addFormatToken('dddd', 0, 0, function (format) {\n            return this.localeData().weekdays(this, format);\n          });\n          addFormatToken('e', 0, 0, 'weekday');\n          addFormatToken('E', 0, 0, 'isoWeekday'); // ALIASES\n\n          addUnitAlias('day', 'd');\n          addUnitAlias('weekday', 'e');\n          addUnitAlias('isoWeekday', 'E'); // PRIORITY\n\n          addUnitPriority('day', 11);\n          addUnitPriority('weekday', 11);\n          addUnitPriority('isoWeekday', 11); // PARSING\n\n          addRegexToken('d', match1to2);\n          addRegexToken('e', match1to2);\n          addRegexToken('E', match1to2);\n          addRegexToken('dd', function (isStrict, locale) {\n            return locale.weekdaysMinRegex(isStrict);\n          });\n          addRegexToken('ddd', function (isStrict, locale) {\n            return locale.weekdaysShortRegex(isStrict);\n          });\n          addRegexToken('dddd', function (isStrict, locale) {\n            return locale.weekdaysRegex(isStrict);\n          });\n          addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n            var weekday = config._locale.weekdaysParse(input, token, config._strict); // if we didn't get a weekday name, mark the date as invalid\n\n\n            if (weekday != null) {\n              week.d = weekday;\n            } else {\n              getParsingFlags(config).invalidWeekday = input;\n            }\n          });\n          addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n            week[token] = toInt(input);\n          }); // HELPERS\n\n          function parseWeekday(input, locale) {\n            if (typeof input !== 'string') {\n              return input;\n            }\n\n            if (!isNaN(input)) {\n              return parseInt(input, 10);\n            }\n\n            input = locale.weekdaysParse(input);\n\n            if (typeof input === 'number') {\n              return input;\n            }\n\n            return null;\n          }\n\n          function parseIsoWeekday(input, locale) {\n            if (typeof input === 'string') {\n              return locale.weekdaysParse(input) % 7 || 7;\n            }\n\n            return isNaN(input) ? null : input;\n          } // LOCALES\n\n\n          var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n\n          function localeWeekdays(m, format) {\n            if (!m) {\n              return isArray(this._weekdays) ? this._weekdays : this._weekdays['standalone'];\n            }\n\n            return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];\n          }\n\n          var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n\n          function localeWeekdaysShort(m) {\n            return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n          }\n\n          var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n\n          function localeWeekdaysMin(m) {\n            return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n          }\n\n          function handleStrictParse$1(weekdayName, format, strict) {\n            var i,\n                ii,\n                mom,\n                llc = weekdayName.toLocaleLowerCase();\n\n            if (!this._weekdaysParse) {\n              this._weekdaysParse = [];\n              this._shortWeekdaysParse = [];\n              this._minWeekdaysParse = [];\n\n              for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n              }\n            }\n\n            if (strict) {\n              if (format === 'dddd') {\n                ii = indexOf$1.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n              } else if (format === 'ddd') {\n                ii = indexOf$1.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n              } else {\n                ii = indexOf$1.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n              }\n            } else {\n              if (format === 'dddd') {\n                ii = indexOf$1.call(this._weekdaysParse, llc);\n\n                if (ii !== -1) {\n                  return ii;\n                }\n\n                ii = indexOf$1.call(this._shortWeekdaysParse, llc);\n\n                if (ii !== -1) {\n                  return ii;\n                }\n\n                ii = indexOf$1.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n              } else if (format === 'ddd') {\n                ii = indexOf$1.call(this._shortWeekdaysParse, llc);\n\n                if (ii !== -1) {\n                  return ii;\n                }\n\n                ii = indexOf$1.call(this._weekdaysParse, llc);\n\n                if (ii !== -1) {\n                  return ii;\n                }\n\n                ii = indexOf$1.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n              } else {\n                ii = indexOf$1.call(this._minWeekdaysParse, llc);\n\n                if (ii !== -1) {\n                  return ii;\n                }\n\n                ii = indexOf$1.call(this._weekdaysParse, llc);\n\n                if (ii !== -1) {\n                  return ii;\n                }\n\n                ii = indexOf$1.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n              }\n            }\n          }\n\n          function localeWeekdaysParse(weekdayName, format, strict) {\n            var i, mom, regex;\n\n            if (this._weekdaysParseExact) {\n              return handleStrictParse$1.call(this, weekdayName, format, strict);\n            }\n\n            if (!this._weekdaysParse) {\n              this._weekdaysParse = [];\n              this._minWeekdaysParse = [];\n              this._shortWeekdaysParse = [];\n              this._fullWeekdaysParse = [];\n            }\n\n            for (i = 0; i < 7; i++) {\n              // make the regex if we don't have it already\n              mom = createUTC([2000, 1]).day(i);\n\n              if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');\n              }\n\n              if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n              } // test the regex\n\n\n              if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n              } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n              } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n              } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n              }\n            }\n          } // MOMENTS\n\n\n          function getSetDayOfWeek(input) {\n            if (!this.isValid()) {\n              return input != null ? this : NaN;\n            }\n\n            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n\n            if (input != null) {\n              input = parseWeekday(input, this.localeData());\n              return this.add(input - day, 'd');\n            } else {\n              return day;\n            }\n          }\n\n          function getSetLocaleDayOfWeek(input) {\n            if (!this.isValid()) {\n              return input != null ? this : NaN;\n            }\n\n            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n            return input == null ? weekday : this.add(input - weekday, 'd');\n          }\n\n          function getSetISODayOfWeek(input) {\n            if (!this.isValid()) {\n              return input != null ? this : NaN;\n            } // behaves the same as moment#day except\n            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n            // as a setter, sunday should belong to the previous week.\n\n\n            if (input != null) {\n              var weekday = parseIsoWeekday(input, this.localeData());\n              return this.day(this.day() % 7 ? weekday : weekday - 7);\n            } else {\n              return this.day() || 7;\n            }\n          }\n\n          var defaultWeekdaysRegex = matchWord;\n\n          function weekdaysRegex(isStrict) {\n            if (this._weekdaysParseExact) {\n              if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n              }\n\n              if (isStrict) {\n                return this._weekdaysStrictRegex;\n              } else {\n                return this._weekdaysRegex;\n              }\n            } else {\n              if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n              }\n\n              return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;\n            }\n          }\n\n          var defaultWeekdaysShortRegex = matchWord;\n\n          function weekdaysShortRegex(isStrict) {\n            if (this._weekdaysParseExact) {\n              if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n              }\n\n              if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n              } else {\n                return this._weekdaysShortRegex;\n              }\n            } else {\n              if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n              }\n\n              return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n            }\n          }\n\n          var defaultWeekdaysMinRegex = matchWord;\n\n          function weekdaysMinRegex(isStrict) {\n            if (this._weekdaysParseExact) {\n              if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n              }\n\n              if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n              } else {\n                return this._weekdaysMinRegex;\n              }\n            } else {\n              if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n              }\n\n              return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n            }\n          }\n\n          function computeWeekdaysParse() {\n            function cmpLenRev(a, b) {\n              return b.length - a.length;\n            }\n\n            var minPieces = [],\n                shortPieces = [],\n                longPieces = [],\n                mixedPieces = [],\n                i,\n                mom,\n                minp,\n                shortp,\n                longp;\n\n            for (i = 0; i < 7; i++) {\n              // make the regex if we don't have it already\n              mom = createUTC([2000, 1]).day(i);\n              minp = this.weekdaysMin(mom, '');\n              shortp = this.weekdaysShort(mom, '');\n              longp = this.weekdays(mom, '');\n              minPieces.push(minp);\n              shortPieces.push(shortp);\n              longPieces.push(longp);\n              mixedPieces.push(minp);\n              mixedPieces.push(shortp);\n              mixedPieces.push(longp);\n            } // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n            // will match the longer piece.\n\n\n            minPieces.sort(cmpLenRev);\n            shortPieces.sort(cmpLenRev);\n            longPieces.sort(cmpLenRev);\n            mixedPieces.sort(cmpLenRev);\n\n            for (i = 0; i < 7; i++) {\n              shortPieces[i] = regexEscape(shortPieces[i]);\n              longPieces[i] = regexEscape(longPieces[i]);\n              mixedPieces[i] = regexEscape(mixedPieces[i]);\n            }\n\n            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n            this._weekdaysShortRegex = this._weekdaysRegex;\n            this._weekdaysMinRegex = this._weekdaysRegex;\n            this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n            this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n            this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n          } // FORMATTING\n\n\n          function hFormat() {\n            return this.hours() % 12 || 12;\n          }\n\n          function kFormat() {\n            return this.hours() || 24;\n          }\n\n          addFormatToken('H', ['HH', 2], 0, 'hour');\n          addFormatToken('h', ['hh', 2], 0, hFormat);\n          addFormatToken('k', ['kk', 2], 0, kFormat);\n          addFormatToken('hmm', 0, 0, function () {\n            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n          });\n          addFormatToken('hmmss', 0, 0, function () {\n            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);\n          });\n          addFormatToken('Hmm', 0, 0, function () {\n            return '' + this.hours() + zeroFill(this.minutes(), 2);\n          });\n          addFormatToken('Hmmss', 0, 0, function () {\n            return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);\n          });\n\n          function meridiem(token, lowercase) {\n            addFormatToken(token, 0, 0, function () {\n              return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n            });\n          }\n\n          meridiem('a', true);\n          meridiem('A', false); // ALIASES\n\n          addUnitAlias('hour', 'h'); // PRIORITY\n\n          addUnitPriority('hour', 13); // PARSING\n\n          function matchMeridiem(isStrict, locale) {\n            return locale._meridiemParse;\n          }\n\n          addRegexToken('a', matchMeridiem);\n          addRegexToken('A', matchMeridiem);\n          addRegexToken('H', match1to2);\n          addRegexToken('h', match1to2);\n          addRegexToken('k', match1to2);\n          addRegexToken('HH', match1to2, match2);\n          addRegexToken('hh', match1to2, match2);\n          addRegexToken('kk', match1to2, match2);\n          addRegexToken('hmm', match3to4);\n          addRegexToken('hmmss', match5to6);\n          addRegexToken('Hmm', match3to4);\n          addRegexToken('Hmmss', match5to6);\n          addParseToken(['H', 'HH'], HOUR);\n          addParseToken(['k', 'kk'], function (input, array, config) {\n            var kInput = toInt(input);\n            array[HOUR] = kInput === 24 ? 0 : kInput;\n          });\n          addParseToken(['a', 'A'], function (input, array, config) {\n            config._isPm = config._locale.isPM(input);\n            config._meridiem = input;\n          });\n          addParseToken(['h', 'hh'], function (input, array, config) {\n            array[HOUR] = toInt(input);\n            getParsingFlags(config).bigHour = true;\n          });\n          addParseToken('hmm', function (input, array, config) {\n            var pos = input.length - 2;\n            array[HOUR] = toInt(input.substr(0, pos));\n            array[MINUTE] = toInt(input.substr(pos));\n            getParsingFlags(config).bigHour = true;\n          });\n          addParseToken('hmmss', function (input, array, config) {\n            var pos1 = input.length - 4;\n            var pos2 = input.length - 2;\n            array[HOUR] = toInt(input.substr(0, pos1));\n            array[MINUTE] = toInt(input.substr(pos1, 2));\n            array[SECOND] = toInt(input.substr(pos2));\n            getParsingFlags(config).bigHour = true;\n          });\n          addParseToken('Hmm', function (input, array, config) {\n            var pos = input.length - 2;\n            array[HOUR] = toInt(input.substr(0, pos));\n            array[MINUTE] = toInt(input.substr(pos));\n          });\n          addParseToken('Hmmss', function (input, array, config) {\n            var pos1 = input.length - 4;\n            var pos2 = input.length - 2;\n            array[HOUR] = toInt(input.substr(0, pos1));\n            array[MINUTE] = toInt(input.substr(pos1, 2));\n            array[SECOND] = toInt(input.substr(pos2));\n          }); // LOCALES\n\n          function localeIsPM(input) {\n            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n            // Using charAt should be more compatible.\n            return (input + '').toLowerCase().charAt(0) === 'p';\n          }\n\n          var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n\n          function localeMeridiem(hours, minutes, isLower) {\n            if (hours > 11) {\n              return isLower ? 'pm' : 'PM';\n            } else {\n              return isLower ? 'am' : 'AM';\n            }\n          } // MOMENTS\n          // Setting the hour should keep the time, because the user explicitly\n          // specified which hour he wants. So trying to maintain the same hour (in\n          // a new timezone) makes sense. Adding/subtracting hours does not follow\n          // this rule.\n\n\n          var getSetHour = makeGetSet('Hours', true); // months\n          // week\n          // weekdays\n          // meridiem\n\n          var baseConfig = {\n            calendar: defaultCalendar,\n            longDateFormat: defaultLongDateFormat,\n            invalidDate: defaultInvalidDate,\n            ordinal: defaultOrdinal,\n            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n            relativeTime: defaultRelativeTime,\n            months: defaultLocaleMonths,\n            monthsShort: defaultLocaleMonthsShort,\n            week: defaultLocaleWeek,\n            weekdays: defaultLocaleWeekdays,\n            weekdaysMin: defaultLocaleWeekdaysMin,\n            weekdaysShort: defaultLocaleWeekdaysShort,\n            meridiemParse: defaultLocaleMeridiemParse\n          }; // internal storage for locale config files\n\n          var locales = {};\n          var localeFamilies = {};\n          var globalLocale;\n\n          function normalizeLocale(key) {\n            return key ? key.toLowerCase().replace('_', '-') : key;\n          } // pick the locale from the array\n          // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n          // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n\n\n          function chooseLocale(names) {\n            var i = 0,\n                j,\n                next,\n                locale,\n                split;\n\n            while (i < names.length) {\n              split = normalizeLocale(names[i]).split('-');\n              j = split.length;\n              next = normalizeLocale(names[i + 1]);\n              next = next ? next.split('-') : null;\n\n              while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n\n                if (locale) {\n                  return locale;\n                }\n\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                  //the next array item is better than a shallower substring of this one\n                  break;\n                }\n\n                j--;\n              }\n\n              i++;\n            }\n\n            return null;\n          }\n\n          function loadLocale(name) {\n            var oldLocale = null; // TODO: Find a better way to register and load all the locales in Node\n\n            if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {\n              try {\n                oldLocale = globalLocale._abbr;\n\n                __webpack_require__(120)(\"./\" + name); // because defineLocale currently also sets the global locale, we\n                // want to undo that for lazy loaded locales\n\n\n                getSetGlobalLocale(oldLocale);\n              } catch (e) {}\n            }\n\n            return locales[name];\n          } // This function will load locale and then set the global locale.  If\n          // no arguments are passed in, it will simply return the current global\n          // locale key.\n\n\n          function getSetGlobalLocale(key, values) {\n            var data;\n\n            if (key) {\n              if (isUndefined(values)) {\n                data = getLocale(key);\n              } else {\n                data = defineLocale(key, values);\n              }\n\n              if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n              }\n            }\n\n            return globalLocale._abbr;\n          }\n\n          function defineLocale(name, config) {\n            if (config !== null) {\n              var parentConfig = baseConfig;\n              config.abbr = name;\n\n              if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n              } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                  parentConfig = locales[config.parentLocale]._config;\n                } else {\n                  if (!localeFamilies[config.parentLocale]) {\n                    localeFamilies[config.parentLocale] = [];\n                  }\n\n                  localeFamilies[config.parentLocale].push({\n                    name: name,\n                    config: config\n                  });\n                  return null;\n                }\n              }\n\n              locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n              if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                  defineLocale(x.name, x.config);\n                });\n              } // backwards compat for now: also set the locale\n              // make sure we set the locale AFTER all child locales have been\n              // created, so we won't end up with the child locale set.\n\n\n              getSetGlobalLocale(name);\n              return locales[name];\n            } else {\n              // useful for testing\n              delete locales[name];\n              return null;\n            }\n          }\n\n          function updateLocale(name, config) {\n            if (config != null) {\n              var locale,\n                  parentConfig = baseConfig; // MERGE\n\n              if (locales[name] != null) {\n                parentConfig = locales[name]._config;\n              }\n\n              config = mergeConfigs(parentConfig, config);\n              locale = new Locale(config);\n              locale.parentLocale = locales[name];\n              locales[name] = locale; // backwards compat for now: also set the locale\n\n              getSetGlobalLocale(name);\n            } else {\n              // pass null for config to unupdate, useful for tests\n              if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                  locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                  delete locales[name];\n                }\n              }\n            }\n\n            return locales[name];\n          } // returns locale data\n\n\n          function getLocale(key) {\n            var locale;\n\n            if (key && key._locale && key._locale._abbr) {\n              key = key._locale._abbr;\n            }\n\n            if (!key) {\n              return globalLocale;\n            }\n\n            if (!isArray(key)) {\n              //short-circuit everything else\n              locale = loadLocale(key);\n\n              if (locale) {\n                return locale;\n              }\n\n              key = [key];\n            }\n\n            return chooseLocale(key);\n          }\n\n          function listLocales() {\n            return keys$1(locales);\n          }\n\n          function checkOverflow(m) {\n            var overflow;\n            var a = m._a;\n\n            if (a && getParsingFlags(m).overflow === -2) {\n              overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;\n\n              if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n              }\n\n              if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n              }\n\n              if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n              }\n\n              getParsingFlags(m).overflow = overflow;\n            }\n\n            return m;\n          } // iso 8601 regex\n          // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n\n\n          var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n          var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n          var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n          var isoDates = [['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/], ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/], ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/], ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false], ['YYYY-DDD', /\\d{4}-\\d{3}/], ['YYYY-MM', /\\d{4}-\\d\\d/, false], ['YYYYYYMMDD', /[+-]\\d{10}/], ['YYYYMMDD', /\\d{8}/], // YYYYMM is NOT allowed by the standard\n          ['GGGG[W]WWE', /\\d{4}W\\d{3}/], ['GGGG[W]WW', /\\d{4}W\\d{2}/, false], ['YYYYDDD', /\\d{7}/]]; // iso time formats and regexes\n\n          var isoTimes = [['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/], ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/], ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/], ['HH:mm', /\\d\\d:\\d\\d/], ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/], ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/], ['HHmmss', /\\d\\d\\d\\d\\d\\d/], ['HHmm', /\\d\\d\\d\\d/], ['HH', /\\d\\d/]];\n          var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i; // date from iso format\n\n          function configFromISO(config) {\n            var i,\n                l,\n                string = config._i,\n                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n                allowTime,\n                dateFormat,\n                timeFormat,\n                tzFormat;\n\n            if (match) {\n              getParsingFlags(config).iso = true;\n\n              for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                  dateFormat = isoDates[i][0];\n                  allowTime = isoDates[i][2] !== false;\n                  break;\n                }\n              }\n\n              if (dateFormat == null) {\n                config._isValid = false;\n                return;\n              }\n\n              if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                  if (isoTimes[i][1].exec(match[3])) {\n                    // match[2] should be 'T' or space\n                    timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                    break;\n                  }\n                }\n\n                if (timeFormat == null) {\n                  config._isValid = false;\n                  return;\n                }\n              }\n\n              if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n              }\n\n              if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                  tzFormat = 'Z';\n                } else {\n                  config._isValid = false;\n                  return;\n                }\n              }\n\n              config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n              configFromStringAndFormat(config);\n            } else {\n              config._isValid = false;\n            }\n          } // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n\n\n          var basicRfcRegex = /^((?:Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d?\\d\\s(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(?:\\d\\d)?\\d\\d\\s)(\\d\\d:\\d\\d)(\\:\\d\\d)?(\\s(?:UT|GMT|[ECMP][SD]T|[A-IK-Za-ik-z]|[+-]\\d{4}))$/; // date and time from ref 2822 format\n\n          function configFromRFC2822(config) {\n            var string, match, dayFormat, dateFormat, timeFormat, tzFormat;\n            var timezones = {\n              ' GMT': ' +0000',\n              ' EDT': ' -0400',\n              ' EST': ' -0500',\n              ' CDT': ' -0500',\n              ' CST': ' -0600',\n              ' MDT': ' -0600',\n              ' MST': ' -0700',\n              ' PDT': ' -0700',\n              ' PST': ' -0800'\n            };\n            var military = 'YXWVUTSRQPONZABCDEFGHIKLM';\n            var timezone, timezoneIndex;\n            string = config._i.replace(/\\([^\\)]*\\)|[\\n\\t]/g, ' ') // Remove comments and folding whitespace\n            .replace(/(\\s\\s+)/g, ' ') // Replace multiple-spaces with a single space\n            .replace(/^\\s|\\s$/g, ''); // Remove leading and trailing spaces\n\n            match = basicRfcRegex.exec(string);\n\n            if (match) {\n              dayFormat = match[1] ? 'ddd' + (match[1].length === 5 ? ', ' : ' ') : '';\n              dateFormat = 'D MMM ' + (match[2].length > 10 ? 'YYYY ' : 'YY ');\n              timeFormat = 'HH:mm' + (match[4] ? ':ss' : ''); // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n\n              if (match[1]) {\n                // day of week given\n                var momentDate = new Date(match[2]);\n                var momentDay = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'][momentDate.getDay()];\n\n                if (match[1].substr(0, 3) !== momentDay) {\n                  getParsingFlags(config).weekdayMismatch = true;\n                  config._isValid = false;\n                  return;\n                }\n              }\n\n              switch (match[5].length) {\n                case 2:\n                  // military\n                  if (timezoneIndex === 0) {\n                    timezone = ' +0000';\n                  } else {\n                    timezoneIndex = military.indexOf(match[5][1].toUpperCase()) - 12;\n                    timezone = (timezoneIndex < 0 ? ' -' : ' +') + ('' + timezoneIndex).replace(/^-?/, '0').match(/..$/)[0] + '00';\n                  }\n\n                  break;\n\n                case 4:\n                  // Zone\n                  timezone = timezones[match[5]];\n                  break;\n\n                default:\n                  // UT or +/-9999\n                  timezone = timezones[' GMT'];\n              }\n\n              match[5] = timezone;\n              config._i = match.splice(1).join('');\n              tzFormat = ' ZZ';\n              config._f = dayFormat + dateFormat + timeFormat + tzFormat;\n              configFromStringAndFormat(config);\n              getParsingFlags(config).rfc2822 = true;\n            } else {\n              config._isValid = false;\n            }\n          } // date from iso format or fallback\n\n\n          function configFromString(config) {\n            var matched = aspNetJsonRegex.exec(config._i);\n\n            if (matched !== null) {\n              config._d = new Date(+matched[1]);\n              return;\n            }\n\n            configFromISO(config);\n\n            if (config._isValid === false) {\n              delete config._isValid;\n            } else {\n              return;\n            }\n\n            configFromRFC2822(config);\n\n            if (config._isValid === false) {\n              delete config._isValid;\n            } else {\n              return;\n            } // Final attempt, use Input Fallback\n\n\n            hooks.createFromInputFallback(config);\n          }\n\n          hooks.createFromInputFallback = deprecate('value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n          }); // Pick the first defined of two or three arguments.\n\n          function defaults(a, b, c) {\n            if (a != null) {\n              return a;\n            }\n\n            if (b != null) {\n              return b;\n            }\n\n            return c;\n          }\n\n          function currentDateArray(config) {\n            // hooks is actually the exported moment object\n            var nowValue = new Date(hooks.now());\n\n            if (config._useUTC) {\n              return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n            }\n\n            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n          } // convert an array to a date.\n          // the array should mirror the parameters below\n          // note: all values past the year are optional and will default to the lowest possible value.\n          // [year, month, day , hour, minute, second, millisecond]\n\n\n          function configFromArray(config) {\n            var i,\n                date,\n                input = [],\n                currentDate,\n                yearToUse;\n\n            if (config._d) {\n              return;\n            }\n\n            currentDate = currentDateArray(config); //compute day of the year from weeks and weekdays\n\n            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n              dayOfYearFromWeekInfo(config);\n            } //if the day of the year is set, figure out what it is\n\n\n            if (config._dayOfYear != null) {\n              yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n              if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n              }\n\n              date = createUTCDate(yearToUse, 0, config._dayOfYear);\n              config._a[MONTH] = date.getUTCMonth();\n              config._a[DATE] = date.getUTCDate();\n            } // Default to current date.\n            // * if no year, month, day of month are given, default to today\n            // * if day of month is given, default month and year\n            // * if month is given, default only year\n            // * if year is given, don't default anything\n\n\n            for (i = 0; i < 3 && config._a[i] == null; ++i) {\n              config._a[i] = input[i] = currentDate[i];\n            } // Zero out whatever was not defaulted, including time\n\n\n            for (; i < 7; i++) {\n              config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];\n            } // Check for 24:00:00.000\n\n\n            if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {\n              config._nextDay = true;\n              config._a[HOUR] = 0;\n            }\n\n            config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input); // Apply timezone offset from input. The actual utcOffset can be changed\n            // with parseZone.\n\n            if (config._tzm != null) {\n              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n            }\n\n            if (config._nextDay) {\n              config._a[HOUR] = 24;\n            }\n          }\n\n          function dayOfYearFromWeekInfo(config) {\n            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n            w = config._w;\n\n            if (w.GG != null || w.W != null || w.E != null) {\n              dow = 1;\n              doy = 4; // TODO: We need to take the current isoWeekYear, but that depends on\n              // how we interpret now (local, utc, fixed offset). So create\n              // a now version of current config (take local/utc/offset flags, and\n              // create now).\n\n              weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n              week = defaults(w.W, 1);\n              weekday = defaults(w.E, 1);\n\n              if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n              }\n            } else {\n              dow = config._locale._week.dow;\n              doy = config._locale._week.doy;\n              var curWeek = weekOfYear(createLocal(), dow, doy);\n              weekYear = defaults(w.gg, config._a[YEAR], curWeek.year); // Default to current week.\n\n              week = defaults(w.w, curWeek.week);\n\n              if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n\n                if (weekday < 0 || weekday > 6) {\n                  weekdayOverflow = true;\n                }\n              } else if (w.e != null) {\n                // local weekday -- counting starts from begining of week\n                weekday = w.e + dow;\n\n                if (w.e < 0 || w.e > 6) {\n                  weekdayOverflow = true;\n                }\n              } else {\n                // default to begining of week\n                weekday = dow;\n              }\n            }\n\n            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n              getParsingFlags(config)._overflowWeeks = true;\n            } else if (weekdayOverflow != null) {\n              getParsingFlags(config)._overflowWeekday = true;\n            } else {\n              temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n              config._a[YEAR] = temp.year;\n              config._dayOfYear = temp.dayOfYear;\n            }\n          } // constant that refers to the ISO standard\n\n\n          hooks.ISO_8601 = function () {}; // constant that refers to the RFC 2822 form\n\n\n          hooks.RFC_2822 = function () {}; // date from string and format string\n\n\n          function configFromStringAndFormat(config) {\n            // TODO: Move this to another part of the creation flow to prevent circular deps\n            if (config._f === hooks.ISO_8601) {\n              configFromISO(config);\n              return;\n            }\n\n            if (config._f === hooks.RFC_2822) {\n              configFromRFC2822(config);\n              return;\n            }\n\n            config._a = [];\n            getParsingFlags(config).empty = true; // This array is used to make a Date, either with `new Date` or `Date.UTC`\n\n            var string = '' + config._i,\n                i,\n                parsedInput,\n                tokens,\n                token,\n                skipped,\n                stringLength = string.length,\n                totalParsedInputLength = 0;\n            tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n            for (i = 0; i < tokens.length; i++) {\n              token = tokens[i];\n              parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0]; // console.log('token', token, 'parsedInput', parsedInput,\n              //         'regex', getParseRegexForToken(token, config));\n\n              if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n\n                if (skipped.length > 0) {\n                  getParsingFlags(config).unusedInput.push(skipped);\n                }\n\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n              } // don't parse if it's not a known token\n\n\n              if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                  getParsingFlags(config).empty = false;\n                } else {\n                  getParsingFlags(config).unusedTokens.push(token);\n                }\n\n                addTimeToArrayFromToken(token, parsedInput, config);\n              } else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n              }\n            } // add remaining unparsed input length to the string\n\n\n            getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n\n            if (string.length > 0) {\n              getParsingFlags(config).unusedInput.push(string);\n            } // clear _12h flag if hour is <= 12\n\n\n            if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {\n              getParsingFlags(config).bigHour = undefined;\n            }\n\n            getParsingFlags(config).parsedDateParts = config._a.slice(0);\n            getParsingFlags(config).meridiem = config._meridiem; // handle meridiem\n\n            config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n            configFromArray(config);\n            checkOverflow(config);\n          }\n\n          function meridiemFixWrap(locale, hour, meridiem) {\n            var isPm;\n\n            if (meridiem == null) {\n              // nothing to do\n              return hour;\n            }\n\n            if (locale.meridiemHour != null) {\n              return locale.meridiemHour(hour, meridiem);\n            } else if (locale.isPM != null) {\n              // Fallback\n              isPm = locale.isPM(meridiem);\n\n              if (isPm && hour < 12) {\n                hour += 12;\n              }\n\n              if (!isPm && hour === 12) {\n                hour = 0;\n              }\n\n              return hour;\n            } else {\n              // this is not supposed to happen\n              return hour;\n            }\n          } // date from string and array of format strings\n\n\n          function configFromStringAndArray(config) {\n            var tempConfig, bestMoment, scoreToBeat, i, currentScore;\n\n            if (config._f.length === 0) {\n              getParsingFlags(config).invalidFormat = true;\n              config._d = new Date(NaN);\n              return;\n            }\n\n            for (i = 0; i < config._f.length; i++) {\n              currentScore = 0;\n              tempConfig = copyConfig({}, config);\n\n              if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n              }\n\n              tempConfig._f = config._f[i];\n              configFromStringAndFormat(tempConfig);\n\n              if (!isValid(tempConfig)) {\n                continue;\n              } // if there is any input that was not parsed add a penalty for that format\n\n\n              currentScore += getParsingFlags(tempConfig).charsLeftOver; //or tokens\n\n              currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n              getParsingFlags(tempConfig).score = currentScore;\n\n              if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n              }\n            }\n\n            extend(config, bestMoment || tempConfig);\n          }\n\n          function configFromObject(config) {\n            if (config._d) {\n              return;\n            }\n\n            var i = normalizeObjectUnits(config._i);\n            config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n              return obj && parseInt(obj, 10);\n            });\n            configFromArray(config);\n          }\n\n          function createFromConfig(config) {\n            var res = new Moment(checkOverflow(prepareConfig(config)));\n\n            if (res._nextDay) {\n              // Adding is smart enough around DST\n              res.add(1, 'd');\n              res._nextDay = undefined;\n            }\n\n            return res;\n          }\n\n          function prepareConfig(config) {\n            var input = config._i,\n                format = config._f;\n            config._locale = config._locale || getLocale(config._l);\n\n            if (input === null || format === undefined && input === '') {\n              return createInvalid({\n                nullInput: true\n              });\n            }\n\n            if (typeof input === 'string') {\n              config._i = input = config._locale.preparse(input);\n            }\n\n            if (isMoment(input)) {\n              return new Moment(checkOverflow(input));\n            } else if (isDate(input)) {\n              config._d = input;\n            } else if (isArray(format)) {\n              configFromStringAndArray(config);\n            } else if (format) {\n              configFromStringAndFormat(config);\n            } else {\n              configFromInput(config);\n            }\n\n            if (!isValid(config)) {\n              config._d = null;\n            }\n\n            return config;\n          }\n\n          function configFromInput(config) {\n            var input = config._i;\n\n            if (isUndefined(input)) {\n              config._d = new Date(hooks.now());\n            } else if (isDate(input)) {\n              config._d = new Date(input.valueOf());\n            } else if (typeof input === 'string') {\n              configFromString(config);\n            } else if (isArray(input)) {\n              config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n              });\n              configFromArray(config);\n            } else if (isObject(input)) {\n              configFromObject(config);\n            } else if (isNumber(input)) {\n              // from milliseconds\n              config._d = new Date(input);\n            } else {\n              hooks.createFromInputFallback(config);\n            }\n          }\n\n          function createLocalOrUTC(input, format, locale, strict, isUTC) {\n            var c = {};\n\n            if (locale === true || locale === false) {\n              strict = locale;\n              locale = undefined;\n            }\n\n            if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {\n              input = undefined;\n            } // object construction must be done this way.\n            // https://github.com/moment/moment/issues/1423\n\n\n            c._isAMomentObject = true;\n            c._useUTC = c._isUTC = isUTC;\n            c._l = locale;\n            c._i = input;\n            c._f = format;\n            c._strict = strict;\n            return createFromConfig(c);\n          }\n\n          function createLocal(input, format, locale, strict) {\n            return createLocalOrUTC(input, format, locale, strict, false);\n          }\n\n          var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {\n            var other = createLocal.apply(null, arguments);\n\n            if (this.isValid() && other.isValid()) {\n              return other < this ? this : other;\n            } else {\n              return createInvalid();\n            }\n          });\n          var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {\n            var other = createLocal.apply(null, arguments);\n\n            if (this.isValid() && other.isValid()) {\n              return other > this ? this : other;\n            } else {\n              return createInvalid();\n            }\n          }); // Pick a moment m from moments so that m[fn](other) is true for all\n          // other. This relies on the function fn to be transitive.\n          //\n          // moments should either be an array of moment objects or an array, whose\n          // first element is an array of moment objects.\n\n          function pickBy(fn, moments) {\n            var res, i;\n\n            if (moments.length === 1 && isArray(moments[0])) {\n              moments = moments[0];\n            }\n\n            if (!moments.length) {\n              return createLocal();\n            }\n\n            res = moments[0];\n\n            for (i = 1; i < moments.length; ++i) {\n              if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n              }\n            }\n\n            return res;\n          } // TODO: Use [].sort instead?\n\n\n          function min() {\n            var args = [].slice.call(arguments, 0);\n            return pickBy('isBefore', args);\n          }\n\n          function max() {\n            var args = [].slice.call(arguments, 0);\n            return pickBy('isAfter', args);\n          }\n\n          var now = function now() {\n            return Date.now ? Date.now() : +new Date();\n          };\n\n          var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\n          function isDurationValid(m) {\n            for (var key in m) {\n              if (!(ordering.indexOf(key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n                return false;\n              }\n            }\n\n            var unitHasDecimal = false;\n\n            for (var i = 0; i < ordering.length; ++i) {\n              if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                  return false; // only allow non-integers for smallest unit\n                }\n\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                  unitHasDecimal = true;\n                }\n              }\n            }\n\n            return true;\n          }\n\n          function isValid$1() {\n            return this._isValid;\n          }\n\n          function createInvalid$1() {\n            return createDuration(NaN);\n          }\n\n          function Duration(duration) {\n            var normalizedInput = normalizeObjectUnits(duration),\n                years = normalizedInput.year || 0,\n                quarters = normalizedInput.quarter || 0,\n                months = normalizedInput.month || 0,\n                weeks = normalizedInput.week || 0,\n                days = normalizedInput.day || 0,\n                hours = normalizedInput.hour || 0,\n                minutes = normalizedInput.minute || 0,\n                seconds = normalizedInput.second || 0,\n                milliseconds = normalizedInput.millisecond || 0;\n            this._isValid = isDurationValid(normalizedInput); // representation for dateAddRemove\n\n            this._milliseconds = +milliseconds + seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n            // Because of dateAddRemove treats 24 hours as different from a\n            // day when working around DST, we need to store them separately\n\n            this._days = +days + weeks * 7; // It is impossible translate months into days without knowing\n            // which months you are are talking about, so we have to store\n            // it separately.\n\n            this._months = +months + quarters * 3 + years * 12;\n            this._data = {};\n            this._locale = getLocale();\n\n            this._bubble();\n          }\n\n          function isDuration(obj) {\n            return obj instanceof Duration;\n          }\n\n          function absRound(number) {\n            if (number < 0) {\n              return Math.round(-1 * number) * -1;\n            } else {\n              return Math.round(number);\n            }\n          } // FORMATTING\n\n\n          function offset(token, separator) {\n            addFormatToken(token, 0, 0, function () {\n              var offset = this.utcOffset();\n              var sign = '+';\n\n              if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n              }\n\n              return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);\n            });\n          }\n\n          offset('Z', ':');\n          offset('ZZ', ''); // PARSING\n\n          addRegexToken('Z', matchShortOffset);\n          addRegexToken('ZZ', matchShortOffset);\n          addParseToken(['Z', 'ZZ'], function (input, array, config) {\n            config._useUTC = true;\n            config._tzm = offsetFromString(matchShortOffset, input);\n          }); // HELPERS\n          // timezone chunker\n          // '+10:00' > ['10',  '00']\n          // '-1530'  > ['-15', '30']\n\n          var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n          function offsetFromString(matcher, string) {\n            var matches = (string || '').match(matcher);\n\n            if (matches === null) {\n              return null;\n            }\n\n            var chunk = matches[matches.length - 1] || [];\n            var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n            var minutes = +(parts[1] * 60) + toInt(parts[2]);\n            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;\n          } // Return a moment from input, that is local/utc/zone equivalent to model.\n\n\n          function cloneWithOffset(input, model) {\n            var res, diff;\n\n            if (model._isUTC) {\n              res = model.clone();\n              diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf(); // Use low-level api, because this fn is low-level api.\n\n              res._d.setTime(res._d.valueOf() + diff);\n\n              hooks.updateOffset(res, false);\n              return res;\n            } else {\n              return createLocal(input).local();\n            }\n          }\n\n          function getDateOffset(m) {\n            // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n            // https://github.com/moment/moment/pull/1871\n            return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n          } // HOOKS\n          // This function will be called whenever a moment is mutated.\n          // It is intended to keep the offset in sync with the timezone.\n\n\n          hooks.updateOffset = function () {}; // MOMENTS\n          // keepLocalTime = true means only change the timezone, without\n          // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n          // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n          // +0200, so we adjust the time as needed, to be valid.\n          //\n          // Keeping the time actually adds/subtracts (one hour)\n          // from the actual represented time. That is why we call updateOffset\n          // a second time. In case it wants us to change the offset again\n          // _changeInProgress == true case, then we have to adjust, because\n          // there is no such time in the given timezone.\n\n\n          function getSetOffset(input, keepLocalTime, keepMinutes) {\n            var offset = this._offset || 0,\n                localAdjust;\n\n            if (!this.isValid()) {\n              return input != null ? this : NaN;\n            }\n\n            if (input != null) {\n              if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n\n                if (input === null) {\n                  return this;\n                }\n              } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n              }\n\n              if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n              }\n\n              this._offset = input;\n              this._isUTC = true;\n\n              if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n              }\n\n              if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                  addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                  this._changeInProgress = true;\n                  hooks.updateOffset(this, true);\n                  this._changeInProgress = null;\n                }\n              }\n\n              return this;\n            } else {\n              return this._isUTC ? offset : getDateOffset(this);\n            }\n          }\n\n          function getSetZone(input, keepLocalTime) {\n            if (input != null) {\n              if (typeof input !== 'string') {\n                input = -input;\n              }\n\n              this.utcOffset(input, keepLocalTime);\n              return this;\n            } else {\n              return -this.utcOffset();\n            }\n          }\n\n          function setOffsetToUTC(keepLocalTime) {\n            return this.utcOffset(0, keepLocalTime);\n          }\n\n          function setOffsetToLocal(keepLocalTime) {\n            if (this._isUTC) {\n              this.utcOffset(0, keepLocalTime);\n              this._isUTC = false;\n\n              if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n              }\n            }\n\n            return this;\n          }\n\n          function setOffsetToParsedOffset() {\n            if (this._tzm != null) {\n              this.utcOffset(this._tzm, false, true);\n            } else if (typeof this._i === 'string') {\n              var tZone = offsetFromString(matchOffset, this._i);\n\n              if (tZone != null) {\n                this.utcOffset(tZone);\n              } else {\n                this.utcOffset(0, true);\n              }\n            }\n\n            return this;\n          }\n\n          function hasAlignedHourOffset(input) {\n            if (!this.isValid()) {\n              return false;\n            }\n\n            input = input ? createLocal(input).utcOffset() : 0;\n            return (this.utcOffset() - input) % 60 === 0;\n          }\n\n          function isDaylightSavingTime() {\n            return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();\n          }\n\n          function isDaylightSavingTimeShifted() {\n            if (!isUndefined(this._isDSTShifted)) {\n              return this._isDSTShifted;\n            }\n\n            var c = {};\n            copyConfig(c, this);\n            c = prepareConfig(c);\n\n            if (c._a) {\n              var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n              this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;\n            } else {\n              this._isDSTShifted = false;\n            }\n\n            return this._isDSTShifted;\n          }\n\n          function isLocal() {\n            return this.isValid() ? !this._isUTC : false;\n          }\n\n          function isUtcOffset() {\n            return this.isValid() ? this._isUTC : false;\n          }\n\n          function isUtc() {\n            return this.isValid() ? this._isUTC && this._offset === 0 : false;\n          } // ASP.NET json date format regex\n\n\n          var aspNetRegex = /^(\\-)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/; // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n          // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n          // and further modified to allow for strings containing both week and day\n\n          var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;\n\n          function createDuration(input, key) {\n            var duration = input,\n                // matching against regexp is expensive, do it on demand\n            match = null,\n                sign,\n                ret,\n                diffRes;\n\n            if (isDuration(input)) {\n              duration = {\n                ms: input._milliseconds,\n                d: input._days,\n                M: input._months\n              };\n            } else if (isNumber(input)) {\n              duration = {};\n\n              if (key) {\n                duration[key] = input;\n              } else {\n                duration.milliseconds = input;\n              }\n            } else if (!!(match = aspNetRegex.exec(input))) {\n              sign = match[1] === '-' ? -1 : 1;\n              duration = {\n                y: 0,\n                d: toInt(match[DATE]) * sign,\n                h: toInt(match[HOUR]) * sign,\n                m: toInt(match[MINUTE]) * sign,\n                s: toInt(match[SECOND]) * sign,\n                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n\n              };\n            } else if (!!(match = isoRegex.exec(input))) {\n              sign = match[1] === '-' ? -1 : 1;\n              duration = {\n                y: parseIso(match[2], sign),\n                M: parseIso(match[3], sign),\n                w: parseIso(match[4], sign),\n                d: parseIso(match[5], sign),\n                h: parseIso(match[6], sign),\n                m: parseIso(match[7], sign),\n                s: parseIso(match[8], sign)\n              };\n            } else if (duration == null) {\n              // checks for null or undefined\n              duration = {};\n            } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n              diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n              duration = {};\n              duration.ms = diffRes.milliseconds;\n              duration.M = diffRes.months;\n            }\n\n            ret = new Duration(duration);\n\n            if (isDuration(input) && hasOwnProp(input, '_locale')) {\n              ret._locale = input._locale;\n            }\n\n            return ret;\n          }\n\n          createDuration.fn = Duration.prototype;\n          createDuration.invalid = createInvalid$1;\n\n          function parseIso(inp, sign) {\n            // We'd normally use ~~inp for this, but unfortunately it also\n            // converts floats to ints.\n            // inp may be undefined, so careful calling replace on it.\n            var res = inp && parseFloat(inp.replace(',', '.')); // apply sign while we're at it\n\n            return (isNaN(res) ? 0 : res) * sign;\n          }\n\n          function positiveMomentsDifference(base, other) {\n            var res = {\n              milliseconds: 0,\n              months: 0\n            };\n            res.months = other.month() - base.month() + (other.year() - base.year()) * 12;\n\n            if (base.clone().add(res.months, 'M').isAfter(other)) {\n              --res.months;\n            }\n\n            res.milliseconds = +other - +base.clone().add(res.months, 'M');\n            return res;\n          }\n\n          function momentsDifference(base, other) {\n            var res;\n\n            if (!(base.isValid() && other.isValid())) {\n              return {\n                milliseconds: 0,\n                months: 0\n              };\n            }\n\n            other = cloneWithOffset(other, base);\n\n            if (base.isBefore(other)) {\n              res = positiveMomentsDifference(base, other);\n            } else {\n              res = positiveMomentsDifference(other, base);\n              res.milliseconds = -res.milliseconds;\n              res.months = -res.months;\n            }\n\n            return res;\n          } // TODO: remove 'name' arg after deprecation is removed\n\n\n          function createAdder(direction, name) {\n            return function (val, period) {\n              var dur, tmp; //invert the arguments, but complain about it\n\n              if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val;\n                val = period;\n                period = tmp;\n              }\n\n              val = typeof val === 'string' ? +val : val;\n              dur = createDuration(val, period);\n              addSubtract(this, dur, direction);\n              return this;\n            };\n          }\n\n          function addSubtract(mom, duration, isAdding, updateOffset) {\n            var milliseconds = duration._milliseconds,\n                days = absRound(duration._days),\n                months = absRound(duration._months);\n\n            if (!mom.isValid()) {\n              // No op\n              return;\n            }\n\n            updateOffset = updateOffset == null ? true : updateOffset;\n\n            if (milliseconds) {\n              mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n            }\n\n            if (days) {\n              set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n            }\n\n            if (months) {\n              setMonth(mom, get(mom, 'Month') + months * isAdding);\n            }\n\n            if (updateOffset) {\n              hooks.updateOffset(mom, days || months);\n            }\n          }\n\n          var add = createAdder(1, 'add');\n          var subtract = createAdder(-1, 'subtract');\n\n          function getCalendarFormat(myMoment, now) {\n            var diff = myMoment.diff(now, 'days', true);\n            return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';\n          }\n\n          function calendar$1(time, formats) {\n            // We want to compare the start of today, vs this.\n            // Getting start-of-today depends on whether we're local/utc/offset or not.\n            var now = time || createLocal(),\n                sod = cloneWithOffset(now, this).startOf('day'),\n                format = hooks.calendarFormat(this, sod) || 'sameElse';\n            var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n            return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n          }\n\n          function clone() {\n            return new Moment(this);\n          }\n\n          function isAfter(input, units) {\n            var localInput = isMoment(input) ? input : createLocal(input);\n\n            if (!(this.isValid() && localInput.isValid())) {\n              return false;\n            }\n\n            units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n\n            if (units === 'millisecond') {\n              return this.valueOf() > localInput.valueOf();\n            } else {\n              return localInput.valueOf() < this.clone().startOf(units).valueOf();\n            }\n          }\n\n          function isBefore(input, units) {\n            var localInput = isMoment(input) ? input : createLocal(input);\n\n            if (!(this.isValid() && localInput.isValid())) {\n              return false;\n            }\n\n            units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');\n\n            if (units === 'millisecond') {\n              return this.valueOf() < localInput.valueOf();\n            } else {\n              return this.clone().endOf(units).valueOf() < localInput.valueOf();\n            }\n          }\n\n          function isBetween(from, to, units, inclusivity) {\n            inclusivity = inclusivity || '()';\n            return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));\n          }\n\n          function isSame(input, units) {\n            var localInput = isMoment(input) ? input : createLocal(input),\n                inputMs;\n\n            if (!(this.isValid() && localInput.isValid())) {\n              return false;\n            }\n\n            units = normalizeUnits(units || 'millisecond');\n\n            if (units === 'millisecond') {\n              return this.valueOf() === localInput.valueOf();\n            } else {\n              inputMs = localInput.valueOf();\n              return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n            }\n          }\n\n          function isSameOrAfter(input, units) {\n            return this.isSame(input, units) || this.isAfter(input, units);\n          }\n\n          function isSameOrBefore(input, units) {\n            return this.isSame(input, units) || this.isBefore(input, units);\n          }\n\n          function diff(input, units, asFloat) {\n            var that, zoneDelta, delta, output;\n\n            if (!this.isValid()) {\n              return NaN;\n            }\n\n            that = cloneWithOffset(input, this);\n\n            if (!that.isValid()) {\n              return NaN;\n            }\n\n            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n            units = normalizeUnits(units);\n\n            if (units === 'year' || units === 'month' || units === 'quarter') {\n              output = monthDiff(this, that);\n\n              if (units === 'quarter') {\n                output = output / 3;\n              } else if (units === 'year') {\n                output = output / 12;\n              }\n            } else {\n              delta = this - that;\n              output = units === 'second' ? delta / 1e3 : // 1000\n              units === 'minute' ? delta / 6e4 : // 1000 * 60\n              units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60\n              units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst\n              units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst\n              delta;\n            }\n\n            return asFloat ? output : absFloor(output);\n          }\n\n          function monthDiff(a, b) {\n            // difference in months\n            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),\n                // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n                anchor2,\n                adjust;\n\n            if (b - anchor < 0) {\n              anchor2 = a.clone().add(wholeMonthDiff - 1, 'months'); // linear across the month\n\n              adjust = (b - anchor) / (anchor - anchor2);\n            } else {\n              anchor2 = a.clone().add(wholeMonthDiff + 1, 'months'); // linear across the month\n\n              adjust = (b - anchor) / (anchor2 - anchor);\n            } //check for negative zero, return zero if negative zero\n\n\n            return -(wholeMonthDiff + adjust) || 0;\n          }\n\n          hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n          hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n          function toString() {\n            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n          }\n\n          function toISOString() {\n            if (!this.isValid()) {\n              return null;\n            }\n\n            var m = this.clone().utc();\n\n            if (m.year() < 0 || m.year() > 9999) {\n              return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n            }\n\n            if (isFunction(Date.prototype.toISOString)) {\n              // native implementation is ~50x faster, use it when we can\n              return this.toDate().toISOString();\n            }\n\n            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');\n          }\n          /**\n           * Return a human readable representation of a moment that can\n           * also be evaluated to get a new moment which is the same\n           *\n           * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n           */\n\n\n          function inspect() {\n            if (!this.isValid()) {\n              return 'moment.invalid(/* ' + this._i + ' */)';\n            }\n\n            var func = 'moment';\n            var zone = '';\n\n            if (!this.isLocal()) {\n              func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n              zone = 'Z';\n            }\n\n            var prefix = '[' + func + '(\"]';\n            var year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';\n            var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n            var suffix = zone + '[\")]';\n            return this.format(prefix + year + datetime + suffix);\n          }\n\n          function format(inputString) {\n            if (!inputString) {\n              inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n            }\n\n            var output = formatMoment(this, inputString);\n            return this.localeData().postformat(output);\n          }\n\n          function from(time, withoutSuffix) {\n            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {\n              return createDuration({\n                to: this,\n                from: time\n              }).locale(this.locale()).humanize(!withoutSuffix);\n            } else {\n              return this.localeData().invalidDate();\n            }\n          }\n\n          function fromNow(withoutSuffix) {\n            return this.from(createLocal(), withoutSuffix);\n          }\n\n          function to(time, withoutSuffix) {\n            if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {\n              return createDuration({\n                from: this,\n                to: time\n              }).locale(this.locale()).humanize(!withoutSuffix);\n            } else {\n              return this.localeData().invalidDate();\n            }\n          }\n\n          function toNow(withoutSuffix) {\n            return this.to(createLocal(), withoutSuffix);\n          } // If passed a locale key, it will set the locale for this\n          // instance.  Otherwise, it will return the locale configuration\n          // variables for this instance.\n\n\n          function locale(key) {\n            var newLocaleData;\n\n            if (key === undefined) {\n              return this._locale._abbr;\n            } else {\n              newLocaleData = getLocale(key);\n\n              if (newLocaleData != null) {\n                this._locale = newLocaleData;\n              }\n\n              return this;\n            }\n          }\n\n          var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {\n            if (key === undefined) {\n              return this.localeData();\n            } else {\n              return this.locale(key);\n            }\n          });\n\n          function localeData() {\n            return this._locale;\n          }\n\n          function startOf(units) {\n            units = normalizeUnits(units); // the following switch intentionally omits break keywords\n            // to utilize falling through the cases.\n\n            switch (units) {\n              case 'year':\n                this.month(0);\n\n              /* falls through */\n\n              case 'quarter':\n              case 'month':\n                this.date(1);\n\n              /* falls through */\n\n              case 'week':\n              case 'isoWeek':\n              case 'day':\n              case 'date':\n                this.hours(0);\n\n              /* falls through */\n\n              case 'hour':\n                this.minutes(0);\n\n              /* falls through */\n\n              case 'minute':\n                this.seconds(0);\n\n              /* falls through */\n\n              case 'second':\n                this.milliseconds(0);\n            } // weeks are a special case\n\n\n            if (units === 'week') {\n              this.weekday(0);\n            }\n\n            if (units === 'isoWeek') {\n              this.isoWeekday(1);\n            } // quarters are also special\n\n\n            if (units === 'quarter') {\n              this.month(Math.floor(this.month() / 3) * 3);\n            }\n\n            return this;\n          }\n\n          function endOf(units) {\n            units = normalizeUnits(units);\n\n            if (units === undefined || units === 'millisecond') {\n              return this;\n            } // 'date' is an alias for 'day', so it should be considered as such.\n\n\n            if (units === 'date') {\n              units = 'day';\n            }\n\n            return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');\n          }\n\n          function valueOf() {\n            return this._d.valueOf() - (this._offset || 0) * 60000;\n          }\n\n          function unix() {\n            return Math.floor(this.valueOf() / 1000);\n          }\n\n          function toDate() {\n            return new Date(this.valueOf());\n          }\n\n          function toArray() {\n            var m = this;\n            return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n          }\n\n          function toObject() {\n            var m = this;\n            return {\n              years: m.year(),\n              months: m.month(),\n              date: m.date(),\n              hours: m.hours(),\n              minutes: m.minutes(),\n              seconds: m.seconds(),\n              milliseconds: m.milliseconds()\n            };\n          }\n\n          function toJSON() {\n            // new Date(NaN).toJSON() === null\n            return this.isValid() ? this.toISOString() : null;\n          }\n\n          function isValid$2() {\n            return isValid(this);\n          }\n\n          function parsingFlags() {\n            return extend({}, getParsingFlags(this));\n          }\n\n          function invalidAt() {\n            return getParsingFlags(this).overflow;\n          }\n\n          function creationData() {\n            return {\n              input: this._i,\n              format: this._f,\n              locale: this._locale,\n              isUTC: this._isUTC,\n              strict: this._strict\n            };\n          } // FORMATTING\n\n\n          addFormatToken(0, ['gg', 2], 0, function () {\n            return this.weekYear() % 100;\n          });\n          addFormatToken(0, ['GG', 2], 0, function () {\n            return this.isoWeekYear() % 100;\n          });\n\n          function addWeekYearFormatToken(token, getter) {\n            addFormatToken(0, [token, token.length], 0, getter);\n          }\n\n          addWeekYearFormatToken('gggg', 'weekYear');\n          addWeekYearFormatToken('ggggg', 'weekYear');\n          addWeekYearFormatToken('GGGG', 'isoWeekYear');\n          addWeekYearFormatToken('GGGGG', 'isoWeekYear'); // ALIASES\n\n          addUnitAlias('weekYear', 'gg');\n          addUnitAlias('isoWeekYear', 'GG'); // PRIORITY\n\n          addUnitPriority('weekYear', 1);\n          addUnitPriority('isoWeekYear', 1); // PARSING\n\n          addRegexToken('G', matchSigned);\n          addRegexToken('g', matchSigned);\n          addRegexToken('GG', match1to2, match2);\n          addRegexToken('gg', match1to2, match2);\n          addRegexToken('GGGG', match1to4, match4);\n          addRegexToken('gggg', match1to4, match4);\n          addRegexToken('GGGGG', match1to6, match6);\n          addRegexToken('ggggg', match1to6, match6);\n          addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n            week[token.substr(0, 2)] = toInt(input);\n          });\n          addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n            week[token] = hooks.parseTwoDigitYear(input);\n          }); // MOMENTS\n\n          function getSetWeekYear(input) {\n            return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);\n          }\n\n          function getSetISOWeekYear(input) {\n            return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);\n          }\n\n          function getISOWeeksInYear() {\n            return weeksInYear(this.year(), 1, 4);\n          }\n\n          function getWeeksInYear() {\n            var weekInfo = this.localeData()._week;\n\n            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n          }\n\n          function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n            var weeksTarget;\n\n            if (input == null) {\n              return weekOfYear(this, dow, doy).year;\n            } else {\n              weeksTarget = weeksInYear(input, dow, doy);\n\n              if (week > weeksTarget) {\n                week = weeksTarget;\n              }\n\n              return setWeekAll.call(this, input, week, weekday, dow, doy);\n            }\n          }\n\n          function setWeekAll(weekYear, week, weekday, dow, doy) {\n            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n            this.year(date.getUTCFullYear());\n            this.month(date.getUTCMonth());\n            this.date(date.getUTCDate());\n            return this;\n          } // FORMATTING\n\n\n          addFormatToken('Q', 0, 'Qo', 'quarter'); // ALIASES\n\n          addUnitAlias('quarter', 'Q'); // PRIORITY\n\n          addUnitPriority('quarter', 7); // PARSING\n\n          addRegexToken('Q', match1);\n          addParseToken('Q', function (input, array) {\n            array[MONTH] = (toInt(input) - 1) * 3;\n          }); // MOMENTS\n\n          function getSetQuarter(input) {\n            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n          } // FORMATTING\n\n\n          addFormatToken('D', ['DD', 2], 'Do', 'date'); // ALIASES\n\n          addUnitAlias('date', 'D'); // PRIOROITY\n\n          addUnitPriority('date', 9); // PARSING\n\n          addRegexToken('D', match1to2);\n          addRegexToken('DD', match1to2, match2);\n          addRegexToken('Do', function (isStrict, locale) {\n            // TODO: Remove \"ordinalParse\" fallback in next major release.\n            return isStrict ? locale._dayOfMonthOrdinalParse || locale._ordinalParse : locale._dayOfMonthOrdinalParseLenient;\n          });\n          addParseToken(['D', 'DD'], DATE);\n          addParseToken('Do', function (input, array) {\n            array[DATE] = toInt(input.match(match1to2)[0], 10);\n          }); // MOMENTS\n\n          var getSetDayOfMonth = makeGetSet('Date', true); // FORMATTING\n\n          addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear'); // ALIASES\n\n          addUnitAlias('dayOfYear', 'DDD'); // PRIORITY\n\n          addUnitPriority('dayOfYear', 4); // PARSING\n\n          addRegexToken('DDD', match1to3);\n          addRegexToken('DDDD', match3);\n          addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n            config._dayOfYear = toInt(input);\n          }); // HELPERS\n          // MOMENTS\n\n          function getSetDayOfYear(input) {\n            var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');\n          } // FORMATTING\n\n\n          addFormatToken('m', ['mm', 2], 0, 'minute'); // ALIASES\n\n          addUnitAlias('minute', 'm'); // PRIORITY\n\n          addUnitPriority('minute', 14); // PARSING\n\n          addRegexToken('m', match1to2);\n          addRegexToken('mm', match1to2, match2);\n          addParseToken(['m', 'mm'], MINUTE); // MOMENTS\n\n          var getSetMinute = makeGetSet('Minutes', false); // FORMATTING\n\n          addFormatToken('s', ['ss', 2], 0, 'second'); // ALIASES\n\n          addUnitAlias('second', 's'); // PRIORITY\n\n          addUnitPriority('second', 15); // PARSING\n\n          addRegexToken('s', match1to2);\n          addRegexToken('ss', match1to2, match2);\n          addParseToken(['s', 'ss'], SECOND); // MOMENTS\n\n          var getSetSecond = makeGetSet('Seconds', false); // FORMATTING\n\n          addFormatToken('S', 0, 0, function () {\n            return ~~(this.millisecond() / 100);\n          });\n          addFormatToken(0, ['SS', 2], 0, function () {\n            return ~~(this.millisecond() / 10);\n          });\n          addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n          addFormatToken(0, ['SSSS', 4], 0, function () {\n            return this.millisecond() * 10;\n          });\n          addFormatToken(0, ['SSSSS', 5], 0, function () {\n            return this.millisecond() * 100;\n          });\n          addFormatToken(0, ['SSSSSS', 6], 0, function () {\n            return this.millisecond() * 1000;\n          });\n          addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n            return this.millisecond() * 10000;\n          });\n          addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n            return this.millisecond() * 100000;\n          });\n          addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n            return this.millisecond() * 1000000;\n          }); // ALIASES\n\n          addUnitAlias('millisecond', 'ms'); // PRIORITY\n\n          addUnitPriority('millisecond', 16); // PARSING\n\n          addRegexToken('S', match1to3, match1);\n          addRegexToken('SS', match1to3, match2);\n          addRegexToken('SSS', match1to3, match3);\n          var token;\n\n          for (token = 'SSSS'; token.length <= 9; token += 'S') {\n            addRegexToken(token, matchUnsigned);\n          }\n\n          function parseMs(input, array) {\n            array[MILLISECOND] = toInt(('0.' + input) * 1000);\n          }\n\n          for (token = 'S'; token.length <= 9; token += 'S') {\n            addParseToken(token, parseMs);\n          } // MOMENTS\n\n\n          var getSetMillisecond = makeGetSet('Milliseconds', false); // FORMATTING\n\n          addFormatToken('z', 0, 0, 'zoneAbbr');\n          addFormatToken('zz', 0, 0, 'zoneName'); // MOMENTS\n\n          function getZoneAbbr() {\n            return this._isUTC ? 'UTC' : '';\n          }\n\n          function getZoneName() {\n            return this._isUTC ? 'Coordinated Universal Time' : '';\n          }\n\n          var proto = Moment.prototype;\n          proto.add = add;\n          proto.calendar = calendar$1;\n          proto.clone = clone;\n          proto.diff = diff;\n          proto.endOf = endOf;\n          proto.format = format;\n          proto.from = from;\n          proto.fromNow = fromNow;\n          proto.to = to;\n          proto.toNow = toNow;\n          proto.get = stringGet;\n          proto.invalidAt = invalidAt;\n          proto.isAfter = isAfter;\n          proto.isBefore = isBefore;\n          proto.isBetween = isBetween;\n          proto.isSame = isSame;\n          proto.isSameOrAfter = isSameOrAfter;\n          proto.isSameOrBefore = isSameOrBefore;\n          proto.isValid = isValid$2;\n          proto.lang = lang;\n          proto.locale = locale;\n          proto.localeData = localeData;\n          proto.max = prototypeMax;\n          proto.min = prototypeMin;\n          proto.parsingFlags = parsingFlags;\n          proto.set = stringSet;\n          proto.startOf = startOf;\n          proto.subtract = subtract;\n          proto.toArray = toArray;\n          proto.toObject = toObject;\n          proto.toDate = toDate;\n          proto.toISOString = toISOString;\n          proto.inspect = inspect;\n          proto.toJSON = toJSON;\n          proto.toString = toString;\n          proto.unix = unix;\n          proto.valueOf = valueOf;\n          proto.creationData = creationData; // Year\n\n          proto.year = getSetYear;\n          proto.isLeapYear = getIsLeapYear; // Week Year\n\n          proto.weekYear = getSetWeekYear;\n          proto.isoWeekYear = getSetISOWeekYear; // Quarter\n\n          proto.quarter = proto.quarters = getSetQuarter; // Month\n\n          proto.month = getSetMonth;\n          proto.daysInMonth = getDaysInMonth; // Week\n\n          proto.week = proto.weeks = getSetWeek;\n          proto.isoWeek = proto.isoWeeks = getSetISOWeek;\n          proto.weeksInYear = getWeeksInYear;\n          proto.isoWeeksInYear = getISOWeeksInYear; // Day\n\n          proto.date = getSetDayOfMonth;\n          proto.day = proto.days = getSetDayOfWeek;\n          proto.weekday = getSetLocaleDayOfWeek;\n          proto.isoWeekday = getSetISODayOfWeek;\n          proto.dayOfYear = getSetDayOfYear; // Hour\n\n          proto.hour = proto.hours = getSetHour; // Minute\n\n          proto.minute = proto.minutes = getSetMinute; // Second\n\n          proto.second = proto.seconds = getSetSecond; // Millisecond\n\n          proto.millisecond = proto.milliseconds = getSetMillisecond; // Offset\n\n          proto.utcOffset = getSetOffset;\n          proto.utc = setOffsetToUTC;\n          proto.local = setOffsetToLocal;\n          proto.parseZone = setOffsetToParsedOffset;\n          proto.hasAlignedHourOffset = hasAlignedHourOffset;\n          proto.isDST = isDaylightSavingTime;\n          proto.isLocal = isLocal;\n          proto.isUtcOffset = isUtcOffset;\n          proto.isUtc = isUtc;\n          proto.isUTC = isUtc; // Timezone\n\n          proto.zoneAbbr = getZoneAbbr;\n          proto.zoneName = getZoneName; // Deprecations\n\n          proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n          proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n          proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n          proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n          proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n          function createUnix(input) {\n            return createLocal(input * 1000);\n          }\n\n          function createInZone() {\n            return createLocal.apply(null, arguments).parseZone();\n          }\n\n          function preParsePostFormat(string) {\n            return string;\n          }\n\n          var proto$1 = Locale.prototype;\n          proto$1.calendar = calendar;\n          proto$1.longDateFormat = longDateFormat;\n          proto$1.invalidDate = invalidDate;\n          proto$1.ordinal = ordinal;\n          proto$1.preparse = preParsePostFormat;\n          proto$1.postformat = preParsePostFormat;\n          proto$1.relativeTime = relativeTime;\n          proto$1.pastFuture = pastFuture;\n          proto$1.set = set; // Month\n\n          proto$1.months = localeMonths;\n          proto$1.monthsShort = localeMonthsShort;\n          proto$1.monthsParse = localeMonthsParse;\n          proto$1.monthsRegex = monthsRegex;\n          proto$1.monthsShortRegex = monthsShortRegex; // Week\n\n          proto$1.week = localeWeek;\n          proto$1.firstDayOfYear = localeFirstDayOfYear;\n          proto$1.firstDayOfWeek = localeFirstDayOfWeek; // Day of Week\n\n          proto$1.weekdays = localeWeekdays;\n          proto$1.weekdaysMin = localeWeekdaysMin;\n          proto$1.weekdaysShort = localeWeekdaysShort;\n          proto$1.weekdaysParse = localeWeekdaysParse;\n          proto$1.weekdaysRegex = weekdaysRegex;\n          proto$1.weekdaysShortRegex = weekdaysShortRegex;\n          proto$1.weekdaysMinRegex = weekdaysMinRegex; // Hours\n\n          proto$1.isPM = localeIsPM;\n          proto$1.meridiem = localeMeridiem;\n\n          function get$1(format, index, field, setter) {\n            var locale = getLocale();\n            var utc = createUTC().set(setter, index);\n            return locale[field](utc, format);\n          }\n\n          function listMonthsImpl(format, index, field) {\n            if (isNumber(format)) {\n              index = format;\n              format = undefined;\n            }\n\n            format = format || '';\n\n            if (index != null) {\n              return get$1(format, index, field, 'month');\n            }\n\n            var i;\n            var out = [];\n\n            for (i = 0; i < 12; i++) {\n              out[i] = get$1(format, i, field, 'month');\n            }\n\n            return out;\n          } // ()\n          // (5)\n          // (fmt, 5)\n          // (fmt)\n          // (true)\n          // (true, 5)\n          // (true, fmt, 5)\n          // (true, fmt)\n\n\n          function listWeekdaysImpl(localeSorted, format, index, field) {\n            if (typeof localeSorted === 'boolean') {\n              if (isNumber(format)) {\n                index = format;\n                format = undefined;\n              }\n\n              format = format || '';\n            } else {\n              format = localeSorted;\n              index = format;\n              localeSorted = false;\n\n              if (isNumber(format)) {\n                index = format;\n                format = undefined;\n              }\n\n              format = format || '';\n            }\n\n            var locale = getLocale(),\n                shift = localeSorted ? locale._week.dow : 0;\n\n            if (index != null) {\n              return get$1(format, (index + shift) % 7, field, 'day');\n            }\n\n            var i;\n            var out = [];\n\n            for (i = 0; i < 7; i++) {\n              out[i] = get$1(format, (i + shift) % 7, field, 'day');\n            }\n\n            return out;\n          }\n\n          function listMonths(format, index) {\n            return listMonthsImpl(format, index, 'months');\n          }\n\n          function listMonthsShort(format, index) {\n            return listMonthsImpl(format, index, 'monthsShort');\n          }\n\n          function listWeekdays(localeSorted, format, index) {\n            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n          }\n\n          function listWeekdaysShort(localeSorted, format, index) {\n            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n          }\n\n          function listWeekdaysMin(localeSorted, format, index) {\n            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n          }\n\n          getSetGlobalLocale('en', {\n            dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n            ordinal: function ordinal(number) {\n              var b = number % 10,\n                  output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n              return number + output;\n            }\n          }); // Side effect imports\n\n          hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n          hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n          var mathAbs = Math.abs;\n\n          function abs() {\n            var data = this._data;\n            this._milliseconds = mathAbs(this._milliseconds);\n            this._days = mathAbs(this._days);\n            this._months = mathAbs(this._months);\n            data.milliseconds = mathAbs(data.milliseconds);\n            data.seconds = mathAbs(data.seconds);\n            data.minutes = mathAbs(data.minutes);\n            data.hours = mathAbs(data.hours);\n            data.months = mathAbs(data.months);\n            data.years = mathAbs(data.years);\n            return this;\n          }\n\n          function addSubtract$1(duration, input, value, direction) {\n            var other = createDuration(input, value);\n            duration._milliseconds += direction * other._milliseconds;\n            duration._days += direction * other._days;\n            duration._months += direction * other._months;\n            return duration._bubble();\n          } // supports only 2.0-style add(1, 's') or add(duration)\n\n\n          function add$1(input, value) {\n            return addSubtract$1(this, input, value, 1);\n          } // supports only 2.0-style subtract(1, 's') or subtract(duration)\n\n\n          function subtract$1(input, value) {\n            return addSubtract$1(this, input, value, -1);\n          }\n\n          function absCeil(number) {\n            if (number < 0) {\n              return Math.floor(number);\n            } else {\n              return Math.ceil(number);\n            }\n          }\n\n          function bubble() {\n            var milliseconds = this._milliseconds;\n            var days = this._days;\n            var months = this._months;\n            var data = this._data;\n            var seconds, minutes, hours, years, monthsFromDays; // if we have a mix of positive and negative values, bubble down first\n            // check: https://github.com/moment/moment/issues/2166\n\n            if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {\n              milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n              days = 0;\n              months = 0;\n            } // The following code bubbles up values, see the tests for\n            // examples of what that means.\n\n\n            data.milliseconds = milliseconds % 1000;\n            seconds = absFloor(milliseconds / 1000);\n            data.seconds = seconds % 60;\n            minutes = absFloor(seconds / 60);\n            data.minutes = minutes % 60;\n            hours = absFloor(minutes / 60);\n            data.hours = hours % 24;\n            days += absFloor(hours / 24); // convert days to months\n\n            monthsFromDays = absFloor(daysToMonths(days));\n            months += monthsFromDays;\n            days -= absCeil(monthsToDays(monthsFromDays)); // 12 months -> 1 year\n\n            years = absFloor(months / 12);\n            months %= 12;\n            data.days = days;\n            data.months = months;\n            data.years = years;\n            return this;\n          }\n\n          function daysToMonths(days) {\n            // 400 years have 146097 days (taking into account leap year rules)\n            // 400 years have 12 months === 4800\n            return days * 4800 / 146097;\n          }\n\n          function monthsToDays(months) {\n            // the reverse of daysToMonths\n            return months * 146097 / 4800;\n          }\n\n          function as(units) {\n            if (!this.isValid()) {\n              return NaN;\n            }\n\n            var days;\n            var months;\n            var milliseconds = this._milliseconds;\n            units = normalizeUnits(units);\n\n            if (units === 'month' || units === 'year') {\n              days = this._days + milliseconds / 864e5;\n              months = this._months + daysToMonths(days);\n              return units === 'month' ? months : months / 12;\n            } else {\n              // handle milliseconds separately because of floating point math errors (issue #1867)\n              days = this._days + Math.round(monthsToDays(this._months));\n\n              switch (units) {\n                case 'week':\n                  return days / 7 + milliseconds / 6048e5;\n\n                case 'day':\n                  return days + milliseconds / 864e5;\n\n                case 'hour':\n                  return days * 24 + milliseconds / 36e5;\n\n                case 'minute':\n                  return days * 1440 + milliseconds / 6e4;\n\n                case 'second':\n                  return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n\n                case 'millisecond':\n                  return Math.floor(days * 864e5) + milliseconds;\n\n                default:\n                  throw new Error('Unknown unit ' + units);\n              }\n            }\n          } // TODO: Use this.as('ms')?\n\n\n          function valueOf$1() {\n            if (!this.isValid()) {\n              return NaN;\n            }\n\n            return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;\n          }\n\n          function makeAs(alias) {\n            return function () {\n              return this.as(alias);\n            };\n          }\n\n          var asMilliseconds = makeAs('ms');\n          var asSeconds = makeAs('s');\n          var asMinutes = makeAs('m');\n          var asHours = makeAs('h');\n          var asDays = makeAs('d');\n          var asWeeks = makeAs('w');\n          var asMonths = makeAs('M');\n          var asYears = makeAs('y');\n\n          function get$2(units) {\n            units = normalizeUnits(units);\n            return this.isValid() ? this[units + 's']() : NaN;\n          }\n\n          function makeGetter(name) {\n            return function () {\n              return this.isValid() ? this._data[name] : NaN;\n            };\n          }\n\n          var milliseconds = makeGetter('milliseconds');\n          var seconds = makeGetter('seconds');\n          var minutes = makeGetter('minutes');\n          var hours = makeGetter('hours');\n          var days = makeGetter('days');\n          var months = makeGetter('months');\n          var years = makeGetter('years');\n\n          function weeks() {\n            return absFloor(this.days() / 7);\n          }\n\n          var round = Math.round;\n          var thresholds = {\n            ss: 44,\n            // a few seconds to seconds\n            s: 45,\n            // seconds to minute\n            m: 45,\n            // minutes to hour\n            h: 22,\n            // hours to day\n            d: 26,\n            // days to month\n            M: 11 // months to year\n\n          }; // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n\n          function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n          }\n\n          function relativeTime$1(posNegDuration, withoutSuffix, locale) {\n            var duration = createDuration(posNegDuration).abs();\n            var seconds = round(duration.as('s'));\n            var minutes = round(duration.as('m'));\n            var hours = round(duration.as('h'));\n            var days = round(duration.as('d'));\n            var months = round(duration.as('M'));\n            var years = round(duration.as('y'));\n            var a = seconds <= thresholds.ss && ['s', seconds] || seconds < thresholds.s && ['ss', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];\n            a[2] = withoutSuffix;\n            a[3] = +posNegDuration > 0;\n            a[4] = locale;\n            return substituteTimeAgo.apply(null, a);\n          } // This function allows you to set the rounding function for relative time strings\n\n\n          function getSetRelativeTimeRounding(roundingFunction) {\n            if (roundingFunction === undefined) {\n              return round;\n            }\n\n            if (typeof roundingFunction === 'function') {\n              round = roundingFunction;\n              return true;\n            }\n\n            return false;\n          } // This function allows you to set a threshold for relative time strings\n\n\n          function getSetRelativeTimeThreshold(threshold, limit) {\n            if (thresholds[threshold] === undefined) {\n              return false;\n            }\n\n            if (limit === undefined) {\n              return thresholds[threshold];\n            }\n\n            thresholds[threshold] = limit;\n\n            if (threshold === 's') {\n              thresholds.ss = limit - 1;\n            }\n\n            return true;\n          }\n\n          function humanize(withSuffix) {\n            if (!this.isValid()) {\n              return this.localeData().invalidDate();\n            }\n\n            var locale = this.localeData();\n            var output = relativeTime$1(this, !withSuffix, locale);\n\n            if (withSuffix) {\n              output = locale.pastFuture(+this, output);\n            }\n\n            return locale.postformat(output);\n          }\n\n          var abs$1 = Math.abs;\n\n          function toISOString$1() {\n            // for ISO strings we do not use the normal bubbling rules:\n            //  * milliseconds bubble up until they become hours\n            //  * days do not bubble at all\n            //  * months bubble up until they become years\n            // This is because there is no context-free conversion between hours and days\n            // (think of clock changes)\n            // and also not between days and months (28-31 days per month)\n            if (!this.isValid()) {\n              return this.localeData().invalidDate();\n            }\n\n            var seconds = abs$1(this._milliseconds) / 1000;\n            var days = abs$1(this._days);\n            var months = abs$1(this._months);\n            var minutes, hours, years; // 3600 seconds -> 60 minutes -> 1 hour\n\n            minutes = absFloor(seconds / 60);\n            hours = absFloor(minutes / 60);\n            seconds %= 60;\n            minutes %= 60; // 12 months -> 1 year\n\n            years = absFloor(months / 12);\n            months %= 12; // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n\n            var Y = years;\n            var M = months;\n            var D = days;\n            var h = hours;\n            var m = minutes;\n            var s = seconds;\n            var total = this.asSeconds();\n\n            if (!total) {\n              // this is the same as C#'s (Noda) and python (isodate)...\n              // but not other JS (goog.date)\n              return 'P0D';\n            }\n\n            return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '');\n          }\n\n          var proto$2 = Duration.prototype;\n          proto$2.isValid = isValid$1;\n          proto$2.abs = abs;\n          proto$2.add = add$1;\n          proto$2.subtract = subtract$1;\n          proto$2.as = as;\n          proto$2.asMilliseconds = asMilliseconds;\n          proto$2.asSeconds = asSeconds;\n          proto$2.asMinutes = asMinutes;\n          proto$2.asHours = asHours;\n          proto$2.asDays = asDays;\n          proto$2.asWeeks = asWeeks;\n          proto$2.asMonths = asMonths;\n          proto$2.asYears = asYears;\n          proto$2.valueOf = valueOf$1;\n          proto$2._bubble = bubble;\n          proto$2.get = get$2;\n          proto$2.milliseconds = milliseconds;\n          proto$2.seconds = seconds;\n          proto$2.minutes = minutes;\n          proto$2.hours = hours;\n          proto$2.days = days;\n          proto$2.weeks = weeks;\n          proto$2.months = months;\n          proto$2.years = years;\n          proto$2.humanize = humanize;\n          proto$2.toISOString = toISOString$1;\n          proto$2.toString = toISOString$1;\n          proto$2.toJSON = toISOString$1;\n          proto$2.locale = locale;\n          proto$2.localeData = localeData; // Deprecations\n\n          proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\n          proto$2.lang = lang; // Side effect imports\n          // FORMATTING\n\n          addFormatToken('X', 0, 0, 'unix');\n          addFormatToken('x', 0, 0, 'valueOf'); // PARSING\n\n          addRegexToken('x', matchSigned);\n          addRegexToken('X', matchTimestamp);\n          addParseToken('X', function (input, array, config) {\n            config._d = new Date(parseFloat(input, 10) * 1000);\n          });\n          addParseToken('x', function (input, array, config) {\n            config._d = new Date(toInt(input));\n          }); // Side effect imports\n\n          hooks.version = '2.18.1';\n          setHookCallback(createLocal);\n          hooks.fn = proto;\n          hooks.min = min;\n          hooks.max = max;\n          hooks.now = now;\n          hooks.utc = createUTC;\n          hooks.unix = createUnix;\n          hooks.months = listMonths;\n          hooks.isDate = isDate;\n          hooks.locale = getSetGlobalLocale;\n          hooks.invalid = createInvalid;\n          hooks.duration = createDuration;\n          hooks.isMoment = isMoment;\n          hooks.weekdays = listWeekdays;\n          hooks.parseZone = createInZone;\n          hooks.localeData = getLocale;\n          hooks.isDuration = isDuration;\n          hooks.monthsShort = listMonthsShort;\n          hooks.weekdaysMin = listWeekdaysMin;\n          hooks.defineLocale = defineLocale;\n          hooks.updateLocale = updateLocale;\n          hooks.locales = listLocales;\n          hooks.weekdaysShort = listWeekdaysShort;\n          hooks.normalizeUnits = normalizeUnits;\n          hooks.relativeTimeRounding = getSetRelativeTimeRounding;\n          hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n          hooks.calendarFormat = getCalendarFormat;\n          hooks.prototype = proto;\n          return hooks;\n        });\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, __webpack_require__(121)(module));\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n      /*!\n      * jQuery JavaScript Library v3.2.1\n      * https://jquery.com/\n      *\n      * Includes Sizzle.js\n      * https://sizzlejs.com/\n      *\n      * Copyright JS Foundation and other contributors\n      * Released under the MIT license\n      * https://jquery.org/license\n      *\n      * Date: 2017-03-20T18:59Z\n      */\n\n\n      (function (global, factory) {\n        \"use strict\";\n\n        if (typeof module === \"object\" && typeof module.exports === \"object\") {\n          // For CommonJS and CommonJS-like environments where a proper `window`\n          // is present, execute the factory and get jQuery.\n          // For environments that do not have a `window` with a `document`\n          // (such as Node.js), expose a factory as module.exports.\n          // This accentuates the need for the creation of a real `window`.\n          // e.g. var jQuery = require(\"jquery\")(window);\n          // See ticket #14549 for more info.\n          module.exports = global.document ? factory(global, true) : function (w) {\n            if (!w.document) {\n              throw new Error(\"jQuery requires a window with a document\");\n            }\n\n            return factory(w);\n          };\n        } else {\n          factory(global);\n        } // Pass this if window is not defined yet\n\n      })(typeof window !== \"undefined\" ? window : this, function (window, noGlobal) {\n        // Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n        // throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n        // arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n        // enough that all such attempts are guarded in a try block.\n        \"use strict\";\n\n        var arr = [];\n        var document = window.document;\n        var getProto = Object.getPrototypeOf;\n        var _slice = arr.slice;\n        var concat = arr.concat;\n        var push = arr.push;\n        var indexOf = arr.indexOf;\n        var class2type = {};\n        var toString = class2type.toString;\n        var hasOwn = class2type.hasOwnProperty;\n        var fnToString = hasOwn.toString;\n        var ObjectFunctionString = fnToString.call(Object);\n        var support = {};\n\n        function DOMEval(code, doc) {\n          doc = doc || document;\n          var script = doc.createElement(\"script\");\n          script.text = code;\n          doc.head.appendChild(script).parentNode.removeChild(script);\n        }\n        /* global Symbol */\n        // Defining this global in .eslintrc.json would create a danger of using the global\n        // unguarded in another place, it seems safer to define global only for this module\n\n\n        var version = \"3.2.1\",\n            // Define a local copy of jQuery\n        jQuery = function jQuery(selector, context) {\n          // The jQuery object is actually just the init constructor 'enhanced'\n          // Need init if jQuery is called (just allow error to be thrown if not included)\n          return new jQuery.fn.init(selector, context);\n        },\n            // Support: Android <=4.0 only\n        // Make sure we trim BOM and NBSP\n        rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n            // Matches dashed string for camelizing\n        rmsPrefix = /^-ms-/,\n            rdashAlpha = /-([a-z])/g,\n            // Used by jQuery.camelCase as callback to replace()\n        fcamelCase = function fcamelCase(all, letter) {\n          return letter.toUpperCase();\n        };\n\n        jQuery.fn = jQuery.prototype = {\n          // The current version of jQuery being used\n          jquery: version,\n          constructor: jQuery,\n          // The default length of a jQuery object is 0\n          length: 0,\n          toArray: function toArray() {\n            return _slice.call(this);\n          },\n          // Get the Nth element in the matched element set OR\n          // Get the whole matched element set as a clean array\n          get: function get(num) {\n            // Return all the elements in a clean array\n            if (num == null) {\n              return _slice.call(this);\n            } // Return just the one element from the set\n\n\n            return num < 0 ? this[num + this.length] : this[num];\n          },\n          // Take an array of elements and push it onto the stack\n          // (returning the new matched element set)\n          pushStack: function pushStack(elems) {\n            // Build a new jQuery matched element set\n            var ret = jQuery.merge(this.constructor(), elems); // Add the old object onto the stack (as a reference)\n\n            ret.prevObject = this; // Return the newly-formed element set\n\n            return ret;\n          },\n          // Execute a callback for every element in the matched set.\n          each: function each(callback) {\n            return jQuery.each(this, callback);\n          },\n          map: function map(callback) {\n            return this.pushStack(jQuery.map(this, function (elem, i) {\n              return callback.call(elem, i, elem);\n            }));\n          },\n          slice: function slice() {\n            return this.pushStack(_slice.apply(this, arguments));\n          },\n          first: function first() {\n            return this.eq(0);\n          },\n          last: function last() {\n            return this.eq(-1);\n          },\n          eq: function eq(i) {\n            var len = this.length,\n                j = +i + (i < 0 ? len : 0);\n            return this.pushStack(j >= 0 && j < len ? [this[j]] : []);\n          },\n          end: function end() {\n            return this.prevObject || this.constructor();\n          },\n          // For internal use only.\n          // Behaves like an Array's method, not like a jQuery method.\n          push: push,\n          sort: arr.sort,\n          splice: arr.splice\n        };\n\n        jQuery.extend = jQuery.fn.extend = function () {\n          var options,\n              name,\n              src,\n              copy,\n              copyIsArray,\n              clone,\n              target = arguments[0] || {},\n              i = 1,\n              length = arguments.length,\n              deep = false; // Handle a deep copy situation\n\n          if (typeof target === \"boolean\") {\n            deep = target; // Skip the boolean and the target\n\n            target = arguments[i] || {};\n            i++;\n          } // Handle case when target is a string or something (possible in deep copy)\n\n\n          if (typeof target !== \"object\" && !jQuery.isFunction(target)) {\n            target = {};\n          } // Extend jQuery itself if only one argument is passed\n\n\n          if (i === length) {\n            target = this;\n            i--;\n          }\n\n          for (; i < length; i++) {\n            // Only deal with non-null/undefined values\n            if ((options = arguments[i]) != null) {\n              // Extend the base object\n              for (name in options) {\n                src = target[name];\n                copy = options[name]; // Prevent never-ending loop\n\n                if (target === copy) {\n                  continue;\n                } // Recurse if we're merging plain objects or arrays\n\n\n                if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {\n                  if (copyIsArray) {\n                    copyIsArray = false;\n                    clone = src && Array.isArray(src) ? src : [];\n                  } else {\n                    clone = src && jQuery.isPlainObject(src) ? src : {};\n                  } // Never move original objects, clone them\n\n\n                  target[name] = jQuery.extend(deep, clone, copy); // Don't bring in undefined values\n                } else if (copy !== undefined) {\n                  target[name] = copy;\n                }\n              }\n            }\n          } // Return the modified object\n\n\n          return target;\n        };\n\n        jQuery.extend({\n          // Unique for each copy of jQuery on the page\n          expando: \"jQuery\" + (version + Math.random()).replace(/\\D/g, \"\"),\n          // Assume jQuery is ready without the ready module\n          isReady: true,\n          error: function error(msg) {\n            throw new Error(msg);\n          },\n          noop: function noop() {},\n          isFunction: function isFunction(obj) {\n            return jQuery.type(obj) === \"function\";\n          },\n          isWindow: function isWindow(obj) {\n            return obj != null && obj === obj.window;\n          },\n          isNumeric: function isNumeric(obj) {\n            // As of jQuery 3.0, isNumeric is limited to\n            // strings and numbers (primitives or objects)\n            // that can be coerced to finite numbers (gh-2662)\n            var type = jQuery.type(obj);\n            return (type === \"number\" || type === \"string\") && // parseFloat NaNs numeric-cast false positives (\"\")\n            // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n            // subtraction forces infinities to NaN\n            !isNaN(obj - parseFloat(obj));\n          },\n          isPlainObject: function isPlainObject(obj) {\n            var proto, Ctor; // Detect obvious negatives\n            // Use toString instead of jQuery.type to catch host objects\n\n            if (!obj || toString.call(obj) !== \"[object Object]\") {\n              return false;\n            }\n\n            proto = getProto(obj); // Objects with no prototype (e.g., `Object.create( null )`) are plain\n\n            if (!proto) {\n              return true;\n            } // Objects with prototype are plain iff they were constructed by a global Object function\n\n\n            Ctor = hasOwn.call(proto, \"constructor\") && proto.constructor;\n            return typeof Ctor === \"function\" && fnToString.call(Ctor) === ObjectFunctionString;\n          },\n          isEmptyObject: function isEmptyObject(obj) {\n            /* eslint-disable no-unused-vars */\n            // See https://github.com/eslint/eslint/issues/6125\n            var name;\n\n            for (name in obj) {\n              return false;\n            }\n\n            return true;\n          },\n          type: function type(obj) {\n            if (obj == null) {\n              return obj + \"\";\n            } // Support: Android <=2.3 only (functionish RegExp)\n\n\n            return typeof obj === \"object\" || typeof obj === \"function\" ? class2type[toString.call(obj)] || \"object\" : typeof obj;\n          },\n          // Evaluates a script in a global context\n          globalEval: function globalEval(code) {\n            DOMEval(code);\n          },\n          // Convert dashed to camelCase; used by the css and data modules\n          // Support: IE <=9 - 11, Edge 12 - 13\n          // Microsoft forgot to hump their vendor prefix (#9572)\n          camelCase: function camelCase(string) {\n            return string.replace(rmsPrefix, \"ms-\").replace(rdashAlpha, fcamelCase);\n          },\n          each: function each(obj, callback) {\n            var length,\n                i = 0;\n\n            if (isArrayLike(obj)) {\n              length = obj.length;\n\n              for (; i < length; i++) {\n                if (callback.call(obj[i], i, obj[i]) === false) {\n                  break;\n                }\n              }\n            } else {\n              for (i in obj) {\n                if (callback.call(obj[i], i, obj[i]) === false) {\n                  break;\n                }\n              }\n            }\n\n            return obj;\n          },\n          // Support: Android <=4.0 only\n          trim: function trim(text) {\n            return text == null ? \"\" : (text + \"\").replace(rtrim, \"\");\n          },\n          // results is for internal usage only\n          makeArray: function makeArray(arr, results) {\n            var ret = results || [];\n\n            if (arr != null) {\n              if (isArrayLike(Object(arr))) {\n                jQuery.merge(ret, typeof arr === \"string\" ? [arr] : arr);\n              } else {\n                push.call(ret, arr);\n              }\n            }\n\n            return ret;\n          },\n          inArray: function inArray(elem, arr, i) {\n            return arr == null ? -1 : indexOf.call(arr, elem, i);\n          },\n          // Support: Android <=4.0 only, PhantomJS 1 only\n          // push.apply(_, arraylike) throws on ancient WebKit\n          merge: function merge(first, second) {\n            var len = +second.length,\n                j = 0,\n                i = first.length;\n\n            for (; j < len; j++) {\n              first[i++] = second[j];\n            }\n\n            first.length = i;\n            return first;\n          },\n          grep: function grep(elems, callback, invert) {\n            var callbackInverse,\n                matches = [],\n                i = 0,\n                length = elems.length,\n                callbackExpect = !invert; // Go through the array, only saving the items\n            // that pass the validator function\n\n            for (; i < length; i++) {\n              callbackInverse = !callback(elems[i], i);\n\n              if (callbackInverse !== callbackExpect) {\n                matches.push(elems[i]);\n              }\n            }\n\n            return matches;\n          },\n          // arg is for internal usage only\n          map: function map(elems, callback, arg) {\n            var length,\n                value,\n                i = 0,\n                ret = []; // Go through the array, translating each of the items to their new values\n\n            if (isArrayLike(elems)) {\n              length = elems.length;\n\n              for (; i < length; i++) {\n                value = callback(elems[i], i, arg);\n\n                if (value != null) {\n                  ret.push(value);\n                }\n              } // Go through every key on the object,\n\n            } else {\n              for (i in elems) {\n                value = callback(elems[i], i, arg);\n\n                if (value != null) {\n                  ret.push(value);\n                }\n              }\n            } // Flatten any nested arrays\n\n\n            return concat.apply([], ret);\n          },\n          // A global GUID counter for objects\n          guid: 1,\n          // Bind a function to a context, optionally partially applying any\n          // arguments.\n          proxy: function proxy(fn, context) {\n            var tmp, args, proxy;\n\n            if (typeof context === \"string\") {\n              tmp = fn[context];\n              context = fn;\n              fn = tmp;\n            } // Quick check to determine if target is callable, in the spec\n            // this throws a TypeError, but we will just return undefined.\n\n\n            if (!jQuery.isFunction(fn)) {\n              return undefined;\n            } // Simulated bind\n\n\n            args = _slice.call(arguments, 2);\n\n            proxy = function proxy() {\n              return fn.apply(context || this, args.concat(_slice.call(arguments)));\n            }; // Set the guid of unique handler to the same of original handler, so it can be removed\n\n\n            proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n            return proxy;\n          },\n          now: Date.now,\n          // jQuery.support is not used in Core but other projects attach their\n          // properties to it so it needs to exist.\n          support: support\n        });\n\n        if (typeof Symbol === \"function\") {\n          jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];\n        } // Populate the class2type map\n\n\n        jQuery.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"), function (i, name) {\n          class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n        });\n\n        function isArrayLike(obj) {\n          // Support: real iOS 8.2 only (not reproducible in simulator)\n          // `in` check used to prevent JIT error (gh-2145)\n          // hasOwn isn't used here due to false negatives\n          // regarding Nodelist length in IE\n          var length = !!obj && \"length\" in obj && obj.length,\n              type = jQuery.type(obj);\n\n          if (type === \"function\" || jQuery.isWindow(obj)) {\n            return false;\n          }\n\n          return type === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\n        }\n\n        var Sizzle =\n        /*!\n         * Sizzle CSS Selector Engine v2.3.3\n         * https://sizzlejs.com/\n         *\n         * Copyright jQuery Foundation and other contributors\n         * Released under the MIT license\n         * http://jquery.org/license\n         *\n         * Date: 2016-08-08\n         */\n        function (window) {\n          var i,\n              support,\n              Expr,\n              getText,\n              isXML,\n              tokenize,\n              compile,\n              select,\n              outermostContext,\n              sortInput,\n              hasDuplicate,\n              // Local document vars\n          setDocument,\n              document,\n              docElem,\n              documentIsHTML,\n              rbuggyQSA,\n              rbuggyMatches,\n              matches,\n              contains,\n              // Instance-specific data\n          expando = \"sizzle\" + 1 * new Date(),\n              preferredDoc = window.document,\n              dirruns = 0,\n              done = 0,\n              classCache = createCache(),\n              tokenCache = createCache(),\n              compilerCache = createCache(),\n              sortOrder = function sortOrder(a, b) {\n            if (a === b) {\n              hasDuplicate = true;\n            }\n\n            return 0;\n          },\n              // Instance methods\n          hasOwn = {}.hasOwnProperty,\n              arr = [],\n              pop = arr.pop,\n              push_native = arr.push,\n              push = arr.push,\n              slice = arr.slice,\n              // Use a stripped-down indexOf as it's faster than native\n          // https://jsperf.com/thor-indexof-vs-for/5\n          indexOf = function indexOf(list, elem) {\n            var i = 0,\n                len = list.length;\n\n            for (; i < len; i++) {\n              if (list[i] === elem) {\n                return i;\n              }\n            }\n\n            return -1;\n          },\n              booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n              // Regular expressions\n          // http://www.w3.org/TR/css3-selectors/#whitespace\n          whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n              // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n          identifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n              // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n          attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace + // Operator (capture 2)\n          \"*([*^$|!~]?=)\" + whitespace + // \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n          \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\]\",\n              pseudos = \":(\" + identifier + \")(?:\\\\((\" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n          // 1. quoted (capture 3; capture 4 or capture 5)\n          \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" + // 2. simple (capture 6)\n          \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" + // 3. anything else (capture 2)\n          \".*\" + \")\\\\)|)\",\n              // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n          rwhitespace = new RegExp(whitespace + \"+\", \"g\"),\n              rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n              rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n              rcombinators = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\n              rattributeQuotes = new RegExp(\"=\" + whitespace + \"*([^\\\\]'\\\"]*?)\" + whitespace + \"*\\\\]\", \"g\"),\n              rpseudo = new RegExp(pseudos),\n              ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n              matchExpr = {\n            \"ID\": new RegExp(\"^#(\" + identifier + \")\"),\n            \"CLASS\": new RegExp(\"^\\\\.(\" + identifier + \")\"),\n            \"TAG\": new RegExp(\"^(\" + identifier + \"|[*])\"),\n            \"ATTR\": new RegExp(\"^\" + attributes),\n            \"PSEUDO\": new RegExp(\"^\" + pseudos),\n            \"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n            \"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\n            // For use in libraries implementing .is()\n            // We use this for POS matching in `select`\n            \"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n          },\n              rinputs = /^(?:input|select|textarea|button)$/i,\n              rheader = /^h\\d$/i,\n              rnative = /^[^{]+\\{\\s*\\[native \\w/,\n              // Easily-parseable/retrievable ID or TAG or CLASS selectors\n          rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n              rsibling = /[+~]/,\n              // CSS escapes\n          // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n          runescape = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\"),\n              funescape = function funescape(_, escaped, escapedWhitespace) {\n            var high = \"0x\" + escaped - 0x10000; // NaN means non-codepoint\n            // Support: Firefox<24\n            // Workaround erroneous numeric interpretation of +\"0x\"\n\n            return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint\n            String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\n            String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n          },\n              // CSS string/identifier serialization\n          // https://drafts.csswg.org/cssom/#common-serializing-idioms\n          rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n              fcssescape = function fcssescape(ch, asCodePoint) {\n            if (asCodePoint) {\n              // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n              if (ch === \"\\0\") {\n                return \"\\uFFFD\";\n              } // Control characters and (dependent upon position) numbers get escaped as code points\n\n\n              return ch.slice(0, -1) + \"\\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + \" \";\n            } // Other potentially-special ASCII characters get backslash-escaped\n\n\n            return \"\\\\\" + ch;\n          },\n              // Used for iframes\n          // See setDocument()\n          // Removing the function wrapper causes a \"Permission Denied\"\n          // error in IE\n          unloadHandler = function unloadHandler() {\n            setDocument();\n          },\n              disabledAncestor = addCombinator(function (elem) {\n            return elem.disabled === true && (\"form\" in elem || \"label\" in elem);\n          }, {\n            dir: \"parentNode\",\n            next: \"legend\"\n          }); // Optimize for push.apply( _, NodeList )\n\n\n          try {\n            push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0\n            // Detect silently failing push.apply\n\n            arr[preferredDoc.childNodes.length].nodeType;\n          } catch (e) {\n            push = {\n              apply: arr.length ? // Leverage slice if possible\n              function (target, els) {\n                push_native.apply(target, slice.call(els));\n              } : // Support: IE<9\n              // Otherwise append directly\n              function (target, els) {\n                var j = target.length,\n                    i = 0; // Can't trust NodeList.length\n\n                while (target[j++] = els[i++]) {}\n\n                target.length = j - 1;\n              }\n            };\n          }\n\n          function Sizzle(selector, context, results, seed) {\n            var m,\n                i,\n                elem,\n                nid,\n                match,\n                groups,\n                newSelector,\n                newContext = context && context.ownerDocument,\n                // nodeType defaults to 9, since context defaults to document\n            nodeType = context ? context.nodeType : 9;\n            results = results || []; // Return early from calls with invalid selector or context\n\n            if (typeof selector !== \"string\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n              return results;\n            } // Try to shortcut find operations (as opposed to filters) in HTML documents\n\n\n            if (!seed) {\n              if ((context ? context.ownerDocument || context : preferredDoc) !== document) {\n                setDocument(context);\n              }\n\n              context = context || document;\n\n              if (documentIsHTML) {\n                // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n                // (excepting DocumentFragment context, where the methods don't exist)\n                if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n                  // ID selector\n                  if (m = match[1]) {\n                    // Document context\n                    if (nodeType === 9) {\n                      if (elem = context.getElementById(m)) {\n                        // Support: IE, Opera, Webkit\n                        // TODO: identify versions\n                        // getElementById can match elements by name instead of ID\n                        if (elem.id === m) {\n                          results.push(elem);\n                          return results;\n                        }\n                      } else {\n                        return results;\n                      } // Element context\n\n                    } else {\n                      // Support: IE, Opera, Webkit\n                      // TODO: identify versions\n                      // getElementById can match elements by name instead of ID\n                      if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                        results.push(elem);\n                        return results;\n                      }\n                    } // Type selector\n\n                  } else if (match[2]) {\n                    push.apply(results, context.getElementsByTagName(selector));\n                    return results; // Class selector\n                  } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\n                    push.apply(results, context.getElementsByClassName(m));\n                    return results;\n                  }\n                } // Take advantage of querySelectorAll\n\n\n                if (support.qsa && !compilerCache[selector + \" \"] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {\n                  if (nodeType !== 1) {\n                    newContext = context;\n                    newSelector = selector; // qSA looks outside Element context, which is not what we want\n                    // Thanks to Andrew Dupont for this workaround technique\n                    // Support: IE <=8\n                    // Exclude object elements\n                  } else if (context.nodeName.toLowerCase() !== \"object\") {\n                    // Capture the context ID, setting it first if necessary\n                    if (nid = context.getAttribute(\"id\")) {\n                      nid = nid.replace(rcssescape, fcssescape);\n                    } else {\n                      context.setAttribute(\"id\", nid = expando);\n                    } // Prefix every selector in the list\n\n\n                    groups = tokenize(selector);\n                    i = groups.length;\n\n                    while (i--) {\n                      groups[i] = \"#\" + nid + \" \" + toSelector(groups[i]);\n                    }\n\n                    newSelector = groups.join(\",\"); // Expand context for sibling selectors\n\n                    newContext = rsibling.test(selector) && testContext(context.parentNode) || context;\n                  }\n\n                  if (newSelector) {\n                    try {\n                      push.apply(results, newContext.querySelectorAll(newSelector));\n                      return results;\n                    } catch (qsaError) {} finally {\n                      if (nid === expando) {\n                        context.removeAttribute(\"id\");\n                      }\n                    }\n                  }\n                }\n              }\n            } // All others\n\n\n            return select(selector.replace(rtrim, \"$1\"), context, results, seed);\n          }\n          /**\n           * Create key-value caches of limited size\n           * @returns {function(string, object)} Returns the Object data after storing it on itself with\n           *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n           *\tdeleting the oldest entry\n           */\n\n\n          function createCache() {\n            var keys = [];\n\n            function cache(key, value) {\n              // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n              if (keys.push(key + \" \") > Expr.cacheLength) {\n                // Only keep the most recent entries\n                delete cache[keys.shift()];\n              }\n\n              return cache[key + \" \"] = value;\n            }\n\n            return cache;\n          }\n          /**\n           * Mark a function for special use by Sizzle\n           * @param {Function} fn The function to mark\n           */\n\n\n          function markFunction(fn) {\n            fn[expando] = true;\n            return fn;\n          }\n          /**\n           * Support testing using an element\n           * @param {Function} fn Passed the created element and returns a boolean result\n           */\n\n\n          function assert(fn) {\n            var el = document.createElement(\"fieldset\");\n\n            try {\n              return !!fn(el);\n            } catch (e) {\n              return false;\n            } finally {\n              // Remove from its parent by default\n              if (el.parentNode) {\n                el.parentNode.removeChild(el);\n              } // release memory in IE\n\n\n              el = null;\n            }\n          }\n          /**\n           * Adds the same handler for all of the specified attrs\n           * @param {String} attrs Pipe-separated list of attributes\n           * @param {Function} handler The method that will be applied\n           */\n\n\n          function addHandle(attrs, handler) {\n            var arr = attrs.split(\"|\"),\n                i = arr.length;\n\n            while (i--) {\n              Expr.attrHandle[arr[i]] = handler;\n            }\n          }\n          /**\n           * Checks document order of two siblings\n           * @param {Element} a\n           * @param {Element} b\n           * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n           */\n\n\n          function siblingCheck(a, b) {\n            var cur = b && a,\n                diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes\n\n            if (diff) {\n              return diff;\n            } // Check if b follows a\n\n\n            if (cur) {\n              while (cur = cur.nextSibling) {\n                if (cur === b) {\n                  return -1;\n                }\n              }\n            }\n\n            return a ? 1 : -1;\n          }\n          /**\n           * Returns a function to use in pseudos for input types\n           * @param {String} type\n           */\n\n\n          function createInputPseudo(type) {\n            return function (elem) {\n              var name = elem.nodeName.toLowerCase();\n              return name === \"input\" && elem.type === type;\n            };\n          }\n          /**\n           * Returns a function to use in pseudos for buttons\n           * @param {String} type\n           */\n\n\n          function createButtonPseudo(type) {\n            return function (elem) {\n              var name = elem.nodeName.toLowerCase();\n              return (name === \"input\" || name === \"button\") && elem.type === type;\n            };\n          }\n          /**\n           * Returns a function to use in pseudos for :enabled/:disabled\n           * @param {Boolean} disabled true for :disabled; false for :enabled\n           */\n\n\n          function createDisabledPseudo(disabled) {\n            // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n            return function (elem) {\n              // Only certain elements can match :enabled or :disabled\n              // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n              // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n              if (\"form\" in elem) {\n                // Check for inherited disabledness on relevant non-disabled elements:\n                // * listed form-associated elements in a disabled fieldset\n                //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n                //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n                // * option elements in a disabled optgroup\n                //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n                // All such elements have a \"form\" property.\n                if (elem.parentNode && elem.disabled === false) {\n                  // Option elements defer to a parent optgroup if present\n                  if (\"label\" in elem) {\n                    if (\"label\" in elem.parentNode) {\n                      return elem.parentNode.disabled === disabled;\n                    } else {\n                      return elem.disabled === disabled;\n                    }\n                  } // Support: IE 6 - 11\n                  // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\n\n                  return elem.isDisabled === disabled || // Where there is no isDisabled, check manually\n\n                  /* jshint -W018 */\n                  elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;\n                }\n\n                return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.\n                // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n                // even exist on them, let alone have a boolean value.\n              } else if (\"label\" in elem) {\n                return elem.disabled === disabled;\n              } // Remaining elements are neither :enabled nor :disabled\n\n\n              return false;\n            };\n          }\n          /**\n           * Returns a function to use in pseudos for positionals\n           * @param {Function} fn\n           */\n\n\n          function createPositionalPseudo(fn) {\n            return markFunction(function (argument) {\n              argument = +argument;\n              return markFunction(function (seed, matches) {\n                var j,\n                    matchIndexes = fn([], seed.length, argument),\n                    i = matchIndexes.length; // Match elements found at the specified indexes\n\n                while (i--) {\n                  if (seed[j = matchIndexes[i]]) {\n                    seed[j] = !(matches[j] = seed[j]);\n                  }\n                }\n              });\n            });\n          }\n          /**\n           * Checks a node for validity as a Sizzle context\n           * @param {Element|Object=} context\n           * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n           */\n\n\n          function testContext(context) {\n            return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n          } // Expose support vars for convenience\n\n\n          support = Sizzle.support = {};\n          /**\n           * Detects XML nodes\n           * @param {Element|Object} elem An element or a document\n           * @returns {Boolean} True iff elem is a non-HTML XML node\n           */\n\n          isXML = Sizzle.isXML = function (elem) {\n            // documentElement is verified for cases where it doesn't yet exist\n            // (such as loading iframes in IE - #4833)\n            var documentElement = elem && (elem.ownerDocument || elem).documentElement;\n            return documentElement ? documentElement.nodeName !== \"HTML\" : false;\n          };\n          /**\n           * Sets document-related variables once based on the current document\n           * @param {Element|Object} [doc] An element or document object to use to set the document\n           * @returns {Object} Returns the current document\n           */\n\n\n          setDocument = Sizzle.setDocument = function (node) {\n            var hasCompare,\n                subWindow,\n                doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected\n\n            if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\n              return document;\n            } // Update global variables\n\n\n            document = doc;\n            docElem = document.documentElement;\n            documentIsHTML = !isXML(document); // Support: IE 9-11, Edge\n            // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\n            if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n              // Support: IE 11, Edge\n              if (subWindow.addEventListener) {\n                subWindow.addEventListener(\"unload\", unloadHandler, false); // Support: IE 9 - 10 only\n              } else if (subWindow.attachEvent) {\n                subWindow.attachEvent(\"onunload\", unloadHandler);\n              }\n            }\n            /* Attributes\n            ---------------------------------------------------------------------- */\n            // Support: IE<8\n            // Verify that getAttribute really returns attributes and not properties\n            // (excepting IE8 booleans)\n\n\n            support.attributes = assert(function (el) {\n              el.className = \"i\";\n              return !el.getAttribute(\"className\");\n            });\n            /* getElement(s)By*\n            ---------------------------------------------------------------------- */\n            // Check if getElementsByTagName(\"*\") returns only elements\n\n            support.getElementsByTagName = assert(function (el) {\n              el.appendChild(document.createComment(\"\"));\n              return !el.getElementsByTagName(\"*\").length;\n            }); // Support: IE<9\n\n            support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10\n            // Check if getElementById returns elements by name\n            // The broken getElementById methods don't pick up programmatically-set names,\n            // so use a roundabout getElementsByName test\n\n            support.getById = assert(function (el) {\n              docElem.appendChild(el).id = expando;\n              return !document.getElementsByName || !document.getElementsByName(expando).length;\n            }); // ID filter and find\n\n            if (support.getById) {\n              Expr.filter[\"ID\"] = function (id) {\n                var attrId = id.replace(runescape, funescape);\n                return function (elem) {\n                  return elem.getAttribute(\"id\") === attrId;\n                };\n              };\n\n              Expr.find[\"ID\"] = function (id, context) {\n                if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n                  var elem = context.getElementById(id);\n                  return elem ? [elem] : [];\n                }\n              };\n            } else {\n              Expr.filter[\"ID\"] = function (id) {\n                var attrId = id.replace(runescape, funescape);\n                return function (elem) {\n                  var node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n                  return node && node.value === attrId;\n                };\n              }; // Support: IE 6 - 7 only\n              // getElementById is not reliable as a find shortcut\n\n\n              Expr.find[\"ID\"] = function (id, context) {\n                if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n                  var node,\n                      i,\n                      elems,\n                      elem = context.getElementById(id);\n\n                  if (elem) {\n                    // Verify the id attribute\n                    node = elem.getAttributeNode(\"id\");\n\n                    if (node && node.value === id) {\n                      return [elem];\n                    } // Fall back on getElementsByName\n\n\n                    elems = context.getElementsByName(id);\n                    i = 0;\n\n                    while (elem = elems[i++]) {\n                      node = elem.getAttributeNode(\"id\");\n\n                      if (node && node.value === id) {\n                        return [elem];\n                      }\n                    }\n                  }\n\n                  return [];\n                }\n              };\n            } // Tag\n\n\n            Expr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\n              if (typeof context.getElementsByTagName !== \"undefined\") {\n                return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN\n              } else if (support.qsa) {\n                return context.querySelectorAll(tag);\n              }\n            } : function (tag, context) {\n              var elem,\n                  tmp = [],\n                  i = 0,\n                  // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n              results = context.getElementsByTagName(tag); // Filter out possible comments\n\n              if (tag === \"*\") {\n                while (elem = results[i++]) {\n                  if (elem.nodeType === 1) {\n                    tmp.push(elem);\n                  }\n                }\n\n                return tmp;\n              }\n\n              return results;\n            }; // Class\n\n            Expr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\n              if (typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML) {\n                return context.getElementsByClassName(className);\n              }\n            };\n            /* QSA/matchesSelector\n            ---------------------------------------------------------------------- */\n            // QSA and matchesSelector support\n            // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\n\n            rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)\n            // We allow this because of a bug in IE8/9 that throws an error\n            // whenever `document.activeElement` is accessed on an iframe\n            // So, we allow :focus to pass through QSA all the time to avoid the IE error\n            // See https://bugs.jquery.com/ticket/13378\n\n            rbuggyQSA = [];\n\n            if (support.qsa = rnative.test(document.querySelectorAll)) {\n              // Build QSA regex\n              // Regex strategy adopted from Diego Perini\n              assert(function (el) {\n                // Select is set to empty string on purpose\n                // This is to test IE's treatment of not explicitly\n                // setting a boolean content attribute,\n                // since its presence should be enough\n                // https://bugs.jquery.com/ticket/12359\n                docElem.appendChild(el).innerHTML = \"<a id='\" + expando + \"'></a>\" + \"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" + \"<option selected=''></option></select>\"; // Support: IE8, Opera 11-12.16\n                // Nothing should be selected when empty strings follow ^= or $= or *=\n                // The test attribute must be unknown in Opera but \"safe\" for WinRT\n                // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\n                if (el.querySelectorAll(\"[msallowcapture^='']\").length) {\n                  rbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\");\n                } // Support: IE8\n                // Boolean attributes and \"value\" are not treated correctly\n\n\n                if (!el.querySelectorAll(\"[selected]\").length) {\n                  rbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\n                } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\n\n                if (!el.querySelectorAll(\"[id~=\" + expando + \"-]\").length) {\n                  rbuggyQSA.push(\"~=\");\n                } // Webkit/Opera - :checked should return selected option elements\n                // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n                // IE8 throws error here and will not see later tests\n\n\n                if (!el.querySelectorAll(\":checked\").length) {\n                  rbuggyQSA.push(\":checked\");\n                } // Support: Safari 8+, iOS 8+\n                // https://bugs.webkit.org/show_bug.cgi?id=136851\n                // In-page `selector#id sibling-combinator selector` fails\n\n\n                if (!el.querySelectorAll(\"a#\" + expando + \"+*\").length) {\n                  rbuggyQSA.push(\".#.+[+~]\");\n                }\n              });\n              assert(function (el) {\n                el.innerHTML = \"<a href='' disabled='disabled'></a>\" + \"<select disabled='disabled'><option/></select>\"; // Support: Windows 8 Native Apps\n                // The type and name attributes are restricted during .innerHTML assignment\n\n                var input = document.createElement(\"input\");\n                input.setAttribute(\"type\", \"hidden\");\n                el.appendChild(input).setAttribute(\"name\", \"D\"); // Support: IE8\n                // Enforce case-sensitivity of name attribute\n\n                if (el.querySelectorAll(\"[name=d]\").length) {\n                  rbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\n                } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n                // IE8 throws error here and will not see later tests\n\n\n                if (el.querySelectorAll(\":enabled\").length !== 2) {\n                  rbuggyQSA.push(\":enabled\", \":disabled\");\n                } // Support: IE9-11+\n                // IE's :disabled selector does not pick up the children of disabled fieldsets\n\n\n                docElem.appendChild(el).disabled = true;\n\n                if (el.querySelectorAll(\":disabled\").length !== 2) {\n                  rbuggyQSA.push(\":enabled\", \":disabled\");\n                } // Opera 10-11 does not throw on post-comma invalid pseudos\n\n\n                el.querySelectorAll(\"*,:x\");\n                rbuggyQSA.push(\",.*:\");\n              });\n            }\n\n            if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n              assert(function (el) {\n                // Check to see if it's possible to do matchesSelector\n                // on a disconnected node (IE 9)\n                support.disconnectedMatch = matches.call(el, \"*\"); // This should fail with an exception\n                // Gecko does not error, returns false instead\n\n                matches.call(el, \"[s!='']:x\");\n                rbuggyMatches.push(\"!=\", pseudos);\n              });\n            }\n\n            rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\n            rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\n            /* Contains\n            ---------------------------------------------------------------------- */\n\n            hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another\n            // Purposefully self-exclusive\n            // As in, an element does not contain itself\n\n            contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n              var adown = a.nodeType === 9 ? a.documentElement : a,\n                  bup = b && b.parentNode;\n              return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n            } : function (a, b) {\n              if (b) {\n                while (b = b.parentNode) {\n                  if (b === a) {\n                    return true;\n                  }\n                }\n              }\n\n              return false;\n            };\n            /* Sorting\n            ---------------------------------------------------------------------- */\n            // Document order sorting\n\n            sortOrder = hasCompare ? function (a, b) {\n              // Flag for duplicate removal\n              if (a === b) {\n                hasDuplicate = true;\n                return 0;\n              } // Sort on method existence if only one input has compareDocumentPosition\n\n\n              var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n              if (compare) {\n                return compare;\n              } // Calculate position if both inputs belong to the same document\n\n\n              compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected\n              1; // Disconnected nodes\n\n              if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n                // Choose the first element that is related to our preferred document\n                if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {\n                  return -1;\n                }\n\n                if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {\n                  return 1;\n                } // Maintain original order\n\n\n                return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n              }\n\n              return compare & 4 ? -1 : 1;\n            } : function (a, b) {\n              // Exit early if the nodes are identical\n              if (a === b) {\n                hasDuplicate = true;\n                return 0;\n              }\n\n              var cur,\n                  i = 0,\n                  aup = a.parentNode,\n                  bup = b.parentNode,\n                  ap = [a],\n                  bp = [b]; // Parentless nodes are either documents or disconnected\n\n              if (!aup || !bup) {\n                return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check\n              } else if (aup === bup) {\n                return siblingCheck(a, b);\n              } // Otherwise we need full lists of their ancestors for comparison\n\n\n              cur = a;\n\n              while (cur = cur.parentNode) {\n                ap.unshift(cur);\n              }\n\n              cur = b;\n\n              while (cur = cur.parentNode) {\n                bp.unshift(cur);\n              } // Walk down the tree looking for a discrepancy\n\n\n              while (ap[i] === bp[i]) {\n                i++;\n              }\n\n              return i ? // Do a sibling check if the nodes have a common ancestor\n              siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first\n              ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\n            };\n            return document;\n          };\n\n          Sizzle.matches = function (expr, elements) {\n            return Sizzle(expr, null, null, elements);\n          };\n\n          Sizzle.matchesSelector = function (elem, expr) {\n            // Set document vars if needed\n            if ((elem.ownerDocument || elem) !== document) {\n              setDocument(elem);\n            } // Make sure that attribute selectors are quoted\n\n\n            expr = expr.replace(rattributeQuotes, \"='$1']\");\n\n            if (support.matchesSelector && documentIsHTML && !compilerCache[expr + \" \"] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n              try {\n                var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes\n\n                if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document\n                // fragment in IE 9\n                elem.document && elem.document.nodeType !== 11) {\n                  return ret;\n                }\n              } catch (e) {}\n            }\n\n            return Sizzle(expr, document, null, [elem]).length > 0;\n          };\n\n          Sizzle.contains = function (context, elem) {\n            // Set document vars if needed\n            if ((context.ownerDocument || context) !== document) {\n              setDocument(context);\n            }\n\n            return contains(context, elem);\n          };\n\n          Sizzle.attr = function (elem, name) {\n            // Set document vars if needed\n            if ((elem.ownerDocument || elem) !== document) {\n              setDocument(elem);\n            }\n\n            var fn = Expr.attrHandle[name.toLowerCase()],\n                // Don't get fooled by Object.prototype properties (jQuery #13807)\n            val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n            return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n          };\n\n          Sizzle.escape = function (sel) {\n            return (sel + \"\").replace(rcssescape, fcssescape);\n          };\n\n          Sizzle.error = function (msg) {\n            throw new Error(\"Syntax error, unrecognized expression: \" + msg);\n          };\n          /**\n           * Document sorting and removing duplicates\n           * @param {ArrayLike} results\n           */\n\n\n          Sizzle.uniqueSort = function (results) {\n            var elem,\n                duplicates = [],\n                j = 0,\n                i = 0; // Unless we *know* we can detect duplicates, assume their presence\n\n            hasDuplicate = !support.detectDuplicates;\n            sortInput = !support.sortStable && results.slice(0);\n            results.sort(sortOrder);\n\n            if (hasDuplicate) {\n              while (elem = results[i++]) {\n                if (elem === results[i]) {\n                  j = duplicates.push(i);\n                }\n              }\n\n              while (j--) {\n                results.splice(duplicates[j], 1);\n              }\n            } // Clear input after sorting to release objects\n            // See https://github.com/jquery/sizzle/pull/225\n\n\n            sortInput = null;\n            return results;\n          };\n          /**\n           * Utility function for retrieving the text value of an array of DOM nodes\n           * @param {Array|Element} elem\n           */\n\n\n          getText = Sizzle.getText = function (elem) {\n            var node,\n                ret = \"\",\n                i = 0,\n                nodeType = elem.nodeType;\n\n            if (!nodeType) {\n              // If no nodeType, this is expected to be an array\n              while (node = elem[i++]) {\n                // Do not traverse comment nodes\n                ret += getText(node);\n              }\n            } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n              // Use textContent for elements\n              // innerText usage removed for consistency of new lines (jQuery #11153)\n              if (typeof elem.textContent === \"string\") {\n                return elem.textContent;\n              } else {\n                // Traverse its children\n                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n                  ret += getText(elem);\n                }\n              }\n            } else if (nodeType === 3 || nodeType === 4) {\n              return elem.nodeValue;\n            } // Do not include comment or processing instruction nodes\n\n\n            return ret;\n          };\n\n          Expr = Sizzle.selectors = {\n            // Can be adjusted by the user\n            cacheLength: 50,\n            createPseudo: markFunction,\n            match: matchExpr,\n            attrHandle: {},\n            find: {},\n            relative: {\n              \">\": {\n                dir: \"parentNode\",\n                first: true\n              },\n              \" \": {\n                dir: \"parentNode\"\n              },\n              \"+\": {\n                dir: \"previousSibling\",\n                first: true\n              },\n              \"~\": {\n                dir: \"previousSibling\"\n              }\n            },\n            preFilter: {\n              \"ATTR\": function ATTR(match) {\n                match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted\n\n                match[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\n\n                if (match[2] === \"~=\") {\n                  match[3] = \" \" + match[3] + \" \";\n                }\n\n                return match.slice(0, 4);\n              },\n              \"CHILD\": function CHILD(match) {\n                /* matches from matchExpr[\"CHILD\"]\n                \t1 type (only|nth|...)\n                \t2 what (child|of-type)\n                \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n                \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n                \t5 sign of xn-component\n                \t6 x of xn-component\n                \t7 sign of y-component\n                \t8 y of y-component\n                */\n                match[1] = match[1].toLowerCase();\n\n                if (match[1].slice(0, 3) === \"nth\") {\n                  // nth-* requires argument\n                  if (!match[3]) {\n                    Sizzle.error(match[0]);\n                  } // numeric x and y parameters for Expr.filter.CHILD\n                  // remember that false/true cast respectively to 0/1\n\n\n                  match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n                  match[5] = +(match[7] + match[8] || match[3] === \"odd\"); // other types prohibit arguments\n                } else if (match[3]) {\n                  Sizzle.error(match[0]);\n                }\n\n                return match;\n              },\n              \"PSEUDO\": function PSEUDO(match) {\n                var excess,\n                    unquoted = !match[6] && match[2];\n\n                if (matchExpr[\"CHILD\"].test(match[0])) {\n                  return null;\n                } // Accept quoted arguments as-is\n\n\n                if (match[3]) {\n                  match[2] = match[4] || match[5] || \"\"; // Strip excess characters from unquoted arguments\n                } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)\n                excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis\n                excess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n                  // excess is a negative index\n                  match[0] = match[0].slice(0, excess);\n                  match[2] = unquoted.slice(0, excess);\n                } // Return only captures needed by the pseudo filter method (type and argument)\n\n\n                return match.slice(0, 3);\n              }\n            },\n            filter: {\n              \"TAG\": function TAG(nodeNameSelector) {\n                var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n                return nodeNameSelector === \"*\" ? function () {\n                  return true;\n                } : function (elem) {\n                  return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n                };\n              },\n              \"CLASS\": function CLASS(className) {\n                var pattern = classCache[className + \" \"];\n                return pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n                  return pattern.test(typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\");\n                });\n              },\n              \"ATTR\": function ATTR(name, operator, check) {\n                return function (elem) {\n                  var result = Sizzle.attr(elem, name);\n\n                  if (result == null) {\n                    return operator === \"!=\";\n                  }\n\n                  if (!operator) {\n                    return true;\n                  }\n\n                  result += \"\";\n                  return operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result.replace(rwhitespace, \" \") + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n                };\n              },\n              \"CHILD\": function CHILD(type, what, argument, first, last) {\n                var simple = type.slice(0, 3) !== \"nth\",\n                    forward = type.slice(-4) !== \"last\",\n                    ofType = what === \"of-type\";\n                return first === 1 && last === 0 ? // Shortcut for :nth-*(n)\n                function (elem) {\n                  return !!elem.parentNode;\n                } : function (elem, context, xml) {\n                  var cache,\n                      uniqueCache,\n                      outerCache,\n                      node,\n                      nodeIndex,\n                      start,\n                      dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                      parent = elem.parentNode,\n                      name = ofType && elem.nodeName.toLowerCase(),\n                      useCache = !xml && !ofType,\n                      diff = false;\n\n                  if (parent) {\n                    // :(first|last|only)-(child|of-type)\n                    if (simple) {\n                      while (dir) {\n                        node = elem;\n\n                        while (node = node[dir]) {\n                          if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n                            return false;\n                          }\n                        } // Reverse direction for :only-* (if we haven't yet done so)\n\n\n                        start = dir = type === \"only\" && !start && \"nextSibling\";\n                      }\n\n                      return true;\n                    }\n\n                    start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`\n\n                    if (forward && useCache) {\n                      // Seek `elem` from a previously-cached index\n                      // ...in a gzip-friendly way\n                      node = parent;\n                      outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                      // Defend against cloned attroperties (jQuery gh-1709)\n\n                      uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                      cache = uniqueCache[type] || [];\n                      nodeIndex = cache[0] === dirruns && cache[1];\n                      diff = nodeIndex && cache[2];\n                      node = nodeIndex && parent.childNodes[nodeIndex];\n\n                      while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start\n                      diff = nodeIndex = 0) || start.pop()) {\n                        // When found, cache indexes on `parent` and break\n                        if (node.nodeType === 1 && ++diff && node === elem) {\n                          uniqueCache[type] = [dirruns, nodeIndex, diff];\n                          break;\n                        }\n                      }\n                    } else {\n                      // Use previously-cached element index if available\n                      if (useCache) {\n                        // ...in a gzip-friendly way\n                        node = elem;\n                        outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                        // Defend against cloned attroperties (jQuery gh-1709)\n\n                        uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                        cache = uniqueCache[type] || [];\n                        nodeIndex = cache[0] === dirruns && cache[1];\n                        diff = nodeIndex;\n                      } // xml :nth-child(...)\n                      // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\n\n                      if (diff === false) {\n                        // Use the same loop as above to seek `elem` from the start\n                        while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                          if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n                            // Cache the index of each encountered element\n                            if (useCache) {\n                              outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                              // Defend against cloned attroperties (jQuery gh-1709)\n\n                              uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                              uniqueCache[type] = [dirruns, diff];\n                            }\n\n                            if (node === elem) {\n                              break;\n                            }\n                          }\n                        }\n                      }\n                    } // Incorporate the offset, then check against cycle size\n\n\n                    diff -= last;\n                    return diff === first || diff % first === 0 && diff / first >= 0;\n                  }\n                };\n              },\n              \"PSEUDO\": function PSEUDO(pseudo, argument) {\n                // pseudo-class names are case-insensitive\n                // http://www.w3.org/TR/selectors/#pseudo-classes\n                // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n                // Remember that setFilters inherits from pseudos\n                var args,\n                    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo); // The user may use createPseudo to indicate that\n                // arguments are needed to create the filter function\n                // just as Sizzle does\n\n                if (fn[expando]) {\n                  return fn(argument);\n                } // But maintain support for old signatures\n\n\n                if (fn.length > 1) {\n                  args = [pseudo, pseudo, \"\", argument];\n                  return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n                    var idx,\n                        matched = fn(seed, argument),\n                        i = matched.length;\n\n                    while (i--) {\n                      idx = indexOf(seed, matched[i]);\n                      seed[idx] = !(matches[idx] = matched[i]);\n                    }\n                  }) : function (elem) {\n                    return fn(elem, 0, args);\n                  };\n                }\n\n                return fn;\n              }\n            },\n            pseudos: {\n              // Potentially complex pseudos\n              \"not\": markFunction(function (selector) {\n                // Trim the selector passed to compile\n                // to avoid treating leading and trailing\n                // spaces as combinators\n                var input = [],\n                    results = [],\n                    matcher = compile(selector.replace(rtrim, \"$1\"));\n                return matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n                  var elem,\n                      unmatched = matcher(seed, null, xml, []),\n                      i = seed.length; // Match elements unmatched by `matcher`\n\n                  while (i--) {\n                    if (elem = unmatched[i]) {\n                      seed[i] = !(matches[i] = elem);\n                    }\n                  }\n                }) : function (elem, context, xml) {\n                  input[0] = elem;\n                  matcher(input, null, xml, results); // Don't keep the element (issue #299)\n\n                  input[0] = null;\n                  return !results.pop();\n                };\n              }),\n              \"has\": markFunction(function (selector) {\n                return function (elem) {\n                  return Sizzle(selector, elem).length > 0;\n                };\n              }),\n              \"contains\": markFunction(function (text) {\n                text = text.replace(runescape, funescape);\n                return function (elem) {\n                  return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;\n                };\n              }),\n              // \"Whether an element is represented by a :lang() selector\n              // is based solely on the element's language value\n              // being equal to the identifier C,\n              // or beginning with the identifier C immediately followed by \"-\".\n              // The matching of C against the element's language value is performed case-insensitively.\n              // The identifier C does not have to be a valid language name.\"\n              // http://www.w3.org/TR/selectors/#lang-pseudo\n              \"lang\": markFunction(function (lang) {\n                // lang value must be a valid identifier\n                if (!ridentifier.test(lang || \"\")) {\n                  Sizzle.error(\"unsupported lang: \" + lang);\n                }\n\n                lang = lang.replace(runescape, funescape).toLowerCase();\n                return function (elem) {\n                  var elemLang;\n\n                  do {\n                    if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\n                      elemLang = elemLang.toLowerCase();\n                      return elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n                    }\n                  } while ((elem = elem.parentNode) && elem.nodeType === 1);\n\n                  return false;\n                };\n              }),\n              // Miscellaneous\n              \"target\": function target(elem) {\n                var hash = window.location && window.location.hash;\n                return hash && hash.slice(1) === elem.id;\n              },\n              \"root\": function root(elem) {\n                return elem === docElem;\n              },\n              \"focus\": function focus(elem) {\n                return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n              },\n              // Boolean properties\n              \"enabled\": createDisabledPseudo(false),\n              \"disabled\": createDisabledPseudo(true),\n              \"checked\": function checked(elem) {\n                // In CSS3, :checked should return both checked and selected elements\n                // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n                var nodeName = elem.nodeName.toLowerCase();\n                return nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n              },\n              \"selected\": function selected(elem) {\n                // Accessing this property makes selected-by-default\n                // options in Safari work properly\n                if (elem.parentNode) {\n                  elem.parentNode.selectedIndex;\n                }\n\n                return elem.selected === true;\n              },\n              // Contents\n              \"empty\": function empty(elem) {\n                // http://www.w3.org/TR/selectors/#empty-pseudo\n                // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n                //   but not by others (comment: 8; processing instruction: 7; etc.)\n                // nodeType < 6 works because attributes (2) do not appear as children\n                for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n                  if (elem.nodeType < 6) {\n                    return false;\n                  }\n                }\n\n                return true;\n              },\n              \"parent\": function parent(elem) {\n                return !Expr.pseudos[\"empty\"](elem);\n              },\n              // Element/input types\n              \"header\": function header(elem) {\n                return rheader.test(elem.nodeName);\n              },\n              \"input\": function input(elem) {\n                return rinputs.test(elem.nodeName);\n              },\n              \"button\": function button(elem) {\n                var name = elem.nodeName.toLowerCase();\n                return name === \"input\" && elem.type === \"button\" || name === \"button\";\n              },\n              \"text\": function text(elem) {\n                var attr;\n                return elem.nodeName.toLowerCase() === \"input\" && elem.type === \"text\" && ( // Support: IE<8\n                // New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n                (attr = elem.getAttribute(\"type\")) == null || attr.toLowerCase() === \"text\");\n              },\n              // Position-in-collection\n              \"first\": createPositionalPseudo(function () {\n                return [0];\n              }),\n              \"last\": createPositionalPseudo(function (matchIndexes, length) {\n                return [length - 1];\n              }),\n              \"eq\": createPositionalPseudo(function (matchIndexes, length, argument) {\n                return [argument < 0 ? argument + length : argument];\n              }),\n              \"even\": createPositionalPseudo(function (matchIndexes, length) {\n                var i = 0;\n\n                for (; i < length; i += 2) {\n                  matchIndexes.push(i);\n                }\n\n                return matchIndexes;\n              }),\n              \"odd\": createPositionalPseudo(function (matchIndexes, length) {\n                var i = 1;\n\n                for (; i < length; i += 2) {\n                  matchIndexes.push(i);\n                }\n\n                return matchIndexes;\n              }),\n              \"lt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n                var i = argument < 0 ? argument + length : argument;\n\n                for (; --i >= 0;) {\n                  matchIndexes.push(i);\n                }\n\n                return matchIndexes;\n              }),\n              \"gt\": createPositionalPseudo(function (matchIndexes, length, argument) {\n                var i = argument < 0 ? argument + length : argument;\n\n                for (; ++i < length;) {\n                  matchIndexes.push(i);\n                }\n\n                return matchIndexes;\n              })\n            }\n          };\n          Expr.pseudos[\"nth\"] = Expr.pseudos[\"eq\"]; // Add button/input type pseudos\n\n          for (i in {\n            radio: true,\n            checkbox: true,\n            file: true,\n            password: true,\n            image: true\n          }) {\n            Expr.pseudos[i] = createInputPseudo(i);\n          }\n\n          for (i in {\n            submit: true,\n            reset: true\n          }) {\n            Expr.pseudos[i] = createButtonPseudo(i);\n          } // Easy API for creating new setFilters\n\n\n          function setFilters() {}\n\n          setFilters.prototype = Expr.filters = Expr.pseudos;\n          Expr.setFilters = new setFilters();\n\n          tokenize = Sizzle.tokenize = function (selector, parseOnly) {\n            var matched,\n                match,\n                tokens,\n                type,\n                soFar,\n                groups,\n                preFilters,\n                cached = tokenCache[selector + \" \"];\n\n            if (cached) {\n              return parseOnly ? 0 : cached.slice(0);\n            }\n\n            soFar = selector;\n            groups = [];\n            preFilters = Expr.preFilter;\n\n            while (soFar) {\n              // Comma and first run\n              if (!matched || (match = rcomma.exec(soFar))) {\n                if (match) {\n                  // Don't consume trailing commas as valid\n                  soFar = soFar.slice(match[0].length) || soFar;\n                }\n\n                groups.push(tokens = []);\n              }\n\n              matched = false; // Combinators\n\n              if (match = rcombinators.exec(soFar)) {\n                matched = match.shift();\n                tokens.push({\n                  value: matched,\n                  // Cast descendant combinators to space\n                  type: match[0].replace(rtrim, \" \")\n                });\n                soFar = soFar.slice(matched.length);\n              } // Filters\n\n\n              for (type in Expr.filter) {\n                if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n                  matched = match.shift();\n                  tokens.push({\n                    value: matched,\n                    type: type,\n                    matches: match\n                  });\n                  soFar = soFar.slice(matched.length);\n                }\n              }\n\n              if (!matched) {\n                break;\n              }\n            } // Return the length of the invalid excess\n            // if we're just parsing\n            // Otherwise, throw an error or return tokens\n\n\n            return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) : // Cache the tokens\n            tokenCache(selector, groups).slice(0);\n          };\n\n          function toSelector(tokens) {\n            var i = 0,\n                len = tokens.length,\n                selector = \"\";\n\n            for (; i < len; i++) {\n              selector += tokens[i].value;\n            }\n\n            return selector;\n          }\n\n          function addCombinator(matcher, combinator, base) {\n            var dir = combinator.dir,\n                skip = combinator.next,\n                key = skip || dir,\n                checkNonElements = base && key === \"parentNode\",\n                doneName = done++;\n            return combinator.first ? // Check against closest ancestor/preceding element\n            function (elem, context, xml) {\n              while (elem = elem[dir]) {\n                if (elem.nodeType === 1 || checkNonElements) {\n                  return matcher(elem, context, xml);\n                }\n              }\n\n              return false;\n            } : // Check against all ancestor/preceding elements\n            function (elem, context, xml) {\n              var oldCache,\n                  uniqueCache,\n                  outerCache,\n                  newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\n              if (xml) {\n                while (elem = elem[dir]) {\n                  if (elem.nodeType === 1 || checkNonElements) {\n                    if (matcher(elem, context, xml)) {\n                      return true;\n                    }\n                  }\n                }\n              } else {\n                while (elem = elem[dir]) {\n                  if (elem.nodeType === 1 || checkNonElements) {\n                    outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only\n                    // Defend against cloned attroperties (jQuery gh-1709)\n\n                    uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\n\n                    if (skip && skip === elem.nodeName.toLowerCase()) {\n                      elem = elem[dir] || elem;\n                    } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n                      // Assign to newCache so results back-propagate to previous elements\n                      return newCache[2] = oldCache[2];\n                    } else {\n                      // Reuse newcache so results back-propagate to previous elements\n                      uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking\n\n                      if (newCache[2] = matcher(elem, context, xml)) {\n                        return true;\n                      }\n                    }\n                  }\n                }\n              }\n\n              return false;\n            };\n          }\n\n          function elementMatcher(matchers) {\n            return matchers.length > 1 ? function (elem, context, xml) {\n              var i = matchers.length;\n\n              while (i--) {\n                if (!matchers[i](elem, context, xml)) {\n                  return false;\n                }\n              }\n\n              return true;\n            } : matchers[0];\n          }\n\n          function multipleContexts(selector, contexts, results) {\n            var i = 0,\n                len = contexts.length;\n\n            for (; i < len; i++) {\n              Sizzle(selector, contexts[i], results);\n            }\n\n            return results;\n          }\n\n          function condense(unmatched, map, filter, context, xml) {\n            var elem,\n                newUnmatched = [],\n                i = 0,\n                len = unmatched.length,\n                mapped = map != null;\n\n            for (; i < len; i++) {\n              if (elem = unmatched[i]) {\n                if (!filter || filter(elem, context, xml)) {\n                  newUnmatched.push(elem);\n\n                  if (mapped) {\n                    map.push(i);\n                  }\n                }\n              }\n            }\n\n            return newUnmatched;\n          }\n\n          function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n            if (postFilter && !postFilter[expando]) {\n              postFilter = setMatcher(postFilter);\n            }\n\n            if (postFinder && !postFinder[expando]) {\n              postFinder = setMatcher(postFinder, postSelector);\n            }\n\n            return markFunction(function (seed, results, context, xml) {\n              var temp,\n                  i,\n                  elem,\n                  preMap = [],\n                  postMap = [],\n                  preexisting = results.length,\n                  // Get initial elements from seed or context\n              elems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n                  // Prefilter to get matcher input, preserving a map for seed-results synchronization\n              matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n                  matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n              postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary\n              [] : // ...otherwise use results directly\n              results : matcherIn; // Find primary matches\n\n              if (matcher) {\n                matcher(matcherIn, matcherOut, context, xml);\n              } // Apply postFilter\n\n\n              if (postFilter) {\n                temp = condense(matcherOut, postMap);\n                postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn\n\n                i = temp.length;\n\n                while (i--) {\n                  if (elem = temp[i]) {\n                    matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n                  }\n                }\n              }\n\n              if (seed) {\n                if (postFinder || preFilter) {\n                  if (postFinder) {\n                    // Get the final matcherOut by condensing this intermediate into postFinder contexts\n                    temp = [];\n                    i = matcherOut.length;\n\n                    while (i--) {\n                      if (elem = matcherOut[i]) {\n                        // Restore matcherIn since elem is not yet a final match\n                        temp.push(matcherIn[i] = elem);\n                      }\n                    }\n\n                    postFinder(null, matcherOut = [], temp, xml);\n                  } // Move matched elements from seed to results to keep them synchronized\n\n\n                  i = matcherOut.length;\n\n                  while (i--) {\n                    if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n                      seed[temp] = !(results[temp] = elem);\n                    }\n                  }\n                } // Add elements to results, through postFinder if defined\n\n              } else {\n                matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\n                if (postFinder) {\n                  postFinder(null, results, matcherOut, xml);\n                } else {\n                  push.apply(results, matcherOut);\n                }\n              }\n            });\n          }\n\n          function matcherFromTokens(tokens) {\n            var checkContext,\n                matcher,\n                j,\n                len = tokens.length,\n                leadingRelative = Expr.relative[tokens[0].type],\n                implicitRelative = leadingRelative || Expr.relative[\" \"],\n                i = leadingRelative ? 1 : 0,\n                // The foundational matcher ensures that elements are reachable from top-level context(s)\n            matchContext = addCombinator(function (elem) {\n              return elem === checkContext;\n            }, implicitRelative, true),\n                matchAnyContext = addCombinator(function (elem) {\n              return indexOf(checkContext, elem) > -1;\n            }, implicitRelative, true),\n                matchers = [function (elem, context, xml) {\n              var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)\n\n              checkContext = null;\n              return ret;\n            }];\n\n            for (; i < len; i++) {\n              if (matcher = Expr.relative[tokens[i].type]) {\n                matchers = [addCombinator(elementMatcher(matchers), matcher)];\n              } else {\n                matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher\n\n                if (matcher[expando]) {\n                  // Find the next relative operator (if any) for proper handling\n                  j = ++i;\n\n                  for (; j < len; j++) {\n                    if (Expr.relative[tokens[j].type]) {\n                      break;\n                    }\n                  }\n\n                  return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n                  tokens.slice(0, i - 1).concat({\n                    value: tokens[i - 2].type === \" \" ? \"*\" : \"\"\n                  })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n                }\n\n                matchers.push(matcher);\n              }\n            }\n\n            return elementMatcher(matchers);\n          }\n\n          function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n            var bySet = setMatchers.length > 0,\n                byElement = elementMatchers.length > 0,\n                superMatcher = function superMatcher(seed, context, xml, results, outermost) {\n              var elem,\n                  j,\n                  matcher,\n                  matchedCount = 0,\n                  i = \"0\",\n                  unmatched = seed && [],\n                  setMatched = [],\n                  contextBackup = outermostContext,\n                  // We must always have either seed elements or outermost context\n              elems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\n                  // Use integer dirruns iff this is the outermost matcher\n              dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n                  len = elems.length;\n\n              if (outermost) {\n                outermostContext = context === document || context || outermost;\n              } // Add elements passing elementMatchers directly to results\n              // Support: IE<9, Safari\n              // Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\n\n              for (; i !== len && (elem = elems[i]) != null; i++) {\n                if (byElement && elem) {\n                  j = 0;\n\n                  if (!context && elem.ownerDocument !== document) {\n                    setDocument(elem);\n                    xml = !documentIsHTML;\n                  }\n\n                  while (matcher = elementMatchers[j++]) {\n                    if (matcher(elem, context || document, xml)) {\n                      results.push(elem);\n                      break;\n                    }\n                  }\n\n                  if (outermost) {\n                    dirruns = dirrunsUnique;\n                  }\n                } // Track unmatched elements for set filters\n\n\n                if (bySet) {\n                  // They will have gone through all possible matchers\n                  if (elem = !matcher && elem) {\n                    matchedCount--;\n                  } // Lengthen the array for every element, matched or not\n\n\n                  if (seed) {\n                    unmatched.push(elem);\n                  }\n                }\n              } // `i` is now the count of elements visited above, and adding it to `matchedCount`\n              // makes the latter nonnegative.\n\n\n              matchedCount += i; // Apply set filters to unmatched elements\n              // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n              // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n              // no element matchers and no seed.\n              // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n              // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n              // numerically zero.\n\n              if (bySet && i !== matchedCount) {\n                j = 0;\n\n                while (matcher = setMatchers[j++]) {\n                  matcher(unmatched, setMatched, context, xml);\n                }\n\n                if (seed) {\n                  // Reintegrate element matches to eliminate the need for sorting\n                  if (matchedCount > 0) {\n                    while (i--) {\n                      if (!(unmatched[i] || setMatched[i])) {\n                        setMatched[i] = pop.call(results);\n                      }\n                    }\n                  } // Discard index placeholder values to get only actual matches\n\n\n                  setMatched = condense(setMatched);\n                } // Add matches to results\n\n\n                push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting\n\n                if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n                  Sizzle.uniqueSort(results);\n                }\n              } // Override manipulation of globals by nested matchers\n\n\n              if (outermost) {\n                dirruns = dirrunsUnique;\n                outermostContext = contextBackup;\n              }\n\n              return unmatched;\n            };\n\n            return bySet ? markFunction(superMatcher) : superMatcher;\n          }\n\n          compile = Sizzle.compile = function (selector, match\n          /* Internal Use Only */\n          ) {\n            var i,\n                setMatchers = [],\n                elementMatchers = [],\n                cached = compilerCache[selector + \" \"];\n\n            if (!cached) {\n              // Generate a function of recursive functions that can be used to check each element\n              if (!match) {\n                match = tokenize(selector);\n              }\n\n              i = match.length;\n\n              while (i--) {\n                cached = matcherFromTokens(match[i]);\n\n                if (cached[expando]) {\n                  setMatchers.push(cached);\n                } else {\n                  elementMatchers.push(cached);\n                }\n              } // Cache the compiled function\n\n\n              cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization\n\n              cached.selector = selector;\n            }\n\n            return cached;\n          };\n          /**\n           * A low-level selection function that works with Sizzle's compiled\n           *  selector functions\n           * @param {String|Function} selector A selector or a pre-compiled\n           *  selector function built with Sizzle.compile\n           * @param {Element} context\n           * @param {Array} [results]\n           * @param {Array} [seed] A set of elements to match against\n           */\n\n\n          select = Sizzle.select = function (selector, context, results, seed) {\n            var i,\n                tokens,\n                token,\n                type,\n                find,\n                compiled = typeof selector === \"function\" && selector,\n                match = !seed && tokenize(selector = compiled.selector || selector);\n            results = results || []; // Try to minimize operations if there is only one selector in the list and no seed\n            // (the latter of which guarantees us context)\n\n            if (match.length === 1) {\n              // Reduce context if the leading compound selector is an ID\n              tokens = match[0] = match[0].slice(0);\n\n              if (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n                context = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\n                if (!context) {\n                  return results; // Precompiled matchers will still verify ancestry, so step up a level\n                } else if (compiled) {\n                  context = context.parentNode;\n                }\n\n                selector = selector.slice(tokens.shift().value.length);\n              } // Fetch a seed set for right-to-left matching\n\n\n              i = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n\n              while (i--) {\n                token = tokens[i]; // Abort if we hit a combinator\n\n                if (Expr.relative[type = token.type]) {\n                  break;\n                }\n\n                if (find = Expr.find[type]) {\n                  // Search, expanding context for leading sibling combinators\n                  if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n                    // If seed is empty or no tokens remain, we can return early\n                    tokens.splice(i, 1);\n                    selector = seed.length && toSelector(tokens);\n\n                    if (!selector) {\n                      push.apply(results, seed);\n                      return results;\n                    }\n\n                    break;\n                  }\n                }\n              }\n            } // Compile and execute a filtering function if one is not provided\n            // Provide `match` to avoid retokenization if we modified the selector above\n\n\n            (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n            return results;\n          }; // One-time assignments\n          // Sort stability\n\n\n          support.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando; // Support: Chrome 14-35+\n          // Always assume duplicates if they aren't passed to the comparison function\n\n          support.detectDuplicates = !!hasDuplicate; // Initialize against the default document\n\n          setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n          // Detached nodes confoundingly follow *each other*\n\n          support.sortDetached = assert(function (el) {\n            // Should return 1, but returns 4 (following)\n            return el.compareDocumentPosition(document.createElement(\"fieldset\")) & 1;\n          }); // Support: IE<8\n          // Prevent attribute/property \"interpolation\"\n          // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\n          if (!assert(function (el) {\n            el.innerHTML = \"<a href='#'></a>\";\n            return el.firstChild.getAttribute(\"href\") === \"#\";\n          })) {\n            addHandle(\"type|href|height|width\", function (elem, name, isXML) {\n              if (!isXML) {\n                return elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\n              }\n            });\n          } // Support: IE<9\n          // Use defaultValue in place of getAttribute(\"value\")\n\n\n          if (!support.attributes || !assert(function (el) {\n            el.innerHTML = \"<input/>\";\n            el.firstChild.setAttribute(\"value\", \"\");\n            return el.firstChild.getAttribute(\"value\") === \"\";\n          })) {\n            addHandle(\"value\", function (elem, name, isXML) {\n              if (!isXML && elem.nodeName.toLowerCase() === \"input\") {\n                return elem.defaultValue;\n              }\n            });\n          } // Support: IE<9\n          // Use getAttributeNode to fetch booleans when getAttribute lies\n\n\n          if (!assert(function (el) {\n            return el.getAttribute(\"disabled\") == null;\n          })) {\n            addHandle(booleans, function (elem, name, isXML) {\n              var val;\n\n              if (!isXML) {\n                return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n              }\n            });\n          }\n\n          return Sizzle;\n        }(window);\n\n        jQuery.find = Sizzle;\n        jQuery.expr = Sizzle.selectors; // Deprecated\n\n        jQuery.expr[\":\"] = jQuery.expr.pseudos;\n        jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\n        jQuery.text = Sizzle.getText;\n        jQuery.isXMLDoc = Sizzle.isXML;\n        jQuery.contains = Sizzle.contains;\n        jQuery.escapeSelector = Sizzle.escape;\n\n        var dir = function dir(elem, _dir, until) {\n          var matched = [],\n              truncate = until !== undefined;\n\n          while ((elem = elem[_dir]) && elem.nodeType !== 9) {\n            if (elem.nodeType === 1) {\n              if (truncate && jQuery(elem).is(until)) {\n                break;\n              }\n\n              matched.push(elem);\n            }\n          }\n\n          return matched;\n        };\n\n        var _siblings = function siblings(n, elem) {\n          var matched = [];\n\n          for (; n; n = n.nextSibling) {\n            if (n.nodeType === 1 && n !== elem) {\n              matched.push(n);\n            }\n          }\n\n          return matched;\n        };\n\n        var rneedsContext = jQuery.expr.match.needsContext;\n\n        function nodeName(elem, name) {\n          return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n        }\n\n        ;\n        var rsingleTag = /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;\n        var risSimple = /^.[^:#\\[\\.,]*$/; // Implement the identical functionality for filter and not\n\n        function winnow(elements, qualifier, not) {\n          if (jQuery.isFunction(qualifier)) {\n            return jQuery.grep(elements, function (elem, i) {\n              return !!qualifier.call(elem, i, elem) !== not;\n            });\n          } // Single element\n\n\n          if (qualifier.nodeType) {\n            return jQuery.grep(elements, function (elem) {\n              return elem === qualifier !== not;\n            });\n          } // Arraylike of elements (jQuery, arguments, Array)\n\n\n          if (typeof qualifier !== \"string\") {\n            return jQuery.grep(elements, function (elem) {\n              return indexOf.call(qualifier, elem) > -1 !== not;\n            });\n          } // Simple selector that can be filtered directly, removing non-Elements\n\n\n          if (risSimple.test(qualifier)) {\n            return jQuery.filter(qualifier, elements, not);\n          } // Complex selector, compare the two sets, removing non-Elements\n\n\n          qualifier = jQuery.filter(qualifier, elements);\n          return jQuery.grep(elements, function (elem) {\n            return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1;\n          });\n        }\n\n        jQuery.filter = function (expr, elems, not) {\n          var elem = elems[0];\n\n          if (not) {\n            expr = \":not(\" + expr + \")\";\n          }\n\n          if (elems.length === 1 && elem.nodeType === 1) {\n            return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];\n          }\n\n          return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {\n            return elem.nodeType === 1;\n          }));\n        };\n\n        jQuery.fn.extend({\n          find: function find(selector) {\n            var i,\n                ret,\n                len = this.length,\n                self = this;\n\n            if (typeof selector !== \"string\") {\n              return this.pushStack(jQuery(selector).filter(function () {\n                for (i = 0; i < len; i++) {\n                  if (jQuery.contains(self[i], this)) {\n                    return true;\n                  }\n                }\n              }));\n            }\n\n            ret = this.pushStack([]);\n\n            for (i = 0; i < len; i++) {\n              jQuery.find(selector, self[i], ret);\n            }\n\n            return len > 1 ? jQuery.uniqueSort(ret) : ret;\n          },\n          filter: function filter(selector) {\n            return this.pushStack(winnow(this, selector || [], false));\n          },\n          not: function not(selector) {\n            return this.pushStack(winnow(this, selector || [], true));\n          },\n          is: function is(selector) {\n            return !!winnow(this, // If this is a positional/relative selector, check membership in the returned set\n            // so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n            typeof selector === \"string\" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;\n          }\n        }); // Initialize a jQuery object\n        // A central reference to the root jQuery(document)\n\n        var rootjQuery,\n            // A simple way to check for HTML strings\n        // Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n        // Strict HTML recognition (#11290: must start with <)\n        // Shortcut simple #id case for speed\n        rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n            init = jQuery.fn.init = function (selector, context, root) {\n          var match, elem; // HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\n          if (!selector) {\n            return this;\n          } // Method init() accepts an alternate rootjQuery\n          // so migrate can support jQuery.sub (gh-2101)\n\n\n          root = root || rootjQuery; // Handle HTML strings\n\n          if (typeof selector === \"string\") {\n            if (selector[0] === \"<\" && selector[selector.length - 1] === \">\" && selector.length >= 3) {\n              // Assume that strings that start and end with <> are HTML and skip the regex check\n              match = [null, selector, null];\n            } else {\n              match = rquickExpr.exec(selector);\n            } // Match html or make sure no context is specified for #id\n\n\n            if (match && (match[1] || !context)) {\n              // HANDLE: $(html) -> $(array)\n              if (match[1]) {\n                context = context instanceof jQuery ? context[0] : context; // Option to run scripts is true for back-compat\n                // Intentionally let the error be thrown if parseHTML is not present\n\n                jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true)); // HANDLE: $(html, props)\n\n                if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {\n                  for (match in context) {\n                    // Properties of context are called as methods if possible\n                    if (jQuery.isFunction(this[match])) {\n                      this[match](context[match]); // ...and otherwise set as attributes\n                    } else {\n                      this.attr(match, context[match]);\n                    }\n                  }\n                }\n\n                return this; // HANDLE: $(#id)\n              } else {\n                elem = document.getElementById(match[2]);\n\n                if (elem) {\n                  // Inject the element directly into the jQuery object\n                  this[0] = elem;\n                  this.length = 1;\n                }\n\n                return this;\n              } // HANDLE: $(expr, $(...))\n\n            } else if (!context || context.jquery) {\n              return (context || root).find(selector); // HANDLE: $(expr, context)\n              // (which is just equivalent to: $(context).find(expr)\n            } else {\n              return this.constructor(context).find(selector);\n            } // HANDLE: $(DOMElement)\n\n          } else if (selector.nodeType) {\n            this[0] = selector;\n            this.length = 1;\n            return this; // HANDLE: $(function)\n            // Shortcut for document ready\n          } else if (jQuery.isFunction(selector)) {\n            return root.ready !== undefined ? root.ready(selector) : // Execute immediately if ready is not present\n            selector(jQuery);\n          }\n\n          return jQuery.makeArray(selector, this);\n        }; // Give the init function the jQuery prototype for later instantiation\n\n\n        init.prototype = jQuery.fn; // Initialize central reference\n\n        rootjQuery = jQuery(document);\n        var rparentsprev = /^(?:parents|prev(?:Until|All))/,\n            // Methods guaranteed to produce a unique set when starting from a unique set\n        guaranteedUnique = {\n          children: true,\n          contents: true,\n          next: true,\n          prev: true\n        };\n        jQuery.fn.extend({\n          has: function has(target) {\n            var targets = jQuery(target, this),\n                l = targets.length;\n            return this.filter(function () {\n              var i = 0;\n\n              for (; i < l; i++) {\n                if (jQuery.contains(this, targets[i])) {\n                  return true;\n                }\n              }\n            });\n          },\n          closest: function closest(selectors, context) {\n            var cur,\n                i = 0,\n                l = this.length,\n                matched = [],\n                targets = typeof selectors !== \"string\" && jQuery(selectors); // Positional selectors never match, since there's no _selection_ context\n\n            if (!rneedsContext.test(selectors)) {\n              for (; i < l; i++) {\n                for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {\n                  // Always skip document fragments\n                  if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 : // Don't pass non-elements to Sizzle\n                  cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {\n                    matched.push(cur);\n                    break;\n                  }\n                }\n              }\n            }\n\n            return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);\n          },\n          // Determine the position of an element within the set\n          index: function index(elem) {\n            // No argument, return index in parent\n            if (!elem) {\n              return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;\n            } // Index in selector\n\n\n            if (typeof elem === \"string\") {\n              return indexOf.call(jQuery(elem), this[0]);\n            } // Locate the position of the desired element\n\n\n            return indexOf.call(this, // If it receives a jQuery object, the first element is used\n            elem.jquery ? elem[0] : elem);\n          },\n          add: function add(selector, context) {\n            return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));\n          },\n          addBack: function addBack(selector) {\n            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));\n          }\n        });\n\n        function sibling(cur, dir) {\n          while ((cur = cur[dir]) && cur.nodeType !== 1) {}\n\n          return cur;\n        }\n\n        jQuery.each({\n          parent: function parent(elem) {\n            var parent = elem.parentNode;\n            return parent && parent.nodeType !== 11 ? parent : null;\n          },\n          parents: function parents(elem) {\n            return dir(elem, \"parentNode\");\n          },\n          parentsUntil: function parentsUntil(elem, i, until) {\n            return dir(elem, \"parentNode\", until);\n          },\n          next: function next(elem) {\n            return sibling(elem, \"nextSibling\");\n          },\n          prev: function prev(elem) {\n            return sibling(elem, \"previousSibling\");\n          },\n          nextAll: function nextAll(elem) {\n            return dir(elem, \"nextSibling\");\n          },\n          prevAll: function prevAll(elem) {\n            return dir(elem, \"previousSibling\");\n          },\n          nextUntil: function nextUntil(elem, i, until) {\n            return dir(elem, \"nextSibling\", until);\n          },\n          prevUntil: function prevUntil(elem, i, until) {\n            return dir(elem, \"previousSibling\", until);\n          },\n          siblings: function siblings(elem) {\n            return _siblings((elem.parentNode || {}).firstChild, elem);\n          },\n          children: function children(elem) {\n            return _siblings(elem.firstChild);\n          },\n          contents: function contents(elem) {\n            if (nodeName(elem, \"iframe\")) {\n              return elem.contentDocument;\n            } // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n            // Treat the template element as a regular one in browsers that\n            // don't support it.\n\n\n            if (nodeName(elem, \"template\")) {\n              elem = elem.content || elem;\n            }\n\n            return jQuery.merge([], elem.childNodes);\n          }\n        }, function (name, fn) {\n          jQuery.fn[name] = function (until, selector) {\n            var matched = jQuery.map(this, fn, until);\n\n            if (name.slice(-5) !== \"Until\") {\n              selector = until;\n            }\n\n            if (selector && typeof selector === \"string\") {\n              matched = jQuery.filter(selector, matched);\n            }\n\n            if (this.length > 1) {\n              // Remove duplicates\n              if (!guaranteedUnique[name]) {\n                jQuery.uniqueSort(matched);\n              } // Reverse order for parents* and prev-derivatives\n\n\n              if (rparentsprev.test(name)) {\n                matched.reverse();\n              }\n            }\n\n            return this.pushStack(matched);\n          };\n        });\n        var rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g; // Convert String-formatted options into Object-formatted ones\n\n        function createOptions(options) {\n          var object = {};\n          jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {\n            object[flag] = true;\n          });\n          return object;\n        }\n        /*\n         * Create a callback list using the following parameters:\n         *\n         *\toptions: an optional list of space-separated options that will change how\n         *\t\t\tthe callback list behaves or a more traditional option object\n         *\n         * By default a callback list will act like an event callback list and can be\n         * \"fired\" multiple times.\n         *\n         * Possible options:\n         *\n         *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n         *\n         *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n         *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n         *\t\t\t\t\tvalues (like a Deferred)\n         *\n         *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n         *\n         *\tstopOnFalse:\tinterrupt callings when a callback returns false\n         *\n         */\n\n\n        jQuery.Callbacks = function (options) {\n          // Convert options from String-formatted to Object-formatted if needed\n          // (we check in cache first)\n          options = typeof options === \"string\" ? createOptions(options) : jQuery.extend({}, options);\n\n          var // Flag to know if list is currently firing\n          firing,\n              // Last fire value for non-forgettable lists\n          memory,\n              // Flag to know if list was already fired\n          _fired,\n              // Flag to prevent firing\n          _locked,\n              // Actual callback list\n          list = [],\n              // Queue of execution data for repeatable lists\n          queue = [],\n              // Index of currently firing callback (modified by add/remove as needed)\n          firingIndex = -1,\n              // Fire callbacks\n          fire = function fire() {\n            // Enforce single-firing\n            _locked = _locked || options.once; // Execute callbacks for all pending executions,\n            // respecting firingIndex overrides and runtime changes\n\n            _fired = firing = true;\n\n            for (; queue.length; firingIndex = -1) {\n              memory = queue.shift();\n\n              while (++firingIndex < list.length) {\n                // Run callback and check for early termination\n                if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {\n                  // Jump to end and forget the data so .add doesn't re-fire\n                  firingIndex = list.length;\n                  memory = false;\n                }\n              }\n            } // Forget the data if we're done with it\n\n\n            if (!options.memory) {\n              memory = false;\n            }\n\n            firing = false; // Clean up if we're done firing for good\n\n            if (_locked) {\n              // Keep an empty list if we have data for future add calls\n              if (memory) {\n                list = []; // Otherwise, this object is spent\n              } else {\n                list = \"\";\n              }\n            }\n          },\n              // Actual Callbacks object\n          self = {\n            // Add a callback or a collection of callbacks to the list\n            add: function add() {\n              if (list) {\n                // If we have memory from a past run, we should fire after adding\n                if (memory && !firing) {\n                  firingIndex = list.length - 1;\n                  queue.push(memory);\n                }\n\n                (function add(args) {\n                  jQuery.each(args, function (_, arg) {\n                    if (jQuery.isFunction(arg)) {\n                      if (!options.unique || !self.has(arg)) {\n                        list.push(arg);\n                      }\n                    } else if (arg && arg.length && jQuery.type(arg) !== \"string\") {\n                      // Inspect recursively\n                      add(arg);\n                    }\n                  });\n                })(arguments);\n\n                if (memory && !firing) {\n                  fire();\n                }\n              }\n\n              return this;\n            },\n            // Remove a callback from the list\n            remove: function remove() {\n              jQuery.each(arguments, function (_, arg) {\n                var index;\n\n                while ((index = jQuery.inArray(arg, list, index)) > -1) {\n                  list.splice(index, 1); // Handle firing indexes\n\n                  if (index <= firingIndex) {\n                    firingIndex--;\n                  }\n                }\n              });\n              return this;\n            },\n            // Check if a given callback is in the list.\n            // If no argument is given, return whether or not list has callbacks attached.\n            has: function has(fn) {\n              return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;\n            },\n            // Remove all callbacks from the list\n            empty: function empty() {\n              if (list) {\n                list = [];\n              }\n\n              return this;\n            },\n            // Disable .fire and .add\n            // Abort any current/pending executions\n            // Clear all callbacks and values\n            disable: function disable() {\n              _locked = queue = [];\n              list = memory = \"\";\n              return this;\n            },\n            disabled: function disabled() {\n              return !list;\n            },\n            // Disable .fire\n            // Also disable .add unless we have memory (since it would have no effect)\n            // Abort any pending executions\n            lock: function lock() {\n              _locked = queue = [];\n\n              if (!memory && !firing) {\n                list = memory = \"\";\n              }\n\n              return this;\n            },\n            locked: function locked() {\n              return !!_locked;\n            },\n            // Call all callbacks with the given context and arguments\n            fireWith: function fireWith(context, args) {\n              if (!_locked) {\n                args = args || [];\n                args = [context, args.slice ? args.slice() : args];\n                queue.push(args);\n\n                if (!firing) {\n                  fire();\n                }\n              }\n\n              return this;\n            },\n            // Call all the callbacks with the given arguments\n            fire: function fire() {\n              self.fireWith(this, arguments);\n              return this;\n            },\n            // To know if the callbacks have already been called at least once\n            fired: function fired() {\n              return !!_fired;\n            }\n          };\n\n          return self;\n        };\n\n        function Identity(v) {\n          return v;\n        }\n\n        function Thrower(ex) {\n          throw ex;\n        }\n\n        function adoptValue(value, resolve, reject, noValue) {\n          var method;\n\n          try {\n            // Check for promise aspect first to privilege synchronous behavior\n            if (value && jQuery.isFunction(method = value.promise)) {\n              method.call(value).done(resolve).fail(reject); // Other thenables\n            } else if (value && jQuery.isFunction(method = value.then)) {\n              method.call(value, resolve, reject); // Other non-thenables\n            } else {\n              // Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n              // * false: [ value ].slice( 0 ) => resolve( value )\n              // * true: [ value ].slice( 1 ) => resolve()\n              resolve.apply(undefined, [value].slice(noValue));\n            } // For Promises/A+, convert exceptions into rejections\n            // Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n            // Deferred#then to conditionally suppress rejection.\n\n          } catch (value) {\n            // Support: Android 4.0 only\n            // Strict mode functions invoked without .call/.apply get global-object context\n            reject.apply(undefined, [value]);\n          }\n        }\n\n        jQuery.extend({\n          Deferred: function Deferred(func) {\n            var tuples = [// action, add listener, callbacks,\n            // ... .then handlers, argument index, [final state]\n            [\"notify\", \"progress\", jQuery.Callbacks(\"memory\"), jQuery.Callbacks(\"memory\"), 2], [\"resolve\", \"done\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 0, \"resolved\"], [\"reject\", \"fail\", jQuery.Callbacks(\"once memory\"), jQuery.Callbacks(\"once memory\"), 1, \"rejected\"]],\n                _state = \"pending\",\n                _promise = {\n              state: function state() {\n                return _state;\n              },\n              always: function always() {\n                deferred.done(arguments).fail(arguments);\n                return this;\n              },\n              \"catch\": function _catch(fn) {\n                return _promise.then(null, fn);\n              },\n              // Keep pipe for back-compat\n              pipe: function pipe()\n              /* fnDone, fnFail, fnProgress */\n              {\n                var fns = arguments;\n                return jQuery.Deferred(function (newDefer) {\n                  jQuery.each(tuples, function (i, tuple) {\n                    // Map tuples (progress, done, fail) to arguments (done, fail, progress)\n                    var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]]; // deferred.progress(function() { bind to newDefer or newDefer.notify })\n                    // deferred.done(function() { bind to newDefer or newDefer.resolve })\n                    // deferred.fail(function() { bind to newDefer or newDefer.reject })\n\n                    deferred[tuple[1]](function () {\n                      var returned = fn && fn.apply(this, arguments);\n\n                      if (returned && jQuery.isFunction(returned.promise)) {\n                        returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);\n                      } else {\n                        newDefer[tuple[0] + \"With\"](this, fn ? [returned] : arguments);\n                      }\n                    });\n                  });\n                  fns = null;\n                }).promise();\n              },\n              then: function then(onFulfilled, onRejected, onProgress) {\n                var maxDepth = 0;\n\n                function resolve(depth, deferred, handler, special) {\n                  return function () {\n                    var that = this,\n                        args = arguments,\n                        mightThrow = function mightThrow() {\n                      var returned, then; // Support: Promises/A+ section 2.3.3.3.3\n                      // https://promisesaplus.com/#point-59\n                      // Ignore double-resolution attempts\n\n                      if (depth < maxDepth) {\n                        return;\n                      }\n\n                      returned = handler.apply(that, args); // Support: Promises/A+ section 2.3.1\n                      // https://promisesaplus.com/#point-48\n\n                      if (returned === deferred.promise()) {\n                        throw new TypeError(\"Thenable self-resolution\");\n                      } // Support: Promises/A+ sections 2.3.3.1, 3.5\n                      // https://promisesaplus.com/#point-54\n                      // https://promisesaplus.com/#point-75\n                      // Retrieve `then` only once\n\n\n                      then = returned && ( // Support: Promises/A+ section 2.3.4\n                      // https://promisesaplus.com/#point-64\n                      // Only check objects and functions for thenability\n                      typeof returned === \"object\" || typeof returned === \"function\") && returned.then; // Handle a returned thenable\n\n                      if (jQuery.isFunction(then)) {\n                        // Special processors (notify) just wait for resolution\n                        if (special) {\n                          then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special)); // Normal processors (resolve) also hook into progress\n                        } else {\n                          // ...and disregard older resolution values\n                          maxDepth++;\n                          then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));\n                        } // Handle all other returned values\n\n                      } else {\n                        // Only substitute handlers pass on context\n                        // and multiple values (non-spec behavior)\n                        if (handler !== Identity) {\n                          that = undefined;\n                          args = [returned];\n                        } // Process the value(s)\n                        // Default process is resolve\n\n\n                        (special || deferred.resolveWith)(that, args);\n                      }\n                    },\n                        // Only normal processors (resolve) catch and reject exceptions\n                    process = special ? mightThrow : function () {\n                      try {\n                        mightThrow();\n                      } catch (e) {\n                        if (jQuery.Deferred.exceptionHook) {\n                          jQuery.Deferred.exceptionHook(e, process.stackTrace);\n                        } // Support: Promises/A+ section 2.3.3.3.4.1\n                        // https://promisesaplus.com/#point-61\n                        // Ignore post-resolution exceptions\n\n\n                        if (depth + 1 >= maxDepth) {\n                          // Only substitute handlers pass on context\n                          // and multiple values (non-spec behavior)\n                          if (handler !== Thrower) {\n                            that = undefined;\n                            args = [e];\n                          }\n\n                          deferred.rejectWith(that, args);\n                        }\n                      }\n                    }; // Support: Promises/A+ section 2.3.3.3.1\n                    // https://promisesaplus.com/#point-57\n                    // Re-resolve promises immediately to dodge false rejection from\n                    // subsequent errors\n\n\n                    if (depth) {\n                      process();\n                    } else {\n                      // Call an optional hook to record the stack, in case of exception\n                      // since it's otherwise lost when execution goes async\n                      if (jQuery.Deferred.getStackHook) {\n                        process.stackTrace = jQuery.Deferred.getStackHook();\n                      }\n\n                      window.setTimeout(process);\n                    }\n                  };\n                }\n\n                return jQuery.Deferred(function (newDefer) {\n                  // progress_handlers.add( ... )\n                  tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith)); // fulfilled_handlers.add( ... )\n\n                  tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity)); // rejected_handlers.add( ... )\n\n                  tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower));\n                }).promise();\n              },\n              // Get a promise for this deferred\n              // If obj is provided, the promise aspect is added to the object\n              promise: function promise(obj) {\n                return obj != null ? jQuery.extend(obj, _promise) : _promise;\n              }\n            },\n                deferred = {}; // Add list-specific methods\n\n            jQuery.each(tuples, function (i, tuple) {\n              var list = tuple[2],\n                  stateString = tuple[5]; // promise.progress = list.add\n              // promise.done = list.add\n              // promise.fail = list.add\n\n              _promise[tuple[1]] = list.add; // Handle state\n\n              if (stateString) {\n                list.add(function () {\n                  // state = \"resolved\" (i.e., fulfilled)\n                  // state = \"rejected\"\n                  _state = stateString;\n                }, // rejected_callbacks.disable\n                // fulfilled_callbacks.disable\n                tuples[3 - i][2].disable, // progress_callbacks.lock\n                tuples[0][2].lock);\n              } // progress_handlers.fire\n              // fulfilled_handlers.fire\n              // rejected_handlers.fire\n\n\n              list.add(tuple[3].fire); // deferred.notify = function() { deferred.notifyWith(...) }\n              // deferred.resolve = function() { deferred.resolveWith(...) }\n              // deferred.reject = function() { deferred.rejectWith(...) }\n\n              deferred[tuple[0]] = function () {\n                deferred[tuple[0] + \"With\"](this === deferred ? undefined : this, arguments);\n                return this;\n              }; // deferred.notifyWith = list.fireWith\n              // deferred.resolveWith = list.fireWith\n              // deferred.rejectWith = list.fireWith\n\n\n              deferred[tuple[0] + \"With\"] = list.fireWith;\n            }); // Make the deferred a promise\n\n            _promise.promise(deferred); // Call given func if any\n\n\n            if (func) {\n              func.call(deferred, deferred);\n            } // All done!\n\n\n            return deferred;\n          },\n          // Deferred helper\n          when: function when(singleValue) {\n            var // count of uncompleted subordinates\n            remaining = arguments.length,\n                // count of unprocessed arguments\n            i = remaining,\n                // subordinate fulfillment data\n            resolveContexts = Array(i),\n                resolveValues = _slice.call(arguments),\n                // the master Deferred\n            master = jQuery.Deferred(),\n                // subordinate callback factory\n            updateFunc = function updateFunc(i) {\n              return function (value) {\n                resolveContexts[i] = this;\n                resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;\n\n                if (! --remaining) {\n                  master.resolveWith(resolveContexts, resolveValues);\n                }\n              };\n            }; // Single- and empty arguments are adopted like Promise.resolve\n\n\n            if (remaining <= 1) {\n              adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining); // Use .then() to unwrap secondary thenables (cf. gh-3000)\n\n              if (master.state() === \"pending\" || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {\n                return master.then();\n              }\n            } // Multiple arguments are aggregated like Promise.all array elements\n\n\n            while (i--) {\n              adoptValue(resolveValues[i], updateFunc(i), master.reject);\n            }\n\n            return master.promise();\n          }\n        }); // These usually indicate a programmer mistake during development,\n        // warn about them ASAP rather than swallowing them by default.\n\n        var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\n        jQuery.Deferred.exceptionHook = function (error, stack) {\n          // Support: IE 8 - 9 only\n          // Console exists when dev tools are open, which can happen at any time\n          if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {\n            window.console.warn(\"jQuery.Deferred exception: \" + error.message, error.stack, stack);\n          }\n        };\n\n        jQuery.readyException = function (error) {\n          window.setTimeout(function () {\n            throw error;\n          });\n        }; // The deferred used on DOM ready\n\n\n        var readyList = jQuery.Deferred();\n\n        jQuery.fn.ready = function (fn) {\n          readyList.then(fn) // Wrap jQuery.readyException in a function so that the lookup\n          // happens at the time of error handling instead of callback\n          // registration.\n          .catch(function (error) {\n            jQuery.readyException(error);\n          });\n          return this;\n        };\n\n        jQuery.extend({\n          // Is the DOM ready to be used? Set to true once it occurs.\n          isReady: false,\n          // A counter to track how many items to wait for before\n          // the ready event fires. See #6781\n          readyWait: 1,\n          // Handle when the DOM is ready\n          ready: function ready(wait) {\n            // Abort if there are pending holds or we're already ready\n            if (wait === true ? --jQuery.readyWait : jQuery.isReady) {\n              return;\n            } // Remember that the DOM is ready\n\n\n            jQuery.isReady = true; // If a normal DOM Ready event fired, decrement, and wait if need be\n\n            if (wait !== true && --jQuery.readyWait > 0) {\n              return;\n            } // If there are functions bound, to execute\n\n\n            readyList.resolveWith(document, [jQuery]);\n          }\n        });\n        jQuery.ready.then = readyList.then; // The ready event handler and self cleanup method\n\n        function completed() {\n          document.removeEventListener(\"DOMContentLoaded\", completed);\n          window.removeEventListener(\"load\", completed);\n          jQuery.ready();\n        } // Catch cases where $(document).ready() is called\n        // after the browser event has already occurred.\n        // Support: IE <=9 - 10 only\n        // Older IE sometimes signals \"interactive\" too soon\n\n\n        if (document.readyState === \"complete\" || document.readyState !== \"loading\" && !document.documentElement.doScroll) {\n          // Handle it asynchronously to allow scripts the opportunity to delay ready\n          window.setTimeout(jQuery.ready);\n        } else {\n          // Use the handy event callback\n          document.addEventListener(\"DOMContentLoaded\", completed); // A fallback to window.onload, that will always work\n\n          window.addEventListener(\"load\", completed);\n        } // Multifunctional method to get and set values of a collection\n        // The value/s can optionally be executed if it's a function\n\n\n        var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {\n          var i = 0,\n              len = elems.length,\n              bulk = key == null; // Sets many values\n\n          if (jQuery.type(key) === \"object\") {\n            chainable = true;\n\n            for (i in key) {\n              access(elems, fn, i, key[i], true, emptyGet, raw);\n            } // Sets one value\n\n          } else if (value !== undefined) {\n            chainable = true;\n\n            if (!jQuery.isFunction(value)) {\n              raw = true;\n            }\n\n            if (bulk) {\n              // Bulk operations run against the entire set\n              if (raw) {\n                fn.call(elems, value);\n                fn = null; // ...except when executing function values\n              } else {\n                bulk = fn;\n\n                fn = function fn(elem, key, value) {\n                  return bulk.call(jQuery(elem), value);\n                };\n              }\n            }\n\n            if (fn) {\n              for (; i < len; i++) {\n                fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));\n              }\n            }\n          }\n\n          if (chainable) {\n            return elems;\n          } // Gets\n\n\n          if (bulk) {\n            return fn.call(elems);\n          }\n\n          return len ? fn(elems[0], key) : emptyGet;\n        };\n\n        var acceptData = function acceptData(owner) {\n          // Accepts only:\n          //  - Node\n          //    - Node.ELEMENT_NODE\n          //    - Node.DOCUMENT_NODE\n          //  - Object\n          //    - Any\n          return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;\n        };\n\n        function Data() {\n          this.expando = jQuery.expando + Data.uid++;\n        }\n\n        Data.uid = 1;\n        Data.prototype = {\n          cache: function cache(owner) {\n            // Check if the owner object already has a cache\n            var value = owner[this.expando]; // If not, create one\n\n            if (!value) {\n              value = {}; // We can accept data for non-element nodes in modern browsers,\n              // but we should not, see #8335.\n              // Always return an empty object.\n\n              if (acceptData(owner)) {\n                // If it is a node unlikely to be stringify-ed or looped over\n                // use plain assignment\n                if (owner.nodeType) {\n                  owner[this.expando] = value; // Otherwise secure it in a non-enumerable property\n                  // configurable must be true to allow the property to be\n                  // deleted when data is removed\n                } else {\n                  Object.defineProperty(owner, this.expando, {\n                    value: value,\n                    configurable: true\n                  });\n                }\n              }\n            }\n\n            return value;\n          },\n          set: function set(owner, data, value) {\n            var prop,\n                cache = this.cache(owner); // Handle: [ owner, key, value ] args\n            // Always use camelCase key (gh-2257)\n\n            if (typeof data === \"string\") {\n              cache[jQuery.camelCase(data)] = value; // Handle: [ owner, { properties } ] args\n            } else {\n              // Copy the properties one-by-one to the cache object\n              for (prop in data) {\n                cache[jQuery.camelCase(prop)] = data[prop];\n              }\n            }\n\n            return cache;\n          },\n          get: function get(owner, key) {\n            return key === undefined ? this.cache(owner) : // Always use camelCase key (gh-2257)\n            owner[this.expando] && owner[this.expando][jQuery.camelCase(key)];\n          },\n          access: function access(owner, key, value) {\n            // In cases where either:\n            //\n            //   1. No key was specified\n            //   2. A string key was specified, but no value provided\n            //\n            // Take the \"read\" path and allow the get method to determine\n            // which value to return, respectively either:\n            //\n            //   1. The entire cache object\n            //   2. The data stored at the key\n            //\n            if (key === undefined || key && typeof key === \"string\" && value === undefined) {\n              return this.get(owner, key);\n            } // When the key is not a string, or both a key and value\n            // are specified, set or extend (existing objects) with either:\n            //\n            //   1. An object of properties\n            //   2. A key and value\n            //\n\n\n            this.set(owner, key, value); // Since the \"set\" path can have two possible entry points\n            // return the expected data based on which path was taken[*]\n\n            return value !== undefined ? value : key;\n          },\n          remove: function remove(owner, key) {\n            var i,\n                cache = owner[this.expando];\n\n            if (cache === undefined) {\n              return;\n            }\n\n            if (key !== undefined) {\n              // Support array or space separated string of keys\n              if (Array.isArray(key)) {\n                // If key is an array of keys...\n                // We always set camelCase keys, so remove that.\n                key = key.map(jQuery.camelCase);\n              } else {\n                key = jQuery.camelCase(key); // If a key with the spaces exists, use it.\n                // Otherwise, create an array by matching non-whitespace\n\n                key = key in cache ? [key] : key.match(rnothtmlwhite) || [];\n              }\n\n              i = key.length;\n\n              while (i--) {\n                delete cache[key[i]];\n              }\n            } // Remove the expando if there's no more data\n\n\n            if (key === undefined || jQuery.isEmptyObject(cache)) {\n              // Support: Chrome <=35 - 45\n              // Webkit & Blink performance suffers when deleting properties\n              // from DOM nodes, so set to undefined instead\n              // https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n              if (owner.nodeType) {\n                owner[this.expando] = undefined;\n              } else {\n                delete owner[this.expando];\n              }\n            }\n          },\n          hasData: function hasData(owner) {\n            var cache = owner[this.expando];\n            return cache !== undefined && !jQuery.isEmptyObject(cache);\n          }\n        };\n        var dataPriv = new Data();\n        var dataUser = new Data(); //\tImplementation Summary\n        //\n        //\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n        //\t2. Improve the module's maintainability by reducing the storage\n        //\t\tpaths to a single mechanism.\n        //\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n        //\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n        //\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n        //\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\n        var rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n            rmultiDash = /[A-Z]/g;\n\n        function getData(data) {\n          if (data === \"true\") {\n            return true;\n          }\n\n          if (data === \"false\") {\n            return false;\n          }\n\n          if (data === \"null\") {\n            return null;\n          } // Only convert to a number if it doesn't change the string\n\n\n          if (data === +data + \"\") {\n            return +data;\n          }\n\n          if (rbrace.test(data)) {\n            return JSON.parse(data);\n          }\n\n          return data;\n        }\n\n        function dataAttr(elem, key, data) {\n          var name; // If nothing was found internally, try to fetch any\n          // data from the HTML5 data-* attribute\n\n          if (data === undefined && elem.nodeType === 1) {\n            name = \"data-\" + key.replace(rmultiDash, \"-$&\").toLowerCase();\n            data = elem.getAttribute(name);\n\n            if (typeof data === \"string\") {\n              try {\n                data = getData(data);\n              } catch (e) {} // Make sure we set the data so it isn't changed later\n\n\n              dataUser.set(elem, key, data);\n            } else {\n              data = undefined;\n            }\n          }\n\n          return data;\n        }\n\n        jQuery.extend({\n          hasData: function hasData(elem) {\n            return dataUser.hasData(elem) || dataPriv.hasData(elem);\n          },\n          data: function data(elem, name, _data) {\n            return dataUser.access(elem, name, _data);\n          },\n          removeData: function removeData(elem, name) {\n            dataUser.remove(elem, name);\n          },\n          // TODO: Now that all calls to _data and _removeData have been replaced\n          // with direct calls to dataPriv methods, these can be deprecated.\n          _data: function _data(elem, name, data) {\n            return dataPriv.access(elem, name, data);\n          },\n          _removeData: function _removeData(elem, name) {\n            dataPriv.remove(elem, name);\n          }\n        });\n        jQuery.fn.extend({\n          data: function data(key, value) {\n            var i,\n                name,\n                data,\n                elem = this[0],\n                attrs = elem && elem.attributes; // Gets all values\n\n            if (key === undefined) {\n              if (this.length) {\n                data = dataUser.get(elem);\n\n                if (elem.nodeType === 1 && !dataPriv.get(elem, \"hasDataAttrs\")) {\n                  i = attrs.length;\n\n                  while (i--) {\n                    // Support: IE 11 only\n                    // The attrs elements can be null (#14894)\n                    if (attrs[i]) {\n                      name = attrs[i].name;\n\n                      if (name.indexOf(\"data-\") === 0) {\n                        name = jQuery.camelCase(name.slice(5));\n                        dataAttr(elem, name, data[name]);\n                      }\n                    }\n                  }\n\n                  dataPriv.set(elem, \"hasDataAttrs\", true);\n                }\n              }\n\n              return data;\n            } // Sets multiple values\n\n\n            if (typeof key === \"object\") {\n              return this.each(function () {\n                dataUser.set(this, key);\n              });\n            }\n\n            return access(this, function (value) {\n              var data; // The calling jQuery object (element matches) is not empty\n              // (and therefore has an element appears at this[ 0 ]) and the\n              // `value` parameter was not undefined. An empty jQuery object\n              // will result in `undefined` for elem = this[ 0 ] which will\n              // throw an exception if an attempt to read a data cache is made.\n\n              if (elem && value === undefined) {\n                // Attempt to get data from the cache\n                // The key will always be camelCased in Data\n                data = dataUser.get(elem, key);\n\n                if (data !== undefined) {\n                  return data;\n                } // Attempt to \"discover\" the data in\n                // HTML5 custom data-* attrs\n\n\n                data = dataAttr(elem, key);\n\n                if (data !== undefined) {\n                  return data;\n                } // We tried really hard, but the data doesn't exist.\n\n\n                return;\n              } // Set the data...\n\n\n              this.each(function () {\n                // We always store the camelCased key\n                dataUser.set(this, key, value);\n              });\n            }, null, value, arguments.length > 1, null, true);\n          },\n          removeData: function removeData(key) {\n            return this.each(function () {\n              dataUser.remove(this, key);\n            });\n          }\n        });\n        jQuery.extend({\n          queue: function queue(elem, type, data) {\n            var queue;\n\n            if (elem) {\n              type = (type || \"fx\") + \"queue\";\n              queue = dataPriv.get(elem, type); // Speed up dequeue by getting out quickly if this is just a lookup\n\n              if (data) {\n                if (!queue || Array.isArray(data)) {\n                  queue = dataPriv.access(elem, type, jQuery.makeArray(data));\n                } else {\n                  queue.push(data);\n                }\n              }\n\n              return queue || [];\n            }\n          },\n          dequeue: function dequeue(elem, type) {\n            type = type || \"fx\";\n\n            var queue = jQuery.queue(elem, type),\n                startLength = queue.length,\n                fn = queue.shift(),\n                hooks = jQuery._queueHooks(elem, type),\n                next = function next() {\n              jQuery.dequeue(elem, type);\n            }; // If the fx queue is dequeued, always remove the progress sentinel\n\n\n            if (fn === \"inprogress\") {\n              fn = queue.shift();\n              startLength--;\n            }\n\n            if (fn) {\n              // Add a progress sentinel to prevent the fx queue from being\n              // automatically dequeued\n              if (type === \"fx\") {\n                queue.unshift(\"inprogress\");\n              } // Clear up the last queue stop function\n\n\n              delete hooks.stop;\n              fn.call(elem, next, hooks);\n            }\n\n            if (!startLength && hooks) {\n              hooks.empty.fire();\n            }\n          },\n          // Not public - generate a queueHooks object, or return the current one\n          _queueHooks: function _queueHooks(elem, type) {\n            var key = type + \"queueHooks\";\n            return dataPriv.get(elem, key) || dataPriv.access(elem, key, {\n              empty: jQuery.Callbacks(\"once memory\").add(function () {\n                dataPriv.remove(elem, [type + \"queue\", key]);\n              })\n            });\n          }\n        });\n        jQuery.fn.extend({\n          queue: function queue(type, data) {\n            var setter = 2;\n\n            if (typeof type !== \"string\") {\n              data = type;\n              type = \"fx\";\n              setter--;\n            }\n\n            if (arguments.length < setter) {\n              return jQuery.queue(this[0], type);\n            }\n\n            return data === undefined ? this : this.each(function () {\n              var queue = jQuery.queue(this, type, data); // Ensure a hooks for this queue\n\n              jQuery._queueHooks(this, type);\n\n              if (type === \"fx\" && queue[0] !== \"inprogress\") {\n                jQuery.dequeue(this, type);\n              }\n            });\n          },\n          dequeue: function dequeue(type) {\n            return this.each(function () {\n              jQuery.dequeue(this, type);\n            });\n          },\n          clearQueue: function clearQueue(type) {\n            return this.queue(type || \"fx\", []);\n          },\n          // Get a promise resolved when queues of a certain type\n          // are emptied (fx is the type by default)\n          promise: function promise(type, obj) {\n            var tmp,\n                count = 1,\n                defer = jQuery.Deferred(),\n                elements = this,\n                i = this.length,\n                resolve = function resolve() {\n              if (! --count) {\n                defer.resolveWith(elements, [elements]);\n              }\n            };\n\n            if (typeof type !== \"string\") {\n              obj = type;\n              type = undefined;\n            }\n\n            type = type || \"fx\";\n\n            while (i--) {\n              tmp = dataPriv.get(elements[i], type + \"queueHooks\");\n\n              if (tmp && tmp.empty) {\n                count++;\n                tmp.empty.add(resolve);\n              }\n            }\n\n            resolve();\n            return defer.promise(obj);\n          }\n        });\n        var pnum = /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source;\n        var rcssNum = new RegExp(\"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\");\n        var cssExpand = [\"Top\", \"Right\", \"Bottom\", \"Left\"];\n\n        var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {\n          // isHiddenWithinTree might be called from jQuery#filter function;\n          // in that case, element will be second argument\n          elem = el || elem; // Inline style trumps all\n\n          return elem.style.display === \"none\" || elem.style.display === \"\" && // Otherwise, check computed style\n          // Support: Firefox <=43 - 45\n          // Disconnected elements can have computed display: none, so first confirm that elem is\n          // in the document.\n          jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, \"display\") === \"none\";\n        };\n\n        var swap = function swap(elem, options, callback, args) {\n          var ret,\n              name,\n              old = {}; // Remember the old values, and insert the new ones\n\n          for (name in options) {\n            old[name] = elem.style[name];\n            elem.style[name] = options[name];\n          }\n\n          ret = callback.apply(elem, args || []); // Revert the old values\n\n          for (name in options) {\n            elem.style[name] = old[name];\n          }\n\n          return ret;\n        };\n\n        function adjustCSS(elem, prop, valueParts, tween) {\n          var adjusted,\n              scale = 1,\n              maxIterations = 20,\n              currentValue = tween ? function () {\n            return tween.cur();\n          } : function () {\n            return jQuery.css(elem, prop, \"\");\n          },\n              initial = currentValue(),\n              unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? \"\" : \"px\"),\n              // Starting value computation is required for potential unit mismatches\n          initialInUnit = (jQuery.cssNumber[prop] || unit !== \"px\" && +initial) && rcssNum.exec(jQuery.css(elem, prop));\n\n          if (initialInUnit && initialInUnit[3] !== unit) {\n            // Trust units reported by jQuery.css\n            unit = unit || initialInUnit[3]; // Make sure we update the tween properties later on\n\n            valueParts = valueParts || []; // Iteratively approximate from a nonzero starting point\n\n            initialInUnit = +initial || 1;\n\n            do {\n              // If previous iteration zeroed out, double until we get *something*.\n              // Use string for doubling so we don't accidentally see scale as unchanged below\n              scale = scale || \".5\"; // Adjust and apply\n\n              initialInUnit = initialInUnit / scale;\n              jQuery.style(elem, prop, initialInUnit + unit); // Update scale, tolerating zero or NaN from tween.cur()\n              // Break the loop if scale is unchanged or perfect, or if we've just had enough.\n            } while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);\n          }\n\n          if (valueParts) {\n            initialInUnit = +initialInUnit || +initial || 0; // Apply relative offset (+=/-=) if specified\n\n            adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];\n\n            if (tween) {\n              tween.unit = unit;\n              tween.start = initialInUnit;\n              tween.end = adjusted;\n            }\n          }\n\n          return adjusted;\n        }\n\n        var defaultDisplayMap = {};\n\n        function getDefaultDisplay(elem) {\n          var temp,\n              doc = elem.ownerDocument,\n              nodeName = elem.nodeName,\n              display = defaultDisplayMap[nodeName];\n\n          if (display) {\n            return display;\n          }\n\n          temp = doc.body.appendChild(doc.createElement(nodeName));\n          display = jQuery.css(temp, \"display\");\n          temp.parentNode.removeChild(temp);\n\n          if (display === \"none\") {\n            display = \"block\";\n          }\n\n          defaultDisplayMap[nodeName] = display;\n          return display;\n        }\n\n        function showHide(elements, show) {\n          var display,\n              elem,\n              values = [],\n              index = 0,\n              length = elements.length; // Determine new display value for elements that need to change\n\n          for (; index < length; index++) {\n            elem = elements[index];\n\n            if (!elem.style) {\n              continue;\n            }\n\n            display = elem.style.display;\n\n            if (show) {\n              // Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n              // check is required in this first loop unless we have a nonempty display value (either\n              // inline or about-to-be-restored)\n              if (display === \"none\") {\n                values[index] = dataPriv.get(elem, \"display\") || null;\n\n                if (!values[index]) {\n                  elem.style.display = \"\";\n                }\n              }\n\n              if (elem.style.display === \"\" && isHiddenWithinTree(elem)) {\n                values[index] = getDefaultDisplay(elem);\n              }\n            } else {\n              if (display !== \"none\") {\n                values[index] = \"none\"; // Remember what we're overwriting\n\n                dataPriv.set(elem, \"display\", display);\n              }\n            }\n          } // Set the display of the elements in a second loop to avoid constant reflow\n\n\n          for (index = 0; index < length; index++) {\n            if (values[index] != null) {\n              elements[index].style.display = values[index];\n            }\n          }\n\n          return elements;\n        }\n\n        jQuery.fn.extend({\n          show: function show() {\n            return showHide(this, true);\n          },\n          hide: function hide() {\n            return showHide(this);\n          },\n          toggle: function toggle(state) {\n            if (typeof state === \"boolean\") {\n              return state ? this.show() : this.hide();\n            }\n\n            return this.each(function () {\n              if (isHiddenWithinTree(this)) {\n                jQuery(this).show();\n              } else {\n                jQuery(this).hide();\n              }\n            });\n          }\n        });\n        var rcheckableType = /^(?:checkbox|radio)$/i;\n        var rtagName = /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]+)/i;\n        var rscriptType = /^$|\\/(?:java|ecma)script/i; // We have to close these tags to support XHTML (#13200)\n\n        var wrapMap = {\n          // Support: IE <=9 only\n          option: [1, \"<select multiple='multiple'>\", \"</select>\"],\n          // XHTML parsers do not magically insert elements in the\n          // same way that tag soup parsers do. So we cannot shorten\n          // this by omitting <tbody> or other required elements.\n          thead: [1, \"<table>\", \"</table>\"],\n          col: [2, \"<table><colgroup>\", \"</colgroup></table>\"],\n          tr: [2, \"<table><tbody>\", \"</tbody></table>\"],\n          td: [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\n          _default: [0, \"\", \"\"]\n        }; // Support: IE <=9 only\n\n        wrapMap.optgroup = wrapMap.option;\n        wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n        wrapMap.th = wrapMap.td;\n\n        function getAll(context, tag) {\n          // Support: IE <=9 - 11 only\n          // Use typeof to avoid zero-argument method invocation on host objects (#15151)\n          var ret;\n\n          if (typeof context.getElementsByTagName !== \"undefined\") {\n            ret = context.getElementsByTagName(tag || \"*\");\n          } else if (typeof context.querySelectorAll !== \"undefined\") {\n            ret = context.querySelectorAll(tag || \"*\");\n          } else {\n            ret = [];\n          }\n\n          if (tag === undefined || tag && nodeName(context, tag)) {\n            return jQuery.merge([context], ret);\n          }\n\n          return ret;\n        } // Mark scripts as having already been evaluated\n\n\n        function setGlobalEval(elems, refElements) {\n          var i = 0,\n              l = elems.length;\n\n          for (; i < l; i++) {\n            dataPriv.set(elems[i], \"globalEval\", !refElements || dataPriv.get(refElements[i], \"globalEval\"));\n          }\n        }\n\n        var rhtml = /<|&#?\\w+;/;\n\n        function buildFragment(elems, context, scripts, selection, ignored) {\n          var elem,\n              tmp,\n              tag,\n              wrap,\n              contains,\n              j,\n              fragment = context.createDocumentFragment(),\n              nodes = [],\n              i = 0,\n              l = elems.length;\n\n          for (; i < l; i++) {\n            elem = elems[i];\n\n            if (elem || elem === 0) {\n              // Add nodes directly\n              if (jQuery.type(elem) === \"object\") {\n                // Support: Android <=4.0 only, PhantomJS 1 only\n                // push.apply(_, arraylike) throws on ancient WebKit\n                jQuery.merge(nodes, elem.nodeType ? [elem] : elem); // Convert non-html into a text node\n              } else if (!rhtml.test(elem)) {\n                nodes.push(context.createTextNode(elem)); // Convert html into DOM nodes\n              } else {\n                tmp = tmp || fragment.appendChild(context.createElement(\"div\")); // Deserialize a standard representation\n\n                tag = (rtagName.exec(elem) || [\"\", \"\"])[1].toLowerCase();\n                wrap = wrapMap[tag] || wrapMap._default;\n                tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2]; // Descend through wrappers to the right content\n\n                j = wrap[0];\n\n                while (j--) {\n                  tmp = tmp.lastChild;\n                } // Support: Android <=4.0 only, PhantomJS 1 only\n                // push.apply(_, arraylike) throws on ancient WebKit\n\n\n                jQuery.merge(nodes, tmp.childNodes); // Remember the top-level container\n\n                tmp = fragment.firstChild; // Ensure the created nodes are orphaned (#12392)\n\n                tmp.textContent = \"\";\n              }\n            }\n          } // Remove wrapper from fragment\n\n\n          fragment.textContent = \"\";\n          i = 0;\n\n          while (elem = nodes[i++]) {\n            // Skip elements already in the context collection (trac-4087)\n            if (selection && jQuery.inArray(elem, selection) > -1) {\n              if (ignored) {\n                ignored.push(elem);\n              }\n\n              continue;\n            }\n\n            contains = jQuery.contains(elem.ownerDocument, elem); // Append to fragment\n\n            tmp = getAll(fragment.appendChild(elem), \"script\"); // Preserve script evaluation history\n\n            if (contains) {\n              setGlobalEval(tmp);\n            } // Capture executables\n\n\n            if (scripts) {\n              j = 0;\n\n              while (elem = tmp[j++]) {\n                if (rscriptType.test(elem.type || \"\")) {\n                  scripts.push(elem);\n                }\n              }\n            }\n          }\n\n          return fragment;\n        }\n\n        (function () {\n          var fragment = document.createDocumentFragment(),\n              div = fragment.appendChild(document.createElement(\"div\")),\n              input = document.createElement(\"input\"); // Support: Android 4.0 - 4.3 only\n          // Check state lost if the name is set (#11217)\n          // Support: Windows Web Apps (WWA)\n          // `name` and `type` must use .setAttribute for WWA (#14901)\n\n          input.setAttribute(\"type\", \"radio\");\n          input.setAttribute(\"checked\", \"checked\");\n          input.setAttribute(\"name\", \"t\");\n          div.appendChild(input); // Support: Android <=4.1 only\n          // Older WebKit doesn't clone checked state correctly in fragments\n\n          support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked; // Support: IE <=11 only\n          // Make sure textarea (and checkbox) defaultValue is properly cloned\n\n          div.innerHTML = \"<textarea>x</textarea>\";\n          support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;\n        })();\n\n        var documentElement = document.documentElement;\n        var rkeyEvent = /^key/,\n            rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n            rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\n        function returnTrue() {\n          return true;\n        }\n\n        function returnFalse() {\n          return false;\n        } // Support: IE <=9 only\n        // See #13393 for more info\n\n\n        function safeActiveElement() {\n          try {\n            return document.activeElement;\n          } catch (err) {}\n        }\n\n        function _on(elem, types, selector, data, fn, one) {\n          var origFn, type; // Types can be a map of types/handlers\n\n          if (typeof types === \"object\") {\n            // ( types-Object, selector, data )\n            if (typeof selector !== \"string\") {\n              // ( types-Object, data )\n              data = data || selector;\n              selector = undefined;\n            }\n\n            for (type in types) {\n              _on(elem, type, selector, data, types[type], one);\n            }\n\n            return elem;\n          }\n\n          if (data == null && fn == null) {\n            // ( types, fn )\n            fn = selector;\n            data = selector = undefined;\n          } else if (fn == null) {\n            if (typeof selector === \"string\") {\n              // ( types, selector, fn )\n              fn = data;\n              data = undefined;\n            } else {\n              // ( types, data, fn )\n              fn = data;\n              data = selector;\n              selector = undefined;\n            }\n          }\n\n          if (fn === false) {\n            fn = returnFalse;\n          } else if (!fn) {\n            return elem;\n          }\n\n          if (one === 1) {\n            origFn = fn;\n\n            fn = function fn(event) {\n              // Can use an empty set, since event contains the info\n              jQuery().off(event);\n              return origFn.apply(this, arguments);\n            }; // Use same guid so caller can remove using origFn\n\n\n            fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);\n          }\n\n          return elem.each(function () {\n            jQuery.event.add(this, types, fn, data, selector);\n          });\n        }\n        /*\n         * Helper functions for managing events -- not part of the public interface.\n         * Props to Dean Edwards' addEvent library for many of the ideas.\n         */\n\n\n        jQuery.event = {\n          global: {},\n          add: function add(elem, types, handler, data, selector) {\n            var handleObjIn,\n                eventHandle,\n                tmp,\n                events,\n                t,\n                handleObj,\n                special,\n                handlers,\n                type,\n                namespaces,\n                origType,\n                elemData = dataPriv.get(elem); // Don't attach events to noData or text/comment nodes (but allow plain objects)\n\n            if (!elemData) {\n              return;\n            } // Caller can pass in an object of custom data in lieu of the handler\n\n\n            if (handler.handler) {\n              handleObjIn = handler;\n              handler = handleObjIn.handler;\n              selector = handleObjIn.selector;\n            } // Ensure that invalid selectors throw exceptions at attach time\n            // Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\n\n            if (selector) {\n              jQuery.find.matchesSelector(documentElement, selector);\n            } // Make sure that the handler has a unique ID, used to find/remove it later\n\n\n            if (!handler.guid) {\n              handler.guid = jQuery.guid++;\n            } // Init the element's event structure and main handler, if this is the first\n\n\n            if (!(events = elemData.events)) {\n              events = elemData.events = {};\n            }\n\n            if (!(eventHandle = elemData.handle)) {\n              eventHandle = elemData.handle = function (e) {\n                // Discard the second event of a jQuery.event.trigger() and\n                // when an event is called after a page has unloaded\n                return typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;\n              };\n            } // Handle multiple events separated by a space\n\n\n            types = (types || \"\").match(rnothtmlwhite) || [\"\"];\n            t = types.length;\n\n            while (t--) {\n              tmp = rtypenamespace.exec(types[t]) || [];\n              type = origType = tmp[1];\n              namespaces = (tmp[2] || \"\").split(\".\").sort(); // There *must* be a type, no attaching namespace-only handlers\n\n              if (!type) {\n                continue;\n              } // If event changes its type, use the special event handlers for the changed type\n\n\n              special = jQuery.event.special[type] || {}; // If selector defined, determine special event api type, otherwise given type\n\n              type = (selector ? special.delegateType : special.bindType) || type; // Update special based on newly reset type\n\n              special = jQuery.event.special[type] || {}; // handleObj is passed to all event handlers\n\n              handleObj = jQuery.extend({\n                type: type,\n                origType: origType,\n                data: data,\n                handler: handler,\n                guid: handler.guid,\n                selector: selector,\n                needsContext: selector && jQuery.expr.match.needsContext.test(selector),\n                namespace: namespaces.join(\".\")\n              }, handleObjIn); // Init the event handler queue if we're the first\n\n              if (!(handlers = events[type])) {\n                handlers = events[type] = [];\n                handlers.delegateCount = 0; // Only use addEventListener if the special events handler returns false\n\n                if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {\n                  if (elem.addEventListener) {\n                    elem.addEventListener(type, eventHandle);\n                  }\n                }\n              }\n\n              if (special.add) {\n                special.add.call(elem, handleObj);\n\n                if (!handleObj.handler.guid) {\n                  handleObj.handler.guid = handler.guid;\n                }\n              } // Add to the element's handler list, delegates in front\n\n\n              if (selector) {\n                handlers.splice(handlers.delegateCount++, 0, handleObj);\n              } else {\n                handlers.push(handleObj);\n              } // Keep track of which events have ever been used, for event optimization\n\n\n              jQuery.event.global[type] = true;\n            }\n          },\n          // Detach an event or set of events from an element\n          remove: function remove(elem, types, handler, selector, mappedTypes) {\n            var j,\n                origCount,\n                tmp,\n                events,\n                t,\n                handleObj,\n                special,\n                handlers,\n                type,\n                namespaces,\n                origType,\n                elemData = dataPriv.hasData(elem) && dataPriv.get(elem);\n\n            if (!elemData || !(events = elemData.events)) {\n              return;\n            } // Once for each type.namespace in types; type may be omitted\n\n\n            types = (types || \"\").match(rnothtmlwhite) || [\"\"];\n            t = types.length;\n\n            while (t--) {\n              tmp = rtypenamespace.exec(types[t]) || [];\n              type = origType = tmp[1];\n              namespaces = (tmp[2] || \"\").split(\".\").sort(); // Unbind all events (on this namespace, if provided) for the element\n\n              if (!type) {\n                for (type in events) {\n                  jQuery.event.remove(elem, type + types[t], handler, selector, true);\n                }\n\n                continue;\n              }\n\n              special = jQuery.event.special[type] || {};\n              type = (selector ? special.delegateType : special.bindType) || type;\n              handlers = events[type] || [];\n              tmp = tmp[2] && new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\"); // Remove matching events\n\n              origCount = j = handlers.length;\n\n              while (j--) {\n                handleObj = handlers[j];\n\n                if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === \"**\" && handleObj.selector)) {\n                  handlers.splice(j, 1);\n\n                  if (handleObj.selector) {\n                    handlers.delegateCount--;\n                  }\n\n                  if (special.remove) {\n                    special.remove.call(elem, handleObj);\n                  }\n                }\n              } // Remove generic event handler if we removed something and no more handlers exist\n              // (avoids potential for endless recursion during removal of special event handlers)\n\n\n              if (origCount && !handlers.length) {\n                if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {\n                  jQuery.removeEvent(elem, type, elemData.handle);\n                }\n\n                delete events[type];\n              }\n            } // Remove data and the expando if it's no longer used\n\n\n            if (jQuery.isEmptyObject(events)) {\n              dataPriv.remove(elem, \"handle events\");\n            }\n          },\n          dispatch: function dispatch(nativeEvent) {\n            // Make a writable jQuery.Event from the native event object\n            var event = jQuery.event.fix(nativeEvent);\n            var i,\n                j,\n                ret,\n                matched,\n                handleObj,\n                handlerQueue,\n                args = new Array(arguments.length),\n                handlers = (dataPriv.get(this, \"events\") || {})[event.type] || [],\n                special = jQuery.event.special[event.type] || {}; // Use the fix-ed jQuery.Event rather than the (read-only) native event\n\n            args[0] = event;\n\n            for (i = 1; i < arguments.length; i++) {\n              args[i] = arguments[i];\n            }\n\n            event.delegateTarget = this; // Call the preDispatch hook for the mapped type, and let it bail if desired\n\n            if (special.preDispatch && special.preDispatch.call(this, event) === false) {\n              return;\n            } // Determine handlers\n\n\n            handlerQueue = jQuery.event.handlers.call(this, event, handlers); // Run delegates first; they may want to stop propagation beneath us\n\n            i = 0;\n\n            while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {\n              event.currentTarget = matched.elem;\n              j = 0;\n\n              while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {\n                // Triggered event must either 1) have no namespace, or 2) have namespace(s)\n                // a subset or equal to those in the bound event (both can have no namespace).\n                if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {\n                  event.handleObj = handleObj;\n                  event.data = handleObj.data;\n                  ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);\n\n                  if (ret !== undefined) {\n                    if ((event.result = ret) === false) {\n                      event.preventDefault();\n                      event.stopPropagation();\n                    }\n                  }\n                }\n              }\n            } // Call the postDispatch hook for the mapped type\n\n\n            if (special.postDispatch) {\n              special.postDispatch.call(this, event);\n            }\n\n            return event.result;\n          },\n          handlers: function handlers(event, _handlers) {\n            var i,\n                handleObj,\n                sel,\n                matchedHandlers,\n                matchedSelectors,\n                handlerQueue = [],\n                delegateCount = _handlers.delegateCount,\n                cur = event.target; // Find delegate handlers\n\n            if (delegateCount && // Support: IE <=9\n            // Black-hole SVG <use> instance trees (trac-13180)\n            cur.nodeType && // Support: Firefox <=42\n            // Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n            // https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n            // Support: IE 11 only\n            // ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n            !(event.type === \"click\" && event.button >= 1)) {\n              for (; cur !== this; cur = cur.parentNode || this) {\n                // Don't check non-elements (#13208)\n                // Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)\n                if (cur.nodeType === 1 && !(event.type === \"click\" && cur.disabled === true)) {\n                  matchedHandlers = [];\n                  matchedSelectors = {};\n\n                  for (i = 0; i < delegateCount; i++) {\n                    handleObj = _handlers[i]; // Don't conflict with Object.prototype properties (#13203)\n\n                    sel = handleObj.selector + \" \";\n\n                    if (matchedSelectors[sel] === undefined) {\n                      matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;\n                    }\n\n                    if (matchedSelectors[sel]) {\n                      matchedHandlers.push(handleObj);\n                    }\n                  }\n\n                  if (matchedHandlers.length) {\n                    handlerQueue.push({\n                      elem: cur,\n                      handlers: matchedHandlers\n                    });\n                  }\n                }\n              }\n            } // Add the remaining (directly-bound) handlers\n\n\n            cur = this;\n\n            if (delegateCount < _handlers.length) {\n              handlerQueue.push({\n                elem: cur,\n                handlers: _handlers.slice(delegateCount)\n              });\n            }\n\n            return handlerQueue;\n          },\n          addProp: function addProp(name, hook) {\n            Object.defineProperty(jQuery.Event.prototype, name, {\n              enumerable: true,\n              configurable: true,\n              get: jQuery.isFunction(hook) ? function () {\n                if (this.originalEvent) {\n                  return hook(this.originalEvent);\n                }\n              } : function () {\n                if (this.originalEvent) {\n                  return this.originalEvent[name];\n                }\n              },\n              set: function set(value) {\n                Object.defineProperty(this, name, {\n                  enumerable: true,\n                  configurable: true,\n                  writable: true,\n                  value: value\n                });\n              }\n            });\n          },\n          fix: function fix(originalEvent) {\n            return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);\n          },\n          special: {\n            load: {\n              // Prevent triggered image.load events from bubbling to window.load\n              noBubble: true\n            },\n            focus: {\n              // Fire native event if possible so blur/focus sequence is correct\n              trigger: function trigger() {\n                if (this !== safeActiveElement() && this.focus) {\n                  this.focus();\n                  return false;\n                }\n              },\n              delegateType: \"focusin\"\n            },\n            blur: {\n              trigger: function trigger() {\n                if (this === safeActiveElement() && this.blur) {\n                  this.blur();\n                  return false;\n                }\n              },\n              delegateType: \"focusout\"\n            },\n            click: {\n              // For checkbox, fire native event so checked state will be right\n              trigger: function trigger() {\n                if (this.type === \"checkbox\" && this.click && nodeName(this, \"input\")) {\n                  this.click();\n                  return false;\n                }\n              },\n              // For cross-browser consistency, don't fire native .click() on links\n              _default: function _default(event) {\n                return nodeName(event.target, \"a\");\n              }\n            },\n            beforeunload: {\n              postDispatch: function postDispatch(event) {\n                // Support: Firefox 20+\n                // Firefox doesn't alert if the returnValue field is not set.\n                if (event.result !== undefined && event.originalEvent) {\n                  event.originalEvent.returnValue = event.result;\n                }\n              }\n            }\n          }\n        };\n\n        jQuery.removeEvent = function (elem, type, handle) {\n          // This \"if\" is needed for plain objects\n          if (elem.removeEventListener) {\n            elem.removeEventListener(type, handle);\n          }\n        };\n\n        jQuery.Event = function (src, props) {\n          // Allow instantiation without the 'new' keyword\n          if (!(this instanceof jQuery.Event)) {\n            return new jQuery.Event(src, props);\n          } // Event object\n\n\n          if (src && src.type) {\n            this.originalEvent = src;\n            this.type = src.type; // Events bubbling up the document may have been marked as prevented\n            // by a handler lower down the tree; reflect the correct value.\n\n            this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined && // Support: Android <=2.3 only\n            src.returnValue === false ? returnTrue : returnFalse; // Create target properties\n            // Support: Safari <=6 - 7 only\n            // Target should not be a text node (#504, #13143)\n\n            this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;\n            this.currentTarget = src.currentTarget;\n            this.relatedTarget = src.relatedTarget; // Event type\n          } else {\n            this.type = src;\n          } // Put explicitly provided properties onto the event object\n\n\n          if (props) {\n            jQuery.extend(this, props);\n          } // Create a timestamp if incoming event doesn't have one\n\n\n          this.timeStamp = src && src.timeStamp || jQuery.now(); // Mark it as fixed\n\n          this[jQuery.expando] = true;\n        }; // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n        // https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n\n\n        jQuery.Event.prototype = {\n          constructor: jQuery.Event,\n          isDefaultPrevented: returnFalse,\n          isPropagationStopped: returnFalse,\n          isImmediatePropagationStopped: returnFalse,\n          isSimulated: false,\n          preventDefault: function preventDefault() {\n            var e = this.originalEvent;\n            this.isDefaultPrevented = returnTrue;\n\n            if (e && !this.isSimulated) {\n              e.preventDefault();\n            }\n          },\n          stopPropagation: function stopPropagation() {\n            var e = this.originalEvent;\n            this.isPropagationStopped = returnTrue;\n\n            if (e && !this.isSimulated) {\n              e.stopPropagation();\n            }\n          },\n          stopImmediatePropagation: function stopImmediatePropagation() {\n            var e = this.originalEvent;\n            this.isImmediatePropagationStopped = returnTrue;\n\n            if (e && !this.isSimulated) {\n              e.stopImmediatePropagation();\n            }\n\n            this.stopPropagation();\n          }\n        }; // Includes all common event props including KeyEvent and MouseEvent specific props\n\n        jQuery.each({\n          altKey: true,\n          bubbles: true,\n          cancelable: true,\n          changedTouches: true,\n          ctrlKey: true,\n          detail: true,\n          eventPhase: true,\n          metaKey: true,\n          pageX: true,\n          pageY: true,\n          shiftKey: true,\n          view: true,\n          \"char\": true,\n          charCode: true,\n          key: true,\n          keyCode: true,\n          button: true,\n          buttons: true,\n          clientX: true,\n          clientY: true,\n          offsetX: true,\n          offsetY: true,\n          pointerId: true,\n          pointerType: true,\n          screenX: true,\n          screenY: true,\n          targetTouches: true,\n          toElement: true,\n          touches: true,\n          which: function which(event) {\n            var button = event.button; // Add which for key events\n\n            if (event.which == null && rkeyEvent.test(event.type)) {\n              return event.charCode != null ? event.charCode : event.keyCode;\n            } // Add which for click: 1 === left; 2 === middle; 3 === right\n\n\n            if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {\n              if (button & 1) {\n                return 1;\n              }\n\n              if (button & 2) {\n                return 3;\n              }\n\n              if (button & 4) {\n                return 2;\n              }\n\n              return 0;\n            }\n\n            return event.which;\n          }\n        }, jQuery.event.addProp); // Create mouseenter/leave events using mouseover/out and event-time checks\n        // so that event delegation works in jQuery.\n        // Do the same for pointerenter/pointerleave and pointerover/pointerout\n        //\n        // Support: Safari 7 only\n        // Safari sends mouseenter too often; see:\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n        // for the description of the bug (it existed in older Chrome versions as well).\n\n        jQuery.each({\n          mouseenter: \"mouseover\",\n          mouseleave: \"mouseout\",\n          pointerenter: \"pointerover\",\n          pointerleave: \"pointerout\"\n        }, function (orig, fix) {\n          jQuery.event.special[orig] = {\n            delegateType: fix,\n            bindType: fix,\n            handle: function handle(event) {\n              var ret,\n                  target = this,\n                  related = event.relatedTarget,\n                  handleObj = event.handleObj; // For mouseenter/leave call the handler if related is outside the target.\n              // NB: No relatedTarget if the mouse left/entered the browser window\n\n              if (!related || related !== target && !jQuery.contains(target, related)) {\n                event.type = handleObj.origType;\n                ret = handleObj.handler.apply(this, arguments);\n                event.type = fix;\n              }\n\n              return ret;\n            }\n          };\n        });\n        jQuery.fn.extend({\n          on: function on(types, selector, data, fn) {\n            return _on(this, types, selector, data, fn);\n          },\n          one: function one(types, selector, data, fn) {\n            return _on(this, types, selector, data, fn, 1);\n          },\n          off: function off(types, selector, fn) {\n            var handleObj, type;\n\n            if (types && types.preventDefault && types.handleObj) {\n              // ( event )  dispatched jQuery.Event\n              handleObj = types.handleObj;\n              jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + \".\" + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);\n              return this;\n            }\n\n            if (typeof types === \"object\") {\n              // ( types-object [, selector] )\n              for (type in types) {\n                this.off(type, selector, types[type]);\n              }\n\n              return this;\n            }\n\n            if (selector === false || typeof selector === \"function\") {\n              // ( types [, fn] )\n              fn = selector;\n              selector = undefined;\n            }\n\n            if (fn === false) {\n              fn = returnFalse;\n            }\n\n            return this.each(function () {\n              jQuery.event.remove(this, types, fn, selector);\n            });\n          }\n        });\n        var\n        /* eslint-disable max-len */\n        // See https://github.com/eslint/eslint/issues/3229\n        rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi,\n\n        /* eslint-enable */\n        // Support: IE <=10 - 11, Edge 12 - 13\n        // In IE/Edge using regex groups here causes severe slowdowns.\n        // See https://connect.microsoft.com/IE/feedback/details/1736512/\n        rnoInnerhtml = /<script|<style|<link/i,\n            // checked=\"checked\" or checked\n        rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n            rscriptTypeMasked = /^true\\/(.*)/,\n            rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g; // Prefer a tbody over its parent table for containing new rows\n\n        function manipulationTarget(elem, content) {\n          if (nodeName(elem, \"table\") && nodeName(content.nodeType !== 11 ? content : content.firstChild, \"tr\")) {\n            return jQuery(\">tbody\", elem)[0] || elem;\n          }\n\n          return elem;\n        } // Replace/restore the type attribute of script elements for safe DOM manipulation\n\n\n        function disableScript(elem) {\n          elem.type = (elem.getAttribute(\"type\") !== null) + \"/\" + elem.type;\n          return elem;\n        }\n\n        function restoreScript(elem) {\n          var match = rscriptTypeMasked.exec(elem.type);\n\n          if (match) {\n            elem.type = match[1];\n          } else {\n            elem.removeAttribute(\"type\");\n          }\n\n          return elem;\n        }\n\n        function cloneCopyEvent(src, dest) {\n          var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n          if (dest.nodeType !== 1) {\n            return;\n          } // 1. Copy private data: events, handlers, etc.\n\n\n          if (dataPriv.hasData(src)) {\n            pdataOld = dataPriv.access(src);\n            pdataCur = dataPriv.set(dest, pdataOld);\n            events = pdataOld.events;\n\n            if (events) {\n              delete pdataCur.handle;\n              pdataCur.events = {};\n\n              for (type in events) {\n                for (i = 0, l = events[type].length; i < l; i++) {\n                  jQuery.event.add(dest, type, events[type][i]);\n                }\n              }\n            }\n          } // 2. Copy user data\n\n\n          if (dataUser.hasData(src)) {\n            udataOld = dataUser.access(src);\n            udataCur = jQuery.extend({}, udataOld);\n            dataUser.set(dest, udataCur);\n          }\n        } // Fix IE bugs, see support tests\n\n\n        function fixInput(src, dest) {\n          var nodeName = dest.nodeName.toLowerCase(); // Fails to persist the checked state of a cloned checkbox or radio button.\n\n          if (nodeName === \"input\" && rcheckableType.test(src.type)) {\n            dest.checked = src.checked; // Fails to return the selected option to the default selected state when cloning options\n          } else if (nodeName === \"input\" || nodeName === \"textarea\") {\n            dest.defaultValue = src.defaultValue;\n          }\n        }\n\n        function domManip(collection, args, callback, ignored) {\n          // Flatten any nested arrays\n          args = concat.apply([], args);\n          var fragment,\n              first,\n              scripts,\n              hasScripts,\n              node,\n              doc,\n              i = 0,\n              l = collection.length,\n              iNoClone = l - 1,\n              value = args[0],\n              isFunction = jQuery.isFunction(value); // We can't cloneNode fragments that contain checked, in WebKit\n\n          if (isFunction || l > 1 && typeof value === \"string\" && !support.checkClone && rchecked.test(value)) {\n            return collection.each(function (index) {\n              var self = collection.eq(index);\n\n              if (isFunction) {\n                args[0] = value.call(this, index, self.html());\n              }\n\n              domManip(self, args, callback, ignored);\n            });\n          }\n\n          if (l) {\n            fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);\n            first = fragment.firstChild;\n\n            if (fragment.childNodes.length === 1) {\n              fragment = first;\n            } // Require either new content or an interest in ignored elements to invoke the callback\n\n\n            if (first || ignored) {\n              scripts = jQuery.map(getAll(fragment, \"script\"), disableScript);\n              hasScripts = scripts.length; // Use the original fragment for the last item\n              // instead of the first because it can end up\n              // being emptied incorrectly in certain situations (#8070).\n\n              for (; i < l; i++) {\n                node = fragment;\n\n                if (i !== iNoClone) {\n                  node = jQuery.clone(node, true, true); // Keep references to cloned scripts for later restoration\n\n                  if (hasScripts) {\n                    // Support: Android <=4.0 only, PhantomJS 1 only\n                    // push.apply(_, arraylike) throws on ancient WebKit\n                    jQuery.merge(scripts, getAll(node, \"script\"));\n                  }\n                }\n\n                callback.call(collection[i], node, i);\n              }\n\n              if (hasScripts) {\n                doc = scripts[scripts.length - 1].ownerDocument; // Reenable scripts\n\n                jQuery.map(scripts, restoreScript); // Evaluate executable scripts on first document insertion\n\n                for (i = 0; i < hasScripts; i++) {\n                  node = scripts[i];\n\n                  if (rscriptType.test(node.type || \"\") && !dataPriv.access(node, \"globalEval\") && jQuery.contains(doc, node)) {\n                    if (node.src) {\n                      // Optional AJAX dependency, but won't run scripts if not present\n                      if (jQuery._evalUrl) {\n                        jQuery._evalUrl(node.src);\n                      }\n                    } else {\n                      DOMEval(node.textContent.replace(rcleanScript, \"\"), doc);\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          return collection;\n        }\n\n        function _remove(elem, selector, keepData) {\n          var node,\n              nodes = selector ? jQuery.filter(selector, elem) : elem,\n              i = 0;\n\n          for (; (node = nodes[i]) != null; i++) {\n            if (!keepData && node.nodeType === 1) {\n              jQuery.cleanData(getAll(node));\n            }\n\n            if (node.parentNode) {\n              if (keepData && jQuery.contains(node.ownerDocument, node)) {\n                setGlobalEval(getAll(node, \"script\"));\n              }\n\n              node.parentNode.removeChild(node);\n            }\n          }\n\n          return elem;\n        }\n\n        jQuery.extend({\n          htmlPrefilter: function htmlPrefilter(html) {\n            return html.replace(rxhtmlTag, \"<$1></$2>\");\n          },\n          clone: function clone(elem, dataAndEvents, deepDataAndEvents) {\n            var i,\n                l,\n                srcElements,\n                destElements,\n                clone = elem.cloneNode(true),\n                inPage = jQuery.contains(elem.ownerDocument, elem); // Fix IE cloning issues\n\n            if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {\n              // We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n              destElements = getAll(clone);\n              srcElements = getAll(elem);\n\n              for (i = 0, l = srcElements.length; i < l; i++) {\n                fixInput(srcElements[i], destElements[i]);\n              }\n            } // Copy the events from the original to the clone\n\n\n            if (dataAndEvents) {\n              if (deepDataAndEvents) {\n                srcElements = srcElements || getAll(elem);\n                destElements = destElements || getAll(clone);\n\n                for (i = 0, l = srcElements.length; i < l; i++) {\n                  cloneCopyEvent(srcElements[i], destElements[i]);\n                }\n              } else {\n                cloneCopyEvent(elem, clone);\n              }\n            } // Preserve script evaluation history\n\n\n            destElements = getAll(clone, \"script\");\n\n            if (destElements.length > 0) {\n              setGlobalEval(destElements, !inPage && getAll(elem, \"script\"));\n            } // Return the cloned set\n\n\n            return clone;\n          },\n          cleanData: function cleanData(elems) {\n            var data,\n                elem,\n                type,\n                special = jQuery.event.special,\n                i = 0;\n\n            for (; (elem = elems[i]) !== undefined; i++) {\n              if (acceptData(elem)) {\n                if (data = elem[dataPriv.expando]) {\n                  if (data.events) {\n                    for (type in data.events) {\n                      if (special[type]) {\n                        jQuery.event.remove(elem, type); // This is a shortcut to avoid jQuery.event.remove's overhead\n                      } else {\n                        jQuery.removeEvent(elem, type, data.handle);\n                      }\n                    }\n                  } // Support: Chrome <=35 - 45+\n                  // Assign undefined instead of using delete, see Data#remove\n\n\n                  elem[dataPriv.expando] = undefined;\n                }\n\n                if (elem[dataUser.expando]) {\n                  // Support: Chrome <=35 - 45+\n                  // Assign undefined instead of using delete, see Data#remove\n                  elem[dataUser.expando] = undefined;\n                }\n              }\n            }\n          }\n        });\n        jQuery.fn.extend({\n          detach: function detach(selector) {\n            return _remove(this, selector, true);\n          },\n          remove: function remove(selector) {\n            return _remove(this, selector);\n          },\n          text: function text(value) {\n            return access(this, function (value) {\n              return value === undefined ? jQuery.text(this) : this.empty().each(function () {\n                if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n                  this.textContent = value;\n                }\n              });\n            }, null, value, arguments.length);\n          },\n          append: function append() {\n            return domManip(this, arguments, function (elem) {\n              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n                var target = manipulationTarget(this, elem);\n                target.appendChild(elem);\n              }\n            });\n          },\n          prepend: function prepend() {\n            return domManip(this, arguments, function (elem) {\n              if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {\n                var target = manipulationTarget(this, elem);\n                target.insertBefore(elem, target.firstChild);\n              }\n            });\n          },\n          before: function before() {\n            return domManip(this, arguments, function (elem) {\n              if (this.parentNode) {\n                this.parentNode.insertBefore(elem, this);\n              }\n            });\n          },\n          after: function after() {\n            return domManip(this, arguments, function (elem) {\n              if (this.parentNode) {\n                this.parentNode.insertBefore(elem, this.nextSibling);\n              }\n            });\n          },\n          empty: function empty() {\n            var elem,\n                i = 0;\n\n            for (; (elem = this[i]) != null; i++) {\n              if (elem.nodeType === 1) {\n                // Prevent memory leaks\n                jQuery.cleanData(getAll(elem, false)); // Remove any remaining nodes\n\n                elem.textContent = \"\";\n              }\n            }\n\n            return this;\n          },\n          clone: function clone(dataAndEvents, deepDataAndEvents) {\n            dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n            deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n            return this.map(function () {\n              return jQuery.clone(this, dataAndEvents, deepDataAndEvents);\n            });\n          },\n          html: function html(value) {\n            return access(this, function (value) {\n              var elem = this[0] || {},\n                  i = 0,\n                  l = this.length;\n\n              if (value === undefined && elem.nodeType === 1) {\n                return elem.innerHTML;\n              } // See if we can take a shortcut and just use innerHTML\n\n\n              if (typeof value === \"string\" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || [\"\", \"\"])[1].toLowerCase()]) {\n                value = jQuery.htmlPrefilter(value);\n\n                try {\n                  for (; i < l; i++) {\n                    elem = this[i] || {}; // Remove element nodes and prevent memory leaks\n\n                    if (elem.nodeType === 1) {\n                      jQuery.cleanData(getAll(elem, false));\n                      elem.innerHTML = value;\n                    }\n                  }\n\n                  elem = 0; // If using innerHTML throws an exception, use the fallback method\n                } catch (e) {}\n              }\n\n              if (elem) {\n                this.empty().append(value);\n              }\n            }, null, value, arguments.length);\n          },\n          replaceWith: function replaceWith() {\n            var ignored = []; // Make the changes, replacing each non-ignored context element with the new content\n\n            return domManip(this, arguments, function (elem) {\n              var parent = this.parentNode;\n\n              if (jQuery.inArray(this, ignored) < 0) {\n                jQuery.cleanData(getAll(this));\n\n                if (parent) {\n                  parent.replaceChild(elem, this);\n                }\n              } // Force callback invocation\n\n            }, ignored);\n          }\n        });\n        jQuery.each({\n          appendTo: \"append\",\n          prependTo: \"prepend\",\n          insertBefore: \"before\",\n          insertAfter: \"after\",\n          replaceAll: \"replaceWith\"\n        }, function (name, original) {\n          jQuery.fn[name] = function (selector) {\n            var elems,\n                ret = [],\n                insert = jQuery(selector),\n                last = insert.length - 1,\n                i = 0;\n\n            for (; i <= last; i++) {\n              elems = i === last ? this : this.clone(true);\n              jQuery(insert[i])[original](elems); // Support: Android <=4.0 only, PhantomJS 1 only\n              // .get() because push.apply(_, arraylike) throws on ancient WebKit\n\n              push.apply(ret, elems.get());\n            }\n\n            return this.pushStack(ret);\n          };\n        });\n        var rmargin = /^margin/;\n        var rnumnonpx = new RegExp(\"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\");\n\n        var getStyles = function getStyles(elem) {\n          // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\n          // IE throws on elements created in popups\n          // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n          var view = elem.ownerDocument.defaultView;\n\n          if (!view || !view.opener) {\n            view = window;\n          }\n\n          return view.getComputedStyle(elem);\n        };\n\n        (function () {\n          // Executing both pixelPosition & boxSizingReliable tests require only one layout\n          // so they're executed at the same time to save the second computation.\n          function computeStyleTests() {\n            // This is a singleton, we need to execute it only once\n            if (!div) {\n              return;\n            }\n\n            div.style.cssText = \"box-sizing:border-box;\" + \"position:relative;display:block;\" + \"margin:auto;border:1px;padding:1px;\" + \"top:1%;width:50%\";\n            div.innerHTML = \"\";\n            documentElement.appendChild(container);\n            var divStyle = window.getComputedStyle(div);\n            pixelPositionVal = divStyle.top !== \"1%\"; // Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\n            reliableMarginLeftVal = divStyle.marginLeft === \"2px\";\n            boxSizingReliableVal = divStyle.width === \"4px\"; // Support: Android 4.0 - 4.3 only\n            // Some styles come back with percentage values, even though they shouldn't\n\n            div.style.marginRight = \"50%\";\n            pixelMarginRightVal = divStyle.marginRight === \"4px\";\n            documentElement.removeChild(container); // Nullify the div so it wouldn't be stored in the memory and\n            // it will also be a sign that checks already performed\n\n            div = null;\n          }\n\n          var pixelPositionVal,\n              boxSizingReliableVal,\n              pixelMarginRightVal,\n              reliableMarginLeftVal,\n              container = document.createElement(\"div\"),\n              div = document.createElement(\"div\"); // Finish early in limited (non-browser) environments\n\n          if (!div.style) {\n            return;\n          } // Support: IE <=9 - 11 only\n          // Style of cloned element affects source element cloned (#8908)\n\n\n          div.style.backgroundClip = \"content-box\";\n          div.cloneNode(true).style.backgroundClip = \"\";\n          support.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n          container.style.cssText = \"border:0;width:8px;height:0;top:0;left:-9999px;\" + \"padding:0;margin-top:1px;position:absolute\";\n          container.appendChild(div);\n          jQuery.extend(support, {\n            pixelPosition: function pixelPosition() {\n              computeStyleTests();\n              return pixelPositionVal;\n            },\n            boxSizingReliable: function boxSizingReliable() {\n              computeStyleTests();\n              return boxSizingReliableVal;\n            },\n            pixelMarginRight: function pixelMarginRight() {\n              computeStyleTests();\n              return pixelMarginRightVal;\n            },\n            reliableMarginLeft: function reliableMarginLeft() {\n              computeStyleTests();\n              return reliableMarginLeftVal;\n            }\n          });\n        })();\n\n        function curCSS(elem, name, computed) {\n          var width,\n              minWidth,\n              maxWidth,\n              ret,\n              // Support: Firefox 51+\n          // Retrieving style before computed somehow\n          // fixes an issue with getting wrong values\n          // on detached elements\n          style = elem.style;\n          computed = computed || getStyles(elem); // getPropertyValue is needed for:\n          //   .css('filter') (IE 9 only, #12537)\n          //   .css('--customProperty) (#3144)\n\n          if (computed) {\n            ret = computed.getPropertyValue(name) || computed[name];\n\n            if (ret === \"\" && !jQuery.contains(elem.ownerDocument, elem)) {\n              ret = jQuery.style(elem, name);\n            } // A tribute to the \"awesome hack by Dean Edwards\"\n            // Android Browser returns percentage for some values,\n            // but width seems to be reliably pixels.\n            // This is against the CSSOM draft spec:\n            // https://drafts.csswg.org/cssom/#resolved-values\n\n\n            if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {\n              // Remember the original values\n              width = style.width;\n              minWidth = style.minWidth;\n              maxWidth = style.maxWidth; // Put in the new values to get a computed value out\n\n              style.minWidth = style.maxWidth = style.width = ret;\n              ret = computed.width; // Revert the changed values\n\n              style.width = width;\n              style.minWidth = minWidth;\n              style.maxWidth = maxWidth;\n            }\n          }\n\n          return ret !== undefined ? // Support: IE <=9 - 11 only\n          // IE returns zIndex value as an integer.\n          ret + \"\" : ret;\n        }\n\n        function addGetHookIf(conditionFn, hookFn) {\n          // Define the hook, we'll check on the first run if it's really needed.\n          return {\n            get: function get() {\n              if (conditionFn()) {\n                // Hook not needed (or it's not possible to use it due\n                // to missing dependency), remove it.\n                delete this.get;\n                return;\n              } // Hook needed; redefine it so that the support test is not executed again.\n\n\n              return (this.get = hookFn).apply(this, arguments);\n            }\n          };\n        }\n\n        var // Swappable if display is none or starts with table\n        // except \"table\", \"table-cell\", or \"table-caption\"\n        // See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n        rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n            rcustomProp = /^--/,\n            cssShow = {\n          position: \"absolute\",\n          visibility: \"hidden\",\n          display: \"block\"\n        },\n            cssNormalTransform = {\n          letterSpacing: \"0\",\n          fontWeight: \"400\"\n        },\n            cssPrefixes = [\"Webkit\", \"Moz\", \"ms\"],\n            emptyStyle = document.createElement(\"div\").style; // Return a css property mapped to a potentially vendor prefixed property\n\n        function vendorPropName(name) {\n          // Shortcut for names that are not vendor prefixed\n          if (name in emptyStyle) {\n            return name;\n          } // Check for vendor prefixed names\n\n\n          var capName = name[0].toUpperCase() + name.slice(1),\n              i = cssPrefixes.length;\n\n          while (i--) {\n            name = cssPrefixes[i] + capName;\n\n            if (name in emptyStyle) {\n              return name;\n            }\n          }\n        } // Return a property mapped along what jQuery.cssProps suggests or to\n        // a vendor prefixed property.\n\n\n        function finalPropName(name) {\n          var ret = jQuery.cssProps[name];\n\n          if (!ret) {\n            ret = jQuery.cssProps[name] = vendorPropName(name) || name;\n          }\n\n          return ret;\n        }\n\n        function setPositiveNumber(elem, value, subtract) {\n          // Any relative (+/-) values have already been\n          // normalized at this point\n          var matches = rcssNum.exec(value);\n          return matches ? // Guard against undefined \"subtract\", e.g., when used as in cssHooks\n          Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || \"px\") : value;\n        }\n\n        function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {\n          var i,\n              val = 0; // If we already have the right measurement, avoid augmentation\n\n          if (extra === (isBorderBox ? \"border\" : \"content\")) {\n            i = 4; // Otherwise initialize for horizontal or vertical properties\n          } else {\n            i = name === \"width\" ? 1 : 0;\n          }\n\n          for (; i < 4; i += 2) {\n            // Both box models exclude margin, so add it if we want it\n            if (extra === \"margin\") {\n              val += jQuery.css(elem, extra + cssExpand[i], true, styles);\n            }\n\n            if (isBorderBox) {\n              // border-box includes padding, so remove it if we want content\n              if (extra === \"content\") {\n                val -= jQuery.css(elem, \"padding\" + cssExpand[i], true, styles);\n              } // At this point, extra isn't border nor margin, so remove border\n\n\n              if (extra !== \"margin\") {\n                val -= jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n              }\n            } else {\n              // At this point, extra isn't content, so add padding\n              val += jQuery.css(elem, \"padding\" + cssExpand[i], true, styles); // At this point, extra isn't content nor padding, so add border\n\n              if (extra !== \"padding\") {\n                val += jQuery.css(elem, \"border\" + cssExpand[i] + \"Width\", true, styles);\n              }\n            }\n          }\n\n          return val;\n        }\n\n        function getWidthOrHeight(elem, name, extra) {\n          // Start with computed style\n          var valueIsBorderBox,\n              styles = getStyles(elem),\n              val = curCSS(elem, name, styles),\n              isBorderBox = jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\"; // Computed unit is not pixels. Stop here and return.\n\n          if (rnumnonpx.test(val)) {\n            return val;\n          } // Check for style in case a browser which returns unreliable values\n          // for getComputedStyle silently falls back to the reliable elem.style\n\n\n          valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]); // Fall back to offsetWidth/Height when value is \"auto\"\n          // This happens for inline elements with no explicit setting (gh-3571)\n\n          if (val === \"auto\") {\n            val = elem[\"offset\" + name[0].toUpperCase() + name.slice(1)];\n          } // Normalize \"\", auto, and prepare for extra\n\n\n          val = parseFloat(val) || 0; // Use the active box-sizing model to add/subtract irrelevant styles\n\n          return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? \"border\" : \"content\"), valueIsBorderBox, styles) + \"px\";\n        }\n\n        jQuery.extend({\n          // Add in style property hooks for overriding the default\n          // behavior of getting and setting a style property\n          cssHooks: {\n            opacity: {\n              get: function get(elem, computed) {\n                if (computed) {\n                  // We should always get a number back from opacity\n                  var ret = curCSS(elem, \"opacity\");\n                  return ret === \"\" ? \"1\" : ret;\n                }\n              }\n            }\n          },\n          // Don't automatically add \"px\" to these possibly-unitless properties\n          cssNumber: {\n            \"animationIterationCount\": true,\n            \"columnCount\": true,\n            \"fillOpacity\": true,\n            \"flexGrow\": true,\n            \"flexShrink\": true,\n            \"fontWeight\": true,\n            \"lineHeight\": true,\n            \"opacity\": true,\n            \"order\": true,\n            \"orphans\": true,\n            \"widows\": true,\n            \"zIndex\": true,\n            \"zoom\": true\n          },\n          // Add in properties whose names you wish to fix before\n          // setting or getting the value\n          cssProps: {\n            \"float\": \"cssFloat\"\n          },\n          // Get and set the style property on a DOM Node\n          style: function style(elem, name, value, extra) {\n            // Don't set styles on text and comment nodes\n            if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {\n              return;\n            } // Make sure that we're working with the right name\n\n\n            var ret,\n                type,\n                hooks,\n                origName = jQuery.camelCase(name),\n                isCustomProp = rcustomProp.test(name),\n                style = elem.style; // Make sure that we're working with the right name. We don't\n            // want to query the value if it is a CSS custom property\n            // since they are user-defined.\n\n            if (!isCustomProp) {\n              name = finalPropName(origName);\n            } // Gets hook for the prefixed version, then unprefixed version\n\n\n            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // Check if we're setting a value\n\n            if (value !== undefined) {\n              type = typeof value; // Convert \"+=\" or \"-=\" to relative numbers (#7345)\n\n              if (type === \"string\" && (ret = rcssNum.exec(value)) && ret[1]) {\n                value = adjustCSS(elem, name, ret); // Fixes bug #9237\n\n                type = \"number\";\n              } // Make sure that null and NaN values aren't set (#7116)\n\n\n              if (value == null || value !== value) {\n                return;\n              } // If a number was passed in, add the unit (except for certain CSS properties)\n\n\n              if (type === \"number\") {\n                value += ret && ret[3] || (jQuery.cssNumber[origName] ? \"\" : \"px\");\n              } // background-* props affect original clone's values\n\n\n              if (!support.clearCloneStyle && value === \"\" && name.indexOf(\"background\") === 0) {\n                style[name] = \"inherit\";\n              } // If a hook was provided, use that value, otherwise just set the specified value\n\n\n              if (!hooks || !(\"set\" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {\n                if (isCustomProp) {\n                  style.setProperty(name, value);\n                } else {\n                  style[name] = value;\n                }\n              }\n            } else {\n              // If a hook was provided get the non-computed value from there\n              if (hooks && \"get\" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {\n                return ret;\n              } // Otherwise just get the value from the style object\n\n\n              return style[name];\n            }\n          },\n          css: function css(elem, name, extra, styles) {\n            var val,\n                num,\n                hooks,\n                origName = jQuery.camelCase(name),\n                isCustomProp = rcustomProp.test(name); // Make sure that we're working with the right name. We don't\n            // want to modify the value if it is a CSS custom property\n            // since they are user-defined.\n\n            if (!isCustomProp) {\n              name = finalPropName(origName);\n            } // Try prefixed name followed by the unprefixed name\n\n\n            hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName]; // If a hook was provided get the computed value from there\n\n            if (hooks && \"get\" in hooks) {\n              val = hooks.get(elem, true, extra);\n            } // Otherwise, if a way to get the computed value exists, use that\n\n\n            if (val === undefined) {\n              val = curCSS(elem, name, styles);\n            } // Convert \"normal\" to computed value\n\n\n            if (val === \"normal\" && name in cssNormalTransform) {\n              val = cssNormalTransform[name];\n            } // Make numeric if forced or a qualifier was provided and val looks numeric\n\n\n            if (extra === \"\" || extra) {\n              num = parseFloat(val);\n              return extra === true || isFinite(num) ? num || 0 : val;\n            }\n\n            return val;\n          }\n        });\n        jQuery.each([\"height\", \"width\"], function (i, name) {\n          jQuery.cssHooks[name] = {\n            get: function get(elem, computed, extra) {\n              if (computed) {\n                // Certain elements can have dimension info if we invisibly show them\n                // but it must have a current display style that would benefit\n                return rdisplayswap.test(jQuery.css(elem, \"display\")) && ( // Support: Safari 8+\n                // Table columns in Safari have non-zero offsetWidth & zero\n                // getBoundingClientRect().width unless display is changed.\n                // Support: IE <=11 only\n                // Running getBoundingClientRect on a disconnected node\n                // in IE throws an error.\n                !elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {\n                  return getWidthOrHeight(elem, name, extra);\n                }) : getWidthOrHeight(elem, name, extra);\n              }\n            },\n            set: function set(elem, value, extra) {\n              var matches,\n                  styles = extra && getStyles(elem),\n                  subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, \"boxSizing\", false, styles) === \"border-box\", styles); // Convert to pixels if value adjustment is needed\n\n              if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || \"px\") !== \"px\") {\n                elem.style[name] = value;\n                value = jQuery.css(elem, name);\n              }\n\n              return setPositiveNumber(elem, value, subtract);\n            }\n          };\n        });\n        jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {\n          if (computed) {\n            return (parseFloat(curCSS(elem, \"marginLeft\")) || elem.getBoundingClientRect().left - swap(elem, {\n              marginLeft: 0\n            }, function () {\n              return elem.getBoundingClientRect().left;\n            })) + \"px\";\n          }\n        }); // These hooks are used by animate to expand properties\n\n        jQuery.each({\n          margin: \"\",\n          padding: \"\",\n          border: \"Width\"\n        }, function (prefix, suffix) {\n          jQuery.cssHooks[prefix + suffix] = {\n            expand: function expand(value) {\n              var i = 0,\n                  expanded = {},\n                  // Assumes a single number if not a string\n              parts = typeof value === \"string\" ? value.split(\" \") : [value];\n\n              for (; i < 4; i++) {\n                expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];\n              }\n\n              return expanded;\n            }\n          };\n\n          if (!rmargin.test(prefix)) {\n            jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;\n          }\n        });\n        jQuery.fn.extend({\n          css: function css(name, value) {\n            return access(this, function (elem, name, value) {\n              var styles,\n                  len,\n                  map = {},\n                  i = 0;\n\n              if (Array.isArray(name)) {\n                styles = getStyles(elem);\n                len = name.length;\n\n                for (; i < len; i++) {\n                  map[name[i]] = jQuery.css(elem, name[i], false, styles);\n                }\n\n                return map;\n              }\n\n              return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);\n            }, name, value, arguments.length > 1);\n          }\n        });\n\n        function Tween(elem, options, prop, end, easing) {\n          return new Tween.prototype.init(elem, options, prop, end, easing);\n        }\n\n        jQuery.Tween = Tween;\n        Tween.prototype = {\n          constructor: Tween,\n          init: function init(elem, options, prop, end, easing, unit) {\n            this.elem = elem;\n            this.prop = prop;\n            this.easing = easing || jQuery.easing._default;\n            this.options = options;\n            this.start = this.now = this.cur();\n            this.end = end;\n            this.unit = unit || (jQuery.cssNumber[prop] ? \"\" : \"px\");\n          },\n          cur: function cur() {\n            var hooks = Tween.propHooks[this.prop];\n            return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);\n          },\n          run: function run(percent) {\n            var eased,\n                hooks = Tween.propHooks[this.prop];\n\n            if (this.options.duration) {\n              this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);\n            } else {\n              this.pos = eased = percent;\n            }\n\n            this.now = (this.end - this.start) * eased + this.start;\n\n            if (this.options.step) {\n              this.options.step.call(this.elem, this.now, this);\n            }\n\n            if (hooks && hooks.set) {\n              hooks.set(this);\n            } else {\n              Tween.propHooks._default.set(this);\n            }\n\n            return this;\n          }\n        };\n        Tween.prototype.init.prototype = Tween.prototype;\n        Tween.propHooks = {\n          _default: {\n            get: function get(tween) {\n              var result; // Use a property on the element directly when it is not a DOM element,\n              // or when there is no matching style property that exists.\n\n              if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {\n                return tween.elem[tween.prop];\n              } // Passing an empty string as a 3rd parameter to .css will automatically\n              // attempt a parseFloat and fallback to a string if the parse fails.\n              // Simple values such as \"10px\" are parsed to Float;\n              // complex values such as \"rotate(1rad)\" are returned as-is.\n\n\n              result = jQuery.css(tween.elem, tween.prop, \"\"); // Empty strings, null, undefined and \"auto\" are converted to 0.\n\n              return !result || result === \"auto\" ? 0 : result;\n            },\n            set: function set(tween) {\n              // Use step hook for back compat.\n              // Use cssHook if its there.\n              // Use .style if available and use plain properties where available.\n              if (jQuery.fx.step[tween.prop]) {\n                jQuery.fx.step[tween.prop](tween);\n              } else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {\n                jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);\n              } else {\n                tween.elem[tween.prop] = tween.now;\n              }\n            }\n          }\n        }; // Support: IE <=9 only\n        // Panic based approach to setting things on disconnected nodes\n\n        Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n          set: function set(tween) {\n            if (tween.elem.nodeType && tween.elem.parentNode) {\n              tween.elem[tween.prop] = tween.now;\n            }\n          }\n        };\n        jQuery.easing = {\n          linear: function linear(p) {\n            return p;\n          },\n          swing: function swing(p) {\n            return 0.5 - Math.cos(p * Math.PI) / 2;\n          },\n          _default: \"swing\"\n        };\n        jQuery.fx = Tween.prototype.init; // Back compat <1.8 extension point\n\n        jQuery.fx.step = {};\n        var fxNow,\n            inProgress,\n            rfxtypes = /^(?:toggle|show|hide)$/,\n            rrun = /queueHooks$/;\n\n        function schedule() {\n          if (inProgress) {\n            if (document.hidden === false && window.requestAnimationFrame) {\n              window.requestAnimationFrame(schedule);\n            } else {\n              window.setTimeout(schedule, jQuery.fx.interval);\n            }\n\n            jQuery.fx.tick();\n          }\n        } // Animations created synchronously will run synchronously\n\n\n        function createFxNow() {\n          window.setTimeout(function () {\n            fxNow = undefined;\n          });\n          return fxNow = jQuery.now();\n        } // Generate parameters to create a standard animation\n\n\n        function genFx(type, includeWidth) {\n          var which,\n              i = 0,\n              attrs = {\n            height: type\n          }; // If we include width, step value is 1 to do all cssExpand values,\n          // otherwise step value is 2 to skip over Left and Right\n\n          includeWidth = includeWidth ? 1 : 0;\n\n          for (; i < 4; i += 2 - includeWidth) {\n            which = cssExpand[i];\n            attrs[\"margin\" + which] = attrs[\"padding\" + which] = type;\n          }\n\n          if (includeWidth) {\n            attrs.opacity = attrs.width = type;\n          }\n\n          return attrs;\n        }\n\n        function createTween(value, prop, animation) {\n          var tween,\n              collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners[\"*\"]),\n              index = 0,\n              length = collection.length;\n\n          for (; index < length; index++) {\n            if (tween = collection[index].call(animation, prop, value)) {\n              // We're done with this property\n              return tween;\n            }\n          }\n        }\n\n        function defaultPrefilter(elem, props, opts) {\n          var prop,\n              value,\n              toggle,\n              hooks,\n              oldfire,\n              propTween,\n              restoreDisplay,\n              display,\n              isBox = \"width\" in props || \"height\" in props,\n              anim = this,\n              orig = {},\n              style = elem.style,\n              hidden = elem.nodeType && isHiddenWithinTree(elem),\n              dataShow = dataPriv.get(elem, \"fxshow\"); // Queue-skipping animations hijack the fx hooks\n\n          if (!opts.queue) {\n            hooks = jQuery._queueHooks(elem, \"fx\");\n\n            if (hooks.unqueued == null) {\n              hooks.unqueued = 0;\n              oldfire = hooks.empty.fire;\n\n              hooks.empty.fire = function () {\n                if (!hooks.unqueued) {\n                  oldfire();\n                }\n              };\n            }\n\n            hooks.unqueued++;\n            anim.always(function () {\n              // Ensure the complete handler is called before this completes\n              anim.always(function () {\n                hooks.unqueued--;\n\n                if (!jQuery.queue(elem, \"fx\").length) {\n                  hooks.empty.fire();\n                }\n              });\n            });\n          } // Detect show/hide animations\n\n\n          for (prop in props) {\n            value = props[prop];\n\n            if (rfxtypes.test(value)) {\n              delete props[prop];\n              toggle = toggle || value === \"toggle\";\n\n              if (value === (hidden ? \"hide\" : \"show\")) {\n                // Pretend to be hidden if this is a \"show\" and\n                // there is still data from a stopped show/hide\n                if (value === \"show\" && dataShow && dataShow[prop] !== undefined) {\n                  hidden = true; // Ignore all other no-op show/hide data\n                } else {\n                  continue;\n                }\n              }\n\n              orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);\n            }\n          } // Bail out if this is a no-op like .hide().hide()\n\n\n          propTween = !jQuery.isEmptyObject(props);\n\n          if (!propTween && jQuery.isEmptyObject(orig)) {\n            return;\n          } // Restrict \"overflow\" and \"display\" styles during box animations\n\n\n          if (isBox && elem.nodeType === 1) {\n            // Support: IE <=9 - 11, Edge 12 - 13\n            // Record all 3 overflow attributes because IE does not infer the shorthand\n            // from identically-valued overflowX and overflowY\n            opts.overflow = [style.overflow, style.overflowX, style.overflowY]; // Identify a display type, preferring old show/hide data over the CSS cascade\n\n            restoreDisplay = dataShow && dataShow.display;\n\n            if (restoreDisplay == null) {\n              restoreDisplay = dataPriv.get(elem, \"display\");\n            }\n\n            display = jQuery.css(elem, \"display\");\n\n            if (display === \"none\") {\n              if (restoreDisplay) {\n                display = restoreDisplay;\n              } else {\n                // Get nonempty value(s) by temporarily forcing visibility\n                showHide([elem], true);\n                restoreDisplay = elem.style.display || restoreDisplay;\n                display = jQuery.css(elem, \"display\");\n                showHide([elem]);\n              }\n            } // Animate inline elements as inline-block\n\n\n            if (display === \"inline\" || display === \"inline-block\" && restoreDisplay != null) {\n              if (jQuery.css(elem, \"float\") === \"none\") {\n                // Restore the original display value at the end of pure show/hide animations\n                if (!propTween) {\n                  anim.done(function () {\n                    style.display = restoreDisplay;\n                  });\n\n                  if (restoreDisplay == null) {\n                    display = style.display;\n                    restoreDisplay = display === \"none\" ? \"\" : display;\n                  }\n                }\n\n                style.display = \"inline-block\";\n              }\n            }\n          }\n\n          if (opts.overflow) {\n            style.overflow = \"hidden\";\n            anim.always(function () {\n              style.overflow = opts.overflow[0];\n              style.overflowX = opts.overflow[1];\n              style.overflowY = opts.overflow[2];\n            });\n          } // Implement show/hide animations\n\n\n          propTween = false;\n\n          for (prop in orig) {\n            // General show/hide setup for this element animation\n            if (!propTween) {\n              if (dataShow) {\n                if (\"hidden\" in dataShow) {\n                  hidden = dataShow.hidden;\n                }\n              } else {\n                dataShow = dataPriv.access(elem, \"fxshow\", {\n                  display: restoreDisplay\n                });\n              } // Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\n\n              if (toggle) {\n                dataShow.hidden = !hidden;\n              } // Show elements before animating them\n\n\n              if (hidden) {\n                showHide([elem], true);\n              }\n              /* eslint-disable no-loop-func */\n\n\n              anim.done(function () {\n                /* eslint-enable no-loop-func */\n                // The final step of a \"hide\" animation is actually hiding the element\n                if (!hidden) {\n                  showHide([elem]);\n                }\n\n                dataPriv.remove(elem, \"fxshow\");\n\n                for (prop in orig) {\n                  jQuery.style(elem, prop, orig[prop]);\n                }\n              });\n            } // Per-property setup\n\n\n            propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);\n\n            if (!(prop in dataShow)) {\n              dataShow[prop] = propTween.start;\n\n              if (hidden) {\n                propTween.end = propTween.start;\n                propTween.start = 0;\n              }\n            }\n          }\n        }\n\n        function propFilter(props, specialEasing) {\n          var index, name, easing, value, hooks; // camelCase, specialEasing and expand cssHook pass\n\n          for (index in props) {\n            name = jQuery.camelCase(index);\n            easing = specialEasing[name];\n            value = props[index];\n\n            if (Array.isArray(value)) {\n              easing = value[1];\n              value = props[index] = value[0];\n            }\n\n            if (index !== name) {\n              props[name] = value;\n              delete props[index];\n            }\n\n            hooks = jQuery.cssHooks[name];\n\n            if (hooks && \"expand\" in hooks) {\n              value = hooks.expand(value);\n              delete props[name]; // Not quite $.extend, this won't overwrite existing keys.\n              // Reusing 'index' because we have the correct \"name\"\n\n              for (index in value) {\n                if (!(index in props)) {\n                  props[index] = value[index];\n                  specialEasing[index] = easing;\n                }\n              }\n            } else {\n              specialEasing[name] = easing;\n            }\n          }\n        }\n\n        function Animation(elem, properties, options) {\n          var result,\n              stopped,\n              index = 0,\n              length = Animation.prefilters.length,\n              deferred = jQuery.Deferred().always(function () {\n            // Don't match elem in the :animated selector\n            delete tick.elem;\n          }),\n              tick = function tick() {\n            if (stopped) {\n              return false;\n            }\n\n            var currentTime = fxNow || createFxNow(),\n                remaining = Math.max(0, animation.startTime + animation.duration - currentTime),\n                // Support: Android 2.3 only\n            // Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)\n            temp = remaining / animation.duration || 0,\n                percent = 1 - temp,\n                index = 0,\n                length = animation.tweens.length;\n\n            for (; index < length; index++) {\n              animation.tweens[index].run(percent);\n            }\n\n            deferred.notifyWith(elem, [animation, percent, remaining]); // If there's more to do, yield\n\n            if (percent < 1 && length) {\n              return remaining;\n            } // If this was an empty animation, synthesize a final progress notification\n\n\n            if (!length) {\n              deferred.notifyWith(elem, [animation, 1, 0]);\n            } // Resolve the animation and report its conclusion\n\n\n            deferred.resolveWith(elem, [animation]);\n            return false;\n          },\n              animation = deferred.promise({\n            elem: elem,\n            props: jQuery.extend({}, properties),\n            opts: jQuery.extend(true, {\n              specialEasing: {},\n              easing: jQuery.easing._default\n            }, options),\n            originalProperties: properties,\n            originalOptions: options,\n            startTime: fxNow || createFxNow(),\n            duration: options.duration,\n            tweens: [],\n            createTween: function createTween(prop, end) {\n              var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);\n              animation.tweens.push(tween);\n              return tween;\n            },\n            stop: function stop(gotoEnd) {\n              var index = 0,\n                  // If we are going to the end, we want to run all the tweens\n              // otherwise we skip this part\n              length = gotoEnd ? animation.tweens.length : 0;\n\n              if (stopped) {\n                return this;\n              }\n\n              stopped = true;\n\n              for (; index < length; index++) {\n                animation.tweens[index].run(1);\n              } // Resolve when we played the last frame; otherwise, reject\n\n\n              if (gotoEnd) {\n                deferred.notifyWith(elem, [animation, 1, 0]);\n                deferred.resolveWith(elem, [animation, gotoEnd]);\n              } else {\n                deferred.rejectWith(elem, [animation, gotoEnd]);\n              }\n\n              return this;\n            }\n          }),\n              props = animation.props;\n\n          propFilter(props, animation.opts.specialEasing);\n\n          for (; index < length; index++) {\n            result = Animation.prefilters[index].call(animation, elem, props, animation.opts);\n\n            if (result) {\n              if (jQuery.isFunction(result.stop)) {\n                jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);\n              }\n\n              return result;\n            }\n          }\n\n          jQuery.map(props, createTween, animation);\n\n          if (jQuery.isFunction(animation.opts.start)) {\n            animation.opts.start.call(elem, animation);\n          } // Attach callbacks from options\n\n\n          animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);\n          jQuery.fx.timer(jQuery.extend(tick, {\n            elem: elem,\n            anim: animation,\n            queue: animation.opts.queue\n          }));\n          return animation;\n        }\n\n        jQuery.Animation = jQuery.extend(Animation, {\n          tweeners: {\n            \"*\": [function (prop, value) {\n              var tween = this.createTween(prop, value);\n              adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);\n              return tween;\n            }]\n          },\n          tweener: function tweener(props, callback) {\n            if (jQuery.isFunction(props)) {\n              callback = props;\n              props = [\"*\"];\n            } else {\n              props = props.match(rnothtmlwhite);\n            }\n\n            var prop,\n                index = 0,\n                length = props.length;\n\n            for (; index < length; index++) {\n              prop = props[index];\n              Animation.tweeners[prop] = Animation.tweeners[prop] || [];\n              Animation.tweeners[prop].unshift(callback);\n            }\n          },\n          prefilters: [defaultPrefilter],\n          prefilter: function prefilter(callback, prepend) {\n            if (prepend) {\n              Animation.prefilters.unshift(callback);\n            } else {\n              Animation.prefilters.push(callback);\n            }\n          }\n        });\n\n        jQuery.speed = function (speed, easing, fn) {\n          var opt = speed && typeof speed === \"object\" ? jQuery.extend({}, speed) : {\n            complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,\n            duration: speed,\n            easing: fn && easing || easing && !jQuery.isFunction(easing) && easing\n          }; // Go to the end state if fx are off\n\n          if (jQuery.fx.off) {\n            opt.duration = 0;\n          } else {\n            if (typeof opt.duration !== \"number\") {\n              if (opt.duration in jQuery.fx.speeds) {\n                opt.duration = jQuery.fx.speeds[opt.duration];\n              } else {\n                opt.duration = jQuery.fx.speeds._default;\n              }\n            }\n          } // Normalize opt.queue - true/undefined/null -> \"fx\"\n\n\n          if (opt.queue == null || opt.queue === true) {\n            opt.queue = \"fx\";\n          } // Queueing\n\n\n          opt.old = opt.complete;\n\n          opt.complete = function () {\n            if (jQuery.isFunction(opt.old)) {\n              opt.old.call(this);\n            }\n\n            if (opt.queue) {\n              jQuery.dequeue(this, opt.queue);\n            }\n          };\n\n          return opt;\n        };\n\n        jQuery.fn.extend({\n          fadeTo: function fadeTo(speed, to, easing, callback) {\n            // Show any hidden elements after setting opacity to 0\n            return this.filter(isHiddenWithinTree).css(\"opacity\", 0).show() // Animate to the value specified\n            .end().animate({\n              opacity: to\n            }, speed, easing, callback);\n          },\n          animate: function animate(prop, speed, easing, callback) {\n            var empty = jQuery.isEmptyObject(prop),\n                optall = jQuery.speed(speed, easing, callback),\n                doAnimation = function doAnimation() {\n              // Operate on a copy of prop so per-property easing won't be lost\n              var anim = Animation(this, jQuery.extend({}, prop), optall); // Empty animations, or finishing resolves immediately\n\n              if (empty || dataPriv.get(this, \"finish\")) {\n                anim.stop(true);\n              }\n            };\n\n            doAnimation.finish = doAnimation;\n            return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);\n          },\n          stop: function stop(type, clearQueue, gotoEnd) {\n            var stopQueue = function stopQueue(hooks) {\n              var stop = hooks.stop;\n              delete hooks.stop;\n              stop(gotoEnd);\n            };\n\n            if (typeof type !== \"string\") {\n              gotoEnd = clearQueue;\n              clearQueue = type;\n              type = undefined;\n            }\n\n            if (clearQueue && type !== false) {\n              this.queue(type || \"fx\", []);\n            }\n\n            return this.each(function () {\n              var dequeue = true,\n                  index = type != null && type + \"queueHooks\",\n                  timers = jQuery.timers,\n                  data = dataPriv.get(this);\n\n              if (index) {\n                if (data[index] && data[index].stop) {\n                  stopQueue(data[index]);\n                }\n              } else {\n                for (index in data) {\n                  if (data[index] && data[index].stop && rrun.test(index)) {\n                    stopQueue(data[index]);\n                  }\n                }\n              }\n\n              for (index = timers.length; index--;) {\n                if (timers[index].elem === this && (type == null || timers[index].queue === type)) {\n                  timers[index].anim.stop(gotoEnd);\n                  dequeue = false;\n                  timers.splice(index, 1);\n                }\n              } // Start the next in the queue if the last step wasn't forced.\n              // Timers currently will call their complete callbacks, which\n              // will dequeue but only if they were gotoEnd.\n\n\n              if (dequeue || !gotoEnd) {\n                jQuery.dequeue(this, type);\n              }\n            });\n          },\n          finish: function finish(type) {\n            if (type !== false) {\n              type = type || \"fx\";\n            }\n\n            return this.each(function () {\n              var index,\n                  data = dataPriv.get(this),\n                  queue = data[type + \"queue\"],\n                  hooks = data[type + \"queueHooks\"],\n                  timers = jQuery.timers,\n                  length = queue ? queue.length : 0; // Enable finishing flag on private data\n\n              data.finish = true; // Empty the queue first\n\n              jQuery.queue(this, type, []);\n\n              if (hooks && hooks.stop) {\n                hooks.stop.call(this, true);\n              } // Look for any active animations, and finish them\n\n\n              for (index = timers.length; index--;) {\n                if (timers[index].elem === this && timers[index].queue === type) {\n                  timers[index].anim.stop(true);\n                  timers.splice(index, 1);\n                }\n              } // Look for any animations in the old queue and finish them\n\n\n              for (index = 0; index < length; index++) {\n                if (queue[index] && queue[index].finish) {\n                  queue[index].finish.call(this);\n                }\n              } // Turn off finishing flag\n\n\n              delete data.finish;\n            });\n          }\n        });\n        jQuery.each([\"toggle\", \"show\", \"hide\"], function (i, name) {\n          var cssFn = jQuery.fn[name];\n\n          jQuery.fn[name] = function (speed, easing, callback) {\n            return speed == null || typeof speed === \"boolean\" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);\n          };\n        }); // Generate shortcuts for custom animations\n\n        jQuery.each({\n          slideDown: genFx(\"show\"),\n          slideUp: genFx(\"hide\"),\n          slideToggle: genFx(\"toggle\"),\n          fadeIn: {\n            opacity: \"show\"\n          },\n          fadeOut: {\n            opacity: \"hide\"\n          },\n          fadeToggle: {\n            opacity: \"toggle\"\n          }\n        }, function (name, props) {\n          jQuery.fn[name] = function (speed, easing, callback) {\n            return this.animate(props, speed, easing, callback);\n          };\n        });\n        jQuery.timers = [];\n\n        jQuery.fx.tick = function () {\n          var timer,\n              i = 0,\n              timers = jQuery.timers;\n          fxNow = jQuery.now();\n\n          for (; i < timers.length; i++) {\n            timer = timers[i]; // Run the timer and safely remove it when done (allowing for external removal)\n\n            if (!timer() && timers[i] === timer) {\n              timers.splice(i--, 1);\n            }\n          }\n\n          if (!timers.length) {\n            jQuery.fx.stop();\n          }\n\n          fxNow = undefined;\n        };\n\n        jQuery.fx.timer = function (timer) {\n          jQuery.timers.push(timer);\n          jQuery.fx.start();\n        };\n\n        jQuery.fx.interval = 13;\n\n        jQuery.fx.start = function () {\n          if (inProgress) {\n            return;\n          }\n\n          inProgress = true;\n          schedule();\n        };\n\n        jQuery.fx.stop = function () {\n          inProgress = null;\n        };\n\n        jQuery.fx.speeds = {\n          slow: 600,\n          fast: 200,\n          // Default speed\n          _default: 400\n        }; // Based off of the plugin by Clint Helfers, with permission.\n        // https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\n\n        jQuery.fn.delay = function (time, type) {\n          time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n          type = type || \"fx\";\n          return this.queue(type, function (next, hooks) {\n            var timeout = window.setTimeout(next, time);\n\n            hooks.stop = function () {\n              window.clearTimeout(timeout);\n            };\n          });\n        };\n\n        (function () {\n          var input = document.createElement(\"input\"),\n              select = document.createElement(\"select\"),\n              opt = select.appendChild(document.createElement(\"option\"));\n          input.type = \"checkbox\"; // Support: Android <=4.3 only\n          // Default value for a checkbox should be \"on\"\n\n          support.checkOn = input.value !== \"\"; // Support: IE <=11 only\n          // Must access selectedIndex to make default options select\n\n          support.optSelected = opt.selected; // Support: IE <=11 only\n          // An input loses its value after becoming a radio\n\n          input = document.createElement(\"input\");\n          input.value = \"t\";\n          input.type = \"radio\";\n          support.radioValue = input.value === \"t\";\n        })();\n\n        var boolHook,\n            attrHandle = jQuery.expr.attrHandle;\n        jQuery.fn.extend({\n          attr: function attr(name, value) {\n            return access(this, jQuery.attr, name, value, arguments.length > 1);\n          },\n          removeAttr: function removeAttr(name) {\n            return this.each(function () {\n              jQuery.removeAttr(this, name);\n            });\n          }\n        });\n        jQuery.extend({\n          attr: function attr(elem, name, value) {\n            var ret,\n                hooks,\n                nType = elem.nodeType; // Don't get/set attributes on text, comment and attribute nodes\n\n            if (nType === 3 || nType === 8 || nType === 2) {\n              return;\n            } // Fallback to prop when attributes are not supported\n\n\n            if (typeof elem.getAttribute === \"undefined\") {\n              return jQuery.prop(elem, name, value);\n            } // Attribute hooks are determined by the lowercase version\n            // Grab necessary hook if one is defined\n\n\n            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n              hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);\n            }\n\n            if (value !== undefined) {\n              if (value === null) {\n                jQuery.removeAttr(elem, name);\n                return;\n              }\n\n              if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n                return ret;\n              }\n\n              elem.setAttribute(name, value + \"\");\n              return value;\n            }\n\n            if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n              return ret;\n            }\n\n            ret = jQuery.find.attr(elem, name); // Non-existent attributes return null, we normalize to undefined\n\n            return ret == null ? undefined : ret;\n          },\n          attrHooks: {\n            type: {\n              set: function set(elem, value) {\n                if (!support.radioValue && value === \"radio\" && nodeName(elem, \"input\")) {\n                  var val = elem.value;\n                  elem.setAttribute(\"type\", value);\n\n                  if (val) {\n                    elem.value = val;\n                  }\n\n                  return value;\n                }\n              }\n            }\n          },\n          removeAttr: function removeAttr(elem, value) {\n            var name,\n                i = 0,\n                // Attribute names can contain non-HTML whitespace characters\n            // https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n            attrNames = value && value.match(rnothtmlwhite);\n\n            if (attrNames && elem.nodeType === 1) {\n              while (name = attrNames[i++]) {\n                elem.removeAttribute(name);\n              }\n            }\n          }\n        }); // Hooks for boolean attributes\n\n        boolHook = {\n          set: function set(elem, value, name) {\n            if (value === false) {\n              // Remove boolean attributes when set to false\n              jQuery.removeAttr(elem, name);\n            } else {\n              elem.setAttribute(name, name);\n            }\n\n            return name;\n          }\n        };\n        jQuery.each(jQuery.expr.match.bool.source.match(/\\w+/g), function (i, name) {\n          var getter = attrHandle[name] || jQuery.find.attr;\n\n          attrHandle[name] = function (elem, name, isXML) {\n            var ret,\n                handle,\n                lowercaseName = name.toLowerCase();\n\n            if (!isXML) {\n              // Avoid an infinite loop by temporarily removing this function from the getter\n              handle = attrHandle[lowercaseName];\n              attrHandle[lowercaseName] = ret;\n              ret = getter(elem, name, isXML) != null ? lowercaseName : null;\n              attrHandle[lowercaseName] = handle;\n            }\n\n            return ret;\n          };\n        });\n        var rfocusable = /^(?:input|select|textarea|button)$/i,\n            rclickable = /^(?:a|area)$/i;\n        jQuery.fn.extend({\n          prop: function prop(name, value) {\n            return access(this, jQuery.prop, name, value, arguments.length > 1);\n          },\n          removeProp: function removeProp(name) {\n            return this.each(function () {\n              delete this[jQuery.propFix[name] || name];\n            });\n          }\n        });\n        jQuery.extend({\n          prop: function prop(elem, name, value) {\n            var ret,\n                hooks,\n                nType = elem.nodeType; // Don't get/set properties on text, comment and attribute nodes\n\n            if (nType === 3 || nType === 8 || nType === 2) {\n              return;\n            }\n\n            if (nType !== 1 || !jQuery.isXMLDoc(elem)) {\n              // Fix name and attach hooks\n              name = jQuery.propFix[name] || name;\n              hooks = jQuery.propHooks[name];\n            }\n\n            if (value !== undefined) {\n              if (hooks && \"set\" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {\n                return ret;\n              }\n\n              return elem[name] = value;\n            }\n\n            if (hooks && \"get\" in hooks && (ret = hooks.get(elem, name)) !== null) {\n              return ret;\n            }\n\n            return elem[name];\n          },\n          propHooks: {\n            tabIndex: {\n              get: function get(elem) {\n                // Support: IE <=9 - 11 only\n                // elem.tabIndex doesn't always return the\n                // correct value when it hasn't been explicitly set\n                // https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n                // Use proper attribute retrieval(#12072)\n                var tabindex = jQuery.find.attr(elem, \"tabindex\");\n\n                if (tabindex) {\n                  return parseInt(tabindex, 10);\n                }\n\n                if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {\n                  return 0;\n                }\n\n                return -1;\n              }\n            }\n          },\n          propFix: {\n            \"for\": \"htmlFor\",\n            \"class\": \"className\"\n          }\n        }); // Support: IE <=11 only\n        // Accessing the selectedIndex property\n        // forces the browser to respect setting selected\n        // on the option\n        // The getter ensures a default option is selected\n        // when in an optgroup\n        // eslint rule \"no-unused-expressions\" is disabled for this code\n        // since it considers such accessions noop\n\n        if (!support.optSelected) {\n          jQuery.propHooks.selected = {\n            get: function get(elem) {\n              /* eslint no-unused-expressions: \"off\" */\n              var parent = elem.parentNode;\n\n              if (parent && parent.parentNode) {\n                parent.parentNode.selectedIndex;\n              }\n\n              return null;\n            },\n            set: function set(elem) {\n              /* eslint no-unused-expressions: \"off\" */\n              var parent = elem.parentNode;\n\n              if (parent) {\n                parent.selectedIndex;\n\n                if (parent.parentNode) {\n                  parent.parentNode.selectedIndex;\n                }\n              }\n            }\n          };\n        }\n\n        jQuery.each([\"tabIndex\", \"readOnly\", \"maxLength\", \"cellSpacing\", \"cellPadding\", \"rowSpan\", \"colSpan\", \"useMap\", \"frameBorder\", \"contentEditable\"], function () {\n          jQuery.propFix[this.toLowerCase()] = this;\n        }); // Strip and collapse whitespace according to HTML spec\n        // https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace\n\n        function stripAndCollapse(value) {\n          var tokens = value.match(rnothtmlwhite) || [];\n          return tokens.join(\" \");\n        }\n\n        function getClass(elem) {\n          return elem.getAttribute && elem.getAttribute(\"class\") || \"\";\n        }\n\n        jQuery.fn.extend({\n          addClass: function addClass(value) {\n            var classes,\n                elem,\n                cur,\n                curValue,\n                clazz,\n                j,\n                finalValue,\n                i = 0;\n\n            if (jQuery.isFunction(value)) {\n              return this.each(function (j) {\n                jQuery(this).addClass(value.call(this, j, getClass(this)));\n              });\n            }\n\n            if (typeof value === \"string\" && value) {\n              classes = value.match(rnothtmlwhite) || [];\n\n              while (elem = this[i++]) {\n                curValue = getClass(elem);\n                cur = elem.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\n\n                if (cur) {\n                  j = 0;\n\n                  while (clazz = classes[j++]) {\n                    if (cur.indexOf(\" \" + clazz + \" \") < 0) {\n                      cur += clazz + \" \";\n                    }\n                  } // Only assign if different to avoid unneeded rendering.\n\n\n                  finalValue = stripAndCollapse(cur);\n\n                  if (curValue !== finalValue) {\n                    elem.setAttribute(\"class\", finalValue);\n                  }\n                }\n              }\n            }\n\n            return this;\n          },\n          removeClass: function removeClass(value) {\n            var classes,\n                elem,\n                cur,\n                curValue,\n                clazz,\n                j,\n                finalValue,\n                i = 0;\n\n            if (jQuery.isFunction(value)) {\n              return this.each(function (j) {\n                jQuery(this).removeClass(value.call(this, j, getClass(this)));\n              });\n            }\n\n            if (!arguments.length) {\n              return this.attr(\"class\", \"\");\n            }\n\n            if (typeof value === \"string\" && value) {\n              classes = value.match(rnothtmlwhite) || [];\n\n              while (elem = this[i++]) {\n                curValue = getClass(elem); // This expression is here for better compressibility (see addClass)\n\n                cur = elem.nodeType === 1 && \" \" + stripAndCollapse(curValue) + \" \";\n\n                if (cur) {\n                  j = 0;\n\n                  while (clazz = classes[j++]) {\n                    // Remove *all* instances\n                    while (cur.indexOf(\" \" + clazz + \" \") > -1) {\n                      cur = cur.replace(\" \" + clazz + \" \", \" \");\n                    }\n                  } // Only assign if different to avoid unneeded rendering.\n\n\n                  finalValue = stripAndCollapse(cur);\n\n                  if (curValue !== finalValue) {\n                    elem.setAttribute(\"class\", finalValue);\n                  }\n                }\n              }\n            }\n\n            return this;\n          },\n          toggleClass: function toggleClass(value, stateVal) {\n            var type = typeof value;\n\n            if (typeof stateVal === \"boolean\" && type === \"string\") {\n              return stateVal ? this.addClass(value) : this.removeClass(value);\n            }\n\n            if (jQuery.isFunction(value)) {\n              return this.each(function (i) {\n                jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);\n              });\n            }\n\n            return this.each(function () {\n              var className, i, self, classNames;\n\n              if (type === \"string\") {\n                // Toggle individual class names\n                i = 0;\n                self = jQuery(this);\n                classNames = value.match(rnothtmlwhite) || [];\n\n                while (className = classNames[i++]) {\n                  // Check each className given, space separated list\n                  if (self.hasClass(className)) {\n                    self.removeClass(className);\n                  } else {\n                    self.addClass(className);\n                  }\n                } // Toggle whole class name\n\n              } else if (value === undefined || type === \"boolean\") {\n                className = getClass(this);\n\n                if (className) {\n                  // Store className if set\n                  dataPriv.set(this, \"__className__\", className);\n                } // If the element has a class name or if we're passed `false`,\n                // then remove the whole classname (if there was one, the above saved it).\n                // Otherwise bring back whatever was previously saved (if anything),\n                // falling back to the empty string if nothing was stored.\n\n\n                if (this.setAttribute) {\n                  this.setAttribute(\"class\", className || value === false ? \"\" : dataPriv.get(this, \"__className__\") || \"\");\n                }\n              }\n            });\n          },\n          hasClass: function hasClass(selector) {\n            var className,\n                elem,\n                i = 0;\n            className = \" \" + selector + \" \";\n\n            while (elem = this[i++]) {\n              if (elem.nodeType === 1 && (\" \" + stripAndCollapse(getClass(elem)) + \" \").indexOf(className) > -1) {\n                return true;\n              }\n            }\n\n            return false;\n          }\n        });\n        var rreturn = /\\r/g;\n        jQuery.fn.extend({\n          val: function val(value) {\n            var hooks,\n                ret,\n                isFunction,\n                elem = this[0];\n\n            if (!arguments.length) {\n              if (elem) {\n                hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];\n\n                if (hooks && \"get\" in hooks && (ret = hooks.get(elem, \"value\")) !== undefined) {\n                  return ret;\n                }\n\n                ret = elem.value; // Handle most common string cases\n\n                if (typeof ret === \"string\") {\n                  return ret.replace(rreturn, \"\");\n                } // Handle cases where value is null/undef or number\n\n\n                return ret == null ? \"\" : ret;\n              }\n\n              return;\n            }\n\n            isFunction = jQuery.isFunction(value);\n            return this.each(function (i) {\n              var val;\n\n              if (this.nodeType !== 1) {\n                return;\n              }\n\n              if (isFunction) {\n                val = value.call(this, i, jQuery(this).val());\n              } else {\n                val = value;\n              } // Treat null/undefined as \"\"; convert numbers to string\n\n\n              if (val == null) {\n                val = \"\";\n              } else if (typeof val === \"number\") {\n                val += \"\";\n              } else if (Array.isArray(val)) {\n                val = jQuery.map(val, function (value) {\n                  return value == null ? \"\" : value + \"\";\n                });\n              }\n\n              hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()]; // If set returns undefined, fall back to normal setting\n\n              if (!hooks || !(\"set\" in hooks) || hooks.set(this, val, \"value\") === undefined) {\n                this.value = val;\n              }\n            });\n          }\n        });\n        jQuery.extend({\n          valHooks: {\n            option: {\n              get: function get(elem) {\n                var val = jQuery.find.attr(elem, \"value\");\n                return val != null ? val : // Support: IE <=10 - 11 only\n                // option.text throws exceptions (#14686, #14858)\n                // Strip and collapse whitespace\n                // https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n                stripAndCollapse(jQuery.text(elem));\n              }\n            },\n            select: {\n              get: function get(elem) {\n                var value,\n                    option,\n                    i,\n                    options = elem.options,\n                    index = elem.selectedIndex,\n                    one = elem.type === \"select-one\",\n                    values = one ? null : [],\n                    max = one ? index + 1 : options.length;\n\n                if (index < 0) {\n                  i = max;\n                } else {\n                  i = one ? index : 0;\n                } // Loop through all the selected options\n\n\n                for (; i < max; i++) {\n                  option = options[i]; // Support: IE <=9 only\n                  // IE8-9 doesn't update selected after form reset (#2551)\n\n                  if ((option.selected || i === index) && // Don't return options that are disabled or in a disabled optgroup\n                  !option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, \"optgroup\"))) {\n                    // Get the specific value for the option\n                    value = jQuery(option).val(); // We don't need an array for one selects\n\n                    if (one) {\n                      return value;\n                    } // Multi-Selects return an array\n\n\n                    values.push(value);\n                  }\n                }\n\n                return values;\n              },\n              set: function set(elem, value) {\n                var optionSet,\n                    option,\n                    options = elem.options,\n                    values = jQuery.makeArray(value),\n                    i = options.length;\n\n                while (i--) {\n                  option = options[i];\n                  /* eslint-disable no-cond-assign */\n\n                  if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {\n                    optionSet = true;\n                  }\n                  /* eslint-enable no-cond-assign */\n\n                } // Force browsers to behave consistently when non-matching value is set\n\n\n                if (!optionSet) {\n                  elem.selectedIndex = -1;\n                }\n\n                return values;\n              }\n            }\n          }\n        }); // Radios and checkboxes getter/setter\n\n        jQuery.each([\"radio\", \"checkbox\"], function () {\n          jQuery.valHooks[this] = {\n            set: function set(elem, value) {\n              if (Array.isArray(value)) {\n                return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;\n              }\n            }\n          };\n\n          if (!support.checkOn) {\n            jQuery.valHooks[this].get = function (elem) {\n              return elem.getAttribute(\"value\") === null ? \"on\" : elem.value;\n            };\n          }\n        }); // Return jQuery for attributes-only inclusion\n\n        var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n        jQuery.extend(jQuery.event, {\n          trigger: function trigger(event, data, elem, onlyHandlers) {\n            var i,\n                cur,\n                tmp,\n                bubbleType,\n                ontype,\n                handle,\n                special,\n                eventPath = [elem || document],\n                type = hasOwn.call(event, \"type\") ? event.type : event,\n                namespaces = hasOwn.call(event, \"namespace\") ? event.namespace.split(\".\") : [];\n            cur = tmp = elem = elem || document; // Don't do events on text and comment nodes\n\n            if (elem.nodeType === 3 || elem.nodeType === 8) {\n              return;\n            } // focus/blur morphs to focusin/out; ensure we're not firing them right now\n\n\n            if (rfocusMorph.test(type + jQuery.event.triggered)) {\n              return;\n            }\n\n            if (type.indexOf(\".\") > -1) {\n              // Namespaced trigger; create a regexp to match event type in handle()\n              namespaces = type.split(\".\");\n              type = namespaces.shift();\n              namespaces.sort();\n            }\n\n            ontype = type.indexOf(\":\") < 0 && \"on\" + type; // Caller can pass in a jQuery.Event object, Object, or just an event type string\n\n            event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === \"object\" && event); // Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\n            event.isTrigger = onlyHandlers ? 2 : 3;\n            event.namespace = namespaces.join(\".\");\n            event.rnamespace = event.namespace ? new RegExp(\"(^|\\\\.)\" + namespaces.join(\"\\\\.(?:.*\\\\.|)\") + \"(\\\\.|$)\") : null; // Clean up the event in case it is being reused\n\n            event.result = undefined;\n\n            if (!event.target) {\n              event.target = elem;\n            } // Clone any incoming data and prepend the event, creating the handler arg list\n\n\n            data = data == null ? [event] : jQuery.makeArray(data, [event]); // Allow special events to draw outside the lines\n\n            special = jQuery.event.special[type] || {};\n\n            if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {\n              return;\n            } // Determine event propagation path in advance, per W3C events spec (#9951)\n            // Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n\n\n            if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {\n              bubbleType = special.delegateType || type;\n\n              if (!rfocusMorph.test(bubbleType + type)) {\n                cur = cur.parentNode;\n              }\n\n              for (; cur; cur = cur.parentNode) {\n                eventPath.push(cur);\n                tmp = cur;\n              } // Only add window if we got to document (e.g., not plain obj or detached DOM)\n\n\n              if (tmp === (elem.ownerDocument || document)) {\n                eventPath.push(tmp.defaultView || tmp.parentWindow || window);\n              }\n            } // Fire handlers on the event path\n\n\n            i = 0;\n\n            while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {\n              event.type = i > 1 ? bubbleType : special.bindType || type; // jQuery handler\n\n              handle = (dataPriv.get(cur, \"events\") || {})[event.type] && dataPriv.get(cur, \"handle\");\n\n              if (handle) {\n                handle.apply(cur, data);\n              } // Native handler\n\n\n              handle = ontype && cur[ontype];\n\n              if (handle && handle.apply && acceptData(cur)) {\n                event.result = handle.apply(cur, data);\n\n                if (event.result === false) {\n                  event.preventDefault();\n                }\n              }\n            }\n\n            event.type = type; // If nobody prevented the default action, do it now\n\n            if (!onlyHandlers && !event.isDefaultPrevented()) {\n              if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {\n                // Call a native DOM method on the target with the same name as the event.\n                // Don't do default actions on window, that's where global variables be (#6170)\n                if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {\n                  // Don't re-trigger an onFOO event when we call its FOO() method\n                  tmp = elem[ontype];\n\n                  if (tmp) {\n                    elem[ontype] = null;\n                  } // Prevent re-triggering of the same event, since we already bubbled it above\n\n\n                  jQuery.event.triggered = type;\n                  elem[type]();\n                  jQuery.event.triggered = undefined;\n\n                  if (tmp) {\n                    elem[ontype] = tmp;\n                  }\n                }\n              }\n            }\n\n            return event.result;\n          },\n          // Piggyback on a donor event to simulate a different one\n          // Used only for `focus(in | out)` events\n          simulate: function simulate(type, elem, event) {\n            var e = jQuery.extend(new jQuery.Event(), event, {\n              type: type,\n              isSimulated: true\n            });\n            jQuery.event.trigger(e, null, elem);\n          }\n        });\n        jQuery.fn.extend({\n          trigger: function trigger(type, data) {\n            return this.each(function () {\n              jQuery.event.trigger(type, data, this);\n            });\n          },\n          triggerHandler: function triggerHandler(type, data) {\n            var elem = this[0];\n\n            if (elem) {\n              return jQuery.event.trigger(type, data, elem, true);\n            }\n          }\n        });\n        jQuery.each((\"blur focus focusin focusout resize scroll click dblclick \" + \"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" + \"change select submit keydown keypress keyup contextmenu\").split(\" \"), function (i, name) {\n          // Handle event binding\n          jQuery.fn[name] = function (data, fn) {\n            return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);\n          };\n        });\n        jQuery.fn.extend({\n          hover: function hover(fnOver, fnOut) {\n            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\n          }\n        });\n        support.focusin = \"onfocusin\" in window; // Support: Firefox <=44\n        // Firefox doesn't have focus(in | out) events\n        // Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n        //\n        // Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n        // focus(in | out) events fire after focus & blur events,\n        // which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n        // Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\n\n        if (!support.focusin) {\n          jQuery.each({\n            focus: \"focusin\",\n            blur: \"focusout\"\n          }, function (orig, fix) {\n            // Attach a single capturing handler on the document while someone wants focusin/focusout\n            var handler = function handler(event) {\n              jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));\n            };\n\n            jQuery.event.special[fix] = {\n              setup: function setup() {\n                var doc = this.ownerDocument || this,\n                    attaches = dataPriv.access(doc, fix);\n\n                if (!attaches) {\n                  doc.addEventListener(orig, handler, true);\n                }\n\n                dataPriv.access(doc, fix, (attaches || 0) + 1);\n              },\n              teardown: function teardown() {\n                var doc = this.ownerDocument || this,\n                    attaches = dataPriv.access(doc, fix) - 1;\n\n                if (!attaches) {\n                  doc.removeEventListener(orig, handler, true);\n                  dataPriv.remove(doc, fix);\n                } else {\n                  dataPriv.access(doc, fix, attaches);\n                }\n              }\n            };\n          });\n        }\n\n        var location = window.location;\n        var nonce = jQuery.now();\n        var rquery = /\\?/; // Cross-browser xml parsing\n\n        jQuery.parseXML = function (data) {\n          var xml;\n\n          if (!data || typeof data !== \"string\") {\n            return null;\n          } // Support: IE 9 - 11 only\n          // IE throws on parseFromString with invalid input.\n\n\n          try {\n            xml = new window.DOMParser().parseFromString(data, \"text/xml\");\n          } catch (e) {\n            xml = undefined;\n          }\n\n          if (!xml || xml.getElementsByTagName(\"parsererror\").length) {\n            jQuery.error(\"Invalid XML: \" + data);\n          }\n\n          return xml;\n        };\n\n        var rbracket = /\\[\\]$/,\n            rCRLF = /\\r?\\n/g,\n            rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n            rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\n        function buildParams(prefix, obj, traditional, add) {\n          var name;\n\n          if (Array.isArray(obj)) {\n            // Serialize array item.\n            jQuery.each(obj, function (i, v) {\n              if (traditional || rbracket.test(prefix)) {\n                // Treat each array item as a scalar.\n                add(prefix, v);\n              } else {\n                // Item is non-scalar (array or object), encode its numeric index.\n                buildParams(prefix + \"[\" + (typeof v === \"object\" && v != null ? i : \"\") + \"]\", v, traditional, add);\n              }\n            });\n          } else if (!traditional && jQuery.type(obj) === \"object\") {\n            // Serialize object item.\n            for (name in obj) {\n              buildParams(prefix + \"[\" + name + \"]\", obj[name], traditional, add);\n            }\n          } else {\n            // Serialize scalar item.\n            add(prefix, obj);\n          }\n        } // Serialize an array of form elements or a set of\n        // key/values into a query string\n\n\n        jQuery.param = function (a, traditional) {\n          var prefix,\n              s = [],\n              add = function add(key, valueOrFunction) {\n            // If value is a function, invoke it and use its return value\n            var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;\n            s[s.length] = encodeURIComponent(key) + \"=\" + encodeURIComponent(value == null ? \"\" : value);\n          }; // If an array was passed in, assume that it is an array of form elements.\n\n\n          if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {\n            // Serialize the form elements\n            jQuery.each(a, function () {\n              add(this.name, this.value);\n            });\n          } else {\n            // If traditional, encode the \"old\" way (the way 1.3.2 or older\n            // did it), otherwise encode params recursively.\n            for (prefix in a) {\n              buildParams(prefix, a[prefix], traditional, add);\n            }\n          } // Return the resulting serialization\n\n\n          return s.join(\"&\");\n        };\n\n        jQuery.fn.extend({\n          serialize: function serialize() {\n            return jQuery.param(this.serializeArray());\n          },\n          serializeArray: function serializeArray() {\n            return this.map(function () {\n              // Can add propHook for \"elements\" to filter or add form elements\n              var elements = jQuery.prop(this, \"elements\");\n              return elements ? jQuery.makeArray(elements) : this;\n            }).filter(function () {\n              var type = this.type; // Use .is( \":disabled\" ) so that fieldset[disabled] works\n\n              return this.name && !jQuery(this).is(\":disabled\") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));\n            }).map(function (i, elem) {\n              var val = jQuery(this).val();\n\n              if (val == null) {\n                return null;\n              }\n\n              if (Array.isArray(val)) {\n                return jQuery.map(val, function (val) {\n                  return {\n                    name: elem.name,\n                    value: val.replace(rCRLF, \"\\r\\n\")\n                  };\n                });\n              }\n\n              return {\n                name: elem.name,\n                value: val.replace(rCRLF, \"\\r\\n\")\n              };\n            }).get();\n          }\n        });\n        var r20 = /%20/g,\n            rhash = /#.*$/,\n            rantiCache = /([?&])_=[^&]*/,\n            rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n            // #7653, #8125, #8152: local protocol detection\n        rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n            rnoContent = /^(?:GET|HEAD)$/,\n            rprotocol = /^\\/\\//,\n\n        /* Prefilters\n         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n         * 2) These are called:\n         *    - BEFORE asking for a transport\n         *    - AFTER param serialization (s.data is a string if s.processData is true)\n         * 3) key is the dataType\n         * 4) the catchall symbol \"*\" can be used\n         * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n         */\n        prefilters = {},\n\n        /* Transports bindings\n         * 1) key is the dataType\n         * 2) the catchall symbol \"*\" can be used\n         * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n         */\n        transports = {},\n            // Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n        allTypes = \"*/\".concat(\"*\"),\n            // Anchor tag for parsing the document origin\n        originAnchor = document.createElement(\"a\");\n        originAnchor.href = location.href; // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\n\n        function addToPrefiltersOrTransports(structure) {\n          // dataTypeExpression is optional and defaults to \"*\"\n          return function (dataTypeExpression, func) {\n            if (typeof dataTypeExpression !== \"string\") {\n              func = dataTypeExpression;\n              dataTypeExpression = \"*\";\n            }\n\n            var dataType,\n                i = 0,\n                dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];\n\n            if (jQuery.isFunction(func)) {\n              // For each dataType in the dataTypeExpression\n              while (dataType = dataTypes[i++]) {\n                // Prepend if requested\n                if (dataType[0] === \"+\") {\n                  dataType = dataType.slice(1) || \"*\";\n                  (structure[dataType] = structure[dataType] || []).unshift(func); // Otherwise append\n                } else {\n                  (structure[dataType] = structure[dataType] || []).push(func);\n                }\n              }\n            }\n          };\n        } // Base inspection function for prefilters and transports\n\n\n        function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\n          var inspected = {},\n              seekingTransport = structure === transports;\n\n          function inspect(dataType) {\n            var selected;\n            inspected[dataType] = true;\n            jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {\n              var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\n\n              if (typeof dataTypeOrTransport === \"string\" && !seekingTransport && !inspected[dataTypeOrTransport]) {\n                options.dataTypes.unshift(dataTypeOrTransport);\n                inspect(dataTypeOrTransport);\n                return false;\n              } else if (seekingTransport) {\n                return !(selected = dataTypeOrTransport);\n              }\n            });\n            return selected;\n          }\n\n          return inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\n        } // A special extend for ajax options\n        // that takes \"flat\" options (not to be deep extended)\n        // Fixes #9887\n\n\n        function ajaxExtend(target, src) {\n          var key,\n              deep,\n              flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n          for (key in src) {\n            if (src[key] !== undefined) {\n              (flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];\n            }\n          }\n\n          if (deep) {\n            jQuery.extend(true, target, deep);\n          }\n\n          return target;\n        }\n        /* Handles responses to an ajax request:\n         * - finds the right dataType (mediates between content-type and expected dataType)\n         * - returns the corresponding response\n         */\n\n\n        function ajaxHandleResponses(s, jqXHR, responses) {\n          var ct,\n              type,\n              finalDataType,\n              firstDataType,\n              contents = s.contents,\n              dataTypes = s.dataTypes; // Remove auto dataType and get content-type in the process\n\n          while (dataTypes[0] === \"*\") {\n            dataTypes.shift();\n\n            if (ct === undefined) {\n              ct = s.mimeType || jqXHR.getResponseHeader(\"Content-Type\");\n            }\n          } // Check if we're dealing with a known content-type\n\n\n          if (ct) {\n            for (type in contents) {\n              if (contents[type] && contents[type].test(ct)) {\n                dataTypes.unshift(type);\n                break;\n              }\n            }\n          } // Check to see if we have a response for the expected dataType\n\n\n          if (dataTypes[0] in responses) {\n            finalDataType = dataTypes[0];\n          } else {\n            // Try convertible dataTypes\n            for (type in responses) {\n              if (!dataTypes[0] || s.converters[type + \" \" + dataTypes[0]]) {\n                finalDataType = type;\n                break;\n              }\n\n              if (!firstDataType) {\n                firstDataType = type;\n              }\n            } // Or just use first one\n\n\n            finalDataType = finalDataType || firstDataType;\n          } // If we found a dataType\n          // We add the dataType to the list if needed\n          // and return the corresponding response\n\n\n          if (finalDataType) {\n            if (finalDataType !== dataTypes[0]) {\n              dataTypes.unshift(finalDataType);\n            }\n\n            return responses[finalDataType];\n          }\n        }\n        /* Chain conversions given the request and the original response\n         * Also sets the responseXXX fields on the jqXHR instance\n         */\n\n\n        function ajaxConvert(s, response, jqXHR, isSuccess) {\n          var conv2,\n              current,\n              conv,\n              tmp,\n              prev,\n              converters = {},\n              // Work with a copy of dataTypes in case we need to modify it for conversion\n          dataTypes = s.dataTypes.slice(); // Create converters map with lowercased keys\n\n          if (dataTypes[1]) {\n            for (conv in s.converters) {\n              converters[conv.toLowerCase()] = s.converters[conv];\n            }\n          }\n\n          current = dataTypes.shift(); // Convert to each sequential dataType\n\n          while (current) {\n            if (s.responseFields[current]) {\n              jqXHR[s.responseFields[current]] = response;\n            } // Apply the dataFilter if provided\n\n\n            if (!prev && isSuccess && s.dataFilter) {\n              response = s.dataFilter(response, s.dataType);\n            }\n\n            prev = current;\n            current = dataTypes.shift();\n\n            if (current) {\n              // There's only work to do if current dataType is non-auto\n              if (current === \"*\") {\n                current = prev; // Convert response if prev dataType is non-auto and differs from current\n              } else if (prev !== \"*\" && prev !== current) {\n                // Seek a direct converter\n                conv = converters[prev + \" \" + current] || converters[\"* \" + current]; // If none found, seek a pair\n\n                if (!conv) {\n                  for (conv2 in converters) {\n                    // If conv2 outputs current\n                    tmp = conv2.split(\" \");\n\n                    if (tmp[1] === current) {\n                      // If prev can be converted to accepted input\n                      conv = converters[prev + \" \" + tmp[0]] || converters[\"* \" + tmp[0]];\n\n                      if (conv) {\n                        // Condense equivalence converters\n                        if (conv === true) {\n                          conv = converters[conv2]; // Otherwise, insert the intermediate dataType\n                        } else if (converters[conv2] !== true) {\n                          current = tmp[0];\n                          dataTypes.unshift(tmp[1]);\n                        }\n\n                        break;\n                      }\n                    }\n                  }\n                } // Apply converter (if not an equivalence)\n\n\n                if (conv !== true) {\n                  // Unless errors are allowed to bubble, catch and return them\n                  if (conv && s.throws) {\n                    response = conv(response);\n                  } else {\n                    try {\n                      response = conv(response);\n                    } catch (e) {\n                      return {\n                        state: \"parsererror\",\n                        error: conv ? e : \"No conversion from \" + prev + \" to \" + current\n                      };\n                    }\n                  }\n                }\n              }\n            }\n          }\n\n          return {\n            state: \"success\",\n            data: response\n          };\n        }\n\n        jQuery.extend({\n          // Counter for holding the number of active queries\n          active: 0,\n          // Last-Modified header cache for next request\n          lastModified: {},\n          etag: {},\n          ajaxSettings: {\n            url: location.href,\n            type: \"GET\",\n            isLocal: rlocalProtocol.test(location.protocol),\n            global: true,\n            processData: true,\n            async: true,\n            contentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n            /*\n            timeout: 0,\n            data: null,\n            dataType: null,\n            username: null,\n            password: null,\n            cache: null,\n            throws: false,\n            traditional: false,\n            headers: {},\n            */\n            accepts: {\n              \"*\": allTypes,\n              text: \"text/plain\",\n              html: \"text/html\",\n              xml: \"application/xml, text/xml\",\n              json: \"application/json, text/javascript\"\n            },\n            contents: {\n              xml: /\\bxml\\b/,\n              html: /\\bhtml/,\n              json: /\\bjson\\b/\n            },\n            responseFields: {\n              xml: \"responseXML\",\n              text: \"responseText\",\n              json: \"responseJSON\"\n            },\n            // Data converters\n            // Keys separate source (or catchall \"*\") and destination types with a single space\n            converters: {\n              // Convert anything to text\n              \"* text\": String,\n              // Text to html (true = no transformation)\n              \"text html\": true,\n              // Evaluate text as a json expression\n              \"text json\": JSON.parse,\n              // Parse text as xml\n              \"text xml\": jQuery.parseXML\n            },\n            // For options that shouldn't be deep extended:\n            // you can add your own custom options here if\n            // and when you create one that shouldn't be\n            // deep extended (see ajaxExtend)\n            flatOptions: {\n              url: true,\n              context: true\n            }\n          },\n          // Creates a full fledged settings object into target\n          // with both ajaxSettings and settings fields.\n          // If target is omitted, writes into ajaxSettings.\n          ajaxSetup: function ajaxSetup(target, settings) {\n            return settings ? // Building a settings object\n            ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) : // Extending ajaxSettings\n            ajaxExtend(jQuery.ajaxSettings, target);\n          },\n          ajaxPrefilter: addToPrefiltersOrTransports(prefilters),\n          ajaxTransport: addToPrefiltersOrTransports(transports),\n          // Main method\n          ajax: function ajax(url, options) {\n            // If url is an object, simulate pre-1.5 signature\n            if (typeof url === \"object\") {\n              options = url;\n              url = undefined;\n            } // Force options to be an object\n\n\n            options = options || {};\n\n            var transport,\n                // URL without anti-cache param\n            cacheURL,\n                // Response headers\n            responseHeadersString,\n                responseHeaders,\n                // timeout handle\n            timeoutTimer,\n                // Url cleanup var\n            urlAnchor,\n                // Request state (becomes false upon send and true upon completion)\n            completed,\n                // To know if global events are to be dispatched\n            fireGlobals,\n                // Loop variable\n            i,\n                // uncached part of the url\n            uncached,\n                // Create the final options object\n            s = jQuery.ajaxSetup({}, options),\n                // Callbacks context\n            callbackContext = s.context || s,\n                // Context for global events is callbackContext if it is a DOM node or jQuery collection\n            globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,\n                // Deferreds\n            deferred = jQuery.Deferred(),\n                completeDeferred = jQuery.Callbacks(\"once memory\"),\n                // Status-dependent callbacks\n            _statusCode = s.statusCode || {},\n                // Headers (they are sent all at once)\n            requestHeaders = {},\n                requestHeadersNames = {},\n                // Default abort message\n            strAbort = \"canceled\",\n                // Fake xhr\n            jqXHR = {\n              readyState: 0,\n              // Builds headers hashtable if needed\n              getResponseHeader: function getResponseHeader(key) {\n                var match;\n\n                if (completed) {\n                  if (!responseHeaders) {\n                    responseHeaders = {};\n\n                    while (match = rheaders.exec(responseHeadersString)) {\n                      responseHeaders[match[1].toLowerCase()] = match[2];\n                    }\n                  }\n\n                  match = responseHeaders[key.toLowerCase()];\n                }\n\n                return match == null ? null : match;\n              },\n              // Raw string\n              getAllResponseHeaders: function getAllResponseHeaders() {\n                return completed ? responseHeadersString : null;\n              },\n              // Caches the header\n              setRequestHeader: function setRequestHeader(name, value) {\n                if (completed == null) {\n                  name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;\n                  requestHeaders[name] = value;\n                }\n\n                return this;\n              },\n              // Overrides response content-type header\n              overrideMimeType: function overrideMimeType(type) {\n                if (completed == null) {\n                  s.mimeType = type;\n                }\n\n                return this;\n              },\n              // Status-dependent callbacks\n              statusCode: function statusCode(map) {\n                var code;\n\n                if (map) {\n                  if (completed) {\n                    // Execute the appropriate callbacks\n                    jqXHR.always(map[jqXHR.status]);\n                  } else {\n                    // Lazy-add the new callbacks in a way that preserves old ones\n                    for (code in map) {\n                      _statusCode[code] = [_statusCode[code], map[code]];\n                    }\n                  }\n                }\n\n                return this;\n              },\n              // Cancel the request\n              abort: function abort(statusText) {\n                var finalText = statusText || strAbort;\n\n                if (transport) {\n                  transport.abort(finalText);\n                }\n\n                done(0, finalText);\n                return this;\n              }\n            }; // Attach deferreds\n\n\n            deferred.promise(jqXHR); // Add protocol if not provided (prefilters might expect it)\n            // Handle falsy url in the settings object (#10093: consistency with old signature)\n            // We also use the url parameter if available\n\n            s.url = ((url || s.url || location.href) + \"\").replace(rprotocol, location.protocol + \"//\"); // Alias method option to type as per ticket #12004\n\n            s.type = options.method || options.type || s.method || s.type; // Extract dataTypes list\n\n            s.dataTypes = (s.dataType || \"*\").toLowerCase().match(rnothtmlwhite) || [\"\"]; // A cross-domain request is in order when the origin doesn't match the current origin.\n\n            if (s.crossDomain == null) {\n              urlAnchor = document.createElement(\"a\"); // Support: IE <=8 - 11, Edge 12 - 13\n              // IE throws exception on accessing the href property if url is malformed,\n              // e.g. http://example.com:80x/\n\n              try {\n                urlAnchor.href = s.url; // Support: IE <=8 - 11 only\n                // Anchor's host property isn't correctly set when s.url is relative\n\n                urlAnchor.href = urlAnchor.href;\n                s.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !== urlAnchor.protocol + \"//\" + urlAnchor.host;\n              } catch (e) {\n                // If there is an error parsing the URL, assume it is crossDomain,\n                // it can be rejected by the transport if it is invalid\n                s.crossDomain = true;\n              }\n            } // Convert data if not already a string\n\n\n            if (s.data && s.processData && typeof s.data !== \"string\") {\n              s.data = jQuery.param(s.data, s.traditional);\n            } // Apply prefilters\n\n\n            inspectPrefiltersOrTransports(prefilters, s, options, jqXHR); // If request was aborted inside a prefilter, stop there\n\n            if (completed) {\n              return jqXHR;\n            } // We can fire global events as of now if asked to\n            // Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n\n\n            fireGlobals = jQuery.event && s.global; // Watch for a new set of requests\n\n            if (fireGlobals && jQuery.active++ === 0) {\n              jQuery.event.trigger(\"ajaxStart\");\n            } // Uppercase the type\n\n\n            s.type = s.type.toUpperCase(); // Determine if request has content\n\n            s.hasContent = !rnoContent.test(s.type); // Save the URL in case we're toying with the If-Modified-Since\n            // and/or If-None-Match header later on\n            // Remove hash to simplify url manipulation\n\n            cacheURL = s.url.replace(rhash, \"\"); // More options handling for requests with no content\n\n            if (!s.hasContent) {\n              // Remember the hash so we can put it back\n              uncached = s.url.slice(cacheURL.length); // If data is available, append data to url\n\n              if (s.data) {\n                cacheURL += (rquery.test(cacheURL) ? \"&\" : \"?\") + s.data; // #9682: remove data so that it's not used in an eventual retry\n\n                delete s.data;\n              } // Add or update anti-cache param if needed\n\n\n              if (s.cache === false) {\n                cacheURL = cacheURL.replace(rantiCache, \"$1\");\n                uncached = (rquery.test(cacheURL) ? \"&\" : \"?\") + \"_=\" + nonce++ + uncached;\n              } // Put hash and anti-cache on the URL that will be requested (gh-1732)\n\n\n              s.url = cacheURL + uncached; // Change '%20' to '+' if this is encoded form body content (gh-2658)\n            } else if (s.data && s.processData && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0) {\n              s.data = s.data.replace(r20, \"+\");\n            } // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\n\n            if (s.ifModified) {\n              if (jQuery.lastModified[cacheURL]) {\n                jqXHR.setRequestHeader(\"If-Modified-Since\", jQuery.lastModified[cacheURL]);\n              }\n\n              if (jQuery.etag[cacheURL]) {\n                jqXHR.setRequestHeader(\"If-None-Match\", jQuery.etag[cacheURL]);\n              }\n            } // Set the correct header, if data is being sent\n\n\n            if (s.data && s.hasContent && s.contentType !== false || options.contentType) {\n              jqXHR.setRequestHeader(\"Content-Type\", s.contentType);\n            } // Set the Accepts header for the server, depending on the dataType\n\n\n            jqXHR.setRequestHeader(\"Accept\", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\") : s.accepts[\"*\"]); // Check for headers option\n\n            for (i in s.headers) {\n              jqXHR.setRequestHeader(i, s.headers[i]);\n            } // Allow custom headers/mimetypes and early abort\n\n\n            if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {\n              // Abort if not done already and return\n              return jqXHR.abort();\n            } // Aborting is no longer a cancellation\n\n\n            strAbort = \"abort\"; // Install callbacks on deferreds\n\n            completeDeferred.add(s.complete);\n            jqXHR.done(s.success);\n            jqXHR.fail(s.error); // Get transport\n\n            transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR); // If no transport, we auto-abort\n\n            if (!transport) {\n              done(-1, \"No Transport\");\n            } else {\n              jqXHR.readyState = 1; // Send global event\n\n              if (fireGlobals) {\n                globalEventContext.trigger(\"ajaxSend\", [jqXHR, s]);\n              } // If request was aborted inside ajaxSend, stop there\n\n\n              if (completed) {\n                return jqXHR;\n              } // Timeout\n\n\n              if (s.async && s.timeout > 0) {\n                timeoutTimer = window.setTimeout(function () {\n                  jqXHR.abort(\"timeout\");\n                }, s.timeout);\n              }\n\n              try {\n                completed = false;\n                transport.send(requestHeaders, done);\n              } catch (e) {\n                // Rethrow post-completion exceptions\n                if (completed) {\n                  throw e;\n                } // Propagate others as results\n\n\n                done(-1, e);\n              }\n            } // Callback for when everything is done\n\n\n            function done(status, nativeStatusText, responses, headers) {\n              var isSuccess,\n                  success,\n                  error,\n                  response,\n                  modified,\n                  statusText = nativeStatusText; // Ignore repeat invocations\n\n              if (completed) {\n                return;\n              }\n\n              completed = true; // Clear timeout if it exists\n\n              if (timeoutTimer) {\n                window.clearTimeout(timeoutTimer);\n              } // Dereference transport for early garbage collection\n              // (no matter how long the jqXHR object will be used)\n\n\n              transport = undefined; // Cache response headers\n\n              responseHeadersString = headers || \"\"; // Set readyState\n\n              jqXHR.readyState = status > 0 ? 4 : 0; // Determine if successful\n\n              isSuccess = status >= 200 && status < 300 || status === 304; // Get response data\n\n              if (responses) {\n                response = ajaxHandleResponses(s, jqXHR, responses);\n              } // Convert no matter what (that way responseXXX fields are always set)\n\n\n              response = ajaxConvert(s, response, jqXHR, isSuccess); // If successful, handle type chaining\n\n              if (isSuccess) {\n                // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n                if (s.ifModified) {\n                  modified = jqXHR.getResponseHeader(\"Last-Modified\");\n\n                  if (modified) {\n                    jQuery.lastModified[cacheURL] = modified;\n                  }\n\n                  modified = jqXHR.getResponseHeader(\"etag\");\n\n                  if (modified) {\n                    jQuery.etag[cacheURL] = modified;\n                  }\n                } // if no content\n\n\n                if (status === 204 || s.type === \"HEAD\") {\n                  statusText = \"nocontent\"; // if not modified\n                } else if (status === 304) {\n                  statusText = \"notmodified\"; // If we have data, let's convert it\n                } else {\n                  statusText = response.state;\n                  success = response.data;\n                  error = response.error;\n                  isSuccess = !error;\n                }\n              } else {\n                // Extract error from statusText and normalize for non-aborts\n                error = statusText;\n\n                if (status || !statusText) {\n                  statusText = \"error\";\n\n                  if (status < 0) {\n                    status = 0;\n                  }\n                }\n              } // Set data for the fake xhr object\n\n\n              jqXHR.status = status;\n              jqXHR.statusText = (nativeStatusText || statusText) + \"\"; // Success/Error\n\n              if (isSuccess) {\n                deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);\n              } else {\n                deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);\n              } // Status-dependent callbacks\n\n\n              jqXHR.statusCode(_statusCode);\n              _statusCode = undefined;\n\n              if (fireGlobals) {\n                globalEventContext.trigger(isSuccess ? \"ajaxSuccess\" : \"ajaxError\", [jqXHR, s, isSuccess ? success : error]);\n              } // Complete\n\n\n              completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);\n\n              if (fireGlobals) {\n                globalEventContext.trigger(\"ajaxComplete\", [jqXHR, s]); // Handle the global AJAX counter\n\n                if (! --jQuery.active) {\n                  jQuery.event.trigger(\"ajaxStop\");\n                }\n              }\n            }\n\n            return jqXHR;\n          },\n          getJSON: function getJSON(url, data, callback) {\n            return jQuery.get(url, data, callback, \"json\");\n          },\n          getScript: function getScript(url, callback) {\n            return jQuery.get(url, undefined, callback, \"script\");\n          }\n        });\n        jQuery.each([\"get\", \"post\"], function (i, method) {\n          jQuery[method] = function (url, data, callback, type) {\n            // Shift arguments if data argument was omitted\n            if (jQuery.isFunction(data)) {\n              type = type || callback;\n              callback = data;\n              data = undefined;\n            } // The url can be an options object (which then must have .url)\n\n\n            return jQuery.ajax(jQuery.extend({\n              url: url,\n              type: method,\n              dataType: type,\n              data: data,\n              success: callback\n            }, jQuery.isPlainObject(url) && url));\n          };\n        });\n\n        jQuery._evalUrl = function (url) {\n          return jQuery.ajax({\n            url: url,\n            // Make this explicit, since user can override this through ajaxSetup (#11264)\n            type: \"GET\",\n            dataType: \"script\",\n            cache: true,\n            async: false,\n            global: false,\n            \"throws\": true\n          });\n        };\n\n        jQuery.fn.extend({\n          wrapAll: function wrapAll(html) {\n            var wrap;\n\n            if (this[0]) {\n              if (jQuery.isFunction(html)) {\n                html = html.call(this[0]);\n              } // The elements to wrap the target around\n\n\n              wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);\n\n              if (this[0].parentNode) {\n                wrap.insertBefore(this[0]);\n              }\n\n              wrap.map(function () {\n                var elem = this;\n\n                while (elem.firstElementChild) {\n                  elem = elem.firstElementChild;\n                }\n\n                return elem;\n              }).append(this);\n            }\n\n            return this;\n          },\n          wrapInner: function wrapInner(html) {\n            if (jQuery.isFunction(html)) {\n              return this.each(function (i) {\n                jQuery(this).wrapInner(html.call(this, i));\n              });\n            }\n\n            return this.each(function () {\n              var self = jQuery(this),\n                  contents = self.contents();\n\n              if (contents.length) {\n                contents.wrapAll(html);\n              } else {\n                self.append(html);\n              }\n            });\n          },\n          wrap: function wrap(html) {\n            var isFunction = jQuery.isFunction(html);\n            return this.each(function (i) {\n              jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);\n            });\n          },\n          unwrap: function unwrap(selector) {\n            this.parent(selector).not(\"body\").each(function () {\n              jQuery(this).replaceWith(this.childNodes);\n            });\n            return this;\n          }\n        });\n\n        jQuery.expr.pseudos.hidden = function (elem) {\n          return !jQuery.expr.pseudos.visible(elem);\n        };\n\n        jQuery.expr.pseudos.visible = function (elem) {\n          return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);\n        };\n\n        jQuery.ajaxSettings.xhr = function () {\n          try {\n            return new window.XMLHttpRequest();\n          } catch (e) {}\n        };\n\n        var xhrSuccessStatus = {\n          // File protocol always yields status code 0, assume 200\n          0: 200,\n          // Support: IE <=9 only\n          // #1450: sometimes IE returns 1223 when it should be 204\n          1223: 204\n        },\n            xhrSupported = jQuery.ajaxSettings.xhr();\n        support.cors = !!xhrSupported && \"withCredentials\" in xhrSupported;\n        support.ajax = xhrSupported = !!xhrSupported;\n        jQuery.ajaxTransport(function (options) {\n          var _callback, errorCallback; // Cross domain only allowed if supported through XMLHttpRequest\n\n\n          if (support.cors || xhrSupported && !options.crossDomain) {\n            return {\n              send: function send(headers, complete) {\n                var i,\n                    xhr = options.xhr();\n                xhr.open(options.type, options.url, options.async, options.username, options.password); // Apply custom fields if provided\n\n                if (options.xhrFields) {\n                  for (i in options.xhrFields) {\n                    xhr[i] = options.xhrFields[i];\n                  }\n                } // Override mime type if needed\n\n\n                if (options.mimeType && xhr.overrideMimeType) {\n                  xhr.overrideMimeType(options.mimeType);\n                } // X-Requested-With header\n                // For cross-domain requests, seeing as conditions for a preflight are\n                // akin to a jigsaw puzzle, we simply never set it to be sure.\n                // (it can always be set on a per-request basis or even using ajaxSetup)\n                // For same-domain requests, won't change header if already provided.\n\n\n                if (!options.crossDomain && !headers[\"X-Requested-With\"]) {\n                  headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n                } // Set headers\n\n\n                for (i in headers) {\n                  xhr.setRequestHeader(i, headers[i]);\n                } // Callback\n\n\n                _callback = function callback(type) {\n                  return function () {\n                    if (_callback) {\n                      _callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n                      if (type === \"abort\") {\n                        xhr.abort();\n                      } else if (type === \"error\") {\n                        // Support: IE <=9 only\n                        // On a manual native abort, IE9 throws\n                        // errors on any property access that is not readyState\n                        if (typeof xhr.status !== \"number\") {\n                          complete(0, \"error\");\n                        } else {\n                          complete( // File: protocol always yields status 0; see #8605, #14207\n                          xhr.status, xhr.statusText);\n                        }\n                      } else {\n                        complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText, // Support: IE <=9 only\n                        // IE9 has no XHR2 but throws on binary (trac-11426)\n                        // For XHR2 non-text, let the caller handle it (gh-2498)\n                        (xhr.responseType || \"text\") !== \"text\" || typeof xhr.responseText !== \"string\" ? {\n                          binary: xhr.response\n                        } : {\n                          text: xhr.responseText\n                        }, xhr.getAllResponseHeaders());\n                      }\n                    }\n                  };\n                }; // Listen to events\n\n\n                xhr.onload = _callback();\n                errorCallback = xhr.onerror = _callback(\"error\"); // Support: IE 9 only\n                // Use onreadystatechange to replace onabort\n                // to handle uncaught aborts\n\n                if (xhr.onabort !== undefined) {\n                  xhr.onabort = errorCallback;\n                } else {\n                  xhr.onreadystatechange = function () {\n                    // Check readyState before timeout as it changes\n                    if (xhr.readyState === 4) {\n                      // Allow onerror to be called first,\n                      // but that will not handle a native abort\n                      // Also, save errorCallback to a variable\n                      // as xhr.onerror cannot be accessed\n                      window.setTimeout(function () {\n                        if (_callback) {\n                          errorCallback();\n                        }\n                      });\n                    }\n                  };\n                } // Create the abort callback\n\n\n                _callback = _callback(\"abort\");\n\n                try {\n                  // Do send the request (this may raise an exception)\n                  xhr.send(options.hasContent && options.data || null);\n                } catch (e) {\n                  // #14683: Only rethrow if this hasn't been notified as an error yet\n                  if (_callback) {\n                    throw e;\n                  }\n                }\n              },\n              abort: function abort() {\n                if (_callback) {\n                  _callback();\n                }\n              }\n            };\n          }\n        }); // Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\n\n        jQuery.ajaxPrefilter(function (s) {\n          if (s.crossDomain) {\n            s.contents.script = false;\n          }\n        }); // Install script dataType\n\n        jQuery.ajaxSetup({\n          accepts: {\n            script: \"text/javascript, application/javascript, \" + \"application/ecmascript, application/x-ecmascript\"\n          },\n          contents: {\n            script: /\\b(?:java|ecma)script\\b/\n          },\n          converters: {\n            \"text script\": function textScript(text) {\n              jQuery.globalEval(text);\n              return text;\n            }\n          }\n        }); // Handle cache's special case and crossDomain\n\n        jQuery.ajaxPrefilter(\"script\", function (s) {\n          if (s.cache === undefined) {\n            s.cache = false;\n          }\n\n          if (s.crossDomain) {\n            s.type = \"GET\";\n          }\n        }); // Bind script tag hack transport\n\n        jQuery.ajaxTransport(\"script\", function (s) {\n          // This transport only deals with cross domain requests\n          if (s.crossDomain) {\n            var script, _callback2;\n\n            return {\n              send: function send(_, complete) {\n                script = jQuery(\"<script>\").prop({\n                  charset: s.scriptCharset,\n                  src: s.url\n                }).on(\"load error\", _callback2 = function callback(evt) {\n                  script.remove();\n                  _callback2 = null;\n\n                  if (evt) {\n                    complete(evt.type === \"error\" ? 404 : 200, evt.type);\n                  }\n                }); // Use native DOM manipulation to avoid our domManip AJAX trickery\n\n                document.head.appendChild(script[0]);\n              },\n              abort: function abort() {\n                if (_callback2) {\n                  _callback2();\n                }\n              }\n            };\n          }\n        });\n        var oldCallbacks = [],\n            rjsonp = /(=)\\?(?=&|$)|\\?\\?/; // Default jsonp settings\n\n        jQuery.ajaxSetup({\n          jsonp: \"callback\",\n          jsonpCallback: function jsonpCallback() {\n            var callback = oldCallbacks.pop() || jQuery.expando + \"_\" + nonce++;\n            this[callback] = true;\n            return callback;\n          }\n        }); // Detect, normalize options and install callbacks for jsonp requests\n\n        jQuery.ajaxPrefilter(\"json jsonp\", function (s, originalSettings, jqXHR) {\n          var callbackName,\n              overwritten,\n              responseContainer,\n              jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? \"url\" : typeof s.data === \"string\" && (s.contentType || \"\").indexOf(\"application/x-www-form-urlencoded\") === 0 && rjsonp.test(s.data) && \"data\"); // Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\n          if (jsonProp || s.dataTypes[0] === \"jsonp\") {\n            // Get callback name, remembering preexisting value associated with it\n            callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback; // Insert callback into url or form data\n\n            if (jsonProp) {\n              s[jsonProp] = s[jsonProp].replace(rjsonp, \"$1\" + callbackName);\n            } else if (s.jsonp !== false) {\n              s.url += (rquery.test(s.url) ? \"&\" : \"?\") + s.jsonp + \"=\" + callbackName;\n            } // Use data converter to retrieve json after script execution\n\n\n            s.converters[\"script json\"] = function () {\n              if (!responseContainer) {\n                jQuery.error(callbackName + \" was not called\");\n              }\n\n              return responseContainer[0];\n            }; // Force json dataType\n\n\n            s.dataTypes[0] = \"json\"; // Install callback\n\n            overwritten = window[callbackName];\n\n            window[callbackName] = function () {\n              responseContainer = arguments;\n            }; // Clean-up function (fires after converters)\n\n\n            jqXHR.always(function () {\n              // If previous value didn't exist - remove it\n              if (overwritten === undefined) {\n                jQuery(window).removeProp(callbackName); // Otherwise restore preexisting value\n              } else {\n                window[callbackName] = overwritten;\n              } // Save back as free\n\n\n              if (s[callbackName]) {\n                // Make sure that re-using the options doesn't screw things around\n                s.jsonpCallback = originalSettings.jsonpCallback; // Save the callback name for future use\n\n                oldCallbacks.push(callbackName);\n              } // Call if it was a function and we have a response\n\n\n              if (responseContainer && jQuery.isFunction(overwritten)) {\n                overwritten(responseContainer[0]);\n              }\n\n              responseContainer = overwritten = undefined;\n            }); // Delegate to script\n\n            return \"script\";\n          }\n        }); // Support: Safari 8 only\n        // In Safari 8 documents created via document.implementation.createHTMLDocument\n        // collapse sibling forms: the second one becomes a child of the first one.\n        // Because of that, this security measure has to be disabled in Safari 8.\n        // https://bugs.webkit.org/show_bug.cgi?id=137337\n\n        support.createHTMLDocument = function () {\n          var body = document.implementation.createHTMLDocument(\"\").body;\n          body.innerHTML = \"<form></form><form></form>\";\n          return body.childNodes.length === 2;\n        }(); // Argument \"data\" should be string of html\n        // context (optional): If specified, the fragment will be created in this context,\n        // defaults to document\n        // keepScripts (optional): If true, will include scripts passed in the html string\n\n\n        jQuery.parseHTML = function (data, context, keepScripts) {\n          if (typeof data !== \"string\") {\n            return [];\n          }\n\n          if (typeof context === \"boolean\") {\n            keepScripts = context;\n            context = false;\n          }\n\n          var base, parsed, scripts;\n\n          if (!context) {\n            // Stop scripts or inline event handlers from being executed immediately\n            // by using document.implementation\n            if (support.createHTMLDocument) {\n              context = document.implementation.createHTMLDocument(\"\"); // Set the base href for the created document\n              // so any parsed elements with URLs\n              // are based on the document's URL (gh-2965)\n\n              base = context.createElement(\"base\");\n              base.href = document.location.href;\n              context.head.appendChild(base);\n            } else {\n              context = document;\n            }\n          }\n\n          parsed = rsingleTag.exec(data);\n          scripts = !keepScripts && []; // Single tag\n\n          if (parsed) {\n            return [context.createElement(parsed[1])];\n          }\n\n          parsed = buildFragment([data], context, scripts);\n\n          if (scripts && scripts.length) {\n            jQuery(scripts).remove();\n          }\n\n          return jQuery.merge([], parsed.childNodes);\n        };\n        /**\n         * Load a url into a page\n         */\n\n\n        jQuery.fn.load = function (url, params, callback) {\n          var selector,\n              type,\n              response,\n              self = this,\n              off = url.indexOf(\" \");\n\n          if (off > -1) {\n            selector = stripAndCollapse(url.slice(off));\n            url = url.slice(0, off);\n          } // If it's a function\n\n\n          if (jQuery.isFunction(params)) {\n            // We assume that it's the callback\n            callback = params;\n            params = undefined; // Otherwise, build a param string\n          } else if (params && typeof params === \"object\") {\n            type = \"POST\";\n          } // If we have elements to modify, make the request\n\n\n          if (self.length > 0) {\n            jQuery.ajax({\n              url: url,\n              // If \"type\" variable is undefined, then \"GET\" method will be used.\n              // Make value of this field explicit since\n              // user can override it through ajaxSetup method\n              type: type || \"GET\",\n              dataType: \"html\",\n              data: params\n            }).done(function (responseText) {\n              // Save response for use in complete callback\n              response = arguments;\n              self.html(selector ? // If a selector was specified, locate the right elements in a dummy div\n              // Exclude scripts to avoid IE 'Permission Denied' errors\n              jQuery(\"<div>\").append(jQuery.parseHTML(responseText)).find(selector) : // Otherwise use the full result\n              responseText); // If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n              // but they are ignored because response was set above.\n              // If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n            }).always(callback && function (jqXHR, status) {\n              self.each(function () {\n                callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);\n              });\n            });\n          }\n\n          return this;\n        }; // Attach a bunch of functions for handling common AJAX events\n\n\n        jQuery.each([\"ajaxStart\", \"ajaxStop\", \"ajaxComplete\", \"ajaxError\", \"ajaxSuccess\", \"ajaxSend\"], function (i, type) {\n          jQuery.fn[type] = function (fn) {\n            return this.on(type, fn);\n          };\n        });\n\n        jQuery.expr.pseudos.animated = function (elem) {\n          return jQuery.grep(jQuery.timers, function (fn) {\n            return elem === fn.elem;\n          }).length;\n        };\n\n        jQuery.offset = {\n          setOffset: function setOffset(elem, options, i) {\n            var curPosition,\n                curLeft,\n                curCSSTop,\n                curTop,\n                curOffset,\n                curCSSLeft,\n                calculatePosition,\n                position = jQuery.css(elem, \"position\"),\n                curElem = jQuery(elem),\n                props = {}; // Set position first, in-case top/left are set even on static elem\n\n            if (position === \"static\") {\n              elem.style.position = \"relative\";\n            }\n\n            curOffset = curElem.offset();\n            curCSSTop = jQuery.css(elem, \"top\");\n            curCSSLeft = jQuery.css(elem, \"left\");\n            calculatePosition = (position === \"absolute\" || position === \"fixed\") && (curCSSTop + curCSSLeft).indexOf(\"auto\") > -1; // Need to be able to calculate position if either\n            // top or left is auto and position is either absolute or fixed\n\n            if (calculatePosition) {\n              curPosition = curElem.position();\n              curTop = curPosition.top;\n              curLeft = curPosition.left;\n            } else {\n              curTop = parseFloat(curCSSTop) || 0;\n              curLeft = parseFloat(curCSSLeft) || 0;\n            }\n\n            if (jQuery.isFunction(options)) {\n              // Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n              options = options.call(elem, i, jQuery.extend({}, curOffset));\n            }\n\n            if (options.top != null) {\n              props.top = options.top - curOffset.top + curTop;\n            }\n\n            if (options.left != null) {\n              props.left = options.left - curOffset.left + curLeft;\n            }\n\n            if (\"using\" in options) {\n              options.using.call(elem, props);\n            } else {\n              curElem.css(props);\n            }\n          }\n        };\n        jQuery.fn.extend({\n          offset: function offset(options) {\n            // Preserve chaining for setter\n            if (arguments.length) {\n              return options === undefined ? this : this.each(function (i) {\n                jQuery.offset.setOffset(this, options, i);\n              });\n            }\n\n            var doc,\n                docElem,\n                rect,\n                win,\n                elem = this[0];\n\n            if (!elem) {\n              return;\n            } // Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n            // Support: IE <=11 only\n            // Running getBoundingClientRect on a\n            // disconnected node in IE throws an error\n\n\n            if (!elem.getClientRects().length) {\n              return {\n                top: 0,\n                left: 0\n              };\n            }\n\n            rect = elem.getBoundingClientRect();\n            doc = elem.ownerDocument;\n            docElem = doc.documentElement;\n            win = doc.defaultView;\n            return {\n              top: rect.top + win.pageYOffset - docElem.clientTop,\n              left: rect.left + win.pageXOffset - docElem.clientLeft\n            };\n          },\n          position: function position() {\n            if (!this[0]) {\n              return;\n            }\n\n            var offsetParent,\n                offset,\n                elem = this[0],\n                parentOffset = {\n              top: 0,\n              left: 0\n            }; // Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n            // because it is its only offset parent\n\n            if (jQuery.css(elem, \"position\") === \"fixed\") {\n              // Assume getBoundingClientRect is there when computed position is fixed\n              offset = elem.getBoundingClientRect();\n            } else {\n              // Get *real* offsetParent\n              offsetParent = this.offsetParent(); // Get correct offsets\n\n              offset = this.offset();\n\n              if (!nodeName(offsetParent[0], \"html\")) {\n                parentOffset = offsetParent.offset();\n              } // Add offsetParent borders\n\n\n              parentOffset = {\n                top: parentOffset.top + jQuery.css(offsetParent[0], \"borderTopWidth\", true),\n                left: parentOffset.left + jQuery.css(offsetParent[0], \"borderLeftWidth\", true)\n              };\n            } // Subtract parent offsets and element margins\n\n\n            return {\n              top: offset.top - parentOffset.top - jQuery.css(elem, \"marginTop\", true),\n              left: offset.left - parentOffset.left - jQuery.css(elem, \"marginLeft\", true)\n            };\n          },\n          // This method will return documentElement in the following cases:\n          // 1) For the element inside the iframe without offsetParent, this method will return\n          //    documentElement of the parent window\n          // 2) For the hidden or detached element\n          // 3) For body or html element, i.e. in case of the html node - it will return itself\n          //\n          // but those exceptions were never presented as a real life use-cases\n          // and might be considered as more preferable results.\n          //\n          // This logic, however, is not guaranteed and can change at any point in the future\n          offsetParent: function offsetParent() {\n            return this.map(function () {\n              var offsetParent = this.offsetParent;\n\n              while (offsetParent && jQuery.css(offsetParent, \"position\") === \"static\") {\n                offsetParent = offsetParent.offsetParent;\n              }\n\n              return offsetParent || documentElement;\n            });\n          }\n        }); // Create scrollLeft and scrollTop methods\n\n        jQuery.each({\n          scrollLeft: \"pageXOffset\",\n          scrollTop: \"pageYOffset\"\n        }, function (method, prop) {\n          var top = \"pageYOffset\" === prop;\n\n          jQuery.fn[method] = function (val) {\n            return access(this, function (elem, method, val) {\n              // Coalesce documents and windows\n              var win;\n\n              if (jQuery.isWindow(elem)) {\n                win = elem;\n              } else if (elem.nodeType === 9) {\n                win = elem.defaultView;\n              }\n\n              if (val === undefined) {\n                return win ? win[prop] : elem[method];\n              }\n\n              if (win) {\n                win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);\n              } else {\n                elem[method] = val;\n              }\n            }, method, val, arguments.length);\n          };\n        }); // Support: Safari <=7 - 9.1, Chrome <=37 - 49\n        // Add the top/left cssHooks using jQuery.fn.position\n        // Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n        // Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n        // getComputedStyle returns percent when specified for top/left/bottom/right;\n        // rather than make the css module depend on the offset module, just check for it here\n\n        jQuery.each([\"top\", \"left\"], function (i, prop) {\n          jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {\n            if (computed) {\n              computed = curCSS(elem, prop); // If curCSS returns percentage, fallback to offset\n\n              return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + \"px\" : computed;\n            }\n          });\n        }); // Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\n\n        jQuery.each({\n          Height: \"height\",\n          Width: \"width\"\n        }, function (name, type) {\n          jQuery.each({\n            padding: \"inner\" + name,\n            content: type,\n            \"\": \"outer\" + name\n          }, function (defaultExtra, funcName) {\n            // Margin is only for outerHeight, outerWidth\n            jQuery.fn[funcName] = function (margin, value) {\n              var chainable = arguments.length && (defaultExtra || typeof margin !== \"boolean\"),\n                  extra = defaultExtra || (margin === true || value === true ? \"margin\" : \"border\");\n              return access(this, function (elem, type, value) {\n                var doc;\n\n                if (jQuery.isWindow(elem)) {\n                  // $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n                  return funcName.indexOf(\"outer\") === 0 ? elem[\"inner\" + name] : elem.document.documentElement[\"client\" + name];\n                } // Get document width or height\n\n\n                if (elem.nodeType === 9) {\n                  doc = elem.documentElement; // Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n                  // whichever is greatest\n\n                  return Math.max(elem.body[\"scroll\" + name], doc[\"scroll\" + name], elem.body[\"offset\" + name], doc[\"offset\" + name], doc[\"client\" + name]);\n                }\n\n                return value === undefined ? // Get width or height on the element, requesting but not forcing parseFloat\n                jQuery.css(elem, type, extra) : // Set width or height on the element\n                jQuery.style(elem, type, value, extra);\n              }, type, chainable ? margin : undefined, chainable);\n            };\n          });\n        });\n        jQuery.fn.extend({\n          bind: function bind(types, data, fn) {\n            return this.on(types, null, data, fn);\n          },\n          unbind: function unbind(types, fn) {\n            return this.off(types, null, fn);\n          },\n          delegate: function delegate(selector, types, data, fn) {\n            return this.on(types, selector, data, fn);\n          },\n          undelegate: function undelegate(selector, types, fn) {\n            // ( namespace ) or ( selector, types [, fn] )\n            return arguments.length === 1 ? this.off(selector, \"**\") : this.off(types, selector || \"**\", fn);\n          }\n        });\n\n        jQuery.holdReady = function (hold) {\n          if (hold) {\n            jQuery.readyWait++;\n          } else {\n            jQuery.ready(true);\n          }\n        };\n\n        jQuery.isArray = Array.isArray;\n        jQuery.parseJSON = JSON.parse;\n        jQuery.nodeName = nodeName; // Register as a named AMD module, since jQuery can be concatenated with other\n        // files that may use define, but not via a proper concatenation script that\n        // understands anonymous AMD modules. A named AMD is safest and most robust\n        // way to register. Lowercase jquery is used because AMD module names are\n        // derived from file names, and jQuery is normally delivered in a lowercase\n        // file name. Do this after creating the global so that if an AMD module wants\n        // to call noConflict to hide this version of jQuery, it will work.\n        // Note that for maximum portability, libraries that are not jQuery should\n        // declare themselves as anonymous modules, and avoid setting a global if an\n        // AMD loader is present. jQuery is a special case. For more information, see\n        // https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\n        if (true) {\n          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return jQuery;\n          }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        }\n\n        var // Map over jQuery in case of overwrite\n        _jQuery = window.jQuery,\n            // Map over the $ in case of overwrite\n        _$ = window.$;\n\n        jQuery.noConflict = function (deep) {\n          if (window.$ === jQuery) {\n            window.$ = _$;\n          }\n\n          if (deep && window.jQuery === jQuery) {\n            window.jQuery = _jQuery;\n          }\n\n          return jQuery;\n        }; // Expose jQuery and $ identifiers, even in AMD\n        // (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n        // and CommonJS for browser emulators (#13566)\n\n\n        if (!noGlobal) {\n          window.jQuery = window.$ = jQuery;\n        }\n\n        return jQuery;\n      });\n      /***/\n\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Afrikaans [af]\n      //! author : Werner Mollentze : https://github.com/wernerm\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var af = moment.defineLocale('af', {\n          months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),\n          monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),\n          weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),\n          weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),\n          weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),\n          meridiemParse: /vm|nm/i,\n          isPM: function isPM(input) {\n            return /^nm$/i.test(input);\n          },\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours < 12) {\n              return isLower ? 'vm' : 'VM';\n            } else {\n              return isLower ? 'nm' : 'NM';\n            }\n          },\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Vandag om] LT',\n            nextDay: '[Môre om] LT',\n            nextWeek: 'dddd [om] LT',\n            lastDay: '[Gister om] LT',\n            lastWeek: '[Laas] dddd [om] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'oor %s',\n            past: '%s gelede',\n            s: '\\'n paar sekondes',\n            m: '\\'n minuut',\n            mm: '%d minute',\n            h: '\\'n uur',\n            hh: '%d ure',\n            d: '\\'n dag',\n            dd: '%d dae',\n            M: '\\'n maand',\n            MM: '%d maande',\n            y: '\\'n jaar',\n            yy: '%d jaar'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(ste|de)/,\n          ordinal: function ordinal(number) {\n            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter\n          },\n          week: {\n            dow: 1,\n            // Maandag is die eerste dag van die week.\n            doy: 4 // Die week wat die 4de Januarie bevat is die eerste week van die jaar.\n\n          }\n        });\n        return af;\n      });\n      /***/\n\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Arabic (Algeria) [ar-dz]\n      //! author : Noureddine LOUAHEDJ : https://github.com/noureddineme\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var arDz = moment.defineLocale('ar-dz', {\n          months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),\n          monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),\n          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),\n          weekdaysShort: 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),\n          weekdaysMin: 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[اليوم على الساعة] LT',\n            nextDay: '[غدا على الساعة] LT',\n            nextWeek: 'dddd [على الساعة] LT',\n            lastDay: '[أمس على الساعة] LT',\n            lastWeek: 'dddd [على الساعة] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'في %s',\n            past: 'منذ %s',\n            s: 'ثوان',\n            m: 'دقيقة',\n            mm: '%d دقائق',\n            h: 'ساعة',\n            hh: '%d ساعات',\n            d: 'يوم',\n            dd: '%d أيام',\n            M: 'شهر',\n            MM: '%d أشهر',\n            y: 'سنة',\n            yy: '%d سنوات'\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 4 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return arDz;\n      });\n      /***/\n\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Arabic (Kuwait) [ar-kw]\n      //! author : Nusret Parlak: https://github.com/nusretparlak\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var arKw = moment.defineLocale('ar-kw', {\n          months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),\n          monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),\n          weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),\n          weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),\n          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[اليوم على الساعة] LT',\n            nextDay: '[غدا على الساعة] LT',\n            nextWeek: 'dddd [على الساعة] LT',\n            lastDay: '[أمس على الساعة] LT',\n            lastWeek: 'dddd [على الساعة] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'في %s',\n            past: 'منذ %s',\n            s: 'ثوان',\n            m: 'دقيقة',\n            mm: '%d دقائق',\n            h: 'ساعة',\n            hh: '%d ساعات',\n            d: 'يوم',\n            dd: '%d أيام',\n            M: 'شهر',\n            MM: '%d أشهر',\n            y: 'سنة',\n            yy: '%d سنوات'\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 12 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return arKw;\n      });\n      /***/\n\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Arabic (Lybia) [ar-ly]\n      //! author : Ali Hmer: https://github.com/kikoanis\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '1',\n          '2': '2',\n          '3': '3',\n          '4': '4',\n          '5': '5',\n          '6': '6',\n          '7': '7',\n          '8': '8',\n          '9': '9',\n          '0': '0'\n        };\n\n        var pluralForm = function pluralForm(n) {\n          return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;\n        };\n\n        var plurals = {\n          s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],\n          m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],\n          h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],\n          d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],\n          M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],\n          y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']\n        };\n\n        var pluralize = function pluralize(u) {\n          return function (number, withoutSuffix, string, isFuture) {\n            var f = pluralForm(number),\n                str = plurals[u][pluralForm(number)];\n\n            if (f === 2) {\n              str = str[withoutSuffix ? 0 : 1];\n            }\n\n            return str.replace(/%d/i, number);\n          };\n        };\n\n        var months = ['يناير', 'فبراير', 'مارس', 'أبريل', 'مايو', 'يونيو', 'يوليو', 'أغسطس', 'سبتمبر', 'أكتوبر', 'نوفمبر', 'ديسمبر'];\n        var arLy = moment.defineLocale('ar-ly', {\n          months: months,\n          monthsShort: months,\n          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),\n          weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),\n          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: \"D/\\u200FM/\\u200FYYYY\",\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          meridiemParse: /ص|م/,\n          isPM: function isPM(input) {\n            return 'م' === input;\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 12) {\n              return 'ص';\n            } else {\n              return 'م';\n            }\n          },\n          calendar: {\n            sameDay: '[اليوم عند الساعة] LT',\n            nextDay: '[غدًا عند الساعة] LT',\n            nextWeek: 'dddd [عند الساعة] LT',\n            lastDay: '[أمس عند الساعة] LT',\n            lastWeek: 'dddd [عند الساعة] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'بعد %s',\n            past: 'منذ %s',\n            s: pluralize('s'),\n            m: pluralize('m'),\n            mm: pluralize('m'),\n            h: pluralize('h'),\n            hh: pluralize('h'),\n            d: pluralize('d'),\n            dd: pluralize('d'),\n            M: pluralize('M'),\n            MM: pluralize('M'),\n            y: pluralize('y'),\n            yy: pluralize('y')\n          },\n          preparse: function preparse(string) {\n            return string.replace(/\\u200f/g, '').replace(/،/g, ',');\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            }).replace(/,/g, '،');\n          },\n          week: {\n            dow: 6,\n            // Saturday is the first day of the week.\n            doy: 12 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return arLy;\n      });\n      /***/\n\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Arabic (Morocco) [ar-ma]\n      //! author : ElFadili Yassine : https://github.com/ElFadiliY\n      //! author : Abdel Said : https://github.com/abdelsaid\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var arMa = moment.defineLocale('ar-ma', {\n          months: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),\n          monthsShort: 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),\n          weekdays: 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),\n          weekdaysShort: 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),\n          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[اليوم على الساعة] LT',\n            nextDay: '[غدا على الساعة] LT',\n            nextWeek: 'dddd [على الساعة] LT',\n            lastDay: '[أمس على الساعة] LT',\n            lastWeek: 'dddd [على الساعة] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'في %s',\n            past: 'منذ %s',\n            s: 'ثوان',\n            m: 'دقيقة',\n            mm: '%d دقائق',\n            h: 'ساعة',\n            hh: '%d ساعات',\n            d: 'يوم',\n            dd: '%d أيام',\n            M: 'شهر',\n            MM: '%d أشهر',\n            y: 'سنة',\n            yy: '%d سنوات'\n          },\n          week: {\n            dow: 6,\n            // Saturday is the first day of the week.\n            doy: 12 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return arMa;\n      });\n      /***/\n\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Arabic (Saudi Arabia) [ar-sa]\n      //! author : Suhail Alkowaileet : https://github.com/xsoh\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '١',\n          '2': '٢',\n          '3': '٣',\n          '4': '٤',\n          '5': '٥',\n          '6': '٦',\n          '7': '٧',\n          '8': '٨',\n          '9': '٩',\n          '0': '٠'\n        };\n        var numberMap = {\n          '١': '1',\n          '٢': '2',\n          '٣': '3',\n          '٤': '4',\n          '٥': '5',\n          '٦': '6',\n          '٧': '7',\n          '٨': '8',\n          '٩': '9',\n          '٠': '0'\n        };\n        var arSa = moment.defineLocale('ar-sa', {\n          months: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),\n          monthsShort: 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),\n          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),\n          weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),\n          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          meridiemParse: /ص|م/,\n          isPM: function isPM(input) {\n            return 'م' === input;\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 12) {\n              return 'ص';\n            } else {\n              return 'م';\n            }\n          },\n          calendar: {\n            sameDay: '[اليوم على الساعة] LT',\n            nextDay: '[غدا على الساعة] LT',\n            nextWeek: 'dddd [على الساعة] LT',\n            lastDay: '[أمس على الساعة] LT',\n            lastWeek: 'dddd [على الساعة] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'في %s',\n            past: 'منذ %s',\n            s: 'ثوان',\n            m: 'دقيقة',\n            mm: '%d دقائق',\n            h: 'ساعة',\n            hh: '%d ساعات',\n            d: 'يوم',\n            dd: '%d أيام',\n            M: 'شهر',\n            MM: '%d أشهر',\n            y: 'سنة',\n            yy: '%d سنوات'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {\n              return numberMap[match];\n            }).replace(/،/g, ',');\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            }).replace(/,/g, '،');\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return arSa;\n      });\n      /***/\n\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale  :  Arabic (Tunisia) [ar-tn]\n      //! author : Nader Toukabri : https://github.com/naderio\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var arTn = moment.defineLocale('ar-tn', {\n          months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),\n          monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),\n          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),\n          weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),\n          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[اليوم على الساعة] LT',\n            nextDay: '[غدا على الساعة] LT',\n            nextWeek: 'dddd [على الساعة] LT',\n            lastDay: '[أمس على الساعة] LT',\n            lastWeek: 'dddd [على الساعة] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'في %s',\n            past: 'منذ %s',\n            s: 'ثوان',\n            m: 'دقيقة',\n            mm: '%d دقائق',\n            h: 'ساعة',\n            hh: '%d ساعات',\n            d: 'يوم',\n            dd: '%d أيام',\n            M: 'شهر',\n            MM: '%d أشهر',\n            y: 'سنة',\n            yy: '%d سنوات'\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return arTn;\n      });\n      /***/\n\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Arabic [ar]\n      //! author : Abdel Said: https://github.com/abdelsaid\n      //! author : Ahmed Elkhatib\n      //! author : forabi https://github.com/forabi\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '١',\n          '2': '٢',\n          '3': '٣',\n          '4': '٤',\n          '5': '٥',\n          '6': '٦',\n          '7': '٧',\n          '8': '٨',\n          '9': '٩',\n          '0': '٠'\n        };\n        var numberMap = {\n          '١': '1',\n          '٢': '2',\n          '٣': '3',\n          '٤': '4',\n          '٥': '5',\n          '٦': '6',\n          '٧': '7',\n          '٨': '8',\n          '٩': '9',\n          '٠': '0'\n        };\n\n        var pluralForm = function pluralForm(n) {\n          return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;\n        };\n\n        var plurals = {\n          s: ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],\n          m: ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],\n          h: ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],\n          d: ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],\n          M: ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],\n          y: ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']\n        };\n\n        var pluralize = function pluralize(u) {\n          return function (number, withoutSuffix, string, isFuture) {\n            var f = pluralForm(number),\n                str = plurals[u][pluralForm(number)];\n\n            if (f === 2) {\n              str = str[withoutSuffix ? 0 : 1];\n            }\n\n            return str.replace(/%d/i, number);\n          };\n        };\n\n        var months = ['كانون الثاني يناير', 'شباط فبراير', 'آذار مارس', 'نيسان أبريل', 'أيار مايو', 'حزيران يونيو', 'تموز يوليو', 'آب أغسطس', 'أيلول سبتمبر', 'تشرين الأول أكتوبر', 'تشرين الثاني نوفمبر', 'كانون الأول ديسمبر'];\n        var ar = moment.defineLocale('ar', {\n          months: months,\n          monthsShort: months,\n          weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),\n          weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),\n          weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: \"D/\\u200FM/\\u200FYYYY\",\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          meridiemParse: /ص|م/,\n          isPM: function isPM(input) {\n            return 'م' === input;\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 12) {\n              return 'ص';\n            } else {\n              return 'م';\n            }\n          },\n          calendar: {\n            sameDay: '[اليوم عند الساعة] LT',\n            nextDay: '[غدًا عند الساعة] LT',\n            nextWeek: 'dddd [عند الساعة] LT',\n            lastDay: '[أمس عند الساعة] LT',\n            lastWeek: 'dddd [عند الساعة] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'بعد %s',\n            past: 'منذ %s',\n            s: pluralize('s'),\n            m: pluralize('m'),\n            mm: pluralize('m'),\n            h: pluralize('h'),\n            hh: pluralize('h'),\n            d: pluralize('d'),\n            dd: pluralize('d'),\n            M: pluralize('M'),\n            MM: pluralize('M'),\n            y: pluralize('y'),\n            yy: pluralize('y')\n          },\n          preparse: function preparse(string) {\n            return string.replace(/\\u200f/g, '').replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {\n              return numberMap[match];\n            }).replace(/،/g, ',');\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            }).replace(/,/g, '،');\n          },\n          week: {\n            dow: 6,\n            // Saturday is the first day of the week.\n            doy: 12 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return ar;\n      });\n      /***/\n\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Azerbaijani [az]\n      //! author : topchiyev : https://github.com/topchiyev\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var suffixes = {\n          1: '-inci',\n          5: '-inci',\n          8: '-inci',\n          70: '-inci',\n          80: '-inci',\n          2: '-nci',\n          7: '-nci',\n          20: '-nci',\n          50: '-nci',\n          3: '-üncü',\n          4: '-üncü',\n          100: '-üncü',\n          6: '-ncı',\n          9: '-uncu',\n          10: '-uncu',\n          30: '-uncu',\n          60: '-ıncı',\n          90: '-ıncı'\n        };\n        var az = moment.defineLocale('az', {\n          months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),\n          monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),\n          weekdays: 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),\n          weekdaysShort: 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),\n          weekdaysMin: 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[bugün saat] LT',\n            nextDay: '[sabah saat] LT',\n            nextWeek: '[gələn həftə] dddd [saat] LT',\n            lastDay: '[dünən] LT',\n            lastWeek: '[keçən həftə] dddd [saat] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s sonra',\n            past: '%s əvvəl',\n            s: 'birneçə saniyyə',\n            m: 'bir dəqiqə',\n            mm: '%d dəqiqə',\n            h: 'bir saat',\n            hh: '%d saat',\n            d: 'bir gün',\n            dd: '%d gün',\n            M: 'bir ay',\n            MM: '%d ay',\n            y: 'bir il',\n            yy: '%d il'\n          },\n          meridiemParse: /gecə|səhər|gündüz|axşam/,\n          isPM: function isPM(input) {\n            return /^(gündüz|axşam)$/.test(input);\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'gecə';\n            } else if (hour < 12) {\n              return 'səhər';\n            } else if (hour < 17) {\n              return 'gündüz';\n            } else {\n              return 'axşam';\n            }\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,\n          ordinal: function ordinal(number) {\n            if (number === 0) {\n              // special case for zero\n              return number + '-ıncı';\n            }\n\n            var a = number % 10,\n                b = number % 100 - a,\n                c = number >= 100 ? 100 : null;\n            return number + (suffixes[a] || suffixes[b] || suffixes[c]);\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return az;\n      });\n      /***/\n\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Belarusian [be]\n      //! author : Dmitry Demidov : https://github.com/demidov91\n      //! author: Praleska: http://praleska.pro/\n      //! Author : Menelion Elensúle : https://github.com/Oire\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function plural(word, num) {\n          var forms = word.split('_');\n          return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];\n        }\n\n        function relativeTimeWithPlural(number, withoutSuffix, key) {\n          var format = {\n            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',\n            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',\n            'dd': 'дзень_дні_дзён',\n            'MM': 'месяц_месяцы_месяцаў',\n            'yy': 'год_гады_гадоў'\n          };\n\n          if (key === 'm') {\n            return withoutSuffix ? 'хвіліна' : 'хвіліну';\n          } else if (key === 'h') {\n            return withoutSuffix ? 'гадзіна' : 'гадзіну';\n          } else {\n            return number + ' ' + plural(format[key], +number);\n          }\n        }\n\n        var be = moment.defineLocale('be', {\n          months: {\n            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),\n            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')\n          },\n          monthsShort: 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),\n          weekdays: {\n            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),\n            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),\n            isFormat: /\\[ ?[Вв] ?(?:мінулую|наступную)? ?\\] ?dddd/\n          },\n          weekdaysShort: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),\n          weekdaysMin: 'нд_пн_ат_ср_чц_пт_сб'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY г.',\n            LLL: 'D MMMM YYYY г., HH:mm',\n            LLLL: 'dddd, D MMMM YYYY г., HH:mm'\n          },\n          calendar: {\n            sameDay: '[Сёння ў] LT',\n            nextDay: '[Заўтра ў] LT',\n            lastDay: '[Учора ў] LT',\n            nextWeek: function nextWeek() {\n              return '[У] dddd [ў] LT';\n            },\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 0:\n                case 3:\n                case 5:\n                case 6:\n                  return '[У мінулую] dddd [ў] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                  return '[У мінулы] dddd [ў] LT';\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'праз %s',\n            past: '%s таму',\n            s: 'некалькі секунд',\n            m: relativeTimeWithPlural,\n            mm: relativeTimeWithPlural,\n            h: relativeTimeWithPlural,\n            hh: relativeTimeWithPlural,\n            d: 'дзень',\n            dd: relativeTimeWithPlural,\n            M: 'месяц',\n            MM: relativeTimeWithPlural,\n            y: 'год',\n            yy: relativeTimeWithPlural\n          },\n          meridiemParse: /ночы|раніцы|дня|вечара/,\n          isPM: function isPM(input) {\n            return /^(дня|вечара)$/.test(input);\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'ночы';\n            } else if (hour < 12) {\n              return 'раніцы';\n            } else if (hour < 17) {\n              return 'дня';\n            } else {\n              return 'вечара';\n            }\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}-(і|ы|га)/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              case 'M':\n              case 'd':\n              case 'DDD':\n              case 'w':\n              case 'W':\n                return (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? number + '-і' : number + '-ы';\n\n              case 'D':\n                return number + '-га';\n\n              default:\n                return number;\n            }\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return be;\n      });\n      /***/\n\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Bulgarian [bg]\n      //! author : Krasen Borisov : https://github.com/kraz\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var bg = moment.defineLocale('bg', {\n          months: 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),\n          monthsShort: 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),\n          weekdays: 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),\n          weekdaysShort: 'нед_пон_вто_сря_чет_пет_съб'.split('_'),\n          weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'D.MM.YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY H:mm',\n            LLLL: 'dddd, D MMMM YYYY H:mm'\n          },\n          calendar: {\n            sameDay: '[Днес в] LT',\n            nextDay: '[Утре в] LT',\n            nextWeek: 'dddd [в] LT',\n            lastDay: '[Вчера в] LT',\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 0:\n                case 3:\n                case 6:\n                  return '[В изминалата] dddd [в] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                  return '[В изминалия] dddd [в] LT';\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'след %s',\n            past: 'преди %s',\n            s: 'няколко секунди',\n            m: 'минута',\n            mm: '%d минути',\n            h: 'час',\n            hh: '%d часа',\n            d: 'ден',\n            dd: '%d дни',\n            M: 'месец',\n            MM: '%d месеца',\n            y: 'година',\n            yy: '%d години'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}-(ев|ен|ти|ви|ри|ми)/,\n          ordinal: function ordinal(number) {\n            var lastDigit = number % 10,\n                last2Digits = number % 100;\n\n            if (number === 0) {\n              return number + '-ев';\n            } else if (last2Digits === 0) {\n              return number + '-ен';\n            } else if (last2Digits > 10 && last2Digits < 20) {\n              return number + '-ти';\n            } else if (lastDigit === 1) {\n              return number + '-ви';\n            } else if (lastDigit === 2) {\n              return number + '-ри';\n            } else if (lastDigit === 7 || lastDigit === 8) {\n              return number + '-ми';\n            } else {\n              return number + '-ти';\n            }\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return bg;\n      });\n      /***/\n\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Bengali [bn]\n      //! author : Kaushik Gandhi : https://github.com/kaushikgandhi\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '১',\n          '2': '২',\n          '3': '৩',\n          '4': '৪',\n          '5': '৫',\n          '6': '৬',\n          '7': '৭',\n          '8': '৮',\n          '9': '৯',\n          '0': '০'\n        };\n        var numberMap = {\n          '১': '1',\n          '২': '2',\n          '৩': '3',\n          '৪': '4',\n          '৫': '5',\n          '৬': '6',\n          '৭': '7',\n          '৮': '8',\n          '৯': '9',\n          '০': '0'\n        };\n        var bn = moment.defineLocale('bn', {\n          months: 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),\n          monthsShort: 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),\n          weekdays: 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),\n          weekdaysShort: 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),\n          weekdaysMin: 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),\n          longDateFormat: {\n            LT: 'A h:mm সময়',\n            LTS: 'A h:mm:ss সময়',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY, A h:mm সময়',\n            LLLL: 'dddd, D MMMM YYYY, A h:mm সময়'\n          },\n          calendar: {\n            sameDay: '[আজ] LT',\n            nextDay: '[আগামীকাল] LT',\n            nextWeek: 'dddd, LT',\n            lastDay: '[গতকাল] LT',\n            lastWeek: '[গত] dddd, LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s পরে',\n            past: '%s আগে',\n            s: 'কয়েক সেকেন্ড',\n            m: 'এক মিনিট',\n            mm: '%d মিনিট',\n            h: 'এক ঘন্টা',\n            hh: '%d ঘন্টা',\n            d: 'এক দিন',\n            dd: '%d দিন',\n            M: 'এক মাস',\n            MM: '%d মাস',\n            y: 'এক বছর',\n            yy: '%d বছর'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {\n              return numberMap[match];\n            });\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            });\n          },\n          meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'রাত' && hour >= 4 || meridiem === 'দুপুর' && hour < 5 || meridiem === 'বিকাল') {\n              return hour + 12;\n            } else {\n              return hour;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'রাত';\n            } else if (hour < 10) {\n              return 'সকাল';\n            } else if (hour < 17) {\n              return 'দুপুর';\n            } else if (hour < 20) {\n              return 'বিকাল';\n            } else {\n              return 'রাত';\n            }\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return bn;\n      });\n      /***/\n\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Tibetan [bo]\n      //! author : Thupten N. Chakrishar : https://github.com/vajradog\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '༡',\n          '2': '༢',\n          '3': '༣',\n          '4': '༤',\n          '5': '༥',\n          '6': '༦',\n          '7': '༧',\n          '8': '༨',\n          '9': '༩',\n          '0': '༠'\n        };\n        var numberMap = {\n          '༡': '1',\n          '༢': '2',\n          '༣': '3',\n          '༤': '4',\n          '༥': '5',\n          '༦': '6',\n          '༧': '7',\n          '༨': '8',\n          '༩': '9',\n          '༠': '0'\n        };\n        var bo = moment.defineLocale('bo', {\n          months: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),\n          monthsShort: 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),\n          weekdays: 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),\n          weekdaysShort: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),\n          weekdaysMin: 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),\n          longDateFormat: {\n            LT: 'A h:mm',\n            LTS: 'A h:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY, A h:mm',\n            LLLL: 'dddd, D MMMM YYYY, A h:mm'\n          },\n          calendar: {\n            sameDay: '[དི་རིང] LT',\n            nextDay: '[སང་ཉིན] LT',\n            nextWeek: '[བདུན་ཕྲག་རྗེས་མ], LT',\n            lastDay: '[ཁ་སང] LT',\n            lastWeek: '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s ལ་',\n            past: '%s སྔན་ལ',\n            s: 'ལམ་སང',\n            m: 'སྐར་མ་གཅིག',\n            mm: '%d སྐར་མ',\n            h: 'ཆུ་ཚོད་གཅིག',\n            hh: '%d ཆུ་ཚོད',\n            d: 'ཉིན་གཅིག',\n            dd: '%d ཉིན་',\n            M: 'ཟླ་བ་གཅིག',\n            MM: '%d ཟླ་བ',\n            y: 'ལོ་གཅིག',\n            yy: '%d ལོ'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {\n              return numberMap[match];\n            });\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            });\n          },\n          meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'མཚན་མོ' && hour >= 4 || meridiem === 'ཉིན་གུང' && hour < 5 || meridiem === 'དགོང་དག') {\n              return hour + 12;\n            } else {\n              return hour;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'མཚན་མོ';\n            } else if (hour < 10) {\n              return 'ཞོགས་ཀས';\n            } else if (hour < 17) {\n              return 'ཉིན་གུང';\n            } else if (hour < 20) {\n              return 'དགོང་དག';\n            } else {\n              return 'མཚན་མོ';\n            }\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return bo;\n      });\n      /***/\n\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Breton [br]\n      //! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function relativeTimeWithMutation(number, withoutSuffix, key) {\n          var format = {\n            'mm': 'munutenn',\n            'MM': 'miz',\n            'dd': 'devezh'\n          };\n          return number + ' ' + mutation(format[key], number);\n        }\n\n        function specialMutationForYears(number) {\n          switch (lastNumber(number)) {\n            case 1:\n            case 3:\n            case 4:\n            case 5:\n            case 9:\n              return number + ' bloaz';\n\n            default:\n              return number + ' vloaz';\n          }\n        }\n\n        function lastNumber(number) {\n          if (number > 9) {\n            return lastNumber(number % 10);\n          }\n\n          return number;\n        }\n\n        function mutation(text, number) {\n          if (number === 2) {\n            return softMutation(text);\n          }\n\n          return text;\n        }\n\n        function softMutation(text) {\n          var mutationTable = {\n            'm': 'v',\n            'b': 'v',\n            'd': 'z'\n          };\n\n          if (mutationTable[text.charAt(0)] === undefined) {\n            return text;\n          }\n\n          return mutationTable[text.charAt(0)] + text.substring(1);\n        }\n\n        var br = moment.defineLocale('br', {\n          months: 'Genver_C\\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),\n          monthsShort: 'Gen_C\\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),\n          weekdays: 'Sul_Lun_Meurzh_Merc\\'her_Yaou_Gwener_Sadorn'.split('_'),\n          weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),\n          weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'h[e]mm A',\n            LTS: 'h[e]mm:ss A',\n            L: 'DD/MM/YYYY',\n            LL: 'D [a viz] MMMM YYYY',\n            LLL: 'D [a viz] MMMM YYYY h[e]mm A',\n            LLLL: 'dddd, D [a viz] MMMM YYYY h[e]mm A'\n          },\n          calendar: {\n            sameDay: '[Hiziv da] LT',\n            nextDay: '[Warc\\'hoazh da] LT',\n            nextWeek: 'dddd [da] LT',\n            lastDay: '[Dec\\'h da] LT',\n            lastWeek: 'dddd [paset da] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'a-benn %s',\n            past: '%s \\'zo',\n            s: 'un nebeud segondennoù',\n            m: 'ur vunutenn',\n            mm: relativeTimeWithMutation,\n            h: 'un eur',\n            hh: '%d eur',\n            d: 'un devezh',\n            dd: relativeTimeWithMutation,\n            M: 'ur miz',\n            MM: relativeTimeWithMutation,\n            y: 'ur bloaz',\n            yy: specialMutationForYears\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(añ|vet)/,\n          ordinal: function ordinal(number) {\n            var output = number === 1 ? 'añ' : 'vet';\n            return number + output;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return br;\n      });\n      /***/\n\n    },\n    /* 16 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Bosnian [bs]\n      //! author : Nedim Cholich : https://github.com/frontyard\n      //! based on (hr) translation by Bojan Marković\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function translate(number, withoutSuffix, key) {\n          var result = number + ' ';\n\n          switch (key) {\n            case 'm':\n              return withoutSuffix ? 'jedna minuta' : 'jedne minute';\n\n            case 'mm':\n              if (number === 1) {\n                result += 'minuta';\n              } else if (number === 2 || number === 3 || number === 4) {\n                result += 'minute';\n              } else {\n                result += 'minuta';\n              }\n\n              return result;\n\n            case 'h':\n              return withoutSuffix ? 'jedan sat' : 'jednog sata';\n\n            case 'hh':\n              if (number === 1) {\n                result += 'sat';\n              } else if (number === 2 || number === 3 || number === 4) {\n                result += 'sata';\n              } else {\n                result += 'sati';\n              }\n\n              return result;\n\n            case 'dd':\n              if (number === 1) {\n                result += 'dan';\n              } else {\n                result += 'dana';\n              }\n\n              return result;\n\n            case 'MM':\n              if (number === 1) {\n                result += 'mjesec';\n              } else if (number === 2 || number === 3 || number === 4) {\n                result += 'mjeseca';\n              } else {\n                result += 'mjeseci';\n              }\n\n              return result;\n\n            case 'yy':\n              if (number === 1) {\n                result += 'godina';\n              } else if (number === 2 || number === 3 || number === 4) {\n                result += 'godine';\n              } else {\n                result += 'godina';\n              }\n\n              return result;\n          }\n        }\n\n        var bs = moment.defineLocale('bs', {\n          months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),\n          monthsShort: 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),\n          weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),\n          weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY H:mm',\n            LLLL: 'dddd, D. MMMM YYYY H:mm'\n          },\n          calendar: {\n            sameDay: '[danas u] LT',\n            nextDay: '[sutra u] LT',\n            nextWeek: function nextWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[u] [nedjelju] [u] LT';\n\n                case 3:\n                  return '[u] [srijedu] [u] LT';\n\n                case 6:\n                  return '[u] [subotu] [u] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                  return '[u] dddd [u] LT';\n              }\n            },\n            lastDay: '[jučer u] LT',\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 0:\n                case 3:\n                  return '[prošlu] dddd [u] LT';\n\n                case 6:\n                  return '[prošle] [subote] [u] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                  return '[prošli] dddd [u] LT';\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'za %s',\n            past: 'prije %s',\n            s: 'par sekundi',\n            m: translate,\n            mm: translate,\n            h: translate,\n            hh: translate,\n            d: 'dan',\n            dd: translate,\n            M: 'mjesec',\n            MM: translate,\n            y: 'godinu',\n            yy: translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return bs;\n      });\n      /***/\n\n    },\n    /* 17 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Catalan [ca]\n      //! author : Juan G. Hurtado : https://github.com/juanghurtado\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var ca = moment.defineLocale('ca', {\n          months: {\n            standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),\n            format: 'de gener_de febrer_de març_d\\'abril_de maig_de juny_de juliol_d\\'agost_de setembre_d\\'octubre_de novembre_de desembre'.split('_'),\n            isFormat: /D[oD]?(\\s)+MMMM/\n          },\n          monthsShort: 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),\n          weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),\n          weekdaysMin: 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: '[el] D MMMM [de] YYYY',\n            ll: 'D MMM YYYY',\n            LLL: '[el] D MMMM [de] YYYY [a les] H:mm',\n            lll: 'D MMM YYYY, H:mm',\n            LLLL: '[el] dddd D MMMM [de] YYYY [a les] H:mm',\n            llll: 'ddd D MMM YYYY, H:mm'\n          },\n          calendar: {\n            sameDay: function sameDay() {\n              return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';\n            },\n            nextDay: function nextDay() {\n              return '[demà a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';\n            },\n            nextWeek: function nextWeek() {\n              return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';\n            },\n            lastDay: function lastDay() {\n              return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';\n            },\n            lastWeek: function lastWeek() {\n              return '[el] dddd [passat a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'd\\'aquí %s',\n            past: 'fa %s',\n            s: 'uns segons',\n            m: 'un minut',\n            mm: '%d minuts',\n            h: 'una hora',\n            hh: '%d hores',\n            d: 'un dia',\n            dd: '%d dies',\n            M: 'un mes',\n            MM: '%d mesos',\n            y: 'un any',\n            yy: '%d anys'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(r|n|t|è|a)/,\n          ordinal: function ordinal(number, period) {\n            var output = number === 1 ? 'r' : number === 2 ? 'n' : number === 3 ? 'r' : number === 4 ? 't' : 'è';\n\n            if (period === 'w' || period === 'W') {\n              output = 'a';\n            }\n\n            return number + output;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return ca;\n      });\n      /***/\n\n    },\n    /* 18 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Czech [cs]\n      //! author : petrbela : https://github.com/petrbela\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_');\n        var monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');\n\n        function plural(n) {\n          return n > 1 && n < 5 && ~~(n / 10) !== 1;\n        }\n\n        function translate(number, withoutSuffix, key, isFuture) {\n          var result = number + ' ';\n\n          switch (key) {\n            case 's':\n              // a few seconds / in a few seconds / a few seconds ago\n              return withoutSuffix || isFuture ? 'pár sekund' : 'pár sekundami';\n\n            case 'm':\n              // a minute / in a minute / a minute ago\n              return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';\n\n            case 'mm':\n              // 9 minutes / in 9 minutes / 9 minutes ago\n              if (withoutSuffix || isFuture) {\n                return result + (plural(number) ? 'minuty' : 'minut');\n              } else {\n                return result + 'minutami';\n              }\n\n              break;\n\n            case 'h':\n              // an hour / in an hour / an hour ago\n              return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';\n\n            case 'hh':\n              // 9 hours / in 9 hours / 9 hours ago\n              if (withoutSuffix || isFuture) {\n                return result + (plural(number) ? 'hodiny' : 'hodin');\n              } else {\n                return result + 'hodinami';\n              }\n\n              break;\n\n            case 'd':\n              // a day / in a day / a day ago\n              return withoutSuffix || isFuture ? 'den' : 'dnem';\n\n            case 'dd':\n              // 9 days / in 9 days / 9 days ago\n              if (withoutSuffix || isFuture) {\n                return result + (plural(number) ? 'dny' : 'dní');\n              } else {\n                return result + 'dny';\n              }\n\n              break;\n\n            case 'M':\n              // a month / in a month / a month ago\n              return withoutSuffix || isFuture ? 'měsíc' : 'měsícem';\n\n            case 'MM':\n              // 9 months / in 9 months / 9 months ago\n              if (withoutSuffix || isFuture) {\n                return result + (plural(number) ? 'měsíce' : 'měsíců');\n              } else {\n                return result + 'měsíci';\n              }\n\n              break;\n\n            case 'y':\n              // a year / in a year / a year ago\n              return withoutSuffix || isFuture ? 'rok' : 'rokem';\n\n            case 'yy':\n              // 9 years / in 9 years / 9 years ago\n              if (withoutSuffix || isFuture) {\n                return result + (plural(number) ? 'roky' : 'let');\n              } else {\n                return result + 'lety';\n              }\n\n              break;\n          }\n        }\n\n        var cs = moment.defineLocale('cs', {\n          months: months,\n          monthsShort: monthsShort,\n          monthsParse: function (months, monthsShort) {\n            var i,\n                _monthsParse = [];\n\n            for (i = 0; i < 12; i++) {\n              // use custom parser to solve problem with July (červenec)\n              _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');\n            }\n\n            return _monthsParse;\n          }(months, monthsShort),\n          shortMonthsParse: function (monthsShort) {\n            var i,\n                _shortMonthsParse = [];\n\n            for (i = 0; i < 12; i++) {\n              _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');\n            }\n\n            return _shortMonthsParse;\n          }(monthsShort),\n          longMonthsParse: function (months) {\n            var i,\n                _longMonthsParse = [];\n\n            for (i = 0; i < 12; i++) {\n              _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');\n            }\n\n            return _longMonthsParse;\n          }(months),\n          weekdays: 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),\n          weekdaysShort: 'ne_po_út_st_čt_pá_so'.split('_'),\n          weekdaysMin: 'ne_po_út_st_čt_pá_so'.split('_'),\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY H:mm',\n            LLLL: 'dddd D. MMMM YYYY H:mm',\n            l: 'D. M. YYYY'\n          },\n          calendar: {\n            sameDay: '[dnes v] LT',\n            nextDay: '[zítra v] LT',\n            nextWeek: function nextWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[v neděli v] LT';\n\n                case 1:\n                case 2:\n                  return '[v] dddd [v] LT';\n\n                case 3:\n                  return '[ve středu v] LT';\n\n                case 4:\n                  return '[ve čtvrtek v] LT';\n\n                case 5:\n                  return '[v pátek v] LT';\n\n                case 6:\n                  return '[v sobotu v] LT';\n              }\n            },\n            lastDay: '[včera v] LT',\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[minulou neděli v] LT';\n\n                case 1:\n                case 2:\n                  return '[minulé] dddd [v] LT';\n\n                case 3:\n                  return '[minulou středu v] LT';\n\n                case 4:\n                case 5:\n                  return '[minulý] dddd [v] LT';\n\n                case 6:\n                  return '[minulou sobotu v] LT';\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'za %s',\n            past: 'před %s',\n            s: translate,\n            m: translate,\n            mm: translate,\n            h: translate,\n            hh: translate,\n            d: translate,\n            dd: translate,\n            M: translate,\n            MM: translate,\n            y: translate,\n            yy: translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return cs;\n      });\n      /***/\n\n    },\n    /* 19 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Chuvash [cv]\n      //! author : Anatoly Mironov : https://github.com/mirontoli\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var cv = moment.defineLocale('cv', {\n          months: 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),\n          monthsShort: 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),\n          weekdays: 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),\n          weekdaysShort: 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),\n          weekdaysMin: 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD-MM-YYYY',\n            LL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',\n            LLL: 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',\n            LLLL: 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'\n          },\n          calendar: {\n            sameDay: '[Паян] LT [сехетре]',\n            nextDay: '[Ыран] LT [сехетре]',\n            lastDay: '[Ӗнер] LT [сехетре]',\n            nextWeek: '[Ҫитес] dddd LT [сехетре]',\n            lastWeek: '[Иртнӗ] dddd LT [сехетре]',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: function future(output) {\n              var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';\n              return output + affix;\n            },\n            past: '%s каялла',\n            s: 'пӗр-ик ҫеккунт',\n            m: 'пӗр минут',\n            mm: '%d минут',\n            h: 'пӗр сехет',\n            hh: '%d сехет',\n            d: 'пӗр кун',\n            dd: '%d кун',\n            M: 'пӗр уйӑх',\n            MM: '%d уйӑх',\n            y: 'пӗр ҫул',\n            yy: '%d ҫул'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}-мӗш/,\n          ordinal: '%d-мӗш',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return cv;\n      });\n      /***/\n\n    },\n    /* 20 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Welsh [cy]\n      //! author : Robert Allen : https://github.com/robgallen\n      //! author : https://github.com/ryangreaves\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var cy = moment.defineLocale('cy', {\n          months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),\n          monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),\n          weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),\n          weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),\n          weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),\n          weekdaysParseExact: true,\n          // time formats are the same as en-gb\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Heddiw am] LT',\n            nextDay: '[Yfory am] LT',\n            nextWeek: 'dddd [am] LT',\n            lastDay: '[Ddoe am] LT',\n            lastWeek: 'dddd [diwethaf am] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'mewn %s',\n            past: '%s yn ôl',\n            s: 'ychydig eiliadau',\n            m: 'munud',\n            mm: '%d munud',\n            h: 'awr',\n            hh: '%d awr',\n            d: 'diwrnod',\n            dd: '%d diwrnod',\n            M: 'mis',\n            MM: '%d mis',\n            y: 'blwyddyn',\n            yy: '%d flynedd'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,\n          // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh\n          ordinal: function ordinal(number) {\n            var b = number,\n                output = '',\n                lookup = ['', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed\n            'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed\n            ];\n\n            if (b > 20) {\n              if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {\n                output = 'fed'; // not 30ain, 70ain or 90ain\n              } else {\n                output = 'ain';\n              }\n            } else if (b > 0) {\n              output = lookup[b];\n            }\n\n            return number + output;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return cy;\n      });\n      /***/\n\n    },\n    /* 21 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Danish [da]\n      //! author : Ulrik Nielsen : https://github.com/mrbase\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var da = moment.defineLocale('da', {\n          months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),\n          monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),\n          weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),\n          weekdaysShort: 'søn_man_tir_ons_tor_fre_lør'.split('_'),\n          weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY HH:mm',\n            LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'\n          },\n          calendar: {\n            sameDay: '[i dag kl.] LT',\n            nextDay: '[i morgen kl.] LT',\n            nextWeek: 'på dddd [kl.] LT',\n            lastDay: '[i går kl.] LT',\n            lastWeek: '[i] dddd[s kl.] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'om %s',\n            past: '%s siden',\n            s: 'få sekunder',\n            m: 'et minut',\n            mm: '%d minutter',\n            h: 'en time',\n            hh: '%d timer',\n            d: 'en dag',\n            dd: '%d dage',\n            M: 'en måned',\n            MM: '%d måneder',\n            y: 'et år',\n            yy: '%d år'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return da;\n      });\n      /***/\n\n    },\n    /* 22 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : German (Austria) [de-at]\n      //! author : lluchs : https://github.com/lluchs\n      //! author: Menelion Elensúle: https://github.com/Oire\n      //! author : Martin Groller : https://github.com/MadMG\n      //! author : Mikolaj Dadela : https://github.com/mik01aj\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function processRelativeTime(number, withoutSuffix, key, isFuture) {\n          var format = {\n            'm': ['eine Minute', 'einer Minute'],\n            'h': ['eine Stunde', 'einer Stunde'],\n            'd': ['ein Tag', 'einem Tag'],\n            'dd': [number + ' Tage', number + ' Tagen'],\n            'M': ['ein Monat', 'einem Monat'],\n            'MM': [number + ' Monate', number + ' Monaten'],\n            'y': ['ein Jahr', 'einem Jahr'],\n            'yy': [number + ' Jahre', number + ' Jahren']\n          };\n          return withoutSuffix ? format[key][0] : format[key][1];\n        }\n\n        var deAt = moment.defineLocale('de-at', {\n          months: 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),\n          monthsShort: 'Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),\n          weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),\n          weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY HH:mm',\n            LLLL: 'dddd, D. MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[heute um] LT [Uhr]',\n            sameElse: 'L',\n            nextDay: '[morgen um] LT [Uhr]',\n            nextWeek: 'dddd [um] LT [Uhr]',\n            lastDay: '[gestern um] LT [Uhr]',\n            lastWeek: '[letzten] dddd [um] LT [Uhr]'\n          },\n          relativeTime: {\n            future: 'in %s',\n            past: 'vor %s',\n            s: 'ein paar Sekunden',\n            m: processRelativeTime,\n            mm: '%d Minuten',\n            h: processRelativeTime,\n            hh: '%d Stunden',\n            d: processRelativeTime,\n            dd: processRelativeTime,\n            M: processRelativeTime,\n            MM: processRelativeTime,\n            y: processRelativeTime,\n            yy: processRelativeTime\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return deAt;\n      });\n      /***/\n\n    },\n    /* 23 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : German (Switzerland) [de-ch]\n      //! author : sschueller : https://github.com/sschueller\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict'; // based on: https://www.bk.admin.ch/dokumentation/sprachen/04915/05016/index.html?lang=de#\n\n        function processRelativeTime(number, withoutSuffix, key, isFuture) {\n          var format = {\n            'm': ['eine Minute', 'einer Minute'],\n            'h': ['eine Stunde', 'einer Stunde'],\n            'd': ['ein Tag', 'einem Tag'],\n            'dd': [number + ' Tage', number + ' Tagen'],\n            'M': ['ein Monat', 'einem Monat'],\n            'MM': [number + ' Monate', number + ' Monaten'],\n            'y': ['ein Jahr', 'einem Jahr'],\n            'yy': [number + ' Jahre', number + ' Jahren']\n          };\n          return withoutSuffix ? format[key][0] : format[key][1];\n        }\n\n        var deCh = moment.defineLocale('de-ch', {\n          months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),\n          monthsShort: 'Jan._Febr._März_April_Mai_Juni_Juli_Aug._Sept._Okt._Nov._Dez.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),\n          weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),\n          weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH.mm',\n            LTS: 'HH.mm.ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY HH.mm',\n            LLLL: 'dddd, D. MMMM YYYY HH.mm'\n          },\n          calendar: {\n            sameDay: '[heute um] LT [Uhr]',\n            sameElse: 'L',\n            nextDay: '[morgen um] LT [Uhr]',\n            nextWeek: 'dddd [um] LT [Uhr]',\n            lastDay: '[gestern um] LT [Uhr]',\n            lastWeek: '[letzten] dddd [um] LT [Uhr]'\n          },\n          relativeTime: {\n            future: 'in %s',\n            past: 'vor %s',\n            s: 'ein paar Sekunden',\n            m: processRelativeTime,\n            mm: '%d Minuten',\n            h: processRelativeTime,\n            hh: '%d Stunden',\n            d: processRelativeTime,\n            dd: processRelativeTime,\n            M: processRelativeTime,\n            MM: processRelativeTime,\n            y: processRelativeTime,\n            yy: processRelativeTime\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return deCh;\n      });\n      /***/\n\n    },\n    /* 24 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : German [de]\n      //! author : lluchs : https://github.com/lluchs\n      //! author: Menelion Elensúle: https://github.com/Oire\n      //! author : Mikolaj Dadela : https://github.com/mik01aj\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function processRelativeTime(number, withoutSuffix, key, isFuture) {\n          var format = {\n            'm': ['eine Minute', 'einer Minute'],\n            'h': ['eine Stunde', 'einer Stunde'],\n            'd': ['ein Tag', 'einem Tag'],\n            'dd': [number + ' Tage', number + ' Tagen'],\n            'M': ['ein Monat', 'einem Monat'],\n            'MM': [number + ' Monate', number + ' Monaten'],\n            'y': ['ein Jahr', 'einem Jahr'],\n            'yy': [number + ' Jahre', number + ' Jahren']\n          };\n          return withoutSuffix ? format[key][0] : format[key][1];\n        }\n\n        var de = moment.defineLocale('de', {\n          months: 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),\n          monthsShort: 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),\n          weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),\n          weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY HH:mm',\n            LLLL: 'dddd, D. MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[heute um] LT [Uhr]',\n            sameElse: 'L',\n            nextDay: '[morgen um] LT [Uhr]',\n            nextWeek: 'dddd [um] LT [Uhr]',\n            lastDay: '[gestern um] LT [Uhr]',\n            lastWeek: '[letzten] dddd [um] LT [Uhr]'\n          },\n          relativeTime: {\n            future: 'in %s',\n            past: 'vor %s',\n            s: 'ein paar Sekunden',\n            m: processRelativeTime,\n            mm: '%d Minuten',\n            h: processRelativeTime,\n            hh: '%d Stunden',\n            d: processRelativeTime,\n            dd: processRelativeTime,\n            M: processRelativeTime,\n            MM: processRelativeTime,\n            y: processRelativeTime,\n            yy: processRelativeTime\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return de;\n      });\n      /***/\n\n    },\n    /* 25 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Maldivian [dv]\n      //! author : Jawish Hameed : https://github.com/jawish\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var months = ['ޖެނުއަރީ', 'ފެބްރުއަރީ', 'މާރިޗު', 'އޭޕްރީލު', 'މޭ', 'ޖޫން', 'ޖުލައި', 'އޯގަސްޓު', 'ސެޕްޓެމްބަރު', 'އޮކްޓޯބަރު', 'ނޮވެމްބަރު', 'ޑިސެމްބަރު'];\n        var weekdays = ['އާދިއްތަ', 'ހޯމަ', 'އަންގާރަ', 'ބުދަ', 'ބުރާސްފަތި', 'ހުކުރު', 'ހޮނިހިރު'];\n        var dv = moment.defineLocale('dv', {\n          months: months,\n          monthsShort: months,\n          weekdays: weekdays,\n          weekdaysShort: weekdays,\n          weekdaysMin: 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'D/M/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          meridiemParse: /މކ|މފ/,\n          isPM: function isPM(input) {\n            return 'މފ' === input;\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 12) {\n              return 'މކ';\n            } else {\n              return 'މފ';\n            }\n          },\n          calendar: {\n            sameDay: '[މިއަދު] LT',\n            nextDay: '[މާދަމާ] LT',\n            nextWeek: 'dddd LT',\n            lastDay: '[އިއްޔެ] LT',\n            lastWeek: '[ފާއިތުވި] dddd LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'ތެރޭގައި %s',\n            past: 'ކުރިން %s',\n            s: 'ސިކުންތުކޮޅެއް',\n            m: 'މިނިޓެއް',\n            mm: 'މިނިޓު %d',\n            h: 'ގަޑިއިރެއް',\n            hh: 'ގަޑިއިރު %d',\n            d: 'ދުވަހެއް',\n            dd: 'ދުވަސް %d',\n            M: 'މަހެއް',\n            MM: 'މަސް %d',\n            y: 'އަހަރެއް',\n            yy: 'އަހަރު %d'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/،/g, ',');\n          },\n          postformat: function postformat(string) {\n            return string.replace(/,/g, '،');\n          },\n          week: {\n            dow: 7,\n            // Sunday is the first day of the week.\n            doy: 12 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return dv;\n      });\n      /***/\n\n    },\n    /* 26 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Greek [el]\n      //! author : Aggelos Karalias : https://github.com/mehiel\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function isFunction(input) {\n          return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n        }\n\n        var el = moment.defineLocale('el', {\n          monthsNominativeEl: 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),\n          monthsGenitiveEl: 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),\n          months: function months(momentToFormat, format) {\n            if (!momentToFormat) {\n              return this._monthsNominativeEl;\n            } else if (/D/.test(format.substring(0, format.indexOf('MMMM')))) {\n              // if there is a day number before 'MMMM'\n              return this._monthsGenitiveEl[momentToFormat.month()];\n            } else {\n              return this._monthsNominativeEl[momentToFormat.month()];\n            }\n          },\n          monthsShort: 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),\n          weekdays: 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),\n          weekdaysShort: 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),\n          weekdaysMin: 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours > 11) {\n              return isLower ? 'μμ' : 'ΜΜ';\n            } else {\n              return isLower ? 'πμ' : 'ΠΜ';\n            }\n          },\n          isPM: function isPM(input) {\n            return (input + '').toLowerCase()[0] === 'μ';\n          },\n          meridiemParse: /[ΠΜ]\\.?Μ?\\.?/i,\n          longDateFormat: {\n            LT: 'h:mm A',\n            LTS: 'h:mm:ss A',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY h:mm A',\n            LLLL: 'dddd, D MMMM YYYY h:mm A'\n          },\n          calendarEl: {\n            sameDay: '[Σήμερα {}] LT',\n            nextDay: '[Αύριο {}] LT',\n            nextWeek: 'dddd [{}] LT',\n            lastDay: '[Χθες {}] LT',\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 6:\n                  return '[το προηγούμενο] dddd [{}] LT';\n\n                default:\n                  return '[την προηγούμενη] dddd [{}] LT';\n              }\n            },\n            sameElse: 'L'\n          },\n          calendar: function calendar(key, mom) {\n            var output = this._calendarEl[key],\n                hours = mom && mom.hours();\n\n            if (isFunction(output)) {\n              output = output.apply(mom);\n            }\n\n            return output.replace('{}', hours % 12 === 1 ? 'στη' : 'στις');\n          },\n          relativeTime: {\n            future: 'σε %s',\n            past: '%s πριν',\n            s: 'λίγα δευτερόλεπτα',\n            m: 'ένα λεπτό',\n            mm: '%d λεπτά',\n            h: 'μία ώρα',\n            hh: '%d ώρες',\n            d: 'μία μέρα',\n            dd: '%d μέρες',\n            M: 'ένας μήνας',\n            MM: '%d μήνες',\n            y: 'ένας χρόνος',\n            yy: '%d χρόνια'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}η/,\n          ordinal: '%dη',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4st is the first week of the year.\n\n          }\n        });\n        return el;\n      });\n      /***/\n\n    },\n    /* 27 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : English (Australia) [en-au]\n      //! author : Jared Morse : https://github.com/jarcoal\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var enAu = moment.defineLocale('en-au', {\n          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n          longDateFormat: {\n            LT: 'h:mm A',\n            LTS: 'h:mm:ss A',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY h:mm A',\n            LLLL: 'dddd, D MMMM YYYY h:mm A'\n          },\n          calendar: {\n            sameDay: '[Today at] LT',\n            nextDay: '[Tomorrow at] LT',\n            nextWeek: 'dddd [at] LT',\n            lastDay: '[Yesterday at] LT',\n            lastWeek: '[Last] dddd [at] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'in %s',\n            past: '%s ago',\n            s: 'a few seconds',\n            m: 'a minute',\n            mm: '%d minutes',\n            h: 'an hour',\n            hh: '%d hours',\n            d: 'a day',\n            dd: '%d days',\n            M: 'a month',\n            MM: '%d months',\n            y: 'a year',\n            yy: '%d years'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(st|nd|rd|th)/,\n          ordinal: function ordinal(number) {\n            var b = number % 10,\n                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n            return number + output;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return enAu;\n      });\n      /***/\n\n    },\n    /* 28 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : English (Canada) [en-ca]\n      //! author : Jonathan Abourbih : https://github.com/jonbca\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var enCa = moment.defineLocale('en-ca', {\n          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n          longDateFormat: {\n            LT: 'h:mm A',\n            LTS: 'h:mm:ss A',\n            L: 'YYYY-MM-DD',\n            LL: 'MMMM D, YYYY',\n            LLL: 'MMMM D, YYYY h:mm A',\n            LLLL: 'dddd, MMMM D, YYYY h:mm A'\n          },\n          calendar: {\n            sameDay: '[Today at] LT',\n            nextDay: '[Tomorrow at] LT',\n            nextWeek: 'dddd [at] LT',\n            lastDay: '[Yesterday at] LT',\n            lastWeek: '[Last] dddd [at] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'in %s',\n            past: '%s ago',\n            s: 'a few seconds',\n            m: 'a minute',\n            mm: '%d minutes',\n            h: 'an hour',\n            hh: '%d hours',\n            d: 'a day',\n            dd: '%d days',\n            M: 'a month',\n            MM: '%d months',\n            y: 'a year',\n            yy: '%d years'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(st|nd|rd|th)/,\n          ordinal: function ordinal(number) {\n            var b = number % 10,\n                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n            return number + output;\n          }\n        });\n        return enCa;\n      });\n      /***/\n\n    },\n    /* 29 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : English (United Kingdom) [en-gb]\n      //! author : Chris Gedrim : https://github.com/chrisgedrim\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var enGb = moment.defineLocale('en-gb', {\n          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Today at] LT',\n            nextDay: '[Tomorrow at] LT',\n            nextWeek: 'dddd [at] LT',\n            lastDay: '[Yesterday at] LT',\n            lastWeek: '[Last] dddd [at] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'in %s',\n            past: '%s ago',\n            s: 'a few seconds',\n            m: 'a minute',\n            mm: '%d minutes',\n            h: 'an hour',\n            hh: '%d hours',\n            d: 'a day',\n            dd: '%d days',\n            M: 'a month',\n            MM: '%d months',\n            y: 'a year',\n            yy: '%d years'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(st|nd|rd|th)/,\n          ordinal: function ordinal(number) {\n            var b = number % 10,\n                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n            return number + output;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return enGb;\n      });\n      /***/\n\n    },\n    /* 30 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : English (Ireland) [en-ie]\n      //! author : Chris Cartlidge : https://github.com/chriscartlidge\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var enIe = moment.defineLocale('en-ie', {\n          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD-MM-YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Today at] LT',\n            nextDay: '[Tomorrow at] LT',\n            nextWeek: 'dddd [at] LT',\n            lastDay: '[Yesterday at] LT',\n            lastWeek: '[Last] dddd [at] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'in %s',\n            past: '%s ago',\n            s: 'a few seconds',\n            m: 'a minute',\n            mm: '%d minutes',\n            h: 'an hour',\n            hh: '%d hours',\n            d: 'a day',\n            dd: '%d days',\n            M: 'a month',\n            MM: '%d months',\n            y: 'a year',\n            yy: '%d years'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(st|nd|rd|th)/,\n          ordinal: function ordinal(number) {\n            var b = number % 10,\n                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n            return number + output;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return enIe;\n      });\n      /***/\n\n    },\n    /* 31 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : English (New Zealand) [en-nz]\n      //! author : Luke McGregor : https://github.com/lukemcgregor\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var enNz = moment.defineLocale('en-nz', {\n          months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),\n          monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),\n          weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),\n          weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),\n          weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),\n          longDateFormat: {\n            LT: 'h:mm A',\n            LTS: 'h:mm:ss A',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY h:mm A',\n            LLLL: 'dddd, D MMMM YYYY h:mm A'\n          },\n          calendar: {\n            sameDay: '[Today at] LT',\n            nextDay: '[Tomorrow at] LT',\n            nextWeek: 'dddd [at] LT',\n            lastDay: '[Yesterday at] LT',\n            lastWeek: '[Last] dddd [at] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'in %s',\n            past: '%s ago',\n            s: 'a few seconds',\n            m: 'a minute',\n            mm: '%d minutes',\n            h: 'an hour',\n            hh: '%d hours',\n            d: 'a day',\n            dd: '%d days',\n            M: 'a month',\n            MM: '%d months',\n            y: 'a year',\n            yy: '%d years'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(st|nd|rd|th)/,\n          ordinal: function ordinal(number) {\n            var b = number % 10,\n                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n            return number + output;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return enNz;\n      });\n      /***/\n\n    },\n    /* 32 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Esperanto [eo]\n      //! author : Colin Dean : https://github.com/colindean\n      //! author : Mia Nordentoft Imperatori : https://github.com/miestasmia\n      //! comment : miestasmia corrected the translation by colindean\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var eo = moment.defineLocale('eo', {\n          months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),\n          monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),\n          weekdays: 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),\n          weekdaysShort: 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),\n          weekdaysMin: 'di_lu_ma_me_ĵa_ve_sa'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'YYYY-MM-DD',\n            LL: 'D[-a de] MMMM, YYYY',\n            LLL: 'D[-a de] MMMM, YYYY HH:mm',\n            LLLL: 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'\n          },\n          meridiemParse: /[ap]\\.t\\.m/i,\n          isPM: function isPM(input) {\n            return input.charAt(0).toLowerCase() === 'p';\n          },\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours > 11) {\n              return isLower ? 'p.t.m.' : 'P.T.M.';\n            } else {\n              return isLower ? 'a.t.m.' : 'A.T.M.';\n            }\n          },\n          calendar: {\n            sameDay: '[Hodiaŭ je] LT',\n            nextDay: '[Morgaŭ je] LT',\n            nextWeek: 'dddd [je] LT',\n            lastDay: '[Hieraŭ je] LT',\n            lastWeek: '[pasinta] dddd [je] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'post %s',\n            past: 'antaŭ %s',\n            s: 'sekundoj',\n            m: 'minuto',\n            mm: '%d minutoj',\n            h: 'horo',\n            hh: '%d horoj',\n            d: 'tago',\n            //ne 'diurno', ĉar estas uzita por proksimumo\n            dd: '%d tagoj',\n            M: 'monato',\n            MM: '%d monatoj',\n            y: 'jaro',\n            yy: '%d jaroj'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}a/,\n          ordinal: '%da',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return eo;\n      });\n      /***/\n\n    },\n    /* 33 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Spanish (Dominican Republic) [es-do]\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');\n\n        var _monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');\n\n        var esDo = moment.defineLocale('es-do', {\n          months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),\n          monthsShort: function monthsShort(m, format) {\n            if (!m) {\n              return monthsShortDot;\n            } else if (/-MMM-/.test(format)) {\n              return _monthsShort[m.month()];\n            } else {\n              return monthsShortDot[m.month()];\n            }\n          },\n          monthsParseExact: true,\n          weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),\n          weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),\n          weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'h:mm A',\n            LTS: 'h:mm:ss A',\n            L: 'DD/MM/YYYY',\n            LL: 'D [de] MMMM [de] YYYY',\n            LLL: 'D [de] MMMM [de] YYYY h:mm A',\n            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A'\n          },\n          calendar: {\n            sameDay: function sameDay() {\n              return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';\n            },\n            nextDay: function nextDay() {\n              return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';\n            },\n            nextWeek: function nextWeek() {\n              return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';\n            },\n            lastDay: function lastDay() {\n              return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';\n            },\n            lastWeek: function lastWeek() {\n              return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'en %s',\n            past: 'hace %s',\n            s: 'unos segundos',\n            m: 'un minuto',\n            mm: '%d minutos',\n            h: 'una hora',\n            hh: '%d horas',\n            d: 'un día',\n            dd: '%d días',\n            M: 'un mes',\n            MM: '%d meses',\n            y: 'un año',\n            yy: '%d años'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}º/,\n          ordinal: '%dº',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return esDo;\n      });\n      /***/\n\n    },\n    /* 34 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Spanish [es]\n      //! author : Julio Napurí : https://github.com/julionc\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');\n\n        var _monthsShort2 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');\n\n        var es = moment.defineLocale('es', {\n          months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),\n          monthsShort: function monthsShort(m, format) {\n            if (!m) {\n              return monthsShortDot;\n            } else if (/-MMM-/.test(format)) {\n              return _monthsShort2[m.month()];\n            } else {\n              return monthsShortDot[m.month()];\n            }\n          },\n          monthsParseExact: true,\n          weekdays: 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),\n          weekdaysShort: 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),\n          weekdaysMin: 'do_lu_ma_mi_ju_vi_sá'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D [de] MMMM [de] YYYY',\n            LLL: 'D [de] MMMM [de] YYYY H:mm',\n            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'\n          },\n          calendar: {\n            sameDay: function sameDay() {\n              return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';\n            },\n            nextDay: function nextDay() {\n              return '[mañana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';\n            },\n            nextWeek: function nextWeek() {\n              return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';\n            },\n            lastDay: function lastDay() {\n              return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';\n            },\n            lastWeek: function lastWeek() {\n              return '[el] dddd [pasado a la' + (this.hours() !== 1 ? 's' : '') + '] LT';\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'en %s',\n            past: 'hace %s',\n            s: 'unos segundos',\n            m: 'un minuto',\n            mm: '%d minutos',\n            h: 'una hora',\n            hh: '%d horas',\n            d: 'un día',\n            dd: '%d días',\n            M: 'un mes',\n            MM: '%d meses',\n            y: 'un año',\n            yy: '%d años'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}º/,\n          ordinal: '%dº',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return es;\n      });\n      /***/\n\n    },\n    /* 35 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Estonian [et]\n      //! author : Henry Kehlmann : https://github.com/madhenry\n      //! improvements : Illimar Tambek : https://github.com/ragulka\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function processRelativeTime(number, withoutSuffix, key, isFuture) {\n          var format = {\n            's': ['mõne sekundi', 'mõni sekund', 'paar sekundit'],\n            'm': ['ühe minuti', 'üks minut'],\n            'mm': [number + ' minuti', number + ' minutit'],\n            'h': ['ühe tunni', 'tund aega', 'üks tund'],\n            'hh': [number + ' tunni', number + ' tundi'],\n            'd': ['ühe päeva', 'üks päev'],\n            'M': ['kuu aja', 'kuu aega', 'üks kuu'],\n            'MM': [number + ' kuu', number + ' kuud'],\n            'y': ['ühe aasta', 'aasta', 'üks aasta'],\n            'yy': [number + ' aasta', number + ' aastat']\n          };\n\n          if (withoutSuffix) {\n            return format[key][2] ? format[key][2] : format[key][1];\n          }\n\n          return isFuture ? format[key][0] : format[key][1];\n        }\n\n        var et = moment.defineLocale('et', {\n          months: 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),\n          monthsShort: 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),\n          weekdays: 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),\n          weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),\n          weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY H:mm',\n            LLLL: 'dddd, D. MMMM YYYY H:mm'\n          },\n          calendar: {\n            sameDay: '[Täna,] LT',\n            nextDay: '[Homme,] LT',\n            nextWeek: '[Järgmine] dddd LT',\n            lastDay: '[Eile,] LT',\n            lastWeek: '[Eelmine] dddd LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s pärast',\n            past: '%s tagasi',\n            s: processRelativeTime,\n            m: processRelativeTime,\n            mm: processRelativeTime,\n            h: processRelativeTime,\n            hh: processRelativeTime,\n            d: processRelativeTime,\n            dd: '%d päeva',\n            M: processRelativeTime,\n            MM: processRelativeTime,\n            y: processRelativeTime,\n            yy: processRelativeTime\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return et;\n      });\n      /***/\n\n    },\n    /* 36 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Basque [eu]\n      //! author : Eneko Illarramendi : https://github.com/eillarra\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var eu = moment.defineLocale('eu', {\n          months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),\n          monthsShort: 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),\n          weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),\n          weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'YYYY-MM-DD',\n            LL: 'YYYY[ko] MMMM[ren] D[a]',\n            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',\n            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',\n            l: 'YYYY-M-D',\n            ll: 'YYYY[ko] MMM D[a]',\n            lll: 'YYYY[ko] MMM D[a] HH:mm',\n            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm'\n          },\n          calendar: {\n            sameDay: '[gaur] LT[etan]',\n            nextDay: '[bihar] LT[etan]',\n            nextWeek: 'dddd LT[etan]',\n            lastDay: '[atzo] LT[etan]',\n            lastWeek: '[aurreko] dddd LT[etan]',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s barru',\n            past: 'duela %s',\n            s: 'segundo batzuk',\n            m: 'minutu bat',\n            mm: '%d minutu',\n            h: 'ordu bat',\n            hh: '%d ordu',\n            d: 'egun bat',\n            dd: '%d egun',\n            M: 'hilabete bat',\n            MM: '%d hilabete',\n            y: 'urte bat',\n            yy: '%d urte'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return eu;\n      });\n      /***/\n\n    },\n    /* 37 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Persian [fa]\n      //! author : Ebrahim Byagowi : https://github.com/ebraminio\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '۱',\n          '2': '۲',\n          '3': '۳',\n          '4': '۴',\n          '5': '۵',\n          '6': '۶',\n          '7': '۷',\n          '8': '۸',\n          '9': '۹',\n          '0': '۰'\n        };\n        var numberMap = {\n          '۱': '1',\n          '۲': '2',\n          '۳': '3',\n          '۴': '4',\n          '۵': '5',\n          '۶': '6',\n          '۷': '7',\n          '۸': '8',\n          '۹': '9',\n          '۰': '0'\n        };\n        var fa = moment.defineLocale('fa', {\n          months: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),\n          monthsShort: 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),\n          weekdays: \"\\u06CC\\u06A9\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062F\\u0648\\u0634\\u0646\\u0628\\u0647_\\u0633\\u0647\\u200C\\u0634\\u0646\\u0628\\u0647_\\u0686\\u0647\\u0627\\u0631\\u0634\\u0646\\u0628\\u0647_\\u067E\\u0646\\u062C\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062C\\u0645\\u0639\\u0647_\\u0634\\u0646\\u0628\\u0647\".split('_'),\n          weekdaysShort: \"\\u06CC\\u06A9\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062F\\u0648\\u0634\\u0646\\u0628\\u0647_\\u0633\\u0647\\u200C\\u0634\\u0646\\u0628\\u0647_\\u0686\\u0647\\u0627\\u0631\\u0634\\u0646\\u0628\\u0647_\\u067E\\u0646\\u062C\\u200C\\u0634\\u0646\\u0628\\u0647_\\u062C\\u0645\\u0639\\u0647_\\u0634\\u0646\\u0628\\u0647\".split('_'),\n          weekdaysMin: 'ی_د_س_چ_پ_ج_ش'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          meridiemParse: /قبل از ظهر|بعد از ظهر/,\n          isPM: function isPM(input) {\n            return /بعد از ظهر/.test(input);\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 12) {\n              return 'قبل از ظهر';\n            } else {\n              return 'بعد از ظهر';\n            }\n          },\n          calendar: {\n            sameDay: '[امروز ساعت] LT',\n            nextDay: '[فردا ساعت] LT',\n            nextWeek: 'dddd [ساعت] LT',\n            lastDay: '[دیروز ساعت] LT',\n            lastWeek: 'dddd [پیش] [ساعت] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'در %s',\n            past: '%s پیش',\n            s: 'چند ثانیه',\n            m: 'یک دقیقه',\n            mm: '%d دقیقه',\n            h: 'یک ساعت',\n            hh: '%d ساعت',\n            d: 'یک روز',\n            dd: '%d روز',\n            M: 'یک ماه',\n            MM: '%d ماه',\n            y: 'یک سال',\n            yy: '%d سال'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/[۰-۹]/g, function (match) {\n              return numberMap[match];\n            }).replace(/،/g, ',');\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            }).replace(/,/g, '،');\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}م/,\n          ordinal: '%dم',\n          week: {\n            dow: 6,\n            // Saturday is the first day of the week.\n            doy: 12 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return fa;\n      });\n      /***/\n\n    },\n    /* 38 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Finnish [fi]\n      //! author : Tarmo Aidantausta : https://github.com/bleadof\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' ');\n        var numbersFuture = ['nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden', numbersPast[7], numbersPast[8], numbersPast[9]];\n\n        function translate(number, withoutSuffix, key, isFuture) {\n          var result = '';\n\n          switch (key) {\n            case 's':\n              return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';\n\n            case 'm':\n              return isFuture ? 'minuutin' : 'minuutti';\n\n            case 'mm':\n              result = isFuture ? 'minuutin' : 'minuuttia';\n              break;\n\n            case 'h':\n              return isFuture ? 'tunnin' : 'tunti';\n\n            case 'hh':\n              result = isFuture ? 'tunnin' : 'tuntia';\n              break;\n\n            case 'd':\n              return isFuture ? 'päivän' : 'päivä';\n\n            case 'dd':\n              result = isFuture ? 'päivän' : 'päivää';\n              break;\n\n            case 'M':\n              return isFuture ? 'kuukauden' : 'kuukausi';\n\n            case 'MM':\n              result = isFuture ? 'kuukauden' : 'kuukautta';\n              break;\n\n            case 'y':\n              return isFuture ? 'vuoden' : 'vuosi';\n\n            case 'yy':\n              result = isFuture ? 'vuoden' : 'vuotta';\n              break;\n          }\n\n          result = verbalNumber(number, isFuture) + ' ' + result;\n          return result;\n        }\n\n        function verbalNumber(number, isFuture) {\n          return number < 10 ? isFuture ? numbersFuture[number] : numbersPast[number] : number;\n        }\n\n        var fi = moment.defineLocale('fi', {\n          months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),\n          monthsShort: 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),\n          weekdays: 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),\n          weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),\n          weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),\n          longDateFormat: {\n            LT: 'HH.mm',\n            LTS: 'HH.mm.ss',\n            L: 'DD.MM.YYYY',\n            LL: 'Do MMMM[ta] YYYY',\n            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',\n            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',\n            l: 'D.M.YYYY',\n            ll: 'Do MMM YYYY',\n            lll: 'Do MMM YYYY, [klo] HH.mm',\n            llll: 'ddd, Do MMM YYYY, [klo] HH.mm'\n          },\n          calendar: {\n            sameDay: '[tänään] [klo] LT',\n            nextDay: '[huomenna] [klo] LT',\n            nextWeek: 'dddd [klo] LT',\n            lastDay: '[eilen] [klo] LT',\n            lastWeek: '[viime] dddd[na] [klo] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s päästä',\n            past: '%s sitten',\n            s: translate,\n            m: translate,\n            mm: translate,\n            h: translate,\n            hh: translate,\n            d: translate,\n            dd: translate,\n            M: translate,\n            MM: translate,\n            y: translate,\n            yy: translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return fi;\n      });\n      /***/\n\n    },\n    /* 39 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Faroese [fo]\n      //! author : Ragnar Johannesen : https://github.com/ragnar123\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var fo = moment.defineLocale('fo', {\n          months: 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),\n          monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),\n          weekdays: 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),\n          weekdaysShort: 'sun_mán_týs_mik_hós_frí_ley'.split('_'),\n          weekdaysMin: 'su_má_tý_mi_hó_fr_le'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D. MMMM, YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Í dag kl.] LT',\n            nextDay: '[Í morgin kl.] LT',\n            nextWeek: 'dddd [kl.] LT',\n            lastDay: '[Í gjár kl.] LT',\n            lastWeek: '[síðstu] dddd [kl] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'um %s',\n            past: '%s síðani',\n            s: 'fá sekund',\n            m: 'ein minutt',\n            mm: '%d minuttir',\n            h: 'ein tími',\n            hh: '%d tímar',\n            d: 'ein dagur',\n            dd: '%d dagar',\n            M: 'ein mánaði',\n            MM: '%d mánaðir',\n            y: 'eitt ár',\n            yy: '%d ár'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return fo;\n      });\n      /***/\n\n    },\n    /* 40 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : French (Canada) [fr-ca]\n      //! author : Jonathan Abourbih : https://github.com/jonbca\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var frCa = moment.defineLocale('fr-ca', {\n          months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),\n          monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),\n          weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),\n          weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'YYYY-MM-DD',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Aujourd’hui à] LT',\n            nextDay: '[Demain à] LT',\n            nextWeek: 'dddd [à] LT',\n            lastDay: '[Hier à] LT',\n            lastWeek: 'dddd [dernier à] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'dans %s',\n            past: 'il y a %s',\n            s: 'quelques secondes',\n            m: 'une minute',\n            mm: '%d minutes',\n            h: 'une heure',\n            hh: '%d heures',\n            d: 'un jour',\n            dd: '%d jours',\n            M: 'un mois',\n            MM: '%d mois',\n            y: 'un an',\n            yy: '%d ans'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(er|e)/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              // Words with masculine grammatical gender: mois, trimestre, jour\n              default:\n              case 'M':\n              case 'Q':\n              case 'D':\n              case 'DDD':\n              case 'd':\n                return number + (number === 1 ? 'er' : 'e');\n              // Words with feminine grammatical gender: semaine\n\n              case 'w':\n              case 'W':\n                return number + (number === 1 ? 're' : 'e');\n            }\n          }\n        });\n        return frCa;\n      });\n      /***/\n\n    },\n    /* 41 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : French (Switzerland) [fr-ch]\n      //! author : Gaspard Bucher : https://github.com/gaspard\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var frCh = moment.defineLocale('fr-ch', {\n          months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),\n          monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),\n          weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),\n          weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Aujourd’hui à] LT',\n            nextDay: '[Demain à] LT',\n            nextWeek: 'dddd [à] LT',\n            lastDay: '[Hier à] LT',\n            lastWeek: 'dddd [dernier à] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'dans %s',\n            past: 'il y a %s',\n            s: 'quelques secondes',\n            m: 'une minute',\n            mm: '%d minutes',\n            h: 'une heure',\n            hh: '%d heures',\n            d: 'un jour',\n            dd: '%d jours',\n            M: 'un mois',\n            MM: '%d mois',\n            y: 'un an',\n            yy: '%d ans'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(er|e)/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              // Words with masculine grammatical gender: mois, trimestre, jour\n              default:\n              case 'M':\n              case 'Q':\n              case 'D':\n              case 'DDD':\n              case 'd':\n                return number + (number === 1 ? 'er' : 'e');\n              // Words with feminine grammatical gender: semaine\n\n              case 'w':\n              case 'W':\n                return number + (number === 1 ? 're' : 'e');\n            }\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return frCh;\n      });\n      /***/\n\n    },\n    /* 42 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : French [fr]\n      //! author : John Fischer : https://github.com/jfroffice\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var fr = moment.defineLocale('fr', {\n          months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),\n          monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),\n          weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),\n          weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Aujourd’hui à] LT',\n            nextDay: '[Demain à] LT',\n            nextWeek: 'dddd [à] LT',\n            lastDay: '[Hier à] LT',\n            lastWeek: 'dddd [dernier à] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'dans %s',\n            past: 'il y a %s',\n            s: 'quelques secondes',\n            m: 'une minute',\n            mm: '%d minutes',\n            h: 'une heure',\n            hh: '%d heures',\n            d: 'un jour',\n            dd: '%d jours',\n            M: 'un mois',\n            MM: '%d mois',\n            y: 'un an',\n            yy: '%d ans'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(er|)/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              // TODO: Return 'e' when day of month > 1. Move this case inside\n              // block for masculine words below.\n              // See https://github.com/moment/moment/issues/3375\n              case 'D':\n                return number + (number === 1 ? 'er' : '');\n              // Words with masculine grammatical gender: mois, trimestre, jour\n\n              default:\n              case 'M':\n              case 'Q':\n              case 'DDD':\n              case 'd':\n                return number + (number === 1 ? 'er' : 'e');\n              // Words with feminine grammatical gender: semaine\n\n              case 'w':\n              case 'W':\n                return number + (number === 1 ? 're' : 'e');\n            }\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return fr;\n      });\n      /***/\n\n    },\n    /* 43 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Frisian [fy]\n      //! author : Robin van der Vliet : https://github.com/robin0van0der0v\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');\n        var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');\n        var fy = moment.defineLocale('fy', {\n          months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),\n          monthsShort: function monthsShort(m, format) {\n            if (!m) {\n              return monthsShortWithDots;\n            } else if (/-MMM-/.test(format)) {\n              return monthsShortWithoutDots[m.month()];\n            } else {\n              return monthsShortWithDots[m.month()];\n            }\n          },\n          monthsParseExact: true,\n          weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),\n          weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),\n          weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD-MM-YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[hjoed om] LT',\n            nextDay: '[moarn om] LT',\n            nextWeek: 'dddd [om] LT',\n            lastDay: '[juster om] LT',\n            lastWeek: '[ôfrûne] dddd [om] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'oer %s',\n            past: '%s lyn',\n            s: 'in pear sekonden',\n            m: 'ien minút',\n            mm: '%d minuten',\n            h: 'ien oere',\n            hh: '%d oeren',\n            d: 'ien dei',\n            dd: '%d dagen',\n            M: 'ien moanne',\n            MM: '%d moannen',\n            y: 'ien jier',\n            yy: '%d jierren'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(ste|de)/,\n          ordinal: function ordinal(number) {\n            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return fy;\n      });\n      /***/\n\n    },\n    /* 44 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Scottish Gaelic [gd]\n      //! author : Jon Ashdown : https://github.com/jonashdown\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var months = ['Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'];\n        var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];\n        var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];\n        var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];\n        var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];\n        var gd = moment.defineLocale('gd', {\n          months: months,\n          monthsShort: monthsShort,\n          monthsParseExact: true,\n          weekdays: weekdays,\n          weekdaysShort: weekdaysShort,\n          weekdaysMin: weekdaysMin,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[An-diugh aig] LT',\n            nextDay: '[A-màireach aig] LT',\n            nextWeek: 'dddd [aig] LT',\n            lastDay: '[An-dè aig] LT',\n            lastWeek: 'dddd [seo chaidh] [aig] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'ann an %s',\n            past: 'bho chionn %s',\n            s: 'beagan diogan',\n            m: 'mionaid',\n            mm: '%d mionaidean',\n            h: 'uair',\n            hh: '%d uairean',\n            d: 'latha',\n            dd: '%d latha',\n            M: 'mìos',\n            MM: '%d mìosan',\n            y: 'bliadhna',\n            yy: '%d bliadhna'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(d|na|mh)/,\n          ordinal: function ordinal(number) {\n            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';\n            return number + output;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return gd;\n      });\n      /***/\n\n    },\n    /* 45 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Galician [gl]\n      //! author : Juan G. Hurtado : https://github.com/juanghurtado\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var gl = moment.defineLocale('gl', {\n          months: 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),\n          monthsShort: 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),\n          weekdaysShort: 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),\n          weekdaysMin: 'do_lu_ma_mé_xo_ve_sá'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D [de] MMMM [de] YYYY',\n            LLL: 'D [de] MMMM [de] YYYY H:mm',\n            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm'\n          },\n          calendar: {\n            sameDay: function sameDay() {\n              return '[hoxe ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';\n            },\n            nextDay: function nextDay() {\n              return '[mañá ' + (this.hours() !== 1 ? 'ás' : 'á') + '] LT';\n            },\n            nextWeek: function nextWeek() {\n              return 'dddd [' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';\n            },\n            lastDay: function lastDay() {\n              return '[onte ' + (this.hours() !== 1 ? 'á' : 'a') + '] LT';\n            },\n            lastWeek: function lastWeek() {\n              return '[o] dddd [pasado ' + (this.hours() !== 1 ? 'ás' : 'a') + '] LT';\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: function future(str) {\n              if (str.indexOf('un') === 0) {\n                return 'n' + str;\n              }\n\n              return 'en ' + str;\n            },\n            past: 'hai %s',\n            s: 'uns segundos',\n            m: 'un minuto',\n            mm: '%d minutos',\n            h: 'unha hora',\n            hh: '%d horas',\n            d: 'un día',\n            dd: '%d días',\n            M: 'un mes',\n            MM: '%d meses',\n            y: 'un ano',\n            yy: '%d anos'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}º/,\n          ordinal: '%dº',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return gl;\n      });\n      /***/\n\n    },\n    /* 46 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Konkani Latin script [gom-latn]\n      //! author : The Discoverer : https://github.com/WikiDiscoverer\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function processRelativeTime(number, withoutSuffix, key, isFuture) {\n          var format = {\n            's': ['thodde secondanim', 'thodde second'],\n            'm': ['eka mintan', 'ek minute'],\n            'mm': [number + ' mintanim', number + ' mintam'],\n            'h': ['eka horan', 'ek hor'],\n            'hh': [number + ' horanim', number + ' hor'],\n            'd': ['eka disan', 'ek dis'],\n            'dd': [number + ' disanim', number + ' dis'],\n            'M': ['eka mhoinean', 'ek mhoino'],\n            'MM': [number + ' mhoineanim', number + ' mhoine'],\n            'y': ['eka vorsan', 'ek voros'],\n            'yy': [number + ' vorsanim', number + ' vorsam']\n          };\n          return withoutSuffix ? format[key][0] : format[key][1];\n        }\n\n        var gomLatn = moment.defineLocale('gom-latn', {\n          months: 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),\n          monthsShort: 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\\'var'.split('_'),\n          weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),\n          weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'A h:mm [vazta]',\n            LTS: 'A h:mm:ss [vazta]',\n            L: 'DD-MM-YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY A h:mm [vazta]',\n            LLLL: 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',\n            llll: 'ddd, D MMM YYYY, A h:mm [vazta]'\n          },\n          calendar: {\n            sameDay: '[Aiz] LT',\n            nextDay: '[Faleam] LT',\n            nextWeek: '[Ieta to] dddd[,] LT',\n            lastDay: '[Kal] LT',\n            lastWeek: '[Fatlo] dddd[,] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s',\n            past: '%s adim',\n            s: processRelativeTime,\n            m: processRelativeTime,\n            mm: processRelativeTime,\n            h: processRelativeTime,\n            hh: processRelativeTime,\n            d: processRelativeTime,\n            dd: processRelativeTime,\n            M: processRelativeTime,\n            MM: processRelativeTime,\n            y: processRelativeTime,\n            yy: processRelativeTime\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(er)/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              // the ordinal 'er' only applies to day of the month\n              case 'D':\n                return number + 'er';\n\n              default:\n              case 'M':\n              case 'Q':\n              case 'DDD':\n              case 'd':\n              case 'w':\n              case 'W':\n                return number;\n            }\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          },\n          meridiemParse: /rati|sokalli|donparam|sanje/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'rati') {\n              return hour < 4 ? hour : hour + 12;\n            } else if (meridiem === 'sokalli') {\n              return hour;\n            } else if (meridiem === 'donparam') {\n              return hour > 12 ? hour : hour + 12;\n            } else if (meridiem === 'sanje') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'rati';\n            } else if (hour < 12) {\n              return 'sokalli';\n            } else if (hour < 16) {\n              return 'donparam';\n            } else if (hour < 20) {\n              return 'sanje';\n            } else {\n              return 'rati';\n            }\n          }\n        });\n        return gomLatn;\n      });\n      /***/\n\n    },\n    /* 47 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Hebrew [he]\n      //! author : Tomer Cohen : https://github.com/tomer\n      //! author : Moshe Simantov : https://github.com/DevelopmentIL\n      //! author : Tal Ater : https://github.com/TalAter\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var he = moment.defineLocale('he', {\n          months: 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),\n          monthsShort: 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),\n          weekdays: 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),\n          weekdaysShort: 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),\n          weekdaysMin: 'א_ב_ג_ד_ה_ו_ש'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D [ב]MMMM YYYY',\n            LLL: 'D [ב]MMMM YYYY HH:mm',\n            LLLL: 'dddd, D [ב]MMMM YYYY HH:mm',\n            l: 'D/M/YYYY',\n            ll: 'D MMM YYYY',\n            lll: 'D MMM YYYY HH:mm',\n            llll: 'ddd, D MMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[היום ב־]LT',\n            nextDay: '[מחר ב־]LT',\n            nextWeek: 'dddd [בשעה] LT',\n            lastDay: '[אתמול ב־]LT',\n            lastWeek: '[ביום] dddd [האחרון בשעה] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'בעוד %s',\n            past: 'לפני %s',\n            s: 'מספר שניות',\n            m: 'דקה',\n            mm: '%d דקות',\n            h: 'שעה',\n            hh: function hh(number) {\n              if (number === 2) {\n                return 'שעתיים';\n              }\n\n              return number + ' שעות';\n            },\n            d: 'יום',\n            dd: function dd(number) {\n              if (number === 2) {\n                return 'יומיים';\n              }\n\n              return number + ' ימים';\n            },\n            M: 'חודש',\n            MM: function MM(number) {\n              if (number === 2) {\n                return 'חודשיים';\n              }\n\n              return number + ' חודשים';\n            },\n            y: 'שנה',\n            yy: function yy(number) {\n              if (number === 2) {\n                return 'שנתיים';\n              } else if (number % 10 === 0 && number !== 10) {\n                return number + ' שנה';\n              }\n\n              return number + ' שנים';\n            }\n          },\n          meridiemParse: /אחה\"צ|לפנה\"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,\n          isPM: function isPM(input) {\n            return /^(אחה\"צ|אחרי הצהריים|בערב)$/.test(input);\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 5) {\n              return 'לפנות בוקר';\n            } else if (hour < 10) {\n              return 'בבוקר';\n            } else if (hour < 12) {\n              return isLower ? 'לפנה\"צ' : 'לפני הצהריים';\n            } else if (hour < 18) {\n              return isLower ? 'אחה\"צ' : 'אחרי הצהריים';\n            } else {\n              return 'בערב';\n            }\n          }\n        });\n        return he;\n      });\n      /***/\n\n    },\n    /* 48 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Hindi [hi]\n      //! author : Mayank Singhal : https://github.com/mayanksinghal\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '१',\n          '2': '२',\n          '3': '३',\n          '4': '४',\n          '5': '५',\n          '6': '६',\n          '7': '७',\n          '8': '८',\n          '9': '९',\n          '0': '०'\n        };\n        var numberMap = {\n          '१': '1',\n          '२': '2',\n          '३': '3',\n          '४': '4',\n          '५': '5',\n          '६': '6',\n          '७': '7',\n          '८': '8',\n          '९': '9',\n          '०': '0'\n        };\n        var hi = moment.defineLocale('hi', {\n          months: 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),\n          monthsShort: 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),\n          weekdaysShort: 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),\n          weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),\n          longDateFormat: {\n            LT: 'A h:mm बजे',\n            LTS: 'A h:mm:ss बजे',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY, A h:mm बजे',\n            LLLL: 'dddd, D MMMM YYYY, A h:mm बजे'\n          },\n          calendar: {\n            sameDay: '[आज] LT',\n            nextDay: '[कल] LT',\n            nextWeek: 'dddd, LT',\n            lastDay: '[कल] LT',\n            lastWeek: '[पिछले] dddd, LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s में',\n            past: '%s पहले',\n            s: 'कुछ ही क्षण',\n            m: 'एक मिनट',\n            mm: '%d मिनट',\n            h: 'एक घंटा',\n            hh: '%d घंटे',\n            d: 'एक दिन',\n            dd: '%d दिन',\n            M: 'एक महीने',\n            MM: '%d महीने',\n            y: 'एक वर्ष',\n            yy: '%d वर्ष'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/[१२३४५६७८९०]/g, function (match) {\n              return numberMap[match];\n            });\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            });\n          },\n          // Hindi notation for meridiems are quite fuzzy in practice. While there exists\n          // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.\n          meridiemParse: /रात|सुबह|दोपहर|शाम/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'रात') {\n              return hour < 4 ? hour : hour + 12;\n            } else if (meridiem === 'सुबह') {\n              return hour;\n            } else if (meridiem === 'दोपहर') {\n              return hour >= 10 ? hour : hour + 12;\n            } else if (meridiem === 'शाम') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'रात';\n            } else if (hour < 10) {\n              return 'सुबह';\n            } else if (hour < 17) {\n              return 'दोपहर';\n            } else if (hour < 20) {\n              return 'शाम';\n            } else {\n              return 'रात';\n            }\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return hi;\n      });\n      /***/\n\n    },\n    /* 49 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Croatian [hr]\n      //! author : Bojan Marković : https://github.com/bmarkovic\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function translate(number, withoutSuffix, key) {\n          var result = number + ' ';\n\n          switch (key) {\n            case 'm':\n              return withoutSuffix ? 'jedna minuta' : 'jedne minute';\n\n            case 'mm':\n              if (number === 1) {\n                result += 'minuta';\n              } else if (number === 2 || number === 3 || number === 4) {\n                result += 'minute';\n              } else {\n                result += 'minuta';\n              }\n\n              return result;\n\n            case 'h':\n              return withoutSuffix ? 'jedan sat' : 'jednog sata';\n\n            case 'hh':\n              if (number === 1) {\n                result += 'sat';\n              } else if (number === 2 || number === 3 || number === 4) {\n                result += 'sata';\n              } else {\n                result += 'sati';\n              }\n\n              return result;\n\n            case 'dd':\n              if (number === 1) {\n                result += 'dan';\n              } else {\n                result += 'dana';\n              }\n\n              return result;\n\n            case 'MM':\n              if (number === 1) {\n                result += 'mjesec';\n              } else if (number === 2 || number === 3 || number === 4) {\n                result += 'mjeseca';\n              } else {\n                result += 'mjeseci';\n              }\n\n              return result;\n\n            case 'yy':\n              if (number === 1) {\n                result += 'godina';\n              } else if (number === 2 || number === 3 || number === 4) {\n                result += 'godine';\n              } else {\n                result += 'godina';\n              }\n\n              return result;\n          }\n        }\n\n        var hr = moment.defineLocale('hr', {\n          months: {\n            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),\n            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')\n          },\n          monthsShort: 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),\n          weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),\n          weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY H:mm',\n            LLLL: 'dddd, D. MMMM YYYY H:mm'\n          },\n          calendar: {\n            sameDay: '[danas u] LT',\n            nextDay: '[sutra u] LT',\n            nextWeek: function nextWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[u] [nedjelju] [u] LT';\n\n                case 3:\n                  return '[u] [srijedu] [u] LT';\n\n                case 6:\n                  return '[u] [subotu] [u] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                  return '[u] dddd [u] LT';\n              }\n            },\n            lastDay: '[jučer u] LT',\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 0:\n                case 3:\n                  return '[prošlu] dddd [u] LT';\n\n                case 6:\n                  return '[prošle] [subote] [u] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                  return '[prošli] dddd [u] LT';\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'za %s',\n            past: 'prije %s',\n            s: 'par sekundi',\n            m: translate,\n            mm: translate,\n            h: translate,\n            hh: translate,\n            d: 'dan',\n            dd: translate,\n            M: 'mjesec',\n            MM: translate,\n            y: 'godinu',\n            yy: translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return hr;\n      });\n      /***/\n\n    },\n    /* 50 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Hungarian [hu]\n      //! author : Adam Brunner : https://github.com/adambrunner\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');\n\n        function translate(number, withoutSuffix, key, isFuture) {\n          var num = number,\n              suffix;\n\n          switch (key) {\n            case 's':\n              return isFuture || withoutSuffix ? 'néhány másodperc' : 'néhány másodperce';\n\n            case 'm':\n              return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');\n\n            case 'mm':\n              return num + (isFuture || withoutSuffix ? ' perc' : ' perce');\n\n            case 'h':\n              return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');\n\n            case 'hh':\n              return num + (isFuture || withoutSuffix ? ' óra' : ' órája');\n\n            case 'd':\n              return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');\n\n            case 'dd':\n              return num + (isFuture || withoutSuffix ? ' nap' : ' napja');\n\n            case 'M':\n              return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');\n\n            case 'MM':\n              return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');\n\n            case 'y':\n              return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');\n\n            case 'yy':\n              return num + (isFuture || withoutSuffix ? ' év' : ' éve');\n          }\n\n          return '';\n        }\n\n        function week(isFuture) {\n          return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';\n        }\n\n        var hu = moment.defineLocale('hu', {\n          months: 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),\n          monthsShort: 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),\n          weekdays: 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),\n          weekdaysShort: 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),\n          weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'YYYY.MM.DD.',\n            LL: 'YYYY. MMMM D.',\n            LLL: 'YYYY. MMMM D. H:mm',\n            LLLL: 'YYYY. MMMM D., dddd H:mm'\n          },\n          meridiemParse: /de|du/i,\n          isPM: function isPM(input) {\n            return input.charAt(1).toLowerCase() === 'u';\n          },\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours < 12) {\n              return isLower === true ? 'de' : 'DE';\n            } else {\n              return isLower === true ? 'du' : 'DU';\n            }\n          },\n          calendar: {\n            sameDay: '[ma] LT[-kor]',\n            nextDay: '[holnap] LT[-kor]',\n            nextWeek: function nextWeek() {\n              return week.call(this, true);\n            },\n            lastDay: '[tegnap] LT[-kor]',\n            lastWeek: function lastWeek() {\n              return week.call(this, false);\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s múlva',\n            past: '%s',\n            s: translate,\n            m: translate,\n            mm: translate,\n            h: translate,\n            hh: translate,\n            d: translate,\n            dd: translate,\n            M: translate,\n            MM: translate,\n            y: translate,\n            yy: translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return hu;\n      });\n      /***/\n\n    },\n    /* 51 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Armenian [hy-am]\n      //! author : Armendarabyan : https://github.com/armendarabyan\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var hyAm = moment.defineLocale('hy-am', {\n          months: {\n            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),\n            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')\n          },\n          monthsShort: 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),\n          weekdays: 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),\n          weekdaysShort: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),\n          weekdaysMin: 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY թ.',\n            LLL: 'D MMMM YYYY թ., HH:mm',\n            LLLL: 'dddd, D MMMM YYYY թ., HH:mm'\n          },\n          calendar: {\n            sameDay: '[այսօր] LT',\n            nextDay: '[վաղը] LT',\n            lastDay: '[երեկ] LT',\n            nextWeek: function nextWeek() {\n              return 'dddd [օրը ժամը] LT';\n            },\n            lastWeek: function lastWeek() {\n              return '[անցած] dddd [օրը ժամը] LT';\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s հետո',\n            past: '%s առաջ',\n            s: 'մի քանի վայրկյան',\n            m: 'րոպե',\n            mm: '%d րոպե',\n            h: 'ժամ',\n            hh: '%d ժամ',\n            d: 'օր',\n            dd: '%d օր',\n            M: 'ամիս',\n            MM: '%d ամիս',\n            y: 'տարի',\n            yy: '%d տարի'\n          },\n          meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,\n          isPM: function isPM(input) {\n            return /^(ցերեկվա|երեկոյան)$/.test(input);\n          },\n          meridiem: function meridiem(hour) {\n            if (hour < 4) {\n              return 'գիշերվա';\n            } else if (hour < 12) {\n              return 'առավոտվա';\n            } else if (hour < 17) {\n              return 'ցերեկվա';\n            } else {\n              return 'երեկոյան';\n            }\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}|\\d{1,2}-(ին|րդ)/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              case 'DDD':\n              case 'w':\n              case 'W':\n              case 'DDDo':\n                if (number === 1) {\n                  return number + '-ին';\n                }\n\n                return number + '-րդ';\n\n              default:\n                return number;\n            }\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return hyAm;\n      });\n      /***/\n\n    },\n    /* 52 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Indonesian [id]\n      //! author : Mohammad Satrio Utomo : https://github.com/tyok\n      //! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var id = moment.defineLocale('id', {\n          months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),\n          monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),\n          weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),\n          weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),\n          weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),\n          longDateFormat: {\n            LT: 'HH.mm',\n            LTS: 'HH.mm.ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY [pukul] HH.mm',\n            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'\n          },\n          meridiemParse: /pagi|siang|sore|malam/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'pagi') {\n              return hour;\n            } else if (meridiem === 'siang') {\n              return hour >= 11 ? hour : hour + 12;\n            } else if (meridiem === 'sore' || meridiem === 'malam') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours < 11) {\n              return 'pagi';\n            } else if (hours < 15) {\n              return 'siang';\n            } else if (hours < 19) {\n              return 'sore';\n            } else {\n              return 'malam';\n            }\n          },\n          calendar: {\n            sameDay: '[Hari ini pukul] LT',\n            nextDay: '[Besok pukul] LT',\n            nextWeek: 'dddd [pukul] LT',\n            lastDay: '[Kemarin pukul] LT',\n            lastWeek: 'dddd [lalu pukul] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'dalam %s',\n            past: '%s yang lalu',\n            s: 'beberapa detik',\n            m: 'semenit',\n            mm: '%d menit',\n            h: 'sejam',\n            hh: '%d jam',\n            d: 'sehari',\n            dd: '%d hari',\n            M: 'sebulan',\n            MM: '%d bulan',\n            y: 'setahun',\n            yy: '%d tahun'\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return id;\n      });\n      /***/\n\n    },\n    /* 53 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Icelandic [is]\n      //! author : Hinrik Örn Sigurðsson : https://github.com/hinrik\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function plural(n) {\n          if (n % 100 === 11) {\n            return true;\n          } else if (n % 10 === 1) {\n            return false;\n          }\n\n          return true;\n        }\n\n        function translate(number, withoutSuffix, key, isFuture) {\n          var result = number + ' ';\n\n          switch (key) {\n            case 's':\n              return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';\n\n            case 'm':\n              return withoutSuffix ? 'mínúta' : 'mínútu';\n\n            case 'mm':\n              if (plural(number)) {\n                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');\n              } else if (withoutSuffix) {\n                return result + 'mínúta';\n              }\n\n              return result + 'mínútu';\n\n            case 'hh':\n              if (plural(number)) {\n                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');\n              }\n\n              return result + 'klukkustund';\n\n            case 'd':\n              if (withoutSuffix) {\n                return 'dagur';\n              }\n\n              return isFuture ? 'dag' : 'degi';\n\n            case 'dd':\n              if (plural(number)) {\n                if (withoutSuffix) {\n                  return result + 'dagar';\n                }\n\n                return result + (isFuture ? 'daga' : 'dögum');\n              } else if (withoutSuffix) {\n                return result + 'dagur';\n              }\n\n              return result + (isFuture ? 'dag' : 'degi');\n\n            case 'M':\n              if (withoutSuffix) {\n                return 'mánuður';\n              }\n\n              return isFuture ? 'mánuð' : 'mánuði';\n\n            case 'MM':\n              if (plural(number)) {\n                if (withoutSuffix) {\n                  return result + 'mánuðir';\n                }\n\n                return result + (isFuture ? 'mánuði' : 'mánuðum');\n              } else if (withoutSuffix) {\n                return result + 'mánuður';\n              }\n\n              return result + (isFuture ? 'mánuð' : 'mánuði');\n\n            case 'y':\n              return withoutSuffix || isFuture ? 'ár' : 'ári';\n\n            case 'yy':\n              if (plural(number)) {\n                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');\n              }\n\n              return result + (withoutSuffix || isFuture ? 'ár' : 'ári');\n          }\n        }\n\n        var is = moment.defineLocale('is', {\n          months: 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),\n          monthsShort: 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),\n          weekdays: 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),\n          weekdaysShort: 'sun_mán_þri_mið_fim_fös_lau'.split('_'),\n          weekdaysMin: 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY [kl.] H:mm',\n            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm'\n          },\n          calendar: {\n            sameDay: '[í dag kl.] LT',\n            nextDay: '[á morgun kl.] LT',\n            nextWeek: 'dddd [kl.] LT',\n            lastDay: '[í gær kl.] LT',\n            lastWeek: '[síðasta] dddd [kl.] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'eftir %s',\n            past: 'fyrir %s síðan',\n            s: translate,\n            m: translate,\n            mm: translate,\n            h: 'klukkustund',\n            hh: translate,\n            d: translate,\n            dd: translate,\n            M: translate,\n            MM: translate,\n            y: translate,\n            yy: translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return is;\n      });\n      /***/\n\n    },\n    /* 54 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Italian [it]\n      //! author : Lorenzo : https://github.com/aliem\n      //! author: Mattia Larentis: https://github.com/nostalgiaz\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var it = moment.defineLocale('it', {\n          months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),\n          monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),\n          weekdays: 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),\n          weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),\n          weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Oggi alle] LT',\n            nextDay: '[Domani alle] LT',\n            nextWeek: 'dddd [alle] LT',\n            lastDay: '[Ieri alle] LT',\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[la scorsa] dddd [alle] LT';\n\n                default:\n                  return '[lo scorso] dddd [alle] LT';\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: function future(s) {\n              return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;\n            },\n            past: '%s fa',\n            s: 'alcuni secondi',\n            m: 'un minuto',\n            mm: '%d minuti',\n            h: 'un\\'ora',\n            hh: '%d ore',\n            d: 'un giorno',\n            dd: '%d giorni',\n            M: 'un mese',\n            MM: '%d mesi',\n            y: 'un anno',\n            yy: '%d anni'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}º/,\n          ordinal: '%dº',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return it;\n      });\n      /***/\n\n    },\n    /* 55 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Japanese [ja]\n      //! author : LI Long : https://github.com/baryon\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var ja = moment.defineLocale('ja', {\n          months: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n          monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n          weekdays: '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),\n          weekdaysShort: '日_月_火_水_木_金_土'.split('_'),\n          weekdaysMin: '日_月_火_水_木_金_土'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'YYYY/MM/DD',\n            LL: 'YYYY年M月D日',\n            LLL: 'YYYY年M月D日 HH:mm',\n            LLLL: 'YYYY年M月D日 HH:mm dddd',\n            l: 'YYYY/MM/DD',\n            ll: 'YYYY年M月D日',\n            lll: 'YYYY年M月D日 HH:mm',\n            llll: 'YYYY年M月D日 HH:mm dddd'\n          },\n          meridiemParse: /午前|午後/i,\n          isPM: function isPM(input) {\n            return input === '午後';\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 12) {\n              return '午前';\n            } else {\n              return '午後';\n            }\n          },\n          calendar: {\n            sameDay: '[今日] LT',\n            nextDay: '[明日] LT',\n            nextWeek: '[来週]dddd LT',\n            lastDay: '[昨日] LT',\n            lastWeek: '[前週]dddd LT',\n            sameElse: 'L'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}日/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              case 'd':\n              case 'D':\n              case 'DDD':\n                return number + '日';\n\n              default:\n                return number;\n            }\n          },\n          relativeTime: {\n            future: '%s後',\n            past: '%s前',\n            s: '数秒',\n            m: '1分',\n            mm: '%d分',\n            h: '1時間',\n            hh: '%d時間',\n            d: '1日',\n            dd: '%d日',\n            M: '1ヶ月',\n            MM: '%dヶ月',\n            y: '1年',\n            yy: '%d年'\n          }\n        });\n        return ja;\n      });\n      /***/\n\n    },\n    /* 56 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Javanese [jv]\n      //! author : Rony Lantip : https://github.com/lantip\n      //! reference: http://jv.wikipedia.org/wiki/Basa_Jawa\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var jv = moment.defineLocale('jv', {\n          months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),\n          monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),\n          weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),\n          weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),\n          weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),\n          longDateFormat: {\n            LT: 'HH.mm',\n            LTS: 'HH.mm.ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY [pukul] HH.mm',\n            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'\n          },\n          meridiemParse: /enjing|siyang|sonten|ndalu/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'enjing') {\n              return hour;\n            } else if (meridiem === 'siyang') {\n              return hour >= 11 ? hour : hour + 12;\n            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours < 11) {\n              return 'enjing';\n            } else if (hours < 15) {\n              return 'siyang';\n            } else if (hours < 19) {\n              return 'sonten';\n            } else {\n              return 'ndalu';\n            }\n          },\n          calendar: {\n            sameDay: '[Dinten puniko pukul] LT',\n            nextDay: '[Mbenjang pukul] LT',\n            nextWeek: 'dddd [pukul] LT',\n            lastDay: '[Kala wingi pukul] LT',\n            lastWeek: 'dddd [kepengker pukul] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'wonten ing %s',\n            past: '%s ingkang kepengker',\n            s: 'sawetawis detik',\n            m: 'setunggal menit',\n            mm: '%d menit',\n            h: 'setunggal jam',\n            hh: '%d jam',\n            d: 'sedinten',\n            dd: '%d dinten',\n            M: 'sewulan',\n            MM: '%d wulan',\n            y: 'setaun',\n            yy: '%d taun'\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return jv;\n      });\n      /***/\n\n    },\n    /* 57 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Georgian [ka]\n      //! author : Irakli Janiashvili : https://github.com/irakli-janiashvili\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var ka = moment.defineLocale('ka', {\n          months: {\n            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),\n            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')\n          },\n          monthsShort: 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),\n          weekdays: {\n            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),\n            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),\n            isFormat: /(წინა|შემდეგ)/\n          },\n          weekdaysShort: 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),\n          weekdaysMin: 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),\n          longDateFormat: {\n            LT: 'h:mm A',\n            LTS: 'h:mm:ss A',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY h:mm A',\n            LLLL: 'dddd, D MMMM YYYY h:mm A'\n          },\n          calendar: {\n            sameDay: '[დღეს] LT[-ზე]',\n            nextDay: '[ხვალ] LT[-ზე]',\n            lastDay: '[გუშინ] LT[-ზე]',\n            nextWeek: '[შემდეგ] dddd LT[-ზე]',\n            lastWeek: '[წინა] dddd LT-ზე',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: function future(s) {\n              return /(წამი|წუთი|საათი|წელი)/.test(s) ? s.replace(/ი$/, 'ში') : s + 'ში';\n            },\n            past: function past(s) {\n              if (/(წამი|წუთი|საათი|დღე|თვე)/.test(s)) {\n                return s.replace(/(ი|ე)$/, 'ის უკან');\n              }\n\n              if (/წელი/.test(s)) {\n                return s.replace(/წელი$/, 'წლის უკან');\n              }\n            },\n            s: 'რამდენიმე წამი',\n            m: 'წუთი',\n            mm: '%d წუთი',\n            h: 'საათი',\n            hh: '%d საათი',\n            d: 'დღე',\n            dd: '%d დღე',\n            M: 'თვე',\n            MM: '%d თვე',\n            y: 'წელი',\n            yy: '%d წელი'\n          },\n          dayOfMonthOrdinalParse: /0|1-ლი|მე-\\d{1,2}|\\d{1,2}-ე/,\n          ordinal: function ordinal(number) {\n            if (number === 0) {\n              return number;\n            }\n\n            if (number === 1) {\n              return number + '-ლი';\n            }\n\n            if (number < 20 || number <= 100 && number % 20 === 0 || number % 100 === 0) {\n              return 'მე-' + number;\n            }\n\n            return number + '-ე';\n          },\n          week: {\n            dow: 1,\n            doy: 7\n          }\n        });\n        return ka;\n      });\n      /***/\n\n    },\n    /* 58 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Kazakh [kk]\n      //! authors : Nurlan Rakhimzhanov : https://github.com/nurlan\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var suffixes = {\n          0: '-ші',\n          1: '-ші',\n          2: '-ші',\n          3: '-ші',\n          4: '-ші',\n          5: '-ші',\n          6: '-шы',\n          7: '-ші',\n          8: '-ші',\n          9: '-шы',\n          10: '-шы',\n          20: '-шы',\n          30: '-шы',\n          40: '-шы',\n          50: '-ші',\n          60: '-шы',\n          70: '-ші',\n          80: '-ші',\n          90: '-шы',\n          100: '-ші'\n        };\n        var kk = moment.defineLocale('kk', {\n          months: 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),\n          monthsShort: 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),\n          weekdays: 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),\n          weekdaysShort: 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),\n          weekdaysMin: 'жк_дй_сй_ср_бй_жм_сн'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Бүгін сағат] LT',\n            nextDay: '[Ертең сағат] LT',\n            nextWeek: 'dddd [сағат] LT',\n            lastDay: '[Кеше сағат] LT',\n            lastWeek: '[Өткен аптаның] dddd [сағат] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s ішінде',\n            past: '%s бұрын',\n            s: 'бірнеше секунд',\n            m: 'бір минут',\n            mm: '%d минут',\n            h: 'бір сағат',\n            hh: '%d сағат',\n            d: 'бір күн',\n            dd: '%d күн',\n            M: 'бір ай',\n            MM: '%d ай',\n            y: 'бір жыл',\n            yy: '%d жыл'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}-(ші|шы)/,\n          ordinal: function ordinal(number) {\n            var a = number % 10,\n                b = number >= 100 ? 100 : null;\n            return number + (suffixes[number] || suffixes[a] || suffixes[b]);\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return kk;\n      });\n      /***/\n\n    },\n    /* 59 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Cambodian [km]\n      //! author : Kruy Vanna : https://github.com/kruyvanna\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var km = moment.defineLocale('km', {\n          months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),\n          monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split('_'),\n          weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),\n          weekdaysShort: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),\n          weekdaysMin: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',\n            nextDay: '[ស្អែក ម៉ោង] LT',\n            nextWeek: 'dddd [ម៉ោង] LT',\n            lastDay: '[ម្សិលមិញ ម៉ោង] LT',\n            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%sទៀត',\n            past: '%sមុន',\n            s: 'ប៉ុន្មានវិនាទី',\n            m: 'មួយនាទី',\n            mm: '%d នាទី',\n            h: 'មួយម៉ោង',\n            hh: '%d ម៉ោង',\n            d: 'មួយថ្ងៃ',\n            dd: '%d ថ្ងៃ',\n            M: 'មួយខែ',\n            MM: '%d ខែ',\n            y: 'មួយឆ្នាំ',\n            yy: '%d ឆ្នាំ'\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return km;\n      });\n      /***/\n\n    },\n    /* 60 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Kannada [kn]\n      //! author : Rajeev Naik : https://github.com/rajeevnaikte\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '೧',\n          '2': '೨',\n          '3': '೩',\n          '4': '೪',\n          '5': '೫',\n          '6': '೬',\n          '7': '೭',\n          '8': '೮',\n          '9': '೯',\n          '0': '೦'\n        };\n        var numberMap = {\n          '೧': '1',\n          '೨': '2',\n          '೩': '3',\n          '೪': '4',\n          '೫': '5',\n          '೬': '6',\n          '೭': '7',\n          '೮': '8',\n          '೯': '9',\n          '೦': '0'\n        };\n        var kn = moment.defineLocale('kn', {\n          months: 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),\n          monthsShort: 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬ_ಅಕ್ಟೋಬ_ನವೆಂಬ_ಡಿಸೆಂಬ'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),\n          weekdaysShort: 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),\n          weekdaysMin: 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),\n          longDateFormat: {\n            LT: 'A h:mm',\n            LTS: 'A h:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY, A h:mm',\n            LLLL: 'dddd, D MMMM YYYY, A h:mm'\n          },\n          calendar: {\n            sameDay: '[ಇಂದು] LT',\n            nextDay: '[ನಾಳೆ] LT',\n            nextWeek: 'dddd, LT',\n            lastDay: '[ನಿನ್ನೆ] LT',\n            lastWeek: '[ಕೊನೆಯ] dddd, LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s ನಂತರ',\n            past: '%s ಹಿಂದೆ',\n            s: 'ಕೆಲವು ಕ್ಷಣಗಳು',\n            m: 'ಒಂದು ನಿಮಿಷ',\n            mm: '%d ನಿಮಿಷ',\n            h: 'ಒಂದು ಗಂಟೆ',\n            hh: '%d ಗಂಟೆ',\n            d: 'ಒಂದು ದಿನ',\n            dd: '%d ದಿನ',\n            M: 'ಒಂದು ತಿಂಗಳು',\n            MM: '%d ತಿಂಗಳು',\n            y: 'ಒಂದು ವರ್ಷ',\n            yy: '%d ವರ್ಷ'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {\n              return numberMap[match];\n            });\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            });\n          },\n          meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'ರಾತ್ರಿ') {\n              return hour < 4 ? hour : hour + 12;\n            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {\n              return hour;\n            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {\n              return hour >= 10 ? hour : hour + 12;\n            } else if (meridiem === 'ಸಂಜೆ') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'ರಾತ್ರಿ';\n            } else if (hour < 10) {\n              return 'ಬೆಳಿಗ್ಗೆ';\n            } else if (hour < 17) {\n              return 'ಮಧ್ಯಾಹ್ನ';\n            } else if (hour < 20) {\n              return 'ಸಂಜೆ';\n            } else {\n              return 'ರಾತ್ರಿ';\n            }\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(ನೇ)/,\n          ordinal: function ordinal(number) {\n            return number + 'ನೇ';\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return kn;\n      });\n      /***/\n\n    },\n    /* 61 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Korean [ko]\n      //! author : Kyungwook, Park : https://github.com/kyungw00k\n      //! author : Jeeeyul Lee <jeeeyul@gmail.com>\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var ko = moment.defineLocale('ko', {\n          months: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),\n          monthsShort: '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),\n          weekdays: '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),\n          weekdaysShort: '일_월_화_수_목_금_토'.split('_'),\n          weekdaysMin: '일_월_화_수_목_금_토'.split('_'),\n          longDateFormat: {\n            LT: 'A h:mm',\n            LTS: 'A h:mm:ss',\n            L: 'YYYY.MM.DD',\n            LL: 'YYYY년 MMMM D일',\n            LLL: 'YYYY년 MMMM D일 A h:mm',\n            LLLL: 'YYYY년 MMMM D일 dddd A h:mm',\n            l: 'YYYY.MM.DD',\n            ll: 'YYYY년 MMMM D일',\n            lll: 'YYYY년 MMMM D일 A h:mm',\n            llll: 'YYYY년 MMMM D일 dddd A h:mm'\n          },\n          calendar: {\n            sameDay: '오늘 LT',\n            nextDay: '내일 LT',\n            nextWeek: 'dddd LT',\n            lastDay: '어제 LT',\n            lastWeek: '지난주 dddd LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s 후',\n            past: '%s 전',\n            s: '몇 초',\n            ss: '%d초',\n            m: '1분',\n            mm: '%d분',\n            h: '한 시간',\n            hh: '%d시간',\n            d: '하루',\n            dd: '%d일',\n            M: '한 달',\n            MM: '%d달',\n            y: '일 년',\n            yy: '%d년'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}일/,\n          ordinal: '%d일',\n          meridiemParse: /오전|오후/,\n          isPM: function isPM(token) {\n            return token === '오후';\n          },\n          meridiem: function meridiem(hour, minute, isUpper) {\n            return hour < 12 ? '오전' : '오후';\n          }\n        });\n        return ko;\n      });\n      /***/\n\n    },\n    /* 62 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Kyrgyz [ky]\n      //! author : Chyngyz Arystan uulu : https://github.com/chyngyz\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var suffixes = {\n          0: '-чү',\n          1: '-чи',\n          2: '-чи',\n          3: '-чү',\n          4: '-чү',\n          5: '-чи',\n          6: '-чы',\n          7: '-чи',\n          8: '-чи',\n          9: '-чу',\n          10: '-чу',\n          20: '-чы',\n          30: '-чу',\n          40: '-чы',\n          50: '-чү',\n          60: '-чы',\n          70: '-чи',\n          80: '-чи',\n          90: '-чу',\n          100: '-чү'\n        };\n        var ky = moment.defineLocale('ky', {\n          months: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),\n          monthsShort: 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),\n          weekdays: 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),\n          weekdaysShort: 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),\n          weekdaysMin: 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Бүгүн саат] LT',\n            nextDay: '[Эртең саат] LT',\n            nextWeek: 'dddd [саат] LT',\n            lastDay: '[Кече саат] LT',\n            lastWeek: '[Өткен аптанын] dddd [күнү] [саат] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s ичинде',\n            past: '%s мурун',\n            s: 'бирнече секунд',\n            m: 'бир мүнөт',\n            mm: '%d мүнөт',\n            h: 'бир саат',\n            hh: '%d саат',\n            d: 'бир күн',\n            dd: '%d күн',\n            M: 'бир ай',\n            MM: '%d ай',\n            y: 'бир жыл',\n            yy: '%d жыл'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}-(чи|чы|чү|чу)/,\n          ordinal: function ordinal(number) {\n            var a = number % 10,\n                b = number >= 100 ? 100 : null;\n            return number + (suffixes[number] || suffixes[a] || suffixes[b]);\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return ky;\n      });\n      /***/\n\n    },\n    /* 63 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Luxembourgish [lb]\n      //! author : mweimerskirch : https://github.com/mweimerskirch\n      //! author : David Raison : https://github.com/kwisatz\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function processRelativeTime(number, withoutSuffix, key, isFuture) {\n          var format = {\n            'm': ['eng Minutt', 'enger Minutt'],\n            'h': ['eng Stonn', 'enger Stonn'],\n            'd': ['een Dag', 'engem Dag'],\n            'M': ['ee Mount', 'engem Mount'],\n            'y': ['ee Joer', 'engem Joer']\n          };\n          return withoutSuffix ? format[key][0] : format[key][1];\n        }\n\n        function processFutureTime(string) {\n          var number = string.substr(0, string.indexOf(' '));\n\n          if (eifelerRegelAppliesToNumber(number)) {\n            return 'a ' + string;\n          }\n\n          return 'an ' + string;\n        }\n\n        function processPastTime(string) {\n          var number = string.substr(0, string.indexOf(' '));\n\n          if (eifelerRegelAppliesToNumber(number)) {\n            return 'viru ' + string;\n          }\n\n          return 'virun ' + string;\n        }\n        /**\n         * Returns true if the word before the given number loses the '-n' ending.\n         * e.g. 'an 10 Deeg' but 'a 5 Deeg'\n         *\n         * @param number {integer}\n         * @returns {boolean}\n         */\n\n\n        function eifelerRegelAppliesToNumber(number) {\n          number = parseInt(number, 10);\n\n          if (isNaN(number)) {\n            return false;\n          }\n\n          if (number < 0) {\n            // Negative Number --> always true\n            return true;\n          } else if (number < 10) {\n            // Only 1 digit\n            if (4 <= number && number <= 7) {\n              return true;\n            }\n\n            return false;\n          } else if (number < 100) {\n            // 2 digits\n            var lastDigit = number % 10,\n                firstDigit = number / 10;\n\n            if (lastDigit === 0) {\n              return eifelerRegelAppliesToNumber(firstDigit);\n            }\n\n            return eifelerRegelAppliesToNumber(lastDigit);\n          } else if (number < 10000) {\n            // 3 or 4 digits --> recursively check first digit\n            while (number >= 10) {\n              number = number / 10;\n            }\n\n            return eifelerRegelAppliesToNumber(number);\n          } else {\n            // Anything larger than 4 digits: recursively check first n-3 digits\n            number = number / 1000;\n            return eifelerRegelAppliesToNumber(number);\n          }\n        }\n\n        var lb = moment.defineLocale('lb', {\n          months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),\n          monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),\n          weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),\n          weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'H:mm [Auer]',\n            LTS: 'H:mm:ss [Auer]',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY H:mm [Auer]',\n            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'\n          },\n          calendar: {\n            sameDay: '[Haut um] LT',\n            sameElse: 'L',\n            nextDay: '[Muer um] LT',\n            nextWeek: 'dddd [um] LT',\n            lastDay: '[Gëschter um] LT',\n            lastWeek: function lastWeek() {\n              // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule\n              switch (this.day()) {\n                case 2:\n                case 4:\n                  return '[Leschten] dddd [um] LT';\n\n                default:\n                  return '[Leschte] dddd [um] LT';\n              }\n            }\n          },\n          relativeTime: {\n            future: processFutureTime,\n            past: processPastTime,\n            s: 'e puer Sekonnen',\n            m: processRelativeTime,\n            mm: '%d Minutten',\n            h: processRelativeTime,\n            hh: '%d Stonnen',\n            d: processRelativeTime,\n            dd: '%d Deeg',\n            M: processRelativeTime,\n            MM: '%d Méint',\n            y: processRelativeTime,\n            yy: '%d Joer'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return lb;\n      });\n      /***/\n\n    },\n    /* 64 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Lao [lo]\n      //! author : Ryan Hart : https://github.com/ryanhart2\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var lo = moment.defineLocale('lo', {\n          months: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),\n          monthsShort: 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),\n          weekdays: 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),\n          weekdaysShort: 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),\n          weekdaysMin: 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'ວັນdddd D MMMM YYYY HH:mm'\n          },\n          meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,\n          isPM: function isPM(input) {\n            return input === 'ຕອນແລງ';\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 12) {\n              return 'ຕອນເຊົ້າ';\n            } else {\n              return 'ຕອນແລງ';\n            }\n          },\n          calendar: {\n            sameDay: '[ມື້ນີ້ເວລາ] LT',\n            nextDay: '[ມື້ອື່ນເວລາ] LT',\n            nextWeek: '[ວັນ]dddd[ໜ້າເວລາ] LT',\n            lastDay: '[ມື້ວານນີ້ເວລາ] LT',\n            lastWeek: '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'ອີກ %s',\n            past: '%sຜ່ານມາ',\n            s: 'ບໍ່ເທົ່າໃດວິນາທີ',\n            m: '1 ນາທີ',\n            mm: '%d ນາທີ',\n            h: '1 ຊົ່ວໂມງ',\n            hh: '%d ຊົ່ວໂມງ',\n            d: '1 ມື້',\n            dd: '%d ມື້',\n            M: '1 ເດືອນ',\n            MM: '%d ເດືອນ',\n            y: '1 ປີ',\n            yy: '%d ປີ'\n          },\n          dayOfMonthOrdinalParse: /(ທີ່)\\d{1,2}/,\n          ordinal: function ordinal(number) {\n            return 'ທີ່' + number;\n          }\n        });\n        return lo;\n      });\n      /***/\n\n    },\n    /* 65 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Lithuanian [lt]\n      //! author : Mindaugas Mozūras : https://github.com/mmozuras\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var units = {\n          'm': 'minutė_minutės_minutę',\n          'mm': 'minutės_minučių_minutes',\n          'h': 'valanda_valandos_valandą',\n          'hh': 'valandos_valandų_valandas',\n          'd': 'diena_dienos_dieną',\n          'dd': 'dienos_dienų_dienas',\n          'M': 'mėnuo_mėnesio_mėnesį',\n          'MM': 'mėnesiai_mėnesių_mėnesius',\n          'y': 'metai_metų_metus',\n          'yy': 'metai_metų_metus'\n        };\n\n        function translateSeconds(number, withoutSuffix, key, isFuture) {\n          if (withoutSuffix) {\n            return 'kelios sekundės';\n          } else {\n            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';\n          }\n        }\n\n        function translateSingular(number, withoutSuffix, key, isFuture) {\n          return withoutSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];\n        }\n\n        function special(number) {\n          return number % 10 === 0 || number > 10 && number < 20;\n        }\n\n        function forms(key) {\n          return units[key].split('_');\n        }\n\n        function translate(number, withoutSuffix, key, isFuture) {\n          var result = number + ' ';\n\n          if (number === 1) {\n            return result + translateSingular(number, withoutSuffix, key[0], isFuture);\n          } else if (withoutSuffix) {\n            return result + (special(number) ? forms(key)[1] : forms(key)[0]);\n          } else {\n            if (isFuture) {\n              return result + forms(key)[1];\n            } else {\n              return result + (special(number) ? forms(key)[1] : forms(key)[2]);\n            }\n          }\n        }\n\n        var lt = moment.defineLocale('lt', {\n          months: {\n            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),\n            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),\n            isFormat: /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?|MMMM?(\\[[^\\[\\]]*\\]|\\s)+D[oD]?/\n          },\n          monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),\n          weekdays: {\n            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),\n            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),\n            isFormat: /dddd HH:mm/\n          },\n          weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),\n          weekdaysMin: 'S_P_A_T_K_Pn_Š'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'YYYY-MM-DD',\n            LL: 'YYYY [m.] MMMM D [d.]',\n            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',\n            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',\n            l: 'YYYY-MM-DD',\n            ll: 'YYYY [m.] MMMM D [d.]',\n            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',\n            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'\n          },\n          calendar: {\n            sameDay: '[Šiandien] LT',\n            nextDay: '[Rytoj] LT',\n            nextWeek: 'dddd LT',\n            lastDay: '[Vakar] LT',\n            lastWeek: '[Praėjusį] dddd LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'po %s',\n            past: 'prieš %s',\n            s: translateSeconds,\n            m: translateSingular,\n            mm: translate,\n            h: translateSingular,\n            hh: translate,\n            d: translateSingular,\n            dd: translate,\n            M: translateSingular,\n            MM: translate,\n            y: translateSingular,\n            yy: translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}-oji/,\n          ordinal: function ordinal(number) {\n            return number + '-oji';\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return lt;\n      });\n      /***/\n\n    },\n    /* 66 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Latvian [lv]\n      //! author : Kristaps Karlsons : https://github.com/skakri\n      //! author : Jānis Elmeris : https://github.com/JanisE\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var units = {\n          'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),\n          'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),\n          'h': 'stundas_stundām_stunda_stundas'.split('_'),\n          'hh': 'stundas_stundām_stunda_stundas'.split('_'),\n          'd': 'dienas_dienām_diena_dienas'.split('_'),\n          'dd': 'dienas_dienām_diena_dienas'.split('_'),\n          'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),\n          'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),\n          'y': 'gada_gadiem_gads_gadi'.split('_'),\n          'yy': 'gada_gadiem_gads_gadi'.split('_')\n        };\n        /**\n         * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.\n         */\n\n        function format(forms, number, withoutSuffix) {\n          if (withoutSuffix) {\n            // E.g. \"21 minūte\", \"3 minūtes\".\n            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];\n          } else {\n            // E.g. \"21 minūtes\" as in \"pēc 21 minūtes\".\n            // E.g. \"3 minūtēm\" as in \"pēc 3 minūtēm\".\n            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];\n          }\n        }\n\n        function relativeTimeWithPlural(number, withoutSuffix, key) {\n          return number + ' ' + format(units[key], number, withoutSuffix);\n        }\n\n        function relativeTimeWithSingular(number, withoutSuffix, key) {\n          return format(units[key], number, withoutSuffix);\n        }\n\n        function relativeSeconds(number, withoutSuffix) {\n          return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';\n        }\n\n        var lv = moment.defineLocale('lv', {\n          months: 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),\n          monthsShort: 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),\n          weekdays: 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),\n          weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),\n          weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY.',\n            LL: 'YYYY. [gada] D. MMMM',\n            LLL: 'YYYY. [gada] D. MMMM, HH:mm',\n            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm'\n          },\n          calendar: {\n            sameDay: '[Šodien pulksten] LT',\n            nextDay: '[Rīt pulksten] LT',\n            nextWeek: 'dddd [pulksten] LT',\n            lastDay: '[Vakar pulksten] LT',\n            lastWeek: '[Pagājušā] dddd [pulksten] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'pēc %s',\n            past: 'pirms %s',\n            s: relativeSeconds,\n            m: relativeTimeWithSingular,\n            mm: relativeTimeWithPlural,\n            h: relativeTimeWithSingular,\n            hh: relativeTimeWithPlural,\n            d: relativeTimeWithSingular,\n            dd: relativeTimeWithPlural,\n            M: relativeTimeWithSingular,\n            MM: relativeTimeWithPlural,\n            y: relativeTimeWithSingular,\n            yy: relativeTimeWithPlural\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return lv;\n      });\n      /***/\n\n    },\n    /* 67 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Montenegrin [me]\n      //! author : Miodrag Nikač <miodrag@restartit.me> : https://github.com/miodragnikac\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var translator = {\n          words: {\n            //Different grammatical cases\n            m: ['jedan minut', 'jednog minuta'],\n            mm: ['minut', 'minuta', 'minuta'],\n            h: ['jedan sat', 'jednog sata'],\n            hh: ['sat', 'sata', 'sati'],\n            dd: ['dan', 'dana', 'dana'],\n            MM: ['mjesec', 'mjeseca', 'mjeseci'],\n            yy: ['godina', 'godine', 'godina']\n          },\n          correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {\n            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];\n          },\n          translate: function translate(number, withoutSuffix, key) {\n            var wordKey = translator.words[key];\n\n            if (key.length === 1) {\n              return withoutSuffix ? wordKey[0] : wordKey[1];\n            } else {\n              return number + ' ' + translator.correctGrammaticalCase(number, wordKey);\n            }\n          }\n        };\n        var me = moment.defineLocale('me', {\n          months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),\n          monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),\n          weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),\n          weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY H:mm',\n            LLLL: 'dddd, D. MMMM YYYY H:mm'\n          },\n          calendar: {\n            sameDay: '[danas u] LT',\n            nextDay: '[sjutra u] LT',\n            nextWeek: function nextWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[u] [nedjelju] [u] LT';\n\n                case 3:\n                  return '[u] [srijedu] [u] LT';\n\n                case 6:\n                  return '[u] [subotu] [u] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                  return '[u] dddd [u] LT';\n              }\n            },\n            lastDay: '[juče u] LT',\n            lastWeek: function lastWeek() {\n              var lastWeekDays = ['[prošle] [nedjelje] [u] LT', '[prošlog] [ponedjeljka] [u] LT', '[prošlog] [utorka] [u] LT', '[prošle] [srijede] [u] LT', '[prošlog] [četvrtka] [u] LT', '[prošlog] [petka] [u] LT', '[prošle] [subote] [u] LT'];\n              return lastWeekDays[this.day()];\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'za %s',\n            past: 'prije %s',\n            s: 'nekoliko sekundi',\n            m: translator.translate,\n            mm: translator.translate,\n            h: translator.translate,\n            hh: translator.translate,\n            d: 'dan',\n            dd: translator.translate,\n            M: 'mjesec',\n            MM: translator.translate,\n            y: 'godinu',\n            yy: translator.translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return me;\n      });\n      /***/\n\n    },\n    /* 68 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Maori [mi]\n      //! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var mi = moment.defineLocale('mi', {\n          months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),\n          monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),\n          monthsRegex: /(?:['a-z\\u0101\\u014D\\u016B]+\\-?){1,3}/i,\n          monthsStrictRegex: /(?:['a-z\\u0101\\u014D\\u016B]+\\-?){1,3}/i,\n          monthsShortRegex: /(?:['a-z\\u0101\\u014D\\u016B]+\\-?){1,3}/i,\n          monthsShortStrictRegex: /(?:['a-z\\u0101\\u014D\\u016B]+\\-?){1,2}/i,\n          weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),\n          weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),\n          weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY [i] HH:mm',\n            LLLL: 'dddd, D MMMM YYYY [i] HH:mm'\n          },\n          calendar: {\n            sameDay: '[i teie mahana, i] LT',\n            nextDay: '[apopo i] LT',\n            nextWeek: 'dddd [i] LT',\n            lastDay: '[inanahi i] LT',\n            lastWeek: 'dddd [whakamutunga i] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'i roto i %s',\n            past: '%s i mua',\n            s: 'te hēkona ruarua',\n            m: 'he meneti',\n            mm: '%d meneti',\n            h: 'te haora',\n            hh: '%d haora',\n            d: 'he ra',\n            dd: '%d ra',\n            M: 'he marama',\n            MM: '%d marama',\n            y: 'he tau',\n            yy: '%d tau'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}º/,\n          ordinal: '%dº',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return mi;\n      });\n      /***/\n\n    },\n    /* 69 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Macedonian [mk]\n      //! author : Borislav Mickov : https://github.com/B0k0\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var mk = moment.defineLocale('mk', {\n          months: 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),\n          monthsShort: 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),\n          weekdays: 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),\n          weekdaysShort: 'нед_пон_вто_сре_чет_пет_саб'.split('_'),\n          weekdaysMin: 'нe_пo_вт_ср_че_пе_сa'.split('_'),\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'D.MM.YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY H:mm',\n            LLLL: 'dddd, D MMMM YYYY H:mm'\n          },\n          calendar: {\n            sameDay: '[Денес во] LT',\n            nextDay: '[Утре во] LT',\n            nextWeek: '[Во] dddd [во] LT',\n            lastDay: '[Вчера во] LT',\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 0:\n                case 3:\n                case 6:\n                  return '[Изминатата] dddd [во] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                  return '[Изминатиот] dddd [во] LT';\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'после %s',\n            past: 'пред %s',\n            s: 'неколку секунди',\n            m: 'минута',\n            mm: '%d минути',\n            h: 'час',\n            hh: '%d часа',\n            d: 'ден',\n            dd: '%d дена',\n            M: 'месец',\n            MM: '%d месеци',\n            y: 'година',\n            yy: '%d години'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}-(ев|ен|ти|ви|ри|ми)/,\n          ordinal: function ordinal(number) {\n            var lastDigit = number % 10,\n                last2Digits = number % 100;\n\n            if (number === 0) {\n              return number + '-ев';\n            } else if (last2Digits === 0) {\n              return number + '-ен';\n            } else if (last2Digits > 10 && last2Digits < 20) {\n              return number + '-ти';\n            } else if (lastDigit === 1) {\n              return number + '-ви';\n            } else if (lastDigit === 2) {\n              return number + '-ри';\n            } else if (lastDigit === 7 || lastDigit === 8) {\n              return number + '-ми';\n            } else {\n              return number + '-ти';\n            }\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return mk;\n      });\n      /***/\n\n    },\n    /* 70 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Malayalam [ml]\n      //! author : Floyd Pink : https://github.com/floydpink\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var ml = moment.defineLocale('ml', {\n          months: 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),\n          monthsShort: 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),\n          weekdaysShort: 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),\n          weekdaysMin: 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),\n          longDateFormat: {\n            LT: 'A h:mm -നു',\n            LTS: 'A h:mm:ss -നു',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY, A h:mm -നു',\n            LLLL: 'dddd, D MMMM YYYY, A h:mm -നു'\n          },\n          calendar: {\n            sameDay: '[ഇന്ന്] LT',\n            nextDay: '[നാളെ] LT',\n            nextWeek: 'dddd, LT',\n            lastDay: '[ഇന്നലെ] LT',\n            lastWeek: '[കഴിഞ്ഞ] dddd, LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s കഴിഞ്ഞ്',\n            past: '%s മുൻപ്',\n            s: 'അൽപ നിമിഷങ്ങൾ',\n            m: 'ഒരു മിനിറ്റ്',\n            mm: '%d മിനിറ്റ്',\n            h: 'ഒരു മണിക്കൂർ',\n            hh: '%d മണിക്കൂർ',\n            d: 'ഒരു ദിവസം',\n            dd: '%d ദിവസം',\n            M: 'ഒരു മാസം',\n            MM: '%d മാസം',\n            y: 'ഒരു വർഷം',\n            yy: '%d വർഷം'\n          },\n          meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'രാത്രി' && hour >= 4 || meridiem === 'ഉച്ച കഴിഞ്ഞ്' || meridiem === 'വൈകുന്നേരം') {\n              return hour + 12;\n            } else {\n              return hour;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'രാത്രി';\n            } else if (hour < 12) {\n              return 'രാവിലെ';\n            } else if (hour < 17) {\n              return 'ഉച്ച കഴിഞ്ഞ്';\n            } else if (hour < 20) {\n              return 'വൈകുന്നേരം';\n            } else {\n              return 'രാത്രി';\n            }\n          }\n        });\n        return ml;\n      });\n      /***/\n\n    },\n    /* 71 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Marathi [mr]\n      //! author : Harshad Kale : https://github.com/kalehv\n      //! author : Vivek Athalye : https://github.com/vnathalye\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '१',\n          '2': '२',\n          '3': '३',\n          '4': '४',\n          '5': '५',\n          '6': '६',\n          '7': '७',\n          '8': '८',\n          '9': '९',\n          '0': '०'\n        };\n        var numberMap = {\n          '१': '1',\n          '२': '2',\n          '३': '3',\n          '४': '4',\n          '५': '5',\n          '६': '6',\n          '७': '7',\n          '८': '8',\n          '९': '9',\n          '०': '0'\n        };\n\n        function relativeTimeMr(number, withoutSuffix, string, isFuture) {\n          var output = '';\n\n          if (withoutSuffix) {\n            switch (string) {\n              case 's':\n                output = 'काही सेकंद';\n                break;\n\n              case 'm':\n                output = 'एक मिनिट';\n                break;\n\n              case 'mm':\n                output = '%d मिनिटे';\n                break;\n\n              case 'h':\n                output = 'एक तास';\n                break;\n\n              case 'hh':\n                output = '%d तास';\n                break;\n\n              case 'd':\n                output = 'एक दिवस';\n                break;\n\n              case 'dd':\n                output = '%d दिवस';\n                break;\n\n              case 'M':\n                output = 'एक महिना';\n                break;\n\n              case 'MM':\n                output = '%d महिने';\n                break;\n\n              case 'y':\n                output = 'एक वर्ष';\n                break;\n\n              case 'yy':\n                output = '%d वर्षे';\n                break;\n            }\n          } else {\n            switch (string) {\n              case 's':\n                output = 'काही सेकंदां';\n                break;\n\n              case 'm':\n                output = 'एका मिनिटा';\n                break;\n\n              case 'mm':\n                output = '%d मिनिटां';\n                break;\n\n              case 'h':\n                output = 'एका तासा';\n                break;\n\n              case 'hh':\n                output = '%d तासां';\n                break;\n\n              case 'd':\n                output = 'एका दिवसा';\n                break;\n\n              case 'dd':\n                output = '%d दिवसां';\n                break;\n\n              case 'M':\n                output = 'एका महिन्या';\n                break;\n\n              case 'MM':\n                output = '%d महिन्यां';\n                break;\n\n              case 'y':\n                output = 'एका वर्षा';\n                break;\n\n              case 'yy':\n                output = '%d वर्षां';\n                break;\n            }\n          }\n\n          return output.replace(/%d/i, number);\n        }\n\n        var mr = moment.defineLocale('mr', {\n          months: 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),\n          monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),\n          weekdaysShort: 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),\n          weekdaysMin: 'र_सो_मं_बु_गु_शु_श'.split('_'),\n          longDateFormat: {\n            LT: 'A h:mm वाजता',\n            LTS: 'A h:mm:ss वाजता',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY, A h:mm वाजता',\n            LLLL: 'dddd, D MMMM YYYY, A h:mm वाजता'\n          },\n          calendar: {\n            sameDay: '[आज] LT',\n            nextDay: '[उद्या] LT',\n            nextWeek: 'dddd, LT',\n            lastDay: '[काल] LT',\n            lastWeek: '[मागील] dddd, LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%sमध्ये',\n            past: '%sपूर्वी',\n            s: relativeTimeMr,\n            m: relativeTimeMr,\n            mm: relativeTimeMr,\n            h: relativeTimeMr,\n            hh: relativeTimeMr,\n            d: relativeTimeMr,\n            dd: relativeTimeMr,\n            M: relativeTimeMr,\n            MM: relativeTimeMr,\n            y: relativeTimeMr,\n            yy: relativeTimeMr\n          },\n          preparse: function preparse(string) {\n            return string.replace(/[१२३४५६७८९०]/g, function (match) {\n              return numberMap[match];\n            });\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            });\n          },\n          meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'रात्री') {\n              return hour < 4 ? hour : hour + 12;\n            } else if (meridiem === 'सकाळी') {\n              return hour;\n            } else if (meridiem === 'दुपारी') {\n              return hour >= 10 ? hour : hour + 12;\n            } else if (meridiem === 'सायंकाळी') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'रात्री';\n            } else if (hour < 10) {\n              return 'सकाळी';\n            } else if (hour < 17) {\n              return 'दुपारी';\n            } else if (hour < 20) {\n              return 'सायंकाळी';\n            } else {\n              return 'रात्री';\n            }\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return mr;\n      });\n      /***/\n\n    },\n    /* 72 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Malay [ms-my]\n      //! note : DEPRECATED, the correct one is [ms]\n      //! author : Weldan Jamili : https://github.com/weldan\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var msMy = moment.defineLocale('ms-my', {\n          months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),\n          monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),\n          weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),\n          weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),\n          weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),\n          longDateFormat: {\n            LT: 'HH.mm',\n            LTS: 'HH.mm.ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY [pukul] HH.mm',\n            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'\n          },\n          meridiemParse: /pagi|tengahari|petang|malam/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'pagi') {\n              return hour;\n            } else if (meridiem === 'tengahari') {\n              return hour >= 11 ? hour : hour + 12;\n            } else if (meridiem === 'petang' || meridiem === 'malam') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours < 11) {\n              return 'pagi';\n            } else if (hours < 15) {\n              return 'tengahari';\n            } else if (hours < 19) {\n              return 'petang';\n            } else {\n              return 'malam';\n            }\n          },\n          calendar: {\n            sameDay: '[Hari ini pukul] LT',\n            nextDay: '[Esok pukul] LT',\n            nextWeek: 'dddd [pukul] LT',\n            lastDay: '[Kelmarin pukul] LT',\n            lastWeek: 'dddd [lepas pukul] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'dalam %s',\n            past: '%s yang lepas',\n            s: 'beberapa saat',\n            m: 'seminit',\n            mm: '%d minit',\n            h: 'sejam',\n            hh: '%d jam',\n            d: 'sehari',\n            dd: '%d hari',\n            M: 'sebulan',\n            MM: '%d bulan',\n            y: 'setahun',\n            yy: '%d tahun'\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return msMy;\n      });\n      /***/\n\n    },\n    /* 73 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Malay [ms]\n      //! author : Weldan Jamili : https://github.com/weldan\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var ms = moment.defineLocale('ms', {\n          months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),\n          monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),\n          weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),\n          weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),\n          weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),\n          longDateFormat: {\n            LT: 'HH.mm',\n            LTS: 'HH.mm.ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY [pukul] HH.mm',\n            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm'\n          },\n          meridiemParse: /pagi|tengahari|petang|malam/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'pagi') {\n              return hour;\n            } else if (meridiem === 'tengahari') {\n              return hour >= 11 ? hour : hour + 12;\n            } else if (meridiem === 'petang' || meridiem === 'malam') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours < 11) {\n              return 'pagi';\n            } else if (hours < 15) {\n              return 'tengahari';\n            } else if (hours < 19) {\n              return 'petang';\n            } else {\n              return 'malam';\n            }\n          },\n          calendar: {\n            sameDay: '[Hari ini pukul] LT',\n            nextDay: '[Esok pukul] LT',\n            nextWeek: 'dddd [pukul] LT',\n            lastDay: '[Kelmarin pukul] LT',\n            lastWeek: 'dddd [lepas pukul] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'dalam %s',\n            past: '%s yang lepas',\n            s: 'beberapa saat',\n            m: 'seminit',\n            mm: '%d minit',\n            h: 'sejam',\n            hh: '%d jam',\n            d: 'sehari',\n            dd: '%d hari',\n            M: 'sebulan',\n            MM: '%d bulan',\n            y: 'setahun',\n            yy: '%d tahun'\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return ms;\n      });\n      /***/\n\n    },\n    /* 74 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Burmese [my]\n      //! author : Squar team, mysquar.com\n      //! author : David Rossellat : https://github.com/gholadr\n      //! author : Tin Aung Lin : https://github.com/thanyawzinmin\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '၁',\n          '2': '၂',\n          '3': '၃',\n          '4': '၄',\n          '5': '၅',\n          '6': '၆',\n          '7': '၇',\n          '8': '၈',\n          '9': '၉',\n          '0': '၀'\n        };\n        var numberMap = {\n          '၁': '1',\n          '၂': '2',\n          '၃': '3',\n          '၄': '4',\n          '၅': '5',\n          '၆': '6',\n          '၇': '7',\n          '၈': '8',\n          '၉': '9',\n          '၀': '0'\n        };\n        var my = moment.defineLocale('my', {\n          months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),\n          monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),\n          weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),\n          weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),\n          weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[ယနေ.] LT [မှာ]',\n            nextDay: '[မနက်ဖြန်] LT [မှာ]',\n            nextWeek: 'dddd LT [မှာ]',\n            lastDay: '[မနေ.က] LT [မှာ]',\n            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'လာမည့် %s မှာ',\n            past: 'လွန်ခဲ့သော %s က',\n            s: 'စက္ကန်.အနည်းငယ်',\n            m: 'တစ်မိနစ်',\n            mm: '%d မိနစ်',\n            h: 'တစ်နာရီ',\n            hh: '%d နာရီ',\n            d: 'တစ်ရက်',\n            dd: '%d ရက်',\n            M: 'တစ်လ',\n            MM: '%d လ',\n            y: 'တစ်နှစ်',\n            yy: '%d နှစ်'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {\n              return numberMap[match];\n            });\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            });\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return my;\n      });\n      /***/\n\n    },\n    /* 75 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Norwegian Bokmål [nb]\n      //! authors : Espen Hovlandsdal : https://github.com/rexxars\n      //!           Sigurd Gartmann : https://github.com/sigurdga\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var nb = moment.defineLocale('nb', {\n          months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),\n          monthsShort: 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),\n          weekdaysShort: 'sø._ma._ti._on._to._fr._lø.'.split('_'),\n          weekdaysMin: 'sø_ma_ti_on_to_fr_lø'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY [kl.] HH:mm',\n            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'\n          },\n          calendar: {\n            sameDay: '[i dag kl.] LT',\n            nextDay: '[i morgen kl.] LT',\n            nextWeek: 'dddd [kl.] LT',\n            lastDay: '[i går kl.] LT',\n            lastWeek: '[forrige] dddd [kl.] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'om %s',\n            past: '%s siden',\n            s: 'noen sekunder',\n            m: 'ett minutt',\n            mm: '%d minutter',\n            h: 'en time',\n            hh: '%d timer',\n            d: 'en dag',\n            dd: '%d dager',\n            M: 'en måned',\n            MM: '%d måneder',\n            y: 'ett år',\n            yy: '%d år'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return nb;\n      });\n      /***/\n\n    },\n    /* 76 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Nepalese [ne]\n      //! author : suvash : https://github.com/suvash\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '१',\n          '2': '२',\n          '3': '३',\n          '4': '४',\n          '5': '५',\n          '6': '६',\n          '7': '७',\n          '8': '८',\n          '9': '९',\n          '0': '०'\n        };\n        var numberMap = {\n          '१': '1',\n          '२': '2',\n          '३': '3',\n          '४': '4',\n          '५': '5',\n          '६': '6',\n          '७': '7',\n          '८': '8',\n          '९': '9',\n          '०': '0'\n        };\n        var ne = moment.defineLocale('ne', {\n          months: 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),\n          monthsShort: 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),\n          weekdaysShort: 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),\n          weekdaysMin: 'आ._सो._मं._बु._बि._शु._श.'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'Aको h:mm बजे',\n            LTS: 'Aको h:mm:ss बजे',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY, Aको h:mm बजे',\n            LLLL: 'dddd, D MMMM YYYY, Aको h:mm बजे'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/[१२३४५६७८९०]/g, function (match) {\n              return numberMap[match];\n            });\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            });\n          },\n          meridiemParse: /राति|बिहान|दिउँसो|साँझ/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'राति') {\n              return hour < 4 ? hour : hour + 12;\n            } else if (meridiem === 'बिहान') {\n              return hour;\n            } else if (meridiem === 'दिउँसो') {\n              return hour >= 10 ? hour : hour + 12;\n            } else if (meridiem === 'साँझ') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 3) {\n              return 'राति';\n            } else if (hour < 12) {\n              return 'बिहान';\n            } else if (hour < 16) {\n              return 'दिउँसो';\n            } else if (hour < 20) {\n              return 'साँझ';\n            } else {\n              return 'राति';\n            }\n          },\n          calendar: {\n            sameDay: '[आज] LT',\n            nextDay: '[भोलि] LT',\n            nextWeek: '[आउँदो] dddd[,] LT',\n            lastDay: '[हिजो] LT',\n            lastWeek: '[गएको] dddd[,] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%sमा',\n            past: '%s अगाडि',\n            s: 'केही क्षण',\n            m: 'एक मिनेट',\n            mm: '%d मिनेट',\n            h: 'एक घण्टा',\n            hh: '%d घण्टा',\n            d: 'एक दिन',\n            dd: '%d दिन',\n            M: 'एक महिना',\n            MM: '%d महिना',\n            y: 'एक बर्ष',\n            yy: '%d बर्ष'\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return ne;\n      });\n      /***/\n\n    },\n    /* 77 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Dutch (Belgium) [nl-be]\n      //! author : Joris Röling : https://github.com/jorisroling\n      //! author : Jacob Middag : https://github.com/middagj\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');\n        var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');\n        var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];\n        var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\\.?|feb\\.?|mrt\\.?|apr\\.?|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i;\n        var nlBe = moment.defineLocale('nl-be', {\n          months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),\n          monthsShort: function monthsShort(m, format) {\n            if (!m) {\n              return monthsShortWithDots;\n            } else if (/-MMM-/.test(format)) {\n              return monthsShortWithoutDots[m.month()];\n            } else {\n              return monthsShortWithDots[m.month()];\n            }\n          },\n          monthsRegex: monthsRegex,\n          monthsShortRegex: monthsRegex,\n          monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,\n          monthsShortStrictRegex: /^(jan\\.?|feb\\.?|mrt\\.?|apr\\.?|mei|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i,\n          monthsParse: monthsParse,\n          longMonthsParse: monthsParse,\n          shortMonthsParse: monthsParse,\n          weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),\n          weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),\n          weekdaysMin: 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[vandaag om] LT',\n            nextDay: '[morgen om] LT',\n            nextWeek: 'dddd [om] LT',\n            lastDay: '[gisteren om] LT',\n            lastWeek: '[afgelopen] dddd [om] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'over %s',\n            past: '%s geleden',\n            s: 'een paar seconden',\n            m: 'één minuut',\n            mm: '%d minuten',\n            h: 'één uur',\n            hh: '%d uur',\n            d: 'één dag',\n            dd: '%d dagen',\n            M: 'één maand',\n            MM: '%d maanden',\n            y: 'één jaar',\n            yy: '%d jaar'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(ste|de)/,\n          ordinal: function ordinal(number) {\n            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return nlBe;\n      });\n      /***/\n\n    },\n    /* 78 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Dutch [nl]\n      //! author : Joris Röling : https://github.com/jorisroling\n      //! author : Jacob Middag : https://github.com/middagj\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');\n        var monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');\n        var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];\n        var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\\.?|feb\\.?|mrt\\.?|apr\\.?|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i;\n        var nl = moment.defineLocale('nl', {\n          months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),\n          monthsShort: function monthsShort(m, format) {\n            if (!m) {\n              return monthsShortWithDots;\n            } else if (/-MMM-/.test(format)) {\n              return monthsShortWithoutDots[m.month()];\n            } else {\n              return monthsShortWithDots[m.month()];\n            }\n          },\n          monthsRegex: monthsRegex,\n          monthsShortRegex: monthsRegex,\n          monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,\n          monthsShortStrictRegex: /^(jan\\.?|feb\\.?|mrt\\.?|apr\\.?|mei|ju[nl]\\.?|aug\\.?|sep\\.?|okt\\.?|nov\\.?|dec\\.?)/i,\n          monthsParse: monthsParse,\n          longMonthsParse: monthsParse,\n          shortMonthsParse: monthsParse,\n          weekdays: 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),\n          weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),\n          weekdaysMin: 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD-MM-YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[vandaag om] LT',\n            nextDay: '[morgen om] LT',\n            nextWeek: 'dddd [om] LT',\n            lastDay: '[gisteren om] LT',\n            lastWeek: '[afgelopen] dddd [om] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'over %s',\n            past: '%s geleden',\n            s: 'een paar seconden',\n            m: 'één minuut',\n            mm: '%d minuten',\n            h: 'één uur',\n            hh: '%d uur',\n            d: 'één dag',\n            dd: '%d dagen',\n            M: 'één maand',\n            MM: '%d maanden',\n            y: 'één jaar',\n            yy: '%d jaar'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(ste|de)/,\n          ordinal: function ordinal(number) {\n            return number + (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de');\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return nl;\n      });\n      /***/\n\n    },\n    /* 79 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Nynorsk [nn]\n      //! author : https://github.com/mechuwind\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var nn = moment.defineLocale('nn', {\n          months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),\n          monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),\n          weekdays: 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),\n          weekdaysShort: 'sun_mån_tys_ons_tor_fre_lau'.split('_'),\n          weekdaysMin: 'su_må_ty_on_to_fr_lø'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY [kl.] H:mm',\n            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm'\n          },\n          calendar: {\n            sameDay: '[I dag klokka] LT',\n            nextDay: '[I morgon klokka] LT',\n            nextWeek: 'dddd [klokka] LT',\n            lastDay: '[I går klokka] LT',\n            lastWeek: '[Føregåande] dddd [klokka] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'om %s',\n            past: '%s sidan',\n            s: 'nokre sekund',\n            m: 'eit minutt',\n            mm: '%d minutt',\n            h: 'ein time',\n            hh: '%d timar',\n            d: 'ein dag',\n            dd: '%d dagar',\n            M: 'ein månad',\n            MM: '%d månader',\n            y: 'eit år',\n            yy: '%d år'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return nn;\n      });\n      /***/\n\n    },\n    /* 80 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Punjabi (India) [pa-in]\n      //! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '੧',\n          '2': '੨',\n          '3': '੩',\n          '4': '੪',\n          '5': '੫',\n          '6': '੬',\n          '7': '੭',\n          '8': '੮',\n          '9': '੯',\n          '0': '੦'\n        };\n        var numberMap = {\n          '੧': '1',\n          '੨': '2',\n          '੩': '3',\n          '੪': '4',\n          '੫': '5',\n          '੬': '6',\n          '੭': '7',\n          '੮': '8',\n          '੯': '9',\n          '੦': '0'\n        };\n        var paIn = moment.defineLocale('pa-in', {\n          // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.\n          months: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),\n          monthsShort: 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),\n          weekdays: 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),\n          weekdaysShort: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),\n          weekdaysMin: 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),\n          longDateFormat: {\n            LT: 'A h:mm ਵਜੇ',\n            LTS: 'A h:mm:ss ਵਜੇ',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY, A h:mm ਵਜੇ',\n            LLLL: 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'\n          },\n          calendar: {\n            sameDay: '[ਅਜ] LT',\n            nextDay: '[ਕਲ] LT',\n            nextWeek: 'dddd, LT',\n            lastDay: '[ਕਲ] LT',\n            lastWeek: '[ਪਿਛਲੇ] dddd, LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s ਵਿੱਚ',\n            past: '%s ਪਿਛਲੇ',\n            s: 'ਕੁਝ ਸਕਿੰਟ',\n            m: 'ਇਕ ਮਿੰਟ',\n            mm: '%d ਮਿੰਟ',\n            h: 'ਇੱਕ ਘੰਟਾ',\n            hh: '%d ਘੰਟੇ',\n            d: 'ਇੱਕ ਦਿਨ',\n            dd: '%d ਦਿਨ',\n            M: 'ਇੱਕ ਮਹੀਨਾ',\n            MM: '%d ਮਹੀਨੇ',\n            y: 'ਇੱਕ ਸਾਲ',\n            yy: '%d ਸਾਲ'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {\n              return numberMap[match];\n            });\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            });\n          },\n          // Punjabi notation for meridiems are quite fuzzy in practice. While there exists\n          // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.\n          meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'ਰਾਤ') {\n              return hour < 4 ? hour : hour + 12;\n            } else if (meridiem === 'ਸਵੇਰ') {\n              return hour;\n            } else if (meridiem === 'ਦੁਪਹਿਰ') {\n              return hour >= 10 ? hour : hour + 12;\n            } else if (meridiem === 'ਸ਼ਾਮ') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'ਰਾਤ';\n            } else if (hour < 10) {\n              return 'ਸਵੇਰ';\n            } else if (hour < 17) {\n              return 'ਦੁਪਹਿਰ';\n            } else if (hour < 20) {\n              return 'ਸ਼ਾਮ';\n            } else {\n              return 'ਰਾਤ';\n            }\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return paIn;\n      });\n      /***/\n\n    },\n    /* 81 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Polish [pl]\n      //! author : Rafal Hirsz : https://github.com/evoL\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_');\n        var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');\n\n        function plural(n) {\n          return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;\n        }\n\n        function translate(number, withoutSuffix, key) {\n          var result = number + ' ';\n\n          switch (key) {\n            case 'm':\n              return withoutSuffix ? 'minuta' : 'minutę';\n\n            case 'mm':\n              return result + (plural(number) ? 'minuty' : 'minut');\n\n            case 'h':\n              return withoutSuffix ? 'godzina' : 'godzinę';\n\n            case 'hh':\n              return result + (plural(number) ? 'godziny' : 'godzin');\n\n            case 'MM':\n              return result + (plural(number) ? 'miesiące' : 'miesięcy');\n\n            case 'yy':\n              return result + (plural(number) ? 'lata' : 'lat');\n          }\n        }\n\n        var pl = moment.defineLocale('pl', {\n          months: function months(momentToFormat, format) {\n            if (!momentToFormat) {\n              return monthsNominative;\n            } else if (format === '') {\n              // Hack: if format empty we know this is used to generate\n              // RegExp by moment. Give then back both valid forms of months\n              // in RegExp ready format.\n              return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';\n            } else if (/D MMMM/.test(format)) {\n              return monthsSubjective[momentToFormat.month()];\n            } else {\n              return monthsNominative[momentToFormat.month()];\n            }\n          },\n          monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),\n          weekdays: 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),\n          weekdaysShort: 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),\n          weekdaysMin: 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Dziś o] LT',\n            nextDay: '[Jutro o] LT',\n            nextWeek: '[W] dddd [o] LT',\n            lastDay: '[Wczoraj o] LT',\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[W zeszłą niedzielę o] LT';\n\n                case 3:\n                  return '[W zeszłą środę o] LT';\n\n                case 6:\n                  return '[W zeszłą sobotę o] LT';\n\n                default:\n                  return '[W zeszły] dddd [o] LT';\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'za %s',\n            past: '%s temu',\n            s: 'kilka sekund',\n            m: translate,\n            mm: translate,\n            h: translate,\n            hh: translate,\n            d: '1 dzień',\n            dd: '%d dni',\n            M: 'miesiąc',\n            MM: translate,\n            y: 'rok',\n            yy: translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return pl;\n      });\n      /***/\n\n    },\n    /* 82 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Portuguese (Brazil) [pt-br]\n      //! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var ptBr = moment.defineLocale('pt-br', {\n          months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),\n          monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),\n          weekdays: 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),\n          weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),\n          weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D [de] MMMM [de] YYYY',\n            LLL: 'D [de] MMMM [de] YYYY [às] HH:mm',\n            LLLL: 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'\n          },\n          calendar: {\n            sameDay: '[Hoje às] LT',\n            nextDay: '[Amanhã às] LT',\n            nextWeek: 'dddd [às] LT',\n            lastDay: '[Ontem às] LT',\n            lastWeek: function lastWeek() {\n              return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' : // Saturday + Sunday\n              '[Última] dddd [às] LT'; // Monday - Friday\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'em %s',\n            past: '%s atrás',\n            s: 'poucos segundos',\n            m: 'um minuto',\n            mm: '%d minutos',\n            h: 'uma hora',\n            hh: '%d horas',\n            d: 'um dia',\n            dd: '%d dias',\n            M: 'um mês',\n            MM: '%d meses',\n            y: 'um ano',\n            yy: '%d anos'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}º/,\n          ordinal: '%dº'\n        });\n        return ptBr;\n      });\n      /***/\n\n    },\n    /* 83 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Portuguese [pt]\n      //! author : Jefferson : https://github.com/jalex79\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var pt = moment.defineLocale('pt', {\n          months: 'Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),\n          monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),\n          weekdays: 'Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado'.split('_'),\n          weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),\n          weekdaysMin: 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D [de] MMMM [de] YYYY',\n            LLL: 'D [de] MMMM [de] YYYY HH:mm',\n            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Hoje às] LT',\n            nextDay: '[Amanhã às] LT',\n            nextWeek: 'dddd [às] LT',\n            lastDay: '[Ontem às] LT',\n            lastWeek: function lastWeek() {\n              return this.day() === 0 || this.day() === 6 ? '[Último] dddd [às] LT' : // Saturday + Sunday\n              '[Última] dddd [às] LT'; // Monday - Friday\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'em %s',\n            past: 'há %s',\n            s: 'segundos',\n            m: 'um minuto',\n            mm: '%d minutos',\n            h: 'uma hora',\n            hh: '%d horas',\n            d: 'um dia',\n            dd: '%d dias',\n            M: 'um mês',\n            MM: '%d meses',\n            y: 'um ano',\n            yy: '%d anos'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}º/,\n          ordinal: '%dº',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return pt;\n      });\n      /***/\n\n    },\n    /* 84 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Romanian [ro]\n      //! author : Vlad Gurdiga : https://github.com/gurdiga\n      //! author : Valentin Agachi : https://github.com/avaly\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function relativeTimeWithPlural(number, withoutSuffix, key) {\n          var format = {\n            'mm': 'minute',\n            'hh': 'ore',\n            'dd': 'zile',\n            'MM': 'luni',\n            'yy': 'ani'\n          },\n              separator = ' ';\n\n          if (number % 100 >= 20 || number >= 100 && number % 100 === 0) {\n            separator = ' de ';\n          }\n\n          return number + separator + format[key];\n        }\n\n        var ro = moment.defineLocale('ro', {\n          months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),\n          monthsShort: 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),\n          weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),\n          weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY H:mm',\n            LLLL: 'dddd, D MMMM YYYY H:mm'\n          },\n          calendar: {\n            sameDay: '[azi la] LT',\n            nextDay: '[mâine la] LT',\n            nextWeek: 'dddd [la] LT',\n            lastDay: '[ieri la] LT',\n            lastWeek: '[fosta] dddd [la] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'peste %s',\n            past: '%s în urmă',\n            s: 'câteva secunde',\n            m: 'un minut',\n            mm: relativeTimeWithPlural,\n            h: 'o oră',\n            hh: relativeTimeWithPlural,\n            d: 'o zi',\n            dd: relativeTimeWithPlural,\n            M: 'o lună',\n            MM: relativeTimeWithPlural,\n            y: 'un an',\n            yy: relativeTimeWithPlural\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return ro;\n      });\n      /***/\n\n    },\n    /* 85 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Russian [ru]\n      //! author : Viktorminator : https://github.com/Viktorminator\n      //! Author : Menelion Elensúle : https://github.com/Oire\n      //! author : Коренберг Марк : https://github.com/socketpair\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function plural(word, num) {\n          var forms = word.split('_');\n          return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];\n        }\n\n        function relativeTimeWithPlural(number, withoutSuffix, key) {\n          var format = {\n            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',\n            'hh': 'час_часа_часов',\n            'dd': 'день_дня_дней',\n            'MM': 'месяц_месяца_месяцев',\n            'yy': 'год_года_лет'\n          };\n\n          if (key === 'm') {\n            return withoutSuffix ? 'минута' : 'минуту';\n          } else {\n            return number + ' ' + plural(format[key], +number);\n          }\n        }\n\n        var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i]; // http://new.gramota.ru/spravka/rules/139-prop : § 103\n        // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637\n        // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753\n\n        var ru = moment.defineLocale('ru', {\n          months: {\n            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),\n            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')\n          },\n          monthsShort: {\n            // по CLDR именно \"июл.\" и \"июн.\", но какой смысл менять букву на точку ?\n            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),\n            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')\n          },\n          weekdays: {\n            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),\n            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),\n            isFormat: /\\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\\] ?dddd/\n          },\n          weekdaysShort: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n          weekdaysMin: 'вс_пн_вт_ср_чт_пт_сб'.split('_'),\n          monthsParse: monthsParse,\n          longMonthsParse: monthsParse,\n          shortMonthsParse: monthsParse,\n          // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки\n          monthsRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n          // копия предыдущего\n          monthsShortRegex: /^(январ[ья]|янв\\.?|феврал[ья]|февр?\\.?|марта?|мар\\.?|апрел[ья]|апр\\.?|ма[йя]|июн[ья]|июн\\.?|июл[ья]|июл\\.?|августа?|авг\\.?|сентябр[ья]|сент?\\.?|октябр[ья]|окт\\.?|ноябр[ья]|нояб?\\.?|декабр[ья]|дек\\.?)/i,\n          // полные названия с падежами\n          monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,\n          // Выражение, которое соотвествует только сокращённым формам\n          monthsShortStrictRegex: /^(янв\\.|февр?\\.|мар[т.]|апр\\.|ма[яй]|июн[ья.]|июл[ья.]|авг\\.|сент?\\.|окт\\.|нояб?\\.|дек\\.)/i,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY г.',\n            LLL: 'D MMMM YYYY г., HH:mm',\n            LLLL: 'dddd, D MMMM YYYY г., HH:mm'\n          },\n          calendar: {\n            sameDay: '[Сегодня в] LT',\n            nextDay: '[Завтра в] LT',\n            lastDay: '[Вчера в] LT',\n            nextWeek: function nextWeek(now) {\n              if (now.week() !== this.week()) {\n                switch (this.day()) {\n                  case 0:\n                    return '[В следующее] dddd [в] LT';\n\n                  case 1:\n                  case 2:\n                  case 4:\n                    return '[В следующий] dddd [в] LT';\n\n                  case 3:\n                  case 5:\n                  case 6:\n                    return '[В следующую] dddd [в] LT';\n                }\n              } else {\n                if (this.day() === 2) {\n                  return '[Во] dddd [в] LT';\n                } else {\n                  return '[В] dddd [в] LT';\n                }\n              }\n            },\n            lastWeek: function lastWeek(now) {\n              if (now.week() !== this.week()) {\n                switch (this.day()) {\n                  case 0:\n                    return '[В прошлое] dddd [в] LT';\n\n                  case 1:\n                  case 2:\n                  case 4:\n                    return '[В прошлый] dddd [в] LT';\n\n                  case 3:\n                  case 5:\n                  case 6:\n                    return '[В прошлую] dddd [в] LT';\n                }\n              } else {\n                if (this.day() === 2) {\n                  return '[Во] dddd [в] LT';\n                } else {\n                  return '[В] dddd [в] LT';\n                }\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'через %s',\n            past: '%s назад',\n            s: 'несколько секунд',\n            m: relativeTimeWithPlural,\n            mm: relativeTimeWithPlural,\n            h: 'час',\n            hh: relativeTimeWithPlural,\n            d: 'день',\n            dd: relativeTimeWithPlural,\n            M: 'месяц',\n            MM: relativeTimeWithPlural,\n            y: 'год',\n            yy: relativeTimeWithPlural\n          },\n          meridiemParse: /ночи|утра|дня|вечера/i,\n          isPM: function isPM(input) {\n            return /^(дня|вечера)$/.test(input);\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'ночи';\n            } else if (hour < 12) {\n              return 'утра';\n            } else if (hour < 17) {\n              return 'дня';\n            } else {\n              return 'вечера';\n            }\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}-(й|го|я)/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              case 'M':\n              case 'd':\n              case 'DDD':\n                return number + '-й';\n\n              case 'D':\n                return number + '-го';\n\n              case 'w':\n              case 'W':\n                return number + '-я';\n\n              default:\n                return number;\n            }\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return ru;\n      });\n      /***/\n\n    },\n    /* 86 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Sindhi [sd]\n      //! author : Narain Sagar : https://github.com/narainsagar\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var months = ['جنوري', 'فيبروري', 'مارچ', 'اپريل', 'مئي', 'جون', 'جولاءِ', 'آگسٽ', 'سيپٽمبر', 'آڪٽوبر', 'نومبر', 'ڊسمبر'];\n        var days = ['آچر', 'سومر', 'اڱارو', 'اربع', 'خميس', 'جمع', 'ڇنڇر'];\n        var sd = moment.defineLocale('sd', {\n          months: months,\n          monthsShort: months,\n          weekdays: days,\n          weekdaysShort: days,\n          weekdaysMin: days,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd، D MMMM YYYY HH:mm'\n          },\n          meridiemParse: /صبح|شام/,\n          isPM: function isPM(input) {\n            return 'شام' === input;\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 12) {\n              return 'صبح';\n            }\n\n            return 'شام';\n          },\n          calendar: {\n            sameDay: '[اڄ] LT',\n            nextDay: '[سڀاڻي] LT',\n            nextWeek: 'dddd [اڳين هفتي تي] LT',\n            lastDay: '[ڪالهه] LT',\n            lastWeek: '[گزريل هفتي] dddd [تي] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s پوء',\n            past: '%s اڳ',\n            s: 'چند سيڪنڊ',\n            m: 'هڪ منٽ',\n            mm: '%d منٽ',\n            h: 'هڪ ڪلاڪ',\n            hh: '%d ڪلاڪ',\n            d: 'هڪ ڏينهن',\n            dd: '%d ڏينهن',\n            M: 'هڪ مهينو',\n            MM: '%d مهينا',\n            y: 'هڪ سال',\n            yy: '%d سال'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/،/g, ',');\n          },\n          postformat: function postformat(string) {\n            return string.replace(/,/g, '،');\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return sd;\n      });\n      /***/\n\n    },\n    /* 87 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Northern Sami [se]\n      //! authors : Bård Rolstad Henriksen : https://github.com/karamell\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var se = moment.defineLocale('se', {\n          months: 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),\n          monthsShort: 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),\n          weekdays: 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),\n          weekdaysShort: 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),\n          weekdaysMin: 's_v_m_g_d_b_L'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'MMMM D. [b.] YYYY',\n            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',\n            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'\n          },\n          calendar: {\n            sameDay: '[otne ti] LT',\n            nextDay: '[ihttin ti] LT',\n            nextWeek: 'dddd [ti] LT',\n            lastDay: '[ikte ti] LT',\n            lastWeek: '[ovddit] dddd [ti] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s geažes',\n            past: 'maŋit %s',\n            s: 'moadde sekunddat',\n            m: 'okta minuhta',\n            mm: '%d minuhtat',\n            h: 'okta diimmu',\n            hh: '%d diimmut',\n            d: 'okta beaivi',\n            dd: '%d beaivvit',\n            M: 'okta mánnu',\n            MM: '%d mánut',\n            y: 'okta jahki',\n            yy: '%d jagit'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return se;\n      });\n      /***/\n\n    },\n    /* 88 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Sinhalese [si]\n      //! author : Sampath Sitinamaluwa : https://github.com/sampathsris\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n        /*jshint -W100*/\n\n        var si = moment.defineLocale('si', {\n          months: 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),\n          monthsShort: 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),\n          weekdays: 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),\n          weekdaysShort: 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),\n          weekdaysMin: 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'a h:mm',\n            LTS: 'a h:mm:ss',\n            L: 'YYYY/MM/DD',\n            LL: 'YYYY MMMM D',\n            LLL: 'YYYY MMMM D, a h:mm',\n            LLLL: 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'\n          },\n          calendar: {\n            sameDay: '[අද] LT[ට]',\n            nextDay: '[හෙට] LT[ට]',\n            nextWeek: 'dddd LT[ට]',\n            lastDay: '[ඊයේ] LT[ට]',\n            lastWeek: '[පසුගිය] dddd LT[ට]',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%sකින්',\n            past: '%sකට පෙර',\n            s: 'තත්පර කිහිපය',\n            m: 'මිනිත්තුව',\n            mm: 'මිනිත්තු %d',\n            h: 'පැය',\n            hh: 'පැය %d',\n            d: 'දිනය',\n            dd: 'දින %d',\n            M: 'මාසය',\n            MM: 'මාස %d',\n            y: 'වසර',\n            yy: 'වසර %d'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2} වැනි/,\n          ordinal: function ordinal(number) {\n            return number + ' වැනි';\n          },\n          meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,\n          isPM: function isPM(input) {\n            return input === 'ප.ව.' || input === 'පස් වරු';\n          },\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours > 11) {\n              return isLower ? 'ප.ව.' : 'පස් වරු';\n            } else {\n              return isLower ? 'පෙ.ව.' : 'පෙර වරු';\n            }\n          }\n        });\n        return si;\n      });\n      /***/\n\n    },\n    /* 89 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Slovak [sk]\n      //! author : Martin Minka : https://github.com/k2s\n      //! based on work of petrbela : https://github.com/petrbela\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_');\n        var monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');\n\n        function plural(n) {\n          return n > 1 && n < 5;\n        }\n\n        function translate(number, withoutSuffix, key, isFuture) {\n          var result = number + ' ';\n\n          switch (key) {\n            case 's':\n              // a few seconds / in a few seconds / a few seconds ago\n              return withoutSuffix || isFuture ? 'pár sekúnd' : 'pár sekundami';\n\n            case 'm':\n              // a minute / in a minute / a minute ago\n              return withoutSuffix ? 'minúta' : isFuture ? 'minútu' : 'minútou';\n\n            case 'mm':\n              // 9 minutes / in 9 minutes / 9 minutes ago\n              if (withoutSuffix || isFuture) {\n                return result + (plural(number) ? 'minúty' : 'minút');\n              } else {\n                return result + 'minútami';\n              }\n\n              break;\n\n            case 'h':\n              // an hour / in an hour / an hour ago\n              return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';\n\n            case 'hh':\n              // 9 hours / in 9 hours / 9 hours ago\n              if (withoutSuffix || isFuture) {\n                return result + (plural(number) ? 'hodiny' : 'hodín');\n              } else {\n                return result + 'hodinami';\n              }\n\n              break;\n\n            case 'd':\n              // a day / in a day / a day ago\n              return withoutSuffix || isFuture ? 'deň' : 'dňom';\n\n            case 'dd':\n              // 9 days / in 9 days / 9 days ago\n              if (withoutSuffix || isFuture) {\n                return result + (plural(number) ? 'dni' : 'dní');\n              } else {\n                return result + 'dňami';\n              }\n\n              break;\n\n            case 'M':\n              // a month / in a month / a month ago\n              return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';\n\n            case 'MM':\n              // 9 months / in 9 months / 9 months ago\n              if (withoutSuffix || isFuture) {\n                return result + (plural(number) ? 'mesiace' : 'mesiacov');\n              } else {\n                return result + 'mesiacmi';\n              }\n\n              break;\n\n            case 'y':\n              // a year / in a year / a year ago\n              return withoutSuffix || isFuture ? 'rok' : 'rokom';\n\n            case 'yy':\n              // 9 years / in 9 years / 9 years ago\n              if (withoutSuffix || isFuture) {\n                return result + (plural(number) ? 'roky' : 'rokov');\n              } else {\n                return result + 'rokmi';\n              }\n\n              break;\n          }\n        }\n\n        var sk = moment.defineLocale('sk', {\n          months: months,\n          monthsShort: monthsShort,\n          weekdays: 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),\n          weekdaysShort: 'ne_po_ut_st_št_pi_so'.split('_'),\n          weekdaysMin: 'ne_po_ut_st_št_pi_so'.split('_'),\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY H:mm',\n            LLLL: 'dddd D. MMMM YYYY H:mm'\n          },\n          calendar: {\n            sameDay: '[dnes o] LT',\n            nextDay: '[zajtra o] LT',\n            nextWeek: function nextWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[v nedeľu o] LT';\n\n                case 1:\n                case 2:\n                  return '[v] dddd [o] LT';\n\n                case 3:\n                  return '[v stredu o] LT';\n\n                case 4:\n                  return '[vo štvrtok o] LT';\n\n                case 5:\n                  return '[v piatok o] LT';\n\n                case 6:\n                  return '[v sobotu o] LT';\n              }\n            },\n            lastDay: '[včera o] LT',\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[minulú nedeľu o] LT';\n\n                case 1:\n                case 2:\n                  return '[minulý] dddd [o] LT';\n\n                case 3:\n                  return '[minulú stredu o] LT';\n\n                case 4:\n                case 5:\n                  return '[minulý] dddd [o] LT';\n\n                case 6:\n                  return '[minulú sobotu o] LT';\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'za %s',\n            past: 'pred %s',\n            s: translate,\n            m: translate,\n            mm: translate,\n            h: translate,\n            hh: translate,\n            d: translate,\n            dd: translate,\n            M: translate,\n            MM: translate,\n            y: translate,\n            yy: translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return sk;\n      });\n      /***/\n\n    },\n    /* 90 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Slovenian [sl]\n      //! author : Robert Sedovšek : https://github.com/sedovsek\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function processRelativeTime(number, withoutSuffix, key, isFuture) {\n          var result = number + ' ';\n\n          switch (key) {\n            case 's':\n              return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';\n\n            case 'm':\n              return withoutSuffix ? 'ena minuta' : 'eno minuto';\n\n            case 'mm':\n              if (number === 1) {\n                result += withoutSuffix ? 'minuta' : 'minuto';\n              } else if (number === 2) {\n                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';\n              } else if (number < 5) {\n                result += withoutSuffix || isFuture ? 'minute' : 'minutami';\n              } else {\n                result += withoutSuffix || isFuture ? 'minut' : 'minutami';\n              }\n\n              return result;\n\n            case 'h':\n              return withoutSuffix ? 'ena ura' : 'eno uro';\n\n            case 'hh':\n              if (number === 1) {\n                result += withoutSuffix ? 'ura' : 'uro';\n              } else if (number === 2) {\n                result += withoutSuffix || isFuture ? 'uri' : 'urama';\n              } else if (number < 5) {\n                result += withoutSuffix || isFuture ? 'ure' : 'urami';\n              } else {\n                result += withoutSuffix || isFuture ? 'ur' : 'urami';\n              }\n\n              return result;\n\n            case 'd':\n              return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';\n\n            case 'dd':\n              if (number === 1) {\n                result += withoutSuffix || isFuture ? 'dan' : 'dnem';\n              } else if (number === 2) {\n                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';\n              } else {\n                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';\n              }\n\n              return result;\n\n            case 'M':\n              return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';\n\n            case 'MM':\n              if (number === 1) {\n                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';\n              } else if (number === 2) {\n                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';\n              } else if (number < 5) {\n                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';\n              } else {\n                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';\n              }\n\n              return result;\n\n            case 'y':\n              return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';\n\n            case 'yy':\n              if (number === 1) {\n                result += withoutSuffix || isFuture ? 'leto' : 'letom';\n              } else if (number === 2) {\n                result += withoutSuffix || isFuture ? 'leti' : 'letoma';\n              } else if (number < 5) {\n                result += withoutSuffix || isFuture ? 'leta' : 'leti';\n              } else {\n                result += withoutSuffix || isFuture ? 'let' : 'leti';\n              }\n\n              return result;\n          }\n        }\n\n        var sl = moment.defineLocale('sl', {\n          months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),\n          monthsShort: 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),\n          weekdaysShort: 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),\n          weekdaysMin: 'ne_po_to_sr_če_pe_so'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY H:mm',\n            LLLL: 'dddd, D. MMMM YYYY H:mm'\n          },\n          calendar: {\n            sameDay: '[danes ob] LT',\n            nextDay: '[jutri ob] LT',\n            nextWeek: function nextWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[v] [nedeljo] [ob] LT';\n\n                case 3:\n                  return '[v] [sredo] [ob] LT';\n\n                case 6:\n                  return '[v] [soboto] [ob] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                  return '[v] dddd [ob] LT';\n              }\n            },\n            lastDay: '[včeraj ob] LT',\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[prejšnjo] [nedeljo] [ob] LT';\n\n                case 3:\n                  return '[prejšnjo] [sredo] [ob] LT';\n\n                case 6:\n                  return '[prejšnjo] [soboto] [ob] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                  return '[prejšnji] dddd [ob] LT';\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'čez %s',\n            past: 'pred %s',\n            s: processRelativeTime,\n            m: processRelativeTime,\n            mm: processRelativeTime,\n            h: processRelativeTime,\n            hh: processRelativeTime,\n            d: processRelativeTime,\n            dd: processRelativeTime,\n            M: processRelativeTime,\n            MM: processRelativeTime,\n            y: processRelativeTime,\n            yy: processRelativeTime\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return sl;\n      });\n      /***/\n\n    },\n    /* 91 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Albanian [sq]\n      //! author : Flakërim Ismani : https://github.com/flakerimi\n      //! author : Menelion Elensúle : https://github.com/Oire\n      //! author : Oerd Cukalla : https://github.com/oerd\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var sq = moment.defineLocale('sq', {\n          months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),\n          monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),\n          weekdays: 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),\n          weekdaysShort: 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),\n          weekdaysMin: 'D_H_Ma_Më_E_P_Sh'.split('_'),\n          weekdaysParseExact: true,\n          meridiemParse: /PD|MD/,\n          isPM: function isPM(input) {\n            return input.charAt(0) === 'M';\n          },\n          meridiem: function meridiem(hours, minutes, isLower) {\n            return hours < 12 ? 'PD' : 'MD';\n          },\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Sot në] LT',\n            nextDay: '[Nesër në] LT',\n            nextWeek: 'dddd [në] LT',\n            lastDay: '[Dje në] LT',\n            lastWeek: 'dddd [e kaluar në] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'në %s',\n            past: '%s më parë',\n            s: 'disa sekonda',\n            m: 'një minutë',\n            mm: '%d minuta',\n            h: 'një orë',\n            hh: '%d orë',\n            d: 'një ditë',\n            dd: '%d ditë',\n            M: 'një muaj',\n            MM: '%d muaj',\n            y: 'një vit',\n            yy: '%d vite'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return sq;\n      });\n      /***/\n\n    },\n    /* 92 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Serbian Cyrillic [sr-cyrl]\n      //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var translator = {\n          words: {\n            //Different grammatical cases\n            m: ['један минут', 'једне минуте'],\n            mm: ['минут', 'минуте', 'минута'],\n            h: ['један сат', 'једног сата'],\n            hh: ['сат', 'сата', 'сати'],\n            dd: ['дан', 'дана', 'дана'],\n            MM: ['месец', 'месеца', 'месеци'],\n            yy: ['година', 'године', 'година']\n          },\n          correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {\n            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];\n          },\n          translate: function translate(number, withoutSuffix, key) {\n            var wordKey = translator.words[key];\n\n            if (key.length === 1) {\n              return withoutSuffix ? wordKey[0] : wordKey[1];\n            } else {\n              return number + ' ' + translator.correctGrammaticalCase(number, wordKey);\n            }\n          }\n        };\n        var srCyrl = moment.defineLocale('sr-cyrl', {\n          months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),\n          monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),\n          weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),\n          weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY H:mm',\n            LLLL: 'dddd, D. MMMM YYYY H:mm'\n          },\n          calendar: {\n            sameDay: '[данас у] LT',\n            nextDay: '[сутра у] LT',\n            nextWeek: function nextWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[у] [недељу] [у] LT';\n\n                case 3:\n                  return '[у] [среду] [у] LT';\n\n                case 6:\n                  return '[у] [суботу] [у] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                  return '[у] dddd [у] LT';\n              }\n            },\n            lastDay: '[јуче у] LT',\n            lastWeek: function lastWeek() {\n              var lastWeekDays = ['[прошле] [недеље] [у] LT', '[прошлог] [понедељка] [у] LT', '[прошлог] [уторка] [у] LT', '[прошле] [среде] [у] LT', '[прошлог] [четвртка] [у] LT', '[прошлог] [петка] [у] LT', '[прошле] [суботе] [у] LT'];\n              return lastWeekDays[this.day()];\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'за %s',\n            past: 'пре %s',\n            s: 'неколико секунди',\n            m: translator.translate,\n            mm: translator.translate,\n            h: translator.translate,\n            hh: translator.translate,\n            d: 'дан',\n            dd: translator.translate,\n            M: 'месец',\n            MM: translator.translate,\n            y: 'годину',\n            yy: translator.translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return srCyrl;\n      });\n      /***/\n\n    },\n    /* 93 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Serbian [sr]\n      //! author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var translator = {\n          words: {\n            //Different grammatical cases\n            m: ['jedan minut', 'jedne minute'],\n            mm: ['minut', 'minute', 'minuta'],\n            h: ['jedan sat', 'jednog sata'],\n            hh: ['sat', 'sata', 'sati'],\n            dd: ['dan', 'dana', 'dana'],\n            MM: ['mesec', 'meseca', 'meseci'],\n            yy: ['godina', 'godine', 'godina']\n          },\n          correctGrammaticalCase: function correctGrammaticalCase(number, wordKey) {\n            return number === 1 ? wordKey[0] : number >= 2 && number <= 4 ? wordKey[1] : wordKey[2];\n          },\n          translate: function translate(number, withoutSuffix, key) {\n            var wordKey = translator.words[key];\n\n            if (key.length === 1) {\n              return withoutSuffix ? wordKey[0] : wordKey[1];\n            } else {\n              return number + ' ' + translator.correctGrammaticalCase(number, wordKey);\n            }\n          }\n        };\n        var sr = moment.defineLocale('sr', {\n          months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),\n          monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),\n          weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),\n          weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM YYYY',\n            LLL: 'D. MMMM YYYY H:mm',\n            LLLL: 'dddd, D. MMMM YYYY H:mm'\n          },\n          calendar: {\n            sameDay: '[danas u] LT',\n            nextDay: '[sutra u] LT',\n            nextWeek: function nextWeek() {\n              switch (this.day()) {\n                case 0:\n                  return '[u] [nedelju] [u] LT';\n\n                case 3:\n                  return '[u] [sredu] [u] LT';\n\n                case 6:\n                  return '[u] [subotu] [u] LT';\n\n                case 1:\n                case 2:\n                case 4:\n                case 5:\n                  return '[u] dddd [u] LT';\n              }\n            },\n            lastDay: '[juče u] LT',\n            lastWeek: function lastWeek() {\n              var lastWeekDays = ['[prošle] [nedelje] [u] LT', '[prošlog] [ponedeljka] [u] LT', '[prošlog] [utorka] [u] LT', '[prošle] [srede] [u] LT', '[prošlog] [četvrtka] [u] LT', '[prošlog] [petka] [u] LT', '[prošle] [subote] [u] LT'];\n              return lastWeekDays[this.day()];\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'za %s',\n            past: 'pre %s',\n            s: 'nekoliko sekundi',\n            m: translator.translate,\n            mm: translator.translate,\n            h: translator.translate,\n            hh: translator.translate,\n            d: 'dan',\n            dd: translator.translate,\n            M: 'mesec',\n            MM: translator.translate,\n            y: 'godinu',\n            yy: translator.translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return sr;\n      });\n      /***/\n\n    },\n    /* 94 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : siSwati [ss]\n      //! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var ss = moment.defineLocale('ss', {\n          months: \"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni\".split('_'),\n          monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),\n          weekdays: 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),\n          weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),\n          weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'h:mm A',\n            LTS: 'h:mm:ss A',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY h:mm A',\n            LLLL: 'dddd, D MMMM YYYY h:mm A'\n          },\n          calendar: {\n            sameDay: '[Namuhla nga] LT',\n            nextDay: '[Kusasa nga] LT',\n            nextWeek: 'dddd [nga] LT',\n            lastDay: '[Itolo nga] LT',\n            lastWeek: 'dddd [leliphelile] [nga] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'nga %s',\n            past: 'wenteka nga %s',\n            s: 'emizuzwana lomcane',\n            m: 'umzuzu',\n            mm: '%d emizuzu',\n            h: 'lihora',\n            hh: '%d emahora',\n            d: 'lilanga',\n            dd: '%d emalanga',\n            M: 'inyanga',\n            MM: '%d tinyanga',\n            y: 'umnyaka',\n            yy: '%d iminyaka'\n          },\n          meridiemParse: /ekuseni|emini|entsambama|ebusuku/,\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours < 11) {\n              return 'ekuseni';\n            } else if (hours < 15) {\n              return 'emini';\n            } else if (hours < 19) {\n              return 'entsambama';\n            } else {\n              return 'ebusuku';\n            }\n          },\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'ekuseni') {\n              return hour;\n            } else if (meridiem === 'emini') {\n              return hour >= 11 ? hour : hour + 12;\n            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {\n              if (hour === 0) {\n                return 0;\n              }\n\n              return hour + 12;\n            }\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}/,\n          ordinal: '%d',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return ss;\n      });\n      /***/\n\n    },\n    /* 95 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Swedish [sv]\n      //! author : Jens Alm : https://github.com/ulmus\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var sv = moment.defineLocale('sv', {\n          months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),\n          monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),\n          weekdays: 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),\n          weekdaysShort: 'sön_mån_tis_ons_tor_fre_lör'.split('_'),\n          weekdaysMin: 'sö_må_ti_on_to_fr_lö'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'YYYY-MM-DD',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY [kl.] HH:mm',\n            LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',\n            lll: 'D MMM YYYY HH:mm',\n            llll: 'ddd D MMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Idag] LT',\n            nextDay: '[Imorgon] LT',\n            lastDay: '[Igår] LT',\n            nextWeek: '[På] dddd LT',\n            lastWeek: '[I] dddd[s] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'om %s',\n            past: 'för %s sedan',\n            s: 'några sekunder',\n            m: 'en minut',\n            mm: '%d minuter',\n            h: 'en timme',\n            hh: '%d timmar',\n            d: 'en dag',\n            dd: '%d dagar',\n            M: 'en månad',\n            MM: '%d månader',\n            y: 'ett år',\n            yy: '%d år'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(e|a)/,\n          ordinal: function ordinal(number) {\n            var b = number % 10,\n                output = ~~(number % 100 / 10) === 1 ? 'e' : b === 1 ? 'a' : b === 2 ? 'a' : b === 3 ? 'e' : 'e';\n            return number + output;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return sv;\n      });\n      /***/\n\n    },\n    /* 96 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Swahili [sw]\n      //! author : Fahad Kassim : https://github.com/fadsel\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var sw = moment.defineLocale('sw', {\n          months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),\n          monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),\n          weekdays: 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),\n          weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),\n          weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[leo saa] LT',\n            nextDay: '[kesho saa] LT',\n            nextWeek: '[wiki ijayo] dddd [saat] LT',\n            lastDay: '[jana] LT',\n            lastWeek: '[wiki iliyopita] dddd [saat] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s baadaye',\n            past: 'tokea %s',\n            s: 'hivi punde',\n            m: 'dakika moja',\n            mm: 'dakika %d',\n            h: 'saa limoja',\n            hh: 'masaa %d',\n            d: 'siku moja',\n            dd: 'masiku %d',\n            M: 'mwezi mmoja',\n            MM: 'miezi %d',\n            y: 'mwaka mmoja',\n            yy: 'miaka %d'\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return sw;\n      });\n      /***/\n\n    },\n    /* 97 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Tamil [ta]\n      //! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var symbolMap = {\n          '1': '௧',\n          '2': '௨',\n          '3': '௩',\n          '4': '௪',\n          '5': '௫',\n          '6': '௬',\n          '7': '௭',\n          '8': '௮',\n          '9': '௯',\n          '0': '௦'\n        };\n        var numberMap = {\n          '௧': '1',\n          '௨': '2',\n          '௩': '3',\n          '௪': '4',\n          '௫': '5',\n          '௬': '6',\n          '௭': '7',\n          '௮': '8',\n          '௯': '9',\n          '௦': '0'\n        };\n        var ta = moment.defineLocale('ta', {\n          months: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),\n          monthsShort: 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),\n          weekdays: 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),\n          weekdaysShort: 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),\n          weekdaysMin: 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY, HH:mm',\n            LLLL: 'dddd, D MMMM YYYY, HH:mm'\n          },\n          calendar: {\n            sameDay: '[இன்று] LT',\n            nextDay: '[நாளை] LT',\n            nextWeek: 'dddd, LT',\n            lastDay: '[நேற்று] LT',\n            lastWeek: '[கடந்த வாரம்] dddd, LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s இல்',\n            past: '%s முன்',\n            s: 'ஒரு சில விநாடிகள்',\n            m: 'ஒரு நிமிடம்',\n            mm: '%d நிமிடங்கள்',\n            h: 'ஒரு மணி நேரம்',\n            hh: '%d மணி நேரம்',\n            d: 'ஒரு நாள்',\n            dd: '%d நாட்கள்',\n            M: 'ஒரு மாதம்',\n            MM: '%d மாதங்கள்',\n            y: 'ஒரு வருடம்',\n            yy: '%d ஆண்டுகள்'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}வது/,\n          ordinal: function ordinal(number) {\n            return number + 'வது';\n          },\n          preparse: function preparse(string) {\n            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {\n              return numberMap[match];\n            });\n          },\n          postformat: function postformat(string) {\n            return string.replace(/\\d/g, function (match) {\n              return symbolMap[match];\n            });\n          },\n          // refer http://ta.wikipedia.org/s/1er1\n          meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 2) {\n              return ' யாமம்';\n            } else if (hour < 6) {\n              return ' வைகறை'; // வைகறை\n            } else if (hour < 10) {\n              return ' காலை'; // காலை\n            } else if (hour < 14) {\n              return ' நண்பகல்'; // நண்பகல்\n            } else if (hour < 18) {\n              return ' எற்பாடு'; // எற்பாடு\n            } else if (hour < 22) {\n              return ' மாலை'; // மாலை\n            } else {\n              return ' யாமம்';\n            }\n          },\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'யாமம்') {\n              return hour < 2 ? hour : hour + 12;\n            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {\n              return hour;\n            } else if (meridiem === 'நண்பகல்') {\n              return hour >= 10 ? hour : hour + 12;\n            } else {\n              return hour + 12;\n            }\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return ta;\n      });\n      /***/\n\n    },\n    /* 98 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Telugu [te]\n      //! author : Krishna Chaitanya Thota : https://github.com/kcthota\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var te = moment.defineLocale('te', {\n          months: 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),\n          monthsShort: 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),\n          weekdaysShort: 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),\n          weekdaysMin: 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),\n          longDateFormat: {\n            LT: 'A h:mm',\n            LTS: 'A h:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY, A h:mm',\n            LLLL: 'dddd, D MMMM YYYY, A h:mm'\n          },\n          calendar: {\n            sameDay: '[నేడు] LT',\n            nextDay: '[రేపు] LT',\n            nextWeek: 'dddd, LT',\n            lastDay: '[నిన్న] LT',\n            lastWeek: '[గత] dddd, LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s లో',\n            past: '%s క్రితం',\n            s: 'కొన్ని క్షణాలు',\n            m: 'ఒక నిమిషం',\n            mm: '%d నిమిషాలు',\n            h: 'ఒక గంట',\n            hh: '%d గంటలు',\n            d: 'ఒక రోజు',\n            dd: '%d రోజులు',\n            M: 'ఒక నెల',\n            MM: '%d నెలలు',\n            y: 'ఒక సంవత్సరం',\n            yy: '%d సంవత్సరాలు'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}వ/,\n          ordinal: '%dవ',\n          meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === 'రాత్రి') {\n              return hour < 4 ? hour : hour + 12;\n            } else if (meridiem === 'ఉదయం') {\n              return hour;\n            } else if (meridiem === 'మధ్యాహ్నం') {\n              return hour >= 10 ? hour : hour + 12;\n            } else if (meridiem === 'సాయంత్రం') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'రాత్రి';\n            } else if (hour < 10) {\n              return 'ఉదయం';\n            } else if (hour < 17) {\n              return 'మధ్యాహ్నం';\n            } else if (hour < 20) {\n              return 'సాయంత్రం';\n            } else {\n              return 'రాత్రి';\n            }\n          },\n          week: {\n            dow: 0,\n            // Sunday is the first day of the week.\n            doy: 6 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return te;\n      });\n      /***/\n\n    },\n    /* 99 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Tetun Dili (East Timor) [tet]\n      //! author : Joshua Brooks : https://github.com/joshbrooks\n      //! author : Onorio De J. Afonso : https://github.com/marobo\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var tet = moment.defineLocale('tet', {\n          months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),\n          monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),\n          weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),\n          weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),\n          weekdaysMin: 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Ohin iha] LT',\n            nextDay: '[Aban iha] LT',\n            nextWeek: 'dddd [iha] LT',\n            lastDay: '[Horiseik iha] LT',\n            lastWeek: 'dddd [semana kotuk] [iha] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'iha %s',\n            past: '%s liuba',\n            s: 'minutu balun',\n            m: 'minutu ida',\n            mm: 'minutus %d',\n            h: 'horas ida',\n            hh: 'horas %d',\n            d: 'loron ida',\n            dd: 'loron %d',\n            M: 'fulan ida',\n            MM: 'fulan %d',\n            y: 'tinan ida',\n            yy: 'tinan %d'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(st|nd|rd|th)/,\n          ordinal: function ordinal(number) {\n            var b = number % 10,\n                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n            return number + output;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return tet;\n      });\n      /***/\n\n    },\n    /* 100 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Thai [th]\n      //! author : Kridsada Thanabulpong : https://github.com/sirn\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var th = moment.defineLocale('th', {\n          months: 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),\n          monthsShort: 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),\n          weekdaysShort: 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'),\n          // yes, three characters difference\n          weekdaysMin: 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'H:mm',\n            LTS: 'H:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY เวลา H:mm',\n            LLLL: 'วันddddที่ D MMMM YYYY เวลา H:mm'\n          },\n          meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,\n          isPM: function isPM(input) {\n            return input === 'หลังเที่ยง';\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 12) {\n              return 'ก่อนเที่ยง';\n            } else {\n              return 'หลังเที่ยง';\n            }\n          },\n          calendar: {\n            sameDay: '[วันนี้ เวลา] LT',\n            nextDay: '[พรุ่งนี้ เวลา] LT',\n            nextWeek: 'dddd[หน้า เวลา] LT',\n            lastDay: '[เมื่อวานนี้ เวลา] LT',\n            lastWeek: '[วัน]dddd[ที่แล้ว เวลา] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'อีก %s',\n            past: '%sที่แล้ว',\n            s: 'ไม่กี่วินาที',\n            m: '1 นาที',\n            mm: '%d นาที',\n            h: '1 ชั่วโมง',\n            hh: '%d ชั่วโมง',\n            d: '1 วัน',\n            dd: '%d วัน',\n            M: '1 เดือน',\n            MM: '%d เดือน',\n            y: '1 ปี',\n            yy: '%d ปี'\n          }\n        });\n        return th;\n      });\n      /***/\n\n    },\n    /* 101 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Tagalog (Philippines) [tl-ph]\n      //! author : Dan Hagman : https://github.com/hagmandan\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var tlPh = moment.defineLocale('tl-ph', {\n          months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),\n          monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),\n          weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),\n          weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),\n          weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'MM/D/YYYY',\n            LL: 'MMMM D, YYYY',\n            LLL: 'MMMM D, YYYY HH:mm',\n            LLLL: 'dddd, MMMM DD, YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: 'LT [ngayong araw]',\n            nextDay: '[Bukas ng] LT',\n            nextWeek: 'LT [sa susunod na] dddd',\n            lastDay: 'LT [kahapon]',\n            lastWeek: 'LT [noong nakaraang] dddd',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'sa loob ng %s',\n            past: '%s ang nakalipas',\n            s: 'ilang segundo',\n            m: 'isang minuto',\n            mm: '%d minuto',\n            h: 'isang oras',\n            hh: '%d oras',\n            d: 'isang araw',\n            dd: '%d araw',\n            M: 'isang buwan',\n            MM: '%d buwan',\n            y: 'isang taon',\n            yy: '%d taon'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}/,\n          ordinal: function ordinal(number) {\n            return number;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return tlPh;\n      });\n      /***/\n\n    },\n    /* 102 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Klingon [tlh]\n      //! author : Dominika Kruk : https://github.com/amaranthrose\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');\n\n        function translateFuture(output) {\n          var time = output;\n          time = output.indexOf('jaj') !== -1 ? time.slice(0, -3) + 'leS' : output.indexOf('jar') !== -1 ? time.slice(0, -3) + 'waQ' : output.indexOf('DIS') !== -1 ? time.slice(0, -3) + 'nem' : time + ' pIq';\n          return time;\n        }\n\n        function translatePast(output) {\n          var time = output;\n          time = output.indexOf('jaj') !== -1 ? time.slice(0, -3) + 'Hu’' : output.indexOf('jar') !== -1 ? time.slice(0, -3) + 'wen' : output.indexOf('DIS') !== -1 ? time.slice(0, -3) + 'ben' : time + ' ret';\n          return time;\n        }\n\n        function translate(number, withoutSuffix, string, isFuture) {\n          var numberNoun = numberAsNoun(number);\n\n          switch (string) {\n            case 'mm':\n              return numberNoun + ' tup';\n\n            case 'hh':\n              return numberNoun + ' rep';\n\n            case 'dd':\n              return numberNoun + ' jaj';\n\n            case 'MM':\n              return numberNoun + ' jar';\n\n            case 'yy':\n              return numberNoun + ' DIS';\n          }\n        }\n\n        function numberAsNoun(number) {\n          var hundred = Math.floor(number % 1000 / 100),\n              ten = Math.floor(number % 100 / 10),\n              one = number % 10,\n              word = '';\n\n          if (hundred > 0) {\n            word += numbersNouns[hundred] + 'vatlh';\n          }\n\n          if (ten > 0) {\n            word += (word !== '' ? ' ' : '') + numbersNouns[ten] + 'maH';\n          }\n\n          if (one > 0) {\n            word += (word !== '' ? ' ' : '') + numbersNouns[one];\n          }\n\n          return word === '' ? 'pagh' : word;\n        }\n\n        var tlh = moment.defineLocale('tlh', {\n          months: 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),\n          monthsShort: 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),\n          weekdaysShort: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),\n          weekdaysMin: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[DaHjaj] LT',\n            nextDay: '[wa’leS] LT',\n            nextWeek: 'LLL',\n            lastDay: '[wa’Hu’] LT',\n            lastWeek: 'LLL',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: translateFuture,\n            past: translatePast,\n            s: 'puS lup',\n            m: 'wa’ tup',\n            mm: translate,\n            h: 'wa’ rep',\n            hh: translate,\n            d: 'wa’ jaj',\n            dd: translate,\n            M: 'wa’ jar',\n            MM: translate,\n            y: 'wa’ DIS',\n            yy: translate\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return tlh;\n      });\n      /***/\n\n    },\n    /* 103 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Turkish [tr]\n      //! authors : Erhan Gundogan : https://github.com/erhangundogan,\n      //!           Burak Yiğit Kaya: https://github.com/BYK\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var suffixes = {\n          1: '\\'inci',\n          5: '\\'inci',\n          8: '\\'inci',\n          70: '\\'inci',\n          80: '\\'inci',\n          2: '\\'nci',\n          7: '\\'nci',\n          20: '\\'nci',\n          50: '\\'nci',\n          3: '\\'üncü',\n          4: '\\'üncü',\n          100: '\\'üncü',\n          6: '\\'ncı',\n          9: '\\'uncu',\n          10: '\\'uncu',\n          30: '\\'uncu',\n          60: '\\'ıncı',\n          90: '\\'ıncı'\n        };\n        var tr = moment.defineLocale('tr', {\n          months: 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),\n          monthsShort: 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),\n          weekdays: 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),\n          weekdaysShort: 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),\n          weekdaysMin: 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[bugün saat] LT',\n            nextDay: '[yarın saat] LT',\n            nextWeek: '[haftaya] dddd [saat] LT',\n            lastDay: '[dün] LT',\n            lastWeek: '[geçen hafta] dddd [saat] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s sonra',\n            past: '%s önce',\n            s: 'birkaç saniye',\n            m: 'bir dakika',\n            mm: '%d dakika',\n            h: 'bir saat',\n            hh: '%d saat',\n            d: 'bir gün',\n            dd: '%d gün',\n            M: 'bir ay',\n            MM: '%d ay',\n            y: 'bir yıl',\n            yy: '%d yıl'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/,\n          ordinal: function ordinal(number) {\n            if (number === 0) {\n              // special case for zero\n              return number + '\\'ıncı';\n            }\n\n            var a = number % 10,\n                b = number % 100 - a,\n                c = number >= 100 ? 100 : null;\n            return number + (suffixes[a] || suffixes[b] || suffixes[c]);\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return tr;\n      });\n      /***/\n\n    },\n    /* 104 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Talossan [tzl]\n      //! author : Robin van der Vliet : https://github.com/robin0van0der0v\n      //! author : Iustì Canun\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict'; // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.\n        // This is currently too difficult (maybe even impossible) to add.\n\n        var tzl = moment.defineLocale('tzl', {\n          months: 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),\n          monthsShort: 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),\n          weekdays: 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),\n          weekdaysShort: 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),\n          weekdaysMin: 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),\n          longDateFormat: {\n            LT: 'HH.mm',\n            LTS: 'HH.mm.ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D. MMMM [dallas] YYYY',\n            LLL: 'D. MMMM [dallas] YYYY HH.mm',\n            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'\n          },\n          meridiemParse: /d\\'o|d\\'a/i,\n          isPM: function isPM(input) {\n            return 'd\\'o' === input.toLowerCase();\n          },\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours > 11) {\n              return isLower ? 'd\\'o' : 'D\\'O';\n            } else {\n              return isLower ? 'd\\'a' : 'D\\'A';\n            }\n          },\n          calendar: {\n            sameDay: '[oxhi à] LT',\n            nextDay: '[demà à] LT',\n            nextWeek: 'dddd [à] LT',\n            lastDay: '[ieiri à] LT',\n            lastWeek: '[sür el] dddd [lasteu à] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'osprei %s',\n            past: 'ja%s',\n            s: processRelativeTime,\n            m: processRelativeTime,\n            mm: processRelativeTime,\n            h: processRelativeTime,\n            hh: processRelativeTime,\n            d: processRelativeTime,\n            dd: processRelativeTime,\n            M: processRelativeTime,\n            MM: processRelativeTime,\n            y: processRelativeTime,\n            yy: processRelativeTime\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}\\./,\n          ordinal: '%d.',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n\n        function processRelativeTime(number, withoutSuffix, key, isFuture) {\n          var format = {\n            's': ['viensas secunds', '\\'iensas secunds'],\n            'm': ['\\'n míut', '\\'iens míut'],\n            'mm': [number + ' míuts', '' + number + ' míuts'],\n            'h': ['\\'n þora', '\\'iensa þora'],\n            'hh': [number + ' þoras', '' + number + ' þoras'],\n            'd': ['\\'n ziua', '\\'iensa ziua'],\n            'dd': [number + ' ziuas', '' + number + ' ziuas'],\n            'M': ['\\'n mes', '\\'iens mes'],\n            'MM': [number + ' mesen', '' + number + ' mesen'],\n            'y': ['\\'n ar', '\\'iens ar'],\n            'yy': [number + ' ars', '' + number + ' ars']\n          };\n          return isFuture ? format[key][0] : withoutSuffix ? format[key][0] : format[key][1];\n        }\n\n        return tzl;\n      });\n      /***/\n\n    },\n    /* 105 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Central Atlas Tamazight Latin [tzm-latn]\n      //! author : Abdel Said : https://github.com/abdelsaid\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var tzmLatn = moment.defineLocale('tzm-latn', {\n          months: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),\n          monthsShort: 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),\n          weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),\n          weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),\n          weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[asdkh g] LT',\n            nextDay: '[aska g] LT',\n            nextWeek: 'dddd [g] LT',\n            lastDay: '[assant g] LT',\n            lastWeek: 'dddd [g] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'dadkh s yan %s',\n            past: 'yan %s',\n            s: 'imik',\n            m: 'minuḍ',\n            mm: '%d minuḍ',\n            h: 'saɛa',\n            hh: '%d tassaɛin',\n            d: 'ass',\n            dd: '%d ossan',\n            M: 'ayowr',\n            MM: '%d iyyirn',\n            y: 'asgas',\n            yy: '%d isgasn'\n          },\n          week: {\n            dow: 6,\n            // Saturday is the first day of the week.\n            doy: 12 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return tzmLatn;\n      });\n      /***/\n\n    },\n    /* 106 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Central Atlas Tamazight [tzm]\n      //! author : Abdel Said : https://github.com/abdelsaid\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var tzm = moment.defineLocale('tzm', {\n          months: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),\n          monthsShort: 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),\n          weekdays: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),\n          weekdaysShort: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),\n          weekdaysMin: 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',\n            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',\n            nextWeek: 'dddd [ⴴ] LT',\n            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',\n            lastWeek: 'dddd [ⴴ] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',\n            past: 'ⵢⴰⵏ %s',\n            s: 'ⵉⵎⵉⴽ',\n            m: 'ⵎⵉⵏⵓⴺ',\n            mm: '%d ⵎⵉⵏⵓⴺ',\n            h: 'ⵙⴰⵄⴰ',\n            hh: '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',\n            d: 'ⴰⵙⵙ',\n            dd: '%d oⵙⵙⴰⵏ',\n            M: 'ⴰⵢoⵓⵔ',\n            MM: '%d ⵉⵢⵢⵉⵔⵏ',\n            y: 'ⴰⵙⴳⴰⵙ',\n            yy: '%d ⵉⵙⴳⴰⵙⵏ'\n          },\n          week: {\n            dow: 6,\n            // Saturday is the first day of the week.\n            doy: 12 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return tzm;\n      });\n      /***/\n\n    },\n    /* 107 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Ukrainian [uk]\n      //! author : zemlanin : https://github.com/zemlanin\n      //! Author : Menelion Elensúle : https://github.com/Oire\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        function plural(word, num) {\n          var forms = word.split('_');\n          return num % 10 === 1 && num % 100 !== 11 ? forms[0] : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2];\n        }\n\n        function relativeTimeWithPlural(number, withoutSuffix, key) {\n          var format = {\n            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',\n            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',\n            'dd': 'день_дні_днів',\n            'MM': 'місяць_місяці_місяців',\n            'yy': 'рік_роки_років'\n          };\n\n          if (key === 'm') {\n            return withoutSuffix ? 'хвилина' : 'хвилину';\n          } else if (key === 'h') {\n            return withoutSuffix ? 'година' : 'годину';\n          } else {\n            return number + ' ' + plural(format[key], +number);\n          }\n        }\n\n        function weekdaysCaseReplace(m, format) {\n          var weekdays = {\n            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),\n            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),\n            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')\n          };\n\n          if (!m) {\n            return weekdays['nominative'];\n          }\n\n          var nounCase = /(\\[[ВвУу]\\]) ?dddd/.test(format) ? 'accusative' : /\\[?(?:минулої|наступної)? ?\\] ?dddd/.test(format) ? 'genitive' : 'nominative';\n          return weekdays[nounCase][m.day()];\n        }\n\n        function processHoursFunction(str) {\n          return function () {\n            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';\n          };\n        }\n\n        var uk = moment.defineLocale('uk', {\n          months: {\n            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),\n            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')\n          },\n          monthsShort: 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),\n          weekdays: weekdaysCaseReplace,\n          weekdaysShort: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),\n          weekdaysMin: 'нд_пн_вт_ср_чт_пт_сб'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD.MM.YYYY',\n            LL: 'D MMMM YYYY р.',\n            LLL: 'D MMMM YYYY р., HH:mm',\n            LLLL: 'dddd, D MMMM YYYY р., HH:mm'\n          },\n          calendar: {\n            sameDay: processHoursFunction('[Сьогодні '),\n            nextDay: processHoursFunction('[Завтра '),\n            lastDay: processHoursFunction('[Вчора '),\n            nextWeek: processHoursFunction('[У] dddd ['),\n            lastWeek: function lastWeek() {\n              switch (this.day()) {\n                case 0:\n                case 3:\n                case 5:\n                case 6:\n                  return processHoursFunction('[Минулої] dddd [').call(this);\n\n                case 1:\n                case 2:\n                case 4:\n                  return processHoursFunction('[Минулого] dddd [').call(this);\n              }\n            },\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'за %s',\n            past: '%s тому',\n            s: 'декілька секунд',\n            m: relativeTimeWithPlural,\n            mm: relativeTimeWithPlural,\n            h: 'годину',\n            hh: relativeTimeWithPlural,\n            d: 'день',\n            dd: relativeTimeWithPlural,\n            M: 'місяць',\n            MM: relativeTimeWithPlural,\n            y: 'рік',\n            yy: relativeTimeWithPlural\n          },\n          // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason\n          meridiemParse: /ночі|ранку|дня|вечора/,\n          isPM: function isPM(input) {\n            return /^(дня|вечора)$/.test(input);\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 4) {\n              return 'ночі';\n            } else if (hour < 12) {\n              return 'ранку';\n            } else if (hour < 17) {\n              return 'дня';\n            } else {\n              return 'вечора';\n            }\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}-(й|го)/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              case 'M':\n              case 'd':\n              case 'DDD':\n              case 'w':\n              case 'W':\n                return number + '-й';\n\n              case 'D':\n                return number + '-го';\n\n              default:\n                return number;\n            }\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return uk;\n      });\n      /***/\n\n    },\n    /* 108 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Urdu [ur]\n      //! author : Sawood Alam : https://github.com/ibnesayeed\n      //! author : Zack : https://github.com/ZackVision\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var months = ['جنوری', 'فروری', 'مارچ', 'اپریل', 'مئی', 'جون', 'جولائی', 'اگست', 'ستمبر', 'اکتوبر', 'نومبر', 'دسمبر'];\n        var days = ['اتوار', 'پیر', 'منگل', 'بدھ', 'جمعرات', 'جمعہ', 'ہفتہ'];\n        var ur = moment.defineLocale('ur', {\n          months: months,\n          monthsShort: months,\n          weekdays: days,\n          weekdaysShort: days,\n          weekdaysMin: days,\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd، D MMMM YYYY HH:mm'\n          },\n          meridiemParse: /صبح|شام/,\n          isPM: function isPM(input) {\n            return 'شام' === input;\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            if (hour < 12) {\n              return 'صبح';\n            }\n\n            return 'شام';\n          },\n          calendar: {\n            sameDay: '[آج بوقت] LT',\n            nextDay: '[کل بوقت] LT',\n            nextWeek: 'dddd [بوقت] LT',\n            lastDay: '[گذشتہ روز بوقت] LT',\n            lastWeek: '[گذشتہ] dddd [بوقت] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s بعد',\n            past: '%s قبل',\n            s: 'چند سیکنڈ',\n            m: 'ایک منٹ',\n            mm: '%d منٹ',\n            h: 'ایک گھنٹہ',\n            hh: '%d گھنٹے',\n            d: 'ایک دن',\n            dd: '%d دن',\n            M: 'ایک ماہ',\n            MM: '%d ماہ',\n            y: 'ایک سال',\n            yy: '%d سال'\n          },\n          preparse: function preparse(string) {\n            return string.replace(/،/g, ',');\n          },\n          postformat: function postformat(string) {\n            return string.replace(/,/g, '،');\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return ur;\n      });\n      /***/\n\n    },\n    /* 109 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Uzbek Latin [uz-latn]\n      //! author : Rasulbek Mirzayev : github.com/Rasulbeeek\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var uzLatn = moment.defineLocale('uz-latn', {\n          months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),\n          monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),\n          weekdays: 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),\n          weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),\n          weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'D MMMM YYYY, dddd HH:mm'\n          },\n          calendar: {\n            sameDay: '[Bugun soat] LT [da]',\n            nextDay: '[Ertaga] LT [da]',\n            nextWeek: 'dddd [kuni soat] LT [da]',\n            lastDay: '[Kecha soat] LT [da]',\n            lastWeek: '[O\\'tgan] dddd [kuni soat] LT [da]',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'Yaqin %s ichida',\n            past: 'Bir necha %s oldin',\n            s: 'soniya',\n            m: 'bir daqiqa',\n            mm: '%d daqiqa',\n            h: 'bir soat',\n            hh: '%d soat',\n            d: 'bir kun',\n            dd: '%d kun',\n            M: 'bir oy',\n            MM: '%d oy',\n            y: 'bir yil',\n            yy: '%d yil'\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 1st is the first week of the year.\n\n          }\n        });\n        return uzLatn;\n      });\n      /***/\n\n    },\n    /* 110 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Uzbek [uz]\n      //! author : Sardor Muminov : https://github.com/muminoff\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var uz = moment.defineLocale('uz', {\n          months: 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),\n          monthsShort: 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),\n          weekdays: 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),\n          weekdaysShort: 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),\n          weekdaysMin: 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'D MMMM YYYY, dddd HH:mm'\n          },\n          calendar: {\n            sameDay: '[Бугун соат] LT [да]',\n            nextDay: '[Эртага] LT [да]',\n            nextWeek: 'dddd [куни соат] LT [да]',\n            lastDay: '[Кеча соат] LT [да]',\n            lastWeek: '[Утган] dddd [куни соат] LT [да]',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'Якин %s ичида',\n            past: 'Бир неча %s олдин',\n            s: 'фурсат',\n            m: 'бир дакика',\n            mm: '%d дакика',\n            h: 'бир соат',\n            hh: '%d соат',\n            d: 'бир кун',\n            dd: '%d кун',\n            M: 'бир ой',\n            MM: '%d ой',\n            y: 'бир йил',\n            yy: '%d йил'\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 7 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return uz;\n      });\n      /***/\n\n    },\n    /* 111 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Vietnamese [vi]\n      //! author : Bang Nguyen : https://github.com/bangnk\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var vi = moment.defineLocale('vi', {\n          months: 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),\n          monthsShort: 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),\n          weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),\n          weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),\n          weekdaysParseExact: true,\n          meridiemParse: /sa|ch/i,\n          isPM: function isPM(input) {\n            return /^ch$/i.test(input);\n          },\n          meridiem: function meridiem(hours, minutes, isLower) {\n            if (hours < 12) {\n              return isLower ? 'sa' : 'SA';\n            } else {\n              return isLower ? 'ch' : 'CH';\n            }\n          },\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM [năm] YYYY',\n            LLL: 'D MMMM [năm] YYYY HH:mm',\n            LLLL: 'dddd, D MMMM [năm] YYYY HH:mm',\n            l: 'DD/M/YYYY',\n            ll: 'D MMM YYYY',\n            lll: 'D MMM YYYY HH:mm',\n            llll: 'ddd, D MMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[Hôm nay lúc] LT',\n            nextDay: '[Ngày mai lúc] LT',\n            nextWeek: 'dddd [tuần tới lúc] LT',\n            lastDay: '[Hôm qua lúc] LT',\n            lastWeek: 'dddd [tuần rồi lúc] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: '%s tới',\n            past: '%s trước',\n            s: 'vài giây',\n            m: 'một phút',\n            mm: '%d phút',\n            h: 'một giờ',\n            hh: '%d giờ',\n            d: 'một ngày',\n            dd: '%d ngày',\n            M: 'một tháng',\n            MM: '%d tháng',\n            y: 'một năm',\n            yy: '%d năm'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}/,\n          ordinal: function ordinal(number) {\n            return number;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return vi;\n      });\n      /***/\n\n    },\n    /* 112 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Pseudo [x-pseudo]\n      //! author : Andrew Hood : https://github.com/andrewhood125\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var xPseudo = moment.defineLocale('x-pseudo', {\n          months: 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),\n          monthsShort: 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),\n          monthsParseExact: true,\n          weekdays: 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),\n          weekdaysShort: 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),\n          weekdaysMin: 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),\n          weekdaysParseExact: true,\n          longDateFormat: {\n            LT: 'HH:mm',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY HH:mm',\n            LLLL: 'dddd, D MMMM YYYY HH:mm'\n          },\n          calendar: {\n            sameDay: '[T~ódá~ý át] LT',\n            nextDay: '[T~ómó~rró~w át] LT',\n            nextWeek: 'dddd [át] LT',\n            lastDay: '[Ý~ést~érdá~ý át] LT',\n            lastWeek: '[L~ást] dddd [át] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'í~ñ %s',\n            past: '%s á~gó',\n            s: 'á ~féw ~sécó~ñds',\n            m: 'á ~míñ~úté',\n            mm: '%d m~íñú~tés',\n            h: 'á~ñ hó~úr',\n            hh: '%d h~óúrs',\n            d: 'á ~dáý',\n            dd: '%d d~áýs',\n            M: 'á ~móñ~th',\n            MM: '%d m~óñt~hs',\n            y: 'á ~ýéár',\n            yy: '%d ý~éárs'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n          ordinal: function ordinal(number) {\n            var b = number % 10,\n                output = ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n            return number + output;\n          },\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return xPseudo;\n      });\n      /***/\n\n    },\n    /* 113 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Yoruba Nigeria [yo]\n      //! author : Atolagbe Abisoye : https://github.com/andela-batolagbe\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var yo = moment.defineLocale('yo', {\n          months: 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),\n          monthsShort: 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),\n          weekdays: 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),\n          weekdaysShort: 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),\n          weekdaysMin: 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),\n          longDateFormat: {\n            LT: 'h:mm A',\n            LTS: 'h:mm:ss A',\n            L: 'DD/MM/YYYY',\n            LL: 'D MMMM YYYY',\n            LLL: 'D MMMM YYYY h:mm A',\n            LLLL: 'dddd, D MMMM YYYY h:mm A'\n          },\n          calendar: {\n            sameDay: '[Ònì ni] LT',\n            nextDay: '[Ọ̀la ni] LT',\n            nextWeek: 'dddd [Ọsẹ̀ tón\\'bọ] [ni] LT',\n            lastDay: '[Àna ni] LT',\n            lastWeek: 'dddd [Ọsẹ̀ tólọ́] [ni] LT',\n            sameElse: 'L'\n          },\n          relativeTime: {\n            future: 'ní %s',\n            past: '%s kọjá',\n            s: 'ìsẹjú aayá die',\n            m: 'ìsẹjú kan',\n            mm: 'ìsẹjú %d',\n            h: 'wákati kan',\n            hh: 'wákati %d',\n            d: 'ọjọ́ kan',\n            dd: 'ọjọ́ %d',\n            M: 'osù kan',\n            MM: 'osù %d',\n            y: 'ọdún kan',\n            yy: 'ọdún %d'\n          },\n          dayOfMonthOrdinalParse: /ọjọ́\\s\\d{1,2}/,\n          ordinal: 'ọjọ́ %d',\n          week: {\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return yo;\n      });\n      /***/\n\n    },\n    /* 114 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Chinese (China) [zh-cn]\n      //! author : suupic : https://github.com/suupic\n      //! author : Zeno Zeng : https://github.com/zenozeng\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var zhCn = moment.defineLocale('zh-cn', {\n          months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),\n          monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n          weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),\n          weekdaysShort: '周日_周一_周二_周三_周四_周五_周六'.split('_'),\n          weekdaysMin: '日_一_二_三_四_五_六'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'YYYY年MMMD日',\n            LL: 'YYYY年MMMD日',\n            LLL: 'YYYY年MMMD日Ah点mm分',\n            LLLL: 'YYYY年MMMD日ddddAh点mm分',\n            l: 'YYYY年MMMD日',\n            ll: 'YYYY年MMMD日',\n            lll: 'YYYY年MMMD日 HH:mm',\n            llll: 'YYYY年MMMD日dddd HH:mm'\n          },\n          meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {\n              return hour;\n            } else if (meridiem === '下午' || meridiem === '晚上') {\n              return hour + 12;\n            } else {\n              // '中午'\n              return hour >= 11 ? hour : hour + 12;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            var hm = hour * 100 + minute;\n\n            if (hm < 600) {\n              return '凌晨';\n            } else if (hm < 900) {\n              return '早上';\n            } else if (hm < 1130) {\n              return '上午';\n            } else if (hm < 1230) {\n              return '中午';\n            } else if (hm < 1800) {\n              return '下午';\n            } else {\n              return '晚上';\n            }\n          },\n          calendar: {\n            sameDay: '[今天]LT',\n            nextDay: '[明天]LT',\n            nextWeek: '[下]ddddLT',\n            lastDay: '[昨天]LT',\n            lastWeek: '[上]ddddLT',\n            sameElse: 'L'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(日|月|周)/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              case 'd':\n              case 'D':\n              case 'DDD':\n                return number + '日';\n\n              case 'M':\n                return number + '月';\n\n              case 'w':\n              case 'W':\n                return number + '周';\n\n              default:\n                return number;\n            }\n          },\n          relativeTime: {\n            future: '%s内',\n            past: '%s前',\n            s: '几秒',\n            m: '1 分钟',\n            mm: '%d 分钟',\n            h: '1 小时',\n            hh: '%d 小时',\n            d: '1 天',\n            dd: '%d 天',\n            M: '1 个月',\n            MM: '%d 个月',\n            y: '1 年',\n            yy: '%d 年'\n          },\n          week: {\n            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效\n            dow: 1,\n            // Monday is the first day of the week.\n            doy: 4 // The week that contains Jan 4th is the first week of the year.\n\n          }\n        });\n        return zhCn;\n      });\n      /***/\n\n    },\n    /* 115 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Chinese (Hong Kong) [zh-hk]\n      //! author : Ben : https://github.com/ben-lin\n      //! author : Chris Lam : https://github.com/hehachris\n      //! author : Konstantin : https://github.com/skfd\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var zhHk = moment.defineLocale('zh-hk', {\n          months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),\n          monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n          weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),\n          weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),\n          weekdaysMin: '日_一_二_三_四_五_六'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'YYYY年MMMD日',\n            LL: 'YYYY年MMMD日',\n            LLL: 'YYYY年MMMD日 HH:mm',\n            LLLL: 'YYYY年MMMD日dddd HH:mm',\n            l: 'YYYY年MMMD日',\n            ll: 'YYYY年MMMD日',\n            lll: 'YYYY年MMMD日 HH:mm',\n            llll: 'YYYY年MMMD日dddd HH:mm'\n          },\n          meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {\n              return hour;\n            } else if (meridiem === '中午') {\n              return hour >= 11 ? hour : hour + 12;\n            } else if (meridiem === '下午' || meridiem === '晚上') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            var hm = hour * 100 + minute;\n\n            if (hm < 600) {\n              return '凌晨';\n            } else if (hm < 900) {\n              return '早上';\n            } else if (hm < 1130) {\n              return '上午';\n            } else if (hm < 1230) {\n              return '中午';\n            } else if (hm < 1800) {\n              return '下午';\n            } else {\n              return '晚上';\n            }\n          },\n          calendar: {\n            sameDay: '[今天]LT',\n            nextDay: '[明天]LT',\n            nextWeek: '[下]ddddLT',\n            lastDay: '[昨天]LT',\n            lastWeek: '[上]ddddLT',\n            sameElse: 'L'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(日|月|週)/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              case 'd':\n              case 'D':\n              case 'DDD':\n                return number + '日';\n\n              case 'M':\n                return number + '月';\n\n              case 'w':\n              case 'W':\n                return number + '週';\n\n              default:\n                return number;\n            }\n          },\n          relativeTime: {\n            future: '%s內',\n            past: '%s前',\n            s: '幾秒',\n            m: '1 分鐘',\n            mm: '%d 分鐘',\n            h: '1 小時',\n            hh: '%d 小時',\n            d: '1 天',\n            dd: '%d 天',\n            M: '1 個月',\n            MM: '%d 個月',\n            y: '1 年',\n            yy: '%d 年'\n          }\n        });\n        return zhHk;\n      });\n      /***/\n\n    },\n    /* 116 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //! moment.js locale configuration\n      //! locale : Chinese (Taiwan) [zh-tw]\n      //! author : Ben : https://github.com/ben-lin\n      //! author : Chris Lam : https://github.com/hehachris\n      ;\n\n      (function (global, factory) {\n        true ? factory(__webpack_require__(0)) : typeof define === 'function' && define.amd ? define(['../moment'], factory) : factory(global.moment);\n      })(this, function (moment) {\n        'use strict';\n\n        var zhTw = moment.defineLocale('zh-tw', {\n          months: '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),\n          monthsShort: '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),\n          weekdays: '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),\n          weekdaysShort: '週日_週一_週二_週三_週四_週五_週六'.split('_'),\n          weekdaysMin: '日_一_二_三_四_五_六'.split('_'),\n          longDateFormat: {\n            LT: 'HH:mm',\n            LTS: 'HH:mm:ss',\n            L: 'YYYY年MMMD日',\n            LL: 'YYYY年MMMD日',\n            LLL: 'YYYY年MMMD日 HH:mm',\n            LLLL: 'YYYY年MMMD日dddd HH:mm',\n            l: 'YYYY年MMMD日',\n            ll: 'YYYY年MMMD日',\n            lll: 'YYYY年MMMD日 HH:mm',\n            llll: 'YYYY年MMMD日dddd HH:mm'\n          },\n          meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,\n          meridiemHour: function meridiemHour(hour, meridiem) {\n            if (hour === 12) {\n              hour = 0;\n            }\n\n            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {\n              return hour;\n            } else if (meridiem === '中午') {\n              return hour >= 11 ? hour : hour + 12;\n            } else if (meridiem === '下午' || meridiem === '晚上') {\n              return hour + 12;\n            }\n          },\n          meridiem: function meridiem(hour, minute, isLower) {\n            var hm = hour * 100 + minute;\n\n            if (hm < 600) {\n              return '凌晨';\n            } else if (hm < 900) {\n              return '早上';\n            } else if (hm < 1130) {\n              return '上午';\n            } else if (hm < 1230) {\n              return '中午';\n            } else if (hm < 1800) {\n              return '下午';\n            } else {\n              return '晚上';\n            }\n          },\n          calendar: {\n            sameDay: '[今天]LT',\n            nextDay: '[明天]LT',\n            nextWeek: '[下]ddddLT',\n            lastDay: '[昨天]LT',\n            lastWeek: '[上]ddddLT',\n            sameElse: 'L'\n          },\n          dayOfMonthOrdinalParse: /\\d{1,2}(日|月|週)/,\n          ordinal: function ordinal(number, period) {\n            switch (period) {\n              case 'd':\n              case 'D':\n              case 'DDD':\n                return number + '日';\n\n              case 'M':\n                return number + '月';\n\n              case 'w':\n              case 'W':\n                return number + '週';\n\n              default:\n                return number;\n            }\n          },\n          relativeTime: {\n            future: '%s內',\n            past: '%s前',\n            s: '幾秒',\n            m: '1 分鐘',\n            mm: '%d 分鐘',\n            h: '1 小時',\n            hh: '%d 小時',\n            d: '1 天',\n            dd: '%d 天',\n            M: '1 個月',\n            MM: '%d 個月',\n            y: '1 年',\n            yy: '%d 年'\n          }\n        });\n        return zhTw;\n      });\n      /***/\n\n    },\n    /* 117 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      var _react = __webpack_require__(122);\n\n      var _react2 = _interopRequireDefault(_react);\n\n      var _jquery = __webpack_require__(1);\n\n      var _jquery2 = _interopRequireDefault(_jquery);\n\n      var _fullcalendar = __webpack_require__(119);\n\n      var _fullcalendar2 = _interopRequireDefault(_fullcalendar);\n\n      var _moment = __webpack_require__(0);\n\n      var _moment2 = _interopRequireDefault(_moment);\n\n      var _fullcalendarObjectMapper = __webpack_require__(118);\n\n      var _fullcalendarObjectMapper2 = _interopRequireDefault(_fullcalendarObjectMapper);\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      }\n\n      var FullCalendar = function (_React$Component) {\n        _inherits(FullCalendar, _React$Component);\n\n        function FullCalendar() {\n          _classCallCheck(this, FullCalendar);\n\n          var _this = _possibleConstructorReturn(this, (FullCalendar.__proto__ || Object.getPrototypeOf(FullCalendar)).call(this));\n\n          _this.jq = _jquery2.default.noConflict();\n          _this.fullcalendarObjectMapper = new _fullcalendarObjectMapper2.default();\n          _this.root = null;\n          _this.instance = null;\n          _this.date = new Date();\n          return _this;\n        }\n\n        _createClass(FullCalendar, [{\n          key: \"componentDidMount\",\n          value: function componentDidMount() {\n            var objectMapperSettings = this.fullcalendarObjectMapper.getSettings(this.props);\n            this.instance = this.jq(\"#\" + this.root).fullCalendar(objectMapperSettings);\n          }\n        }, {\n          key: \"componentWillReceiveProps\",\n          value: function componentWillReceiveProps(nextProps) {\n            this.jq(\"#\" + this.root).fullCalendar('destroy');\n            var objectMapperSettings = this.fullcalendarObjectMapper.getSettings(nextProps);\n            this.instance = this.jq(\"#\" + this.root).fullCalendar(objectMapperSettings);\n          }\n        }, {\n          key: \"render\",\n          value: function render() {\n            this.root = this.props.id || 'ID' + this.date.getTime();\n            return _react2.default.createElement(\"div\", {\n              id: this.root\n            });\n          }\n        }]);\n\n        return FullCalendar;\n      }(_react2.default.Component);\n\n      exports.default = FullCalendar;\n      module.exports = exports[\"default\"];\n      /***/\n    },\n    /* 118 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      } // import fullCalendar from \"fullcalendar\";\n\n\n      var FullcalendarObjectMapper = function () {\n        function FullcalendarObjectMapper() {\n          _classCallCheck(this, FullcalendarObjectMapper);\n        }\n\n        _createClass(FullcalendarObjectMapper, [{\n          key: \"getSettings\",\n          value: function getSettings(properties) {\n            var newSettings = {};\n\n            for (var key in properties) {\n              if (properties.hasOwnProperty(key)) {\n                newSettings[key] = properties[key];\n              }\n            }\n\n            return newSettings;\n          }\n        }]);\n\n        return FullcalendarObjectMapper;\n      }();\n\n      exports.default = FullcalendarObjectMapper;\n      module.exports = exports[\"default\"];\n      /***/\n    },\n    /* 119 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n      /*!\n      * FullCalendar v3.4.0\n      * Docs & License: https://fullcalendar.io/\n      * (c) 2017 Adam Shaw\n      */\n\n\n      (function (factory) {\n        if (true) {\n          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(0)], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n        } else if (typeof exports === 'object') {\n          // Node/CommonJS\n          module.exports = factory(require('jquery'), require('moment'));\n        } else {\n          factory(jQuery, moment);\n        }\n      })(function ($, moment) {\n        ;\n        ;\n        var FC = $.fullCalendar = {\n          version: \"3.4.0\",\n          // When introducing internal API incompatibilities (where fullcalendar plugins would break),\n          // the minor version of the calendar should be upped (ex: 2.7.2 -> 2.8.0)\n          // and the below integer should be incremented.\n          internalApiVersion: 9\n        };\n        var fcViews = FC.views = {};\n\n        $.fn.fullCalendar = function (options) {\n          var args = Array.prototype.slice.call(arguments, 1); // for a possible method call\n\n          var res = this; // what this function will return (this jQuery object by default)\n\n          this.each(function (i, _element) {\n            // loop each DOM element involved\n            var element = $(_element);\n            var calendar = element.data('fullCalendar'); // get the existing calendar object (if any)\n\n            var singleRes; // the returned value of this single method call\n            // a method call\n\n            if (typeof options === 'string') {\n              if (calendar && $.isFunction(calendar[options])) {\n                singleRes = calendar[options].apply(calendar, args);\n\n                if (!i) {\n                  res = singleRes; // record the first method call result\n                }\n\n                if (options === 'destroy') {\n                  // for the destroy method, must remove Calendar object data\n                  element.removeData('fullCalendar');\n                }\n              }\n            } // a new calendar initialization\n            else if (!calendar) {\n                // don't initialize twice\n                calendar = new Calendar(element, options);\n                element.data('fullCalendar', calendar);\n                calendar.render();\n              }\n          });\n          return res;\n        };\n\n        var complexOptions = [// names of options that are objects whose properties should be combined\n        'header', 'footer', 'buttonText', 'buttonIcons', 'themeButtonIcons']; // Merges an array of option objects into a single object\n\n        function mergeOptions(optionObjs) {\n          return mergeProps(optionObjs, complexOptions);\n        }\n\n        ;\n        ; // exports\n\n        FC.intersectRanges = intersectRanges;\n        FC.applyAll = applyAll;\n        FC.debounce = debounce;\n        FC.isInt = isInt;\n        FC.htmlEscape = htmlEscape;\n        FC.cssToStr = cssToStr;\n        FC.proxy = proxy;\n        FC.capitaliseFirstLetter = capitaliseFirstLetter;\n        /* FullCalendar-specific DOM Utilities\n        ----------------------------------------------------------------------------------------------------------------------*/\n        // Given the scrollbar widths of some other container, create borders/margins on rowEls in order to match the left\n        // and right space that was offset by the scrollbars. A 1-pixel border first, then margin beyond that.\n\n        function compensateScroll(rowEls, scrollbarWidths) {\n          if (scrollbarWidths.left) {\n            rowEls.css({\n              'border-left-width': 1,\n              'margin-left': scrollbarWidths.left - 1\n            });\n          }\n\n          if (scrollbarWidths.right) {\n            rowEls.css({\n              'border-right-width': 1,\n              'margin-right': scrollbarWidths.right - 1\n            });\n          }\n        } // Undoes compensateScroll and restores all borders/margins\n\n\n        function uncompensateScroll(rowEls) {\n          rowEls.css({\n            'margin-left': '',\n            'margin-right': '',\n            'border-left-width': '',\n            'border-right-width': ''\n          });\n        } // Make the mouse cursor express that an event is not allowed in the current area\n\n\n        function disableCursor() {\n          $('body').addClass('fc-not-allowed');\n        } // Returns the mouse cursor to its original look\n\n\n        function enableCursor() {\n          $('body').removeClass('fc-not-allowed');\n        } // Given a total available height to fill, have `els` (essentially child rows) expand to accomodate.\n        // By default, all elements that are shorter than the recommended height are expanded uniformly, not considering\n        // any other els that are already too tall. if `shouldRedistribute` is on, it considers these tall rows and \n        // reduces the available height.\n\n\n        function distributeHeight(els, availableHeight, shouldRedistribute) {\n          // *FLOORING NOTE*: we floor in certain places because zoom can give inaccurate floating-point dimensions,\n          // and it is better to be shorter than taller, to avoid creating unnecessary scrollbars.\n          var minOffset1 = Math.floor(availableHeight / els.length); // for non-last element\n\n          var minOffset2 = Math.floor(availableHeight - minOffset1 * (els.length - 1)); // for last element *FLOORING NOTE*\n\n          var flexEls = []; // elements that are allowed to expand. array of DOM nodes\n\n          var flexOffsets = []; // amount of vertical space it takes up\n\n          var flexHeights = []; // actual css height\n\n          var usedHeight = 0;\n          undistributeHeight(els); // give all elements their natural height\n          // find elements that are below the recommended height (expandable).\n          // important to query for heights in a single first pass (to avoid reflow oscillation).\n\n          els.each(function (i, el) {\n            var minOffset = i === els.length - 1 ? minOffset2 : minOffset1;\n            var naturalOffset = $(el).outerHeight(true);\n\n            if (naturalOffset < minOffset) {\n              flexEls.push(el);\n              flexOffsets.push(naturalOffset);\n              flexHeights.push($(el).height());\n            } else {\n              // this element stretches past recommended height (non-expandable). mark the space as occupied.\n              usedHeight += naturalOffset;\n            }\n          }); // readjust the recommended height to only consider the height available to non-maxed-out rows.\n\n          if (shouldRedistribute) {\n            availableHeight -= usedHeight;\n            minOffset1 = Math.floor(availableHeight / flexEls.length);\n            minOffset2 = Math.floor(availableHeight - minOffset1 * (flexEls.length - 1)); // *FLOORING NOTE*\n          } // assign heights to all expandable elements\n\n\n          $(flexEls).each(function (i, el) {\n            var minOffset = i === flexEls.length - 1 ? minOffset2 : minOffset1;\n            var naturalOffset = flexOffsets[i];\n            var naturalHeight = flexHeights[i];\n            var newHeight = minOffset - (naturalOffset - naturalHeight); // subtract the margin/padding\n\n            if (naturalOffset < minOffset) {\n              // we check this again because redistribution might have changed things\n              $(el).height(newHeight);\n            }\n          });\n        } // Undoes distrubuteHeight, restoring all els to their natural height\n\n\n        function undistributeHeight(els) {\n          els.height('');\n        } // Given `els`, a jQuery set of <td> cells, find the cell with the largest natural width and set the widths of all the\n        // cells to be that width.\n        // PREREQUISITE: if you want a cell to take up width, it needs to have a single inner element w/ display:inline\n\n\n        function matchCellWidths(els) {\n          var maxInnerWidth = 0;\n          els.find('> *').each(function (i, innerEl) {\n            var innerWidth = $(innerEl).outerWidth();\n\n            if (innerWidth > maxInnerWidth) {\n              maxInnerWidth = innerWidth;\n            }\n          });\n          maxInnerWidth++; // sometimes not accurate of width the text needs to stay on one line. insurance\n\n          els.width(maxInnerWidth);\n          return maxInnerWidth;\n        } // Given one element that resides inside another,\n        // Subtracts the height of the inner element from the outer element.\n\n\n        function subtractInnerElHeight(outerEl, innerEl) {\n          var both = outerEl.add(innerEl);\n          var diff; // effin' IE8/9/10/11 sometimes returns 0 for dimensions. this weird hack was the only thing that worked\n\n          both.css({\n            position: 'relative',\n            // cause a reflow, which will force fresh dimension recalculation\n            left: -1 // ensure reflow in case the el was already relative. negative is less likely to cause new scroll\n\n          });\n          diff = outerEl.outerHeight() - innerEl.outerHeight(); // grab the dimensions\n\n          both.css({\n            position: '',\n            left: ''\n          }); // undo hack\n\n          return diff;\n        }\n        /* Element Geom Utilities\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n\n        FC.getOuterRect = getOuterRect;\n        FC.getClientRect = getClientRect;\n        FC.getContentRect = getContentRect;\n        FC.getScrollbarWidths = _getScrollbarWidths; // borrowed from https://github.com/jquery/jquery-ui/blob/1.11.0/ui/core.js#L51\n\n        function getScrollParent(el) {\n          var position = el.css('position'),\n              scrollParent = el.parents().filter(function () {\n            var parent = $(this);\n            return /(auto|scroll)/.test(parent.css('overflow') + parent.css('overflow-y') + parent.css('overflow-x'));\n          }).eq(0);\n          return position === 'fixed' || !scrollParent.length ? $(el[0].ownerDocument || document) : scrollParent;\n        } // Queries the outer bounding area of a jQuery element.\n        // Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).\n        // Origin is optional.\n\n\n        function getOuterRect(el, origin) {\n          var offset = el.offset();\n          var left = offset.left - (origin ? origin.left : 0);\n          var top = offset.top - (origin ? origin.top : 0);\n          return {\n            left: left,\n            right: left + el.outerWidth(),\n            top: top,\n            bottom: top + el.outerHeight()\n          };\n        } // Queries the area within the margin/border/scrollbars of a jQuery element. Does not go within the padding.\n        // Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).\n        // Origin is optional.\n        // WARNING: given element can't have borders\n        // NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.\n\n\n        function getClientRect(el, origin) {\n          var offset = el.offset();\n\n          var scrollbarWidths = _getScrollbarWidths(el);\n\n          var left = offset.left + getCssFloat(el, 'border-left-width') + scrollbarWidths.left - (origin ? origin.left : 0);\n          var top = offset.top + getCssFloat(el, 'border-top-width') + scrollbarWidths.top - (origin ? origin.top : 0);\n          return {\n            left: left,\n            right: left + el[0].clientWidth,\n            // clientWidth includes padding but NOT scrollbars\n            top: top,\n            bottom: top + el[0].clientHeight // clientHeight includes padding but NOT scrollbars\n\n          };\n        } // Queries the area within the margin/border/padding of a jQuery element. Assumed not to have scrollbars.\n        // Returns a rectangle with absolute coordinates: left, right (exclusive), top, bottom (exclusive).\n        // Origin is optional.\n\n\n        function getContentRect(el, origin) {\n          var offset = el.offset(); // just outside of border, margin not included\n\n          var left = offset.left + getCssFloat(el, 'border-left-width') + getCssFloat(el, 'padding-left') - (origin ? origin.left : 0);\n          var top = offset.top + getCssFloat(el, 'border-top-width') + getCssFloat(el, 'padding-top') - (origin ? origin.top : 0);\n          return {\n            left: left,\n            right: left + el.width(),\n            top: top,\n            bottom: top + el.height()\n          };\n        } // Returns the computed left/right/top/bottom scrollbar widths for the given jQuery element.\n        // WARNING: given element can't have borders (which will cause offsetWidth/offsetHeight to be larger).\n        // NOTE: should use clientLeft/clientTop, but very unreliable cross-browser.\n\n\n        function _getScrollbarWidths(el) {\n          var leftRightWidth = el[0].offsetWidth - el[0].clientWidth;\n          var bottomWidth = el[0].offsetHeight - el[0].clientHeight;\n          var widths;\n          leftRightWidth = sanitizeScrollbarWidth(leftRightWidth);\n          bottomWidth = sanitizeScrollbarWidth(bottomWidth);\n          widths = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: bottomWidth\n          };\n\n          if (getIsLeftRtlScrollbars() && el.css('direction') == 'rtl') {\n            // is the scrollbar on the left side?\n            widths.left = leftRightWidth;\n          } else {\n            widths.right = leftRightWidth;\n          }\n\n          return widths;\n        } // The scrollbar width computations in getScrollbarWidths are sometimes flawed when it comes to\n        // retina displays, rounding, and IE11. Massage them into a usable value.\n\n\n        function sanitizeScrollbarWidth(width) {\n          width = Math.max(0, width); // no negatives\n\n          width = Math.round(width);\n          return width;\n        } // Logic for determining if, when the element is right-to-left, the scrollbar appears on the left side\n\n\n        var _isLeftRtlScrollbars = null;\n\n        function getIsLeftRtlScrollbars() {\n          // responsible for caching the computation\n          if (_isLeftRtlScrollbars === null) {\n            _isLeftRtlScrollbars = computeIsLeftRtlScrollbars();\n          }\n\n          return _isLeftRtlScrollbars;\n        }\n\n        function computeIsLeftRtlScrollbars() {\n          // creates an offscreen test element, then removes it\n          var el = $('<div><div/></div>').css({\n            position: 'absolute',\n            top: -1000,\n            left: 0,\n            border: 0,\n            padding: 0,\n            overflow: 'scroll',\n            direction: 'rtl'\n          }).appendTo('body');\n          var innerEl = el.children();\n          var res = innerEl.offset().left > el.offset().left; // is the inner div shifted to accommodate a left scrollbar?\n\n          el.remove();\n          return res;\n        } // Retrieves a jQuery element's computed CSS value as a floating-point number.\n        // If the queried value is non-numeric (ex: IE can return \"medium\" for border width), will just return zero.\n\n\n        function getCssFloat(el, prop) {\n          return parseFloat(el.css(prop)) || 0;\n        }\n        /* Mouse / Touch Utilities\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n\n        FC.preventDefault = preventDefault; // Returns a boolean whether this was a left mouse click and no ctrl key (which means right click on Mac)\n\n        function isPrimaryMouseButton(ev) {\n          return ev.which == 1 && !ev.ctrlKey;\n        }\n\n        function getEvX(ev) {\n          var touches = ev.originalEvent.touches; // on mobile FF, pageX for touch events is present, but incorrect,\n          // so, look at touch coordinates first.\n\n          if (touches && touches.length) {\n            return touches[0].pageX;\n          }\n\n          return ev.pageX;\n        }\n\n        function getEvY(ev) {\n          var touches = ev.originalEvent.touches; // on mobile FF, pageX for touch events is present, but incorrect,\n          // so, look at touch coordinates first.\n\n          if (touches && touches.length) {\n            return touches[0].pageY;\n          }\n\n          return ev.pageY;\n        }\n\n        function getEvIsTouch(ev) {\n          return /^touch/.test(ev.type);\n        }\n\n        function preventSelection(el) {\n          el.addClass('fc-unselectable').on('selectstart', preventDefault);\n        }\n\n        function allowSelection(el) {\n          el.removeClass('fc-unselectable').off('selectstart', preventDefault);\n        } // Stops a mouse/touch event from doing it's native browser action\n\n\n        function preventDefault(ev) {\n          ev.preventDefault();\n        }\n        /* General Geometry Utils\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n\n        FC.intersectRects = intersectRects; // Returns a new rectangle that is the intersection of the two rectangles. If they don't intersect, returns false\n\n        function intersectRects(rect1, rect2) {\n          var res = {\n            left: Math.max(rect1.left, rect2.left),\n            right: Math.min(rect1.right, rect2.right),\n            top: Math.max(rect1.top, rect2.top),\n            bottom: Math.min(rect1.bottom, rect2.bottom)\n          };\n\n          if (res.left < res.right && res.top < res.bottom) {\n            return res;\n          }\n\n          return false;\n        } // Returns a new point that will have been moved to reside within the given rectangle\n\n\n        function constrainPoint(point, rect) {\n          return {\n            left: Math.min(Math.max(point.left, rect.left), rect.right),\n            top: Math.min(Math.max(point.top, rect.top), rect.bottom)\n          };\n        } // Returns a point that is the center of the given rectangle\n\n\n        function getRectCenter(rect) {\n          return {\n            left: (rect.left + rect.right) / 2,\n            top: (rect.top + rect.bottom) / 2\n          };\n        } // Subtracts point2's coordinates from point1's coordinates, returning a delta\n\n\n        function diffPoints(point1, point2) {\n          return {\n            left: point1.left - point2.left,\n            top: point1.top - point2.top\n          };\n        }\n        /* Object Ordering by Field\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n\n        FC.parseFieldSpecs = parseFieldSpecs;\n        FC.compareByFieldSpecs = compareByFieldSpecs;\n        FC.compareByFieldSpec = compareByFieldSpec;\n        FC.flexibleCompare = flexibleCompare;\n\n        function parseFieldSpecs(input) {\n          var specs = [];\n          var tokens = [];\n          var i, token;\n\n          if (typeof input === 'string') {\n            tokens = input.split(/\\s*,\\s*/);\n          } else if (typeof input === 'function') {\n            tokens = [input];\n          } else if ($.isArray(input)) {\n            tokens = input;\n          }\n\n          for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n\n            if (typeof token === 'string') {\n              specs.push(token.charAt(0) == '-' ? {\n                field: token.substring(1),\n                order: -1\n              } : {\n                field: token,\n                order: 1\n              });\n            } else if (typeof token === 'function') {\n              specs.push({\n                func: token\n              });\n            }\n          }\n\n          return specs;\n        }\n\n        function compareByFieldSpecs(obj1, obj2, fieldSpecs) {\n          var i;\n          var cmp;\n\n          for (i = 0; i < fieldSpecs.length; i++) {\n            cmp = compareByFieldSpec(obj1, obj2, fieldSpecs[i]);\n\n            if (cmp) {\n              return cmp;\n            }\n          }\n\n          return 0;\n        }\n\n        function compareByFieldSpec(obj1, obj2, fieldSpec) {\n          if (fieldSpec.func) {\n            return fieldSpec.func(obj1, obj2);\n          }\n\n          return flexibleCompare(obj1[fieldSpec.field], obj2[fieldSpec.field]) * (fieldSpec.order || 1);\n        }\n\n        function flexibleCompare(a, b) {\n          if (!a && !b) {\n            return 0;\n          }\n\n          if (b == null) {\n            return -1;\n          }\n\n          if (a == null) {\n            return 1;\n          }\n\n          if ($.type(a) === 'string' || $.type(b) === 'string') {\n            return String(a).localeCompare(String(b));\n          }\n\n          return a - b;\n        }\n        /* FullCalendar-specific Misc Utilities\n        ----------------------------------------------------------------------------------------------------------------------*/\n        // Computes the intersection of the two ranges. Will return fresh date clones in a range.\n        // Returns undefined if no intersection.\n        // Expects all dates to be normalized to the same timezone beforehand.\n        // TODO: move to date section?\n\n\n        function intersectRanges(subjectRange, constraintRange) {\n          var subjectStart = subjectRange.start;\n          var subjectEnd = subjectRange.end;\n          var constraintStart = constraintRange.start;\n          var constraintEnd = constraintRange.end;\n          var segStart, segEnd;\n          var isStart, isEnd;\n\n          if (subjectEnd > constraintStart && subjectStart < constraintEnd) {\n            // in bounds at all?\n            if (subjectStart >= constraintStart) {\n              segStart = subjectStart.clone();\n              isStart = true;\n            } else {\n              segStart = constraintStart.clone();\n              isStart = false;\n            }\n\n            if (subjectEnd <= constraintEnd) {\n              segEnd = subjectEnd.clone();\n              isEnd = true;\n            } else {\n              segEnd = constraintEnd.clone();\n              isEnd = false;\n            }\n\n            return {\n              start: segStart,\n              end: segEnd,\n              isStart: isStart,\n              isEnd: isEnd\n            };\n          }\n        }\n        /* Date Utilities\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n\n        FC.computeGreatestUnit = computeGreatestUnit;\n        FC.divideRangeByDuration = divideRangeByDuration;\n        FC.divideDurationByDuration = divideDurationByDuration;\n        FC.multiplyDuration = multiplyDuration;\n        FC.durationHasTime = durationHasTime;\n        var dayIDs = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat'];\n        var unitsDesc = ['year', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond']; // descending\n        // Diffs the two moments into a Duration where full-days are recorded first, then the remaining time.\n        // Moments will have their timezones normalized.\n\n        function diffDayTime(a, b) {\n          return moment.duration({\n            days: a.clone().stripTime().diff(b.clone().stripTime(), 'days'),\n            ms: a.time() - b.time() // time-of-day from day start. disregards timezone\n\n          });\n        } // Diffs the two moments via their start-of-day (regardless of timezone). Produces whole-day durations.\n\n\n        function diffDay(a, b) {\n          return moment.duration({\n            days: a.clone().stripTime().diff(b.clone().stripTime(), 'days')\n          });\n        } // Diffs two moments, producing a duration, made of a whole-unit-increment of the given unit. Uses rounding.\n\n\n        function diffByUnit(a, b, unit) {\n          return moment.duration(Math.round(a.diff(b, unit, true)), // returnFloat=true\n          unit);\n        } // Computes the unit name of the largest whole-unit period of time.\n        // For example, 48 hours will be \"days\" whereas 49 hours will be \"hours\".\n        // Accepts start/end, a range object, or an original duration object.\n\n\n        function computeGreatestUnit(start, end) {\n          var i, unit;\n          var val;\n\n          for (i = 0; i < unitsDesc.length; i++) {\n            unit = unitsDesc[i];\n            val = computeRangeAs(unit, start, end);\n\n            if (val >= 1 && isInt(val)) {\n              break;\n            }\n          }\n\n          return unit; // will be \"milliseconds\" if nothing else matches\n        } // like computeGreatestUnit, but has special abilities to interpret the source input for clues\n\n\n        function computeDurationGreatestUnit(duration, durationInput) {\n          var unit = computeGreatestUnit(duration); // prevent days:7 from being interpreted as a week\n\n          if (unit === 'week' && typeof durationInput === 'object' && durationInput.days) {\n            unit = 'day';\n          }\n\n          return unit;\n        } // Computes the number of units (like \"hours\") in the given range.\n        // Range can be a {start,end} object, separate start/end args, or a Duration.\n        // Results are based on Moment's .as() and .diff() methods, so results can depend on internal handling\n        // of month-diffing logic (which tends to vary from version to version).\n\n\n        function computeRangeAs(unit, start, end) {\n          if (end != null) {\n            // given start, end\n            return end.diff(start, unit, true);\n          } else if (moment.isDuration(start)) {\n            // given duration\n            return start.as(unit);\n          } else {\n            // given { start, end } range object\n            return start.end.diff(start.start, unit, true);\n          }\n        } // Intelligently divides a range (specified by a start/end params) by a duration\n\n\n        function divideRangeByDuration(start, end, dur) {\n          var months;\n\n          if (durationHasTime(dur)) {\n            return (end - start) / dur;\n          }\n\n          months = dur.asMonths();\n\n          if (Math.abs(months) >= 1 && isInt(months)) {\n            return end.diff(start, 'months', true) / months;\n          }\n\n          return end.diff(start, 'days', true) / dur.asDays();\n        } // Intelligently divides one duration by another\n\n\n        function divideDurationByDuration(dur1, dur2) {\n          var months1, months2;\n\n          if (durationHasTime(dur1) || durationHasTime(dur2)) {\n            return dur1 / dur2;\n          }\n\n          months1 = dur1.asMonths();\n          months2 = dur2.asMonths();\n\n          if (Math.abs(months1) >= 1 && isInt(months1) && Math.abs(months2) >= 1 && isInt(months2)) {\n            return months1 / months2;\n          }\n\n          return dur1.asDays() / dur2.asDays();\n        } // Intelligently multiplies a duration by a number\n\n\n        function multiplyDuration(dur, n) {\n          var months;\n\n          if (durationHasTime(dur)) {\n            return moment.duration(dur * n);\n          }\n\n          months = dur.asMonths();\n\n          if (Math.abs(months) >= 1 && isInt(months)) {\n            return moment.duration({\n              months: months * n\n            });\n          }\n\n          return moment.duration({\n            days: dur.asDays() * n\n          });\n        }\n\n        function cloneRange(range) {\n          return {\n            start: range.start.clone(),\n            end: range.end.clone()\n          };\n        } // Trims the beginning and end of inner range to be completely within outerRange.\n        // Returns a new range object.\n\n\n        function constrainRange(innerRange, outerRange) {\n          innerRange = cloneRange(innerRange);\n\n          if (outerRange.start) {\n            // needs to be inclusively before outerRange's end\n            innerRange.start = constrainDate(innerRange.start, outerRange);\n          }\n\n          if (outerRange.end) {\n            innerRange.end = minMoment(innerRange.end, outerRange.end);\n          }\n\n          return innerRange;\n        } // If the given date is not within the given range, move it inside.\n        // (If it's past the end, make it one millisecond before the end).\n        // Always returns a new moment.\n\n\n        function constrainDate(date, range) {\n          date = date.clone();\n\n          if (range.start) {\n            date = maxMoment(date, range.start);\n          }\n\n          if (range.end && date >= range.end) {\n            date = range.end.clone().subtract(1);\n          }\n\n          return date;\n        }\n\n        function isDateWithinRange(date, range) {\n          return (!range.start || date >= range.start) && (!range.end || date < range.end);\n        } // TODO: deal with repeat code in intersectRanges\n        // constraintRange can have unspecified start/end, an open-ended range.\n\n\n        function doRangesIntersect(subjectRange, constraintRange) {\n          return (!constraintRange.start || subjectRange.end >= constraintRange.start) && (!constraintRange.end || subjectRange.start < constraintRange.end);\n        }\n\n        function isRangeWithinRange(innerRange, outerRange) {\n          return (!outerRange.start || innerRange.start >= outerRange.start) && (!outerRange.end || innerRange.end <= outerRange.end);\n        }\n\n        function isRangesEqual(range0, range1) {\n          return (range0.start && range1.start && range0.start.isSame(range1.start) || !range0.start && !range1.start) && (range0.end && range1.end && range0.end.isSame(range1.end) || !range0.end && !range1.end);\n        } // Returns the moment that's earlier in time. Always a copy.\n\n\n        function minMoment(mom1, mom2) {\n          return (mom1.isBefore(mom2) ? mom1 : mom2).clone();\n        } // Returns the moment that's later in time. Always a copy.\n\n\n        function maxMoment(mom1, mom2) {\n          return (mom1.isAfter(mom2) ? mom1 : mom2).clone();\n        } // Returns a boolean about whether the given duration has any time parts (hours/minutes/seconds/ms)\n\n\n        function durationHasTime(dur) {\n          return Boolean(dur.hours() || dur.minutes() || dur.seconds() || dur.milliseconds());\n        }\n\n        function isNativeDate(input) {\n          return Object.prototype.toString.call(input) === '[object Date]' || input instanceof Date;\n        } // Returns a boolean about whether the given input is a time string, like \"06:40:00\" or \"06:00\"\n\n\n        function isTimeString(str) {\n          return /^\\d+\\:\\d+(?:\\:\\d+\\.?(?:\\d{3})?)?$/.test(str);\n        }\n        /* Logging and Debug\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n\n        FC.log = function () {\n          var console = window.console;\n\n          if (console && console.log) {\n            return console.log.apply(console, arguments);\n          }\n        };\n\n        FC.warn = function () {\n          var console = window.console;\n\n          if (console && console.warn) {\n            return console.warn.apply(console, arguments);\n          } else {\n            return FC.log.apply(FC, arguments);\n          }\n        };\n        /* General Utilities\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n\n        var hasOwnPropMethod = {}.hasOwnProperty; // Merges an array of objects into a single object.\n        // The second argument allows for an array of property names who's object values will be merged together.\n\n        function mergeProps(propObjs, complexProps) {\n          var dest = {};\n          var i, name;\n          var complexObjs;\n          var j, val;\n          var props;\n\n          if (complexProps) {\n            for (i = 0; i < complexProps.length; i++) {\n              name = complexProps[i];\n              complexObjs = []; // collect the trailing object values, stopping when a non-object is discovered\n\n              for (j = propObjs.length - 1; j >= 0; j--) {\n                val = propObjs[j][name];\n\n                if (typeof val === 'object') {\n                  complexObjs.unshift(val);\n                } else if (val !== undefined) {\n                  dest[name] = val; // if there were no objects, this value will be used\n\n                  break;\n                }\n              } // if the trailing values were objects, use the merged value\n\n\n              if (complexObjs.length) {\n                dest[name] = mergeProps(complexObjs);\n              }\n            }\n          } // copy values into the destination, going from last to first\n\n\n          for (i = propObjs.length - 1; i >= 0; i--) {\n            props = propObjs[i];\n\n            for (name in props) {\n              if (!(name in dest)) {\n                // if already assigned by previous props or complex props, don't reassign\n                dest[name] = props[name];\n              }\n            }\n          }\n\n          return dest;\n        } // Create an object that has the given prototype. Just like Object.create\n\n\n        function createObject(proto) {\n          var f = function f() {};\n\n          f.prototype = proto;\n          return new f();\n        }\n\n        FC.createObject = createObject;\n\n        function copyOwnProps(src, dest) {\n          for (var name in src) {\n            if (hasOwnProp(src, name)) {\n              dest[name] = src[name];\n            }\n          }\n        }\n\n        function hasOwnProp(obj, name) {\n          return hasOwnPropMethod.call(obj, name);\n        } // Is the given value a non-object non-function value?\n\n\n        function isAtomic(val) {\n          return /undefined|null|boolean|number|string/.test($.type(val));\n        }\n\n        function applyAll(functions, thisObj, args) {\n          if ($.isFunction(functions)) {\n            functions = [functions];\n          }\n\n          if (functions) {\n            var i;\n            var ret;\n\n            for (i = 0; i < functions.length; i++) {\n              ret = functions[i].apply(thisObj, args) || ret;\n            }\n\n            return ret;\n          }\n        }\n\n        function firstDefined() {\n          for (var i = 0; i < arguments.length; i++) {\n            if (arguments[i] !== undefined) {\n              return arguments[i];\n            }\n          }\n        }\n\n        function htmlEscape(s) {\n          return (s + '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&#039;').replace(/\"/g, '&quot;').replace(/\\n/g, '<br />');\n        }\n\n        function stripHtmlEntities(text) {\n          return text.replace(/&.*?;/g, '');\n        } // Given a hash of CSS properties, returns a string of CSS.\n        // Uses property names as-is (no camel-case conversion). Will not make statements for null/undefined values.\n\n\n        function cssToStr(cssProps) {\n          var statements = [];\n          $.each(cssProps, function (name, val) {\n            if (val != null) {\n              statements.push(name + ':' + val);\n            }\n          });\n          return statements.join(';');\n        } // Given an object hash of HTML attribute names to values,\n        // generates a string that can be injected between < > in HTML\n\n\n        function attrsToStr(attrs) {\n          var parts = [];\n          $.each(attrs, function (name, val) {\n            if (val != null) {\n              parts.push(name + '=\"' + htmlEscape(val) + '\"');\n            }\n          });\n          return parts.join(' ');\n        }\n\n        function capitaliseFirstLetter(str) {\n          return str.charAt(0).toUpperCase() + str.slice(1);\n        }\n\n        function compareNumbers(a, b) {\n          // for .sort()\n          return a - b;\n        }\n\n        function isInt(n) {\n          return n % 1 === 0;\n        } // Returns a method bound to the given object context.\n        // Just like one of the jQuery.proxy signatures, but without the undesired behavior of treating the same method with\n        // different contexts as identical when binding/unbinding events.\n\n\n        function proxy(obj, methodName) {\n          var method = obj[methodName];\n          return function () {\n            return method.apply(obj, arguments);\n          };\n        } // Returns a function, that, as long as it continues to be invoked, will not\n        // be triggered. The function will be called after it stops being called for\n        // N milliseconds. If `immediate` is passed, trigger the function on the\n        // leading edge, instead of the trailing.\n        // https://github.com/jashkenas/underscore/blob/1.6.0/underscore.js#L714\n\n\n        function debounce(func, wait, immediate) {\n          var timeout, args, context, timestamp, result;\n\n          var later = function later() {\n            var last = +new Date() - timestamp;\n\n            if (last < wait) {\n              timeout = setTimeout(later, wait - last);\n            } else {\n              timeout = null;\n\n              if (!immediate) {\n                result = func.apply(context, args);\n                context = args = null;\n              }\n            }\n          };\n\n          return function () {\n            context = this;\n            args = arguments;\n            timestamp = +new Date();\n            var callNow = immediate && !timeout;\n\n            if (!timeout) {\n              timeout = setTimeout(later, wait);\n            }\n\n            if (callNow) {\n              result = func.apply(context, args);\n              context = args = null;\n            }\n\n            return result;\n          };\n        }\n\n        ;\n        ;\n        /*\n        GENERAL NOTE on moments throughout the *entire rest* of the codebase:\n        All moments are assumed to be ambiguously-zoned unless otherwise noted,\n        with the NOTABLE EXCEOPTION of start/end dates that live on *Event Objects*.\n        Ambiguously-TIMED moments are assumed to be ambiguously-zoned by nature.\n        */\n\n        var ambigDateOfMonthRegex = /^\\s*\\d{4}-\\d\\d$/;\n        var ambigTimeOrZoneRegex = /^\\s*\\d{4}-(?:(\\d\\d-\\d\\d)|(W\\d\\d$)|(W\\d\\d-\\d)|(\\d\\d\\d))((T| )(\\d\\d(:\\d\\d(:\\d\\d(\\.\\d+)?)?)?)?)?$/;\n        var newMomentProto = moment.fn; // where we will attach our new methods\n\n        var oldMomentProto = $.extend({}, newMomentProto); // copy of original moment methods\n        // tell momentjs to transfer these properties upon clone\n\n        var momentProperties = moment.momentProperties;\n        momentProperties.push('_fullCalendar');\n        momentProperties.push('_ambigTime');\n        momentProperties.push('_ambigZone'); // Creating\n        // -------------------------------------------------------------------------------------------------\n        // Creates a new moment, similar to the vanilla moment(...) constructor, but with\n        // extra features (ambiguous time, enhanced formatting). When given an existing moment,\n        // it will function as a clone (and retain the zone of the moment). Anything else will\n        // result in a moment in the local zone.\n\n        FC.moment = function () {\n          return makeMoment(arguments);\n        }; // Sames as FC.moment, but forces the resulting moment to be in the UTC timezone.\n\n\n        FC.moment.utc = function () {\n          var mom = makeMoment(arguments, true); // Force it into UTC because makeMoment doesn't guarantee it\n          // (if given a pre-existing moment for example)\n\n          if (mom.hasTime()) {\n            // don't give ambiguously-timed moments a UTC zone\n            mom.utc();\n          }\n\n          return mom;\n        }; // Same as FC.moment, but when given an ISO8601 string, the timezone offset is preserved.\n        // ISO8601 strings with no timezone offset will become ambiguously zoned.\n\n\n        FC.moment.parseZone = function () {\n          return makeMoment(arguments, true, true);\n        }; // Builds an enhanced moment from args. When given an existing moment, it clones. When given a\n        // native Date, or called with no arguments (the current time), the resulting moment will be local.\n        // Anything else needs to be \"parsed\" (a string or an array), and will be affected by:\n        //    parseAsUTC - if there is no zone information, should we parse the input in UTC?\n        //    parseZone - if there is zone information, should we force the zone of the moment?\n\n\n        function makeMoment(args, parseAsUTC, parseZone) {\n          var input = args[0];\n          var isSingleString = args.length == 1 && typeof input === 'string';\n          var isAmbigTime;\n          var isAmbigZone;\n          var ambigMatch;\n          var mom;\n\n          if (moment.isMoment(input) || isNativeDate(input) || input === undefined) {\n            mom = moment.apply(null, args);\n          } else {\n            // \"parsing\" is required\n            isAmbigTime = false;\n            isAmbigZone = false;\n\n            if (isSingleString) {\n              if (ambigDateOfMonthRegex.test(input)) {\n                // accept strings like '2014-05', but convert to the first of the month\n                input += '-01';\n                args = [input]; // for when we pass it on to moment's constructor\n\n                isAmbigTime = true;\n                isAmbigZone = true;\n              } else if (ambigMatch = ambigTimeOrZoneRegex.exec(input)) {\n                isAmbigTime = !ambigMatch[5]; // no time part?\n\n                isAmbigZone = true;\n              }\n            } else if ($.isArray(input)) {\n              // arrays have no timezone information, so assume ambiguous zone\n              isAmbigZone = true;\n            } // otherwise, probably a string with a format\n\n\n            if (parseAsUTC || isAmbigTime) {\n              mom = moment.utc.apply(moment, args);\n            } else {\n              mom = moment.apply(null, args);\n            }\n\n            if (isAmbigTime) {\n              mom._ambigTime = true;\n              mom._ambigZone = true; // ambiguous time always means ambiguous zone\n            } else if (parseZone) {\n              // let's record the inputted zone somehow\n              if (isAmbigZone) {\n                mom._ambigZone = true;\n              } else if (isSingleString) {\n                mom.utcOffset(input); // if not a valid zone, will assign UTC\n              }\n            }\n          }\n\n          mom._fullCalendar = true; // flag for extended functionality\n\n          return mom;\n        } // Week Number\n        // -------------------------------------------------------------------------------------------------\n        // Returns the week number, considering the locale's custom week number calcuation\n        // `weeks` is an alias for `week`\n\n\n        newMomentProto.week = newMomentProto.weeks = function (input) {\n          var weekCalc = this._locale._fullCalendar_weekCalc;\n\n          if (input == null && typeof weekCalc === 'function') {\n            // custom function only works for getter\n            return weekCalc(this);\n          } else if (weekCalc === 'ISO') {\n            return oldMomentProto.isoWeek.apply(this, arguments); // ISO getter/setter\n          }\n\n          return oldMomentProto.week.apply(this, arguments); // local getter/setter\n        }; // Time-of-day\n        // -------------------------------------------------------------------------------------------------\n        // GETTER\n        // Returns a Duration with the hours/minutes/seconds/ms values of the moment.\n        // If the moment has an ambiguous time, a duration of 00:00 will be returned.\n        //\n        // SETTER\n        // You can supply a Duration, a Moment, or a Duration-like argument.\n        // When setting the time, and the moment has an ambiguous time, it then becomes unambiguous.\n\n\n        newMomentProto.time = function (time) {\n          // Fallback to the original method (if there is one) if this moment wasn't created via FullCalendar.\n          // `time` is a generic enough method name where this precaution is necessary to avoid collisions w/ other plugins.\n          if (!this._fullCalendar) {\n            return oldMomentProto.time.apply(this, arguments);\n          }\n\n          if (time == null) {\n            // getter\n            return moment.duration({\n              hours: this.hours(),\n              minutes: this.minutes(),\n              seconds: this.seconds(),\n              milliseconds: this.milliseconds()\n            });\n          } else {\n            // setter\n            this._ambigTime = false; // mark that the moment now has a time\n\n            if (!moment.isDuration(time) && !moment.isMoment(time)) {\n              time = moment.duration(time);\n            } // The day value should cause overflow (so 24 hours becomes 00:00:00 of next day).\n            // Only for Duration times, not Moment times.\n\n\n            var dayHours = 0;\n\n            if (moment.isDuration(time)) {\n              dayHours = Math.floor(time.asDays()) * 24;\n            } // We need to set the individual fields.\n            // Can't use startOf('day') then add duration. In case of DST at start of day.\n\n\n            return this.hours(dayHours + time.hours()).minutes(time.minutes()).seconds(time.seconds()).milliseconds(time.milliseconds());\n          }\n        }; // Converts the moment to UTC, stripping out its time-of-day and timezone offset,\n        // but preserving its YMD. A moment with a stripped time will display no time\n        // nor timezone offset when .format() is called.\n\n\n        newMomentProto.stripTime = function () {\n          if (!this._ambigTime) {\n            this.utc(true); // keepLocalTime=true (for keeping *date* value)\n            // set time to zero\n\n            this.set({\n              hours: 0,\n              minutes: 0,\n              seconds: 0,\n              ms: 0\n            }); // Mark the time as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),\n            // which clears all ambig flags.\n\n            this._ambigTime = true;\n            this._ambigZone = true; // if ambiguous time, also ambiguous timezone offset\n          }\n\n          return this; // for chaining\n        }; // Returns if the moment has a non-ambiguous time (boolean)\n\n\n        newMomentProto.hasTime = function () {\n          return !this._ambigTime;\n        }; // Timezone\n        // -------------------------------------------------------------------------------------------------\n        // Converts the moment to UTC, stripping out its timezone offset, but preserving its\n        // YMD and time-of-day. A moment with a stripped timezone offset will display no\n        // timezone offset when .format() is called.\n\n\n        newMomentProto.stripZone = function () {\n          var wasAmbigTime;\n\n          if (!this._ambigZone) {\n            wasAmbigTime = this._ambigTime;\n            this.utc(true); // keepLocalTime=true (for keeping date and time values)\n            // the above call to .utc()/.utcOffset() unfortunately might clear the ambig flags, so restore\n\n            this._ambigTime = wasAmbigTime || false; // Mark the zone as ambiguous. This needs to happen after the .utc() call, which might call .utcOffset(),\n            // which clears the ambig flags.\n\n            this._ambigZone = true;\n          }\n\n          return this; // for chaining\n        }; // Returns of the moment has a non-ambiguous timezone offset (boolean)\n\n\n        newMomentProto.hasZone = function () {\n          return !this._ambigZone;\n        }; // implicitly marks a zone\n\n\n        newMomentProto.local = function (keepLocalTime) {\n          // for when converting from ambiguously-zoned to local,\n          // keep the time values when converting from UTC -> local\n          oldMomentProto.local.call(this, this._ambigZone || keepLocalTime); // ensure non-ambiguous\n          // this probably already happened via local() -> utcOffset(), but don't rely on Moment's internals\n\n          this._ambigTime = false;\n          this._ambigZone = false;\n          return this; // for chaining\n        }; // implicitly marks a zone\n\n\n        newMomentProto.utc = function (keepLocalTime) {\n          oldMomentProto.utc.call(this, keepLocalTime); // ensure non-ambiguous\n          // this probably already happened via utc() -> utcOffset(), but don't rely on Moment's internals\n\n          this._ambigTime = false;\n          this._ambigZone = false;\n          return this;\n        }; // implicitly marks a zone (will probably get called upon .utc() and .local())\n\n\n        newMomentProto.utcOffset = function (tzo) {\n          if (tzo != null) {\n            // setter\n            // these assignments needs to happen before the original zone method is called.\n            // I forget why, something to do with a browser crash.\n            this._ambigTime = false;\n            this._ambigZone = false;\n          }\n\n          return oldMomentProto.utcOffset.apply(this, arguments);\n        }; // Formatting\n        // -------------------------------------------------------------------------------------------------\n\n\n        newMomentProto.format = function () {\n          if (this._fullCalendar && arguments[0]) {\n            // an enhanced moment? and a format string provided?\n            return formatDate(this, arguments[0]); // our extended formatting\n          }\n\n          if (this._ambigTime) {\n            return oldMomentFormat(englishMoment(this), 'YYYY-MM-DD');\n          }\n\n          if (this._ambigZone) {\n            return oldMomentFormat(englishMoment(this), 'YYYY-MM-DD[T]HH:mm:ss');\n          }\n\n          if (this._fullCalendar) {\n            // enhanced non-ambig moment?\n            // moment.format() doesn't ensure english, but we want to.\n            return oldMomentFormat(englishMoment(this));\n          }\n\n          return oldMomentProto.format.apply(this, arguments);\n        };\n\n        newMomentProto.toISOString = function () {\n          if (this._ambigTime) {\n            return oldMomentFormat(englishMoment(this), 'YYYY-MM-DD');\n          }\n\n          if (this._ambigZone) {\n            return oldMomentFormat(englishMoment(this), 'YYYY-MM-DD[T]HH:mm:ss');\n          }\n\n          if (this._fullCalendar) {\n            // enhanced non-ambig moment?\n            // depending on browser, moment might not output english. ensure english.\n            // https://github.com/moment/moment/blob/2.18.1/src/lib/moment/format.js#L22\n            return oldMomentProto.toISOString.apply(englishMoment(this), arguments);\n          }\n\n          return oldMomentProto.toISOString.apply(this, arguments);\n        };\n\n        function englishMoment(mom) {\n          if (mom.locale() !== 'en') {\n            return mom.clone().locale('en');\n          }\n\n          return mom;\n        }\n\n        ;\n        ;\n\n        (function () {\n          // exports\n          FC.formatDate = formatDate;\n          FC.formatRange = formatRange;\n          FC.oldMomentFormat = oldMomentFormat;\n          FC.queryMostGranularFormatUnit = queryMostGranularFormatUnit; // Config\n          // ---------------------------------------------------------------------------------------------------------------------\n\n          /*\n          Inserted between chunks in the fake (\"intermediate\") formatting string.\n          Important that it passes as whitespace (\\s) because moment often identifies non-standalone months\n          via a regexp with an \\s.\n          */\n\n          var PART_SEPARATOR = \"\\x0B\"; // vertical tab\n\n          /*\n          Inserted as the first character of a literal-text chunk to indicate that the literal text is not actually literal text,\n          but rather, a \"special\" token that has custom rendering (see specialTokens map).\n          */\n\n          var SPECIAL_TOKEN_MARKER = \"\\x1F\"; // information separator 1\n\n          /*\n          Inserted at the beginning and end of a span of text that must have non-zero numeric characters.\n          Handling of these markers is done in a post-processing step at the very end of text rendering.\n          */\n\n          var MAYBE_MARKER = \"\\x1E\"; // information separator 2\n\n          var MAYBE_REGEXP = new RegExp(MAYBE_MARKER + '([^' + MAYBE_MARKER + ']*)' + MAYBE_MARKER, 'g'); // must be global\n\n          /*\n          Addition formatting tokens we want recognized\n          */\n\n          var specialTokens = {\n            t: function t(date) {\n              // \"a\" or \"p\"\n              return oldMomentFormat(date, 'a').charAt(0);\n            },\n            T: function T(date) {\n              // \"A\" or \"P\"\n              return oldMomentFormat(date, 'A').charAt(0);\n            }\n          };\n          /*\n          The first characters of formatting tokens for units that are 1 day or larger.\n          `value` is for ranking relative size (lower means bigger).\n          `unit` is a normalized unit, used for comparing moments.\n          */\n\n          var largeTokenMap = {\n            Y: {\n              value: 1,\n              unit: 'year'\n            },\n            M: {\n              value: 2,\n              unit: 'month'\n            },\n            W: {\n              value: 3,\n              unit: 'week'\n            },\n            // ISO week\n            w: {\n              value: 3,\n              unit: 'week'\n            },\n            // local week\n            D: {\n              value: 4,\n              unit: 'day'\n            },\n            // day of month\n            d: {\n              value: 4,\n              unit: 'day' // day of week\n\n            }\n          }; // Single Date Formatting\n          // ---------------------------------------------------------------------------------------------------------------------\n\n          /*\n          Formats `date` with a Moment formatting string, but allow our non-zero areas and special token\n          */\n\n          function formatDate(date, formatStr) {\n            return renderFakeFormatString(getParsedFormatString(formatStr).fakeFormatString, date);\n          }\n          /*\n          Call this if you want Moment's original format method to be used\n          */\n\n\n          function oldMomentFormat(mom, formatStr) {\n            return oldMomentProto.format.call(mom, formatStr); // oldMomentProto defined in moment-ext.js\n          } // Date Range Formatting\n          // -------------------------------------------------------------------------------------------------\n          // TODO: make it work with timezone offset\n\n          /*\n          Using a formatting string meant for a single date, generate a range string, like\n          \"Sep 2 - 9 2013\", that intelligently inserts a separator where the dates differ.\n          If the dates are the same as far as the format string is concerned, just return a single\n          rendering of one date, without any separator.\n          */\n\n\n          function formatRange(date1, date2, formatStr, separator, isRTL) {\n            var localeData;\n            date1 = FC.moment.parseZone(date1);\n            date2 = FC.moment.parseZone(date2);\n            localeData = date1.localeData(); // Expand localized format strings, like \"LL\" -> \"MMMM D YYYY\".\n            // BTW, this is not important for `formatDate` because it is impossible to put custom tokens\n            // or non-zero areas in Moment's localized format strings.\n\n            formatStr = localeData.longDateFormat(formatStr) || formatStr;\n            return renderParsedFormat(getParsedFormatString(formatStr), date1, date2, separator || ' - ', isRTL);\n          }\n          /*\n          Renders a range with an already-parsed format string.\n          */\n\n\n          function renderParsedFormat(parsedFormat, date1, date2, separator, isRTL) {\n            var sameUnits = parsedFormat.sameUnits;\n            var unzonedDate1 = date1.clone().stripZone(); // for same-unit comparisons\n\n            var unzonedDate2 = date2.clone().stripZone(); // \"\n\n            var renderedParts1 = renderFakeFormatStringParts(parsedFormat.fakeFormatString, date1);\n            var renderedParts2 = renderFakeFormatStringParts(parsedFormat.fakeFormatString, date2);\n            var leftI;\n            var leftStr = '';\n            var rightI;\n            var rightStr = '';\n            var middleI;\n            var middleStr1 = '';\n            var middleStr2 = '';\n            var middleStr = ''; // Start at the leftmost side of the formatting string and continue until you hit a token\n            // that is not the same between dates.\n\n            for (leftI = 0; leftI < sameUnits.length && (!sameUnits[leftI] || unzonedDate1.isSame(unzonedDate2, sameUnits[leftI])); leftI++) {\n              leftStr += renderedParts1[leftI];\n            } // Similarly, start at the rightmost side of the formatting string and move left\n\n\n            for (rightI = sameUnits.length - 1; rightI > leftI && (!sameUnits[rightI] || unzonedDate1.isSame(unzonedDate2, sameUnits[rightI])); rightI--) {\n              // If current chunk is on the boundary of unique date-content, and is a special-case\n              // date-formatting postfix character, then don't consume it. Consider it unique date-content.\n              // TODO: make configurable\n              if (rightI - 1 === leftI && renderedParts1[rightI] === '.') {\n                break;\n              }\n\n              rightStr = renderedParts1[rightI] + rightStr;\n            } // The area in the middle is different for both of the dates.\n            // Collect them distinctly so we can jam them together later.\n\n\n            for (middleI = leftI; middleI <= rightI; middleI++) {\n              middleStr1 += renderedParts1[middleI];\n              middleStr2 += renderedParts2[middleI];\n            }\n\n            if (middleStr1 || middleStr2) {\n              if (isRTL) {\n                middleStr = middleStr2 + separator + middleStr1;\n              } else {\n                middleStr = middleStr1 + separator + middleStr2;\n              }\n            }\n\n            return processMaybeMarkers(leftStr + middleStr + rightStr);\n          } // Format String Parsing\n          // ---------------------------------------------------------------------------------------------------------------------\n\n\n          var parsedFormatStrCache = {};\n          /*\n          Returns a parsed format string, leveraging a cache.\n          */\n\n          function getParsedFormatString(formatStr) {\n            return parsedFormatStrCache[formatStr] || (parsedFormatStrCache[formatStr] = parseFormatString(formatStr));\n          }\n          /*\n          Parses a format string into the following:\n          - fakeFormatString: a momentJS formatting string, littered with special control characters that get post-processed.\n          - sameUnits: for every part in fakeFormatString, if the part is a token, the value will be a unit string (like \"day\"),\n            that indicates how similar a range's start & end must be in order to share the same formatted text.\n            If not a token, then the value is null.\n            Always a flat array (not nested liked \"chunks\").\n          */\n\n\n          function parseFormatString(formatStr) {\n            var chunks = chunkFormatString(formatStr);\n            return {\n              fakeFormatString: buildFakeFormatString(chunks),\n              sameUnits: buildSameUnits(chunks)\n            };\n          }\n          /*\n          Break the formatting string into an array of chunks.\n          A 'maybe' chunk will have nested chunks.\n          */\n\n\n          function chunkFormatString(formatStr) {\n            var chunks = [];\n            var match; // TODO: more descrimination\n            // \\4 is a backreference to the first character of a multi-character set.\n\n            var chunker = /\\[([^\\]]*)\\]|\\(([^\\)]*)\\)|(LTS|LT|(\\w)\\4*o?)|([^\\w\\[\\(]+)/g;\n\n            while (match = chunker.exec(formatStr)) {\n              if (match[1]) {\n                // a literal string inside [ ... ]\n                chunks.push.apply(chunks, // append\n                splitStringLiteral(match[1]));\n              } else if (match[2]) {\n                // non-zero formatting inside ( ... )\n                chunks.push({\n                  maybe: chunkFormatString(match[2])\n                });\n              } else if (match[3]) {\n                // a formatting token\n                chunks.push({\n                  token: match[3]\n                });\n              } else if (match[5]) {\n                // an unenclosed literal string\n                chunks.push.apply(chunks, // append\n                splitStringLiteral(match[5]));\n              }\n            }\n\n            return chunks;\n          }\n          /*\n          Potentially splits a literal-text string into multiple parts. For special cases.\n          */\n\n\n          function splitStringLiteral(s) {\n            if (s === '. ') {\n              return ['.', ' ']; // for locales with periods bound to the end of each year/month/date\n            } else {\n              return [s];\n            }\n          }\n          /*\n          Given chunks parsed from a real format string, generate a fake (aka \"intermediate\") format string with special control\n          characters that will eventually be given to moment for formatting, and then post-processed.\n          */\n\n\n          function buildFakeFormatString(chunks) {\n            var parts = [];\n            var i, chunk;\n\n            for (i = 0; i < chunks.length; i++) {\n              chunk = chunks[i];\n\n              if (typeof chunk === 'string') {\n                parts.push('[' + chunk + ']');\n              } else if (chunk.token) {\n                if (chunk.token in specialTokens) {\n                  parts.push(SPECIAL_TOKEN_MARKER + // useful during post-processing\n                  '[' + chunk.token + ']' // preserve as literal text\n                  );\n                } else {\n                  parts.push(chunk.token); // unprotected text implies a format string\n                }\n              } else if (chunk.maybe) {\n                parts.push(MAYBE_MARKER + // useful during post-processing\n                buildFakeFormatString(chunk.maybe) + MAYBE_MARKER);\n              }\n            }\n\n            return parts.join(PART_SEPARATOR);\n          }\n          /*\n          Given parsed chunks from a real formatting string, generates an array of unit strings (like \"day\") that indicate\n          in which regard two dates must be similar in order to share range formatting text.\n          The `chunks` can be nested (because of \"maybe\" chunks), however, the returned array will be flat.\n          */\n\n\n          function buildSameUnits(chunks) {\n            var units = [];\n            var i, chunk;\n            var tokenInfo;\n\n            for (i = 0; i < chunks.length; i++) {\n              chunk = chunks[i];\n\n              if (chunk.token) {\n                tokenInfo = largeTokenMap[chunk.token.charAt(0)];\n                units.push(tokenInfo ? tokenInfo.unit : 'second'); // default to a very strict same-second\n              } else if (chunk.maybe) {\n                units.push.apply(units, // append\n                buildSameUnits(chunk.maybe));\n              } else {\n                units.push(null);\n              }\n            }\n\n            return units;\n          } // Rendering to text\n          // ---------------------------------------------------------------------------------------------------------------------\n\n          /*\n          Formats a date with a fake format string, post-processes the control characters, then returns.\n          */\n\n\n          function renderFakeFormatString(fakeFormatString, date) {\n            return processMaybeMarkers(renderFakeFormatStringParts(fakeFormatString, date).join(''));\n          }\n          /*\n          Formats a date into parts that will have been post-processed, EXCEPT for the \"maybe\" markers.\n          */\n\n\n          function renderFakeFormatStringParts(fakeFormatString, date) {\n            var parts = [];\n            var fakeRender = oldMomentFormat(date, fakeFormatString);\n            var fakeParts = fakeRender.split(PART_SEPARATOR);\n            var i, fakePart;\n\n            for (i = 0; i < fakeParts.length; i++) {\n              fakePart = fakeParts[i];\n\n              if (fakePart.charAt(0) === SPECIAL_TOKEN_MARKER) {\n                parts.push( // the literal string IS the token's name.\n                // call special token's registered function.\n                specialTokens[fakePart.substring(1)](date));\n              } else {\n                parts.push(fakePart);\n              }\n            }\n\n            return parts;\n          }\n          /*\n          Accepts an almost-finally-formatted string and processes the \"maybe\" control characters, returning a new string.\n          */\n\n\n          function processMaybeMarkers(s) {\n            return s.replace(MAYBE_REGEXP, function (m0, m1) {\n              // regex assumed to have 'g' flag\n              if (m1.match(/[1-9]/)) {\n                // any non-zero numeric characters?\n                return m1;\n              } else {\n                return '';\n              }\n            });\n          } // Misc Utils\n          // -------------------------------------------------------------------------------------------------\n\n          /*\n          Returns a unit string, either 'year', 'month', 'day', or null for the most granular formatting token in the string.\n          */\n\n\n          function queryMostGranularFormatUnit(formatStr) {\n            var chunks = chunkFormatString(formatStr);\n            var i, chunk;\n            var candidate;\n            var best;\n\n            for (i = 0; i < chunks.length; i++) {\n              chunk = chunks[i];\n\n              if (chunk.token) {\n                candidate = largeTokenMap[chunk.token.charAt(0)];\n\n                if (candidate) {\n                  if (!best || candidate.value > best.value) {\n                    best = candidate;\n                  }\n                }\n              }\n            }\n\n            if (best) {\n              return best.unit;\n            }\n\n            return null;\n          }\n\n          ;\n        })(); // quick local references\n\n\n        var formatDate = FC.formatDate;\n        var _formatRange = FC.formatRange;\n        var oldMomentFormat = FC.oldMomentFormat;\n        ;\n        ;\n        FC.Class = Class; // export\n        // Class that all other classes will inherit from\n\n        function Class() {} // Called on a class to create a subclass.\n        // Last argument contains instance methods. Any argument before the last are considered mixins.\n\n\n        Class.extend = function () {\n          var len = arguments.length;\n          var i;\n          var members;\n\n          for (i = 0; i < len; i++) {\n            members = arguments[i];\n\n            if (i < len - 1) {\n              // not the last argument?\n              mixIntoClass(this, members);\n            }\n          }\n\n          return extendClass(this, members || {}); // members will be undefined if no arguments\n        }; // Adds new member variables/methods to the class's prototype.\n        // Can be called with another class, or a plain object hash containing new members.\n\n\n        Class.mixin = function (members) {\n          mixIntoClass(this, members);\n        };\n\n        function extendClass(superClass, members) {\n          var subClass; // ensure a constructor for the subclass, forwarding all arguments to the super-constructor if it doesn't exist\n\n          if (hasOwnProp(members, 'constructor')) {\n            subClass = members.constructor;\n          }\n\n          if (typeof subClass !== 'function') {\n            subClass = members.constructor = function () {\n              superClass.apply(this, arguments);\n            };\n          } // build the base prototype for the subclass, which is an new object chained to the superclass's prototype\n\n\n          subClass.prototype = createObject(superClass.prototype); // copy each member variable/method onto the the subclass's prototype\n\n          copyOwnProps(members, subClass.prototype); // copy over all class variables/methods to the subclass, such as `extend` and `mixin`\n\n          copyOwnProps(superClass, subClass);\n          return subClass;\n        }\n\n        function mixIntoClass(theClass, members) {\n          copyOwnProps(members, theClass.prototype);\n        }\n\n        ;\n        ;\n        var Model = Class.extend(EmitterMixin, ListenerMixin, {\n          _props: null,\n          _watchers: null,\n          _globalWatchArgs: null,\n          constructor: function constructor() {\n            this._watchers = {};\n            this._props = {};\n            this.applyGlobalWatchers();\n          },\n          applyGlobalWatchers: function applyGlobalWatchers() {\n            var argSets = this._globalWatchArgs || [];\n            var i;\n\n            for (i = 0; i < argSets.length; i++) {\n              this.watch.apply(this, argSets[i]);\n            }\n          },\n          has: function has(name) {\n            return name in this._props;\n          },\n          get: function get(name) {\n            if (name === undefined) {\n              return this._props;\n            }\n\n            return this._props[name];\n          },\n          set: function set(name, val) {\n            var newProps;\n\n            if (typeof name === 'string') {\n              newProps = {};\n              newProps[name] = val === undefined ? null : val;\n            } else {\n              newProps = name;\n            }\n\n            this.setProps(newProps);\n          },\n          reset: function reset(newProps) {\n            var oldProps = this._props;\n            var changeset = {}; // will have undefined's to signal unsets\n\n            var name;\n\n            for (name in oldProps) {\n              changeset[name] = undefined;\n            }\n\n            for (name in newProps) {\n              changeset[name] = newProps[name];\n            }\n\n            this.setProps(changeset);\n          },\n          unset: function unset(name) {\n            // accepts a string or array of strings\n            var newProps = {};\n            var names;\n            var i;\n\n            if (typeof name === 'string') {\n              names = [name];\n            } else {\n              names = name;\n            }\n\n            for (i = 0; i < names.length; i++) {\n              newProps[names[i]] = undefined;\n            }\n\n            this.setProps(newProps);\n          },\n          setProps: function setProps(newProps) {\n            var changedProps = {};\n            var changedCnt = 0;\n            var name, val;\n\n            for (name in newProps) {\n              val = newProps[name]; // a change in value?\n              // if an object, don't check equality, because might have been mutated internally.\n              // TODO: eventually enforce immutability.\n\n              if (typeof val === 'object' || val !== this._props[name]) {\n                changedProps[name] = val;\n                changedCnt++;\n              }\n            }\n\n            if (changedCnt) {\n              this.trigger('before:batchChange', changedProps);\n\n              for (name in changedProps) {\n                val = changedProps[name];\n                this.trigger('before:change', name, val);\n                this.trigger('before:change:' + name, val);\n              }\n\n              for (name in changedProps) {\n                val = changedProps[name];\n\n                if (val === undefined) {\n                  delete this._props[name];\n                } else {\n                  this._props[name] = val;\n                }\n\n                this.trigger('change:' + name, val);\n                this.trigger('change', name, val);\n              }\n\n              this.trigger('batchChange', changedProps);\n            }\n          },\n          watch: function watch(name, depList, startFunc, stopFunc) {\n            var _this = this;\n\n            this.unwatch(name);\n            this._watchers[name] = this._watchDeps(depList, function (deps) {\n              var res = startFunc.call(_this, deps);\n\n              if (res && res.then) {\n                _this.unset(name); // put in an unset state while resolving\n\n\n                res.then(function (val) {\n                  _this.set(name, val);\n                });\n              } else {\n                _this.set(name, res);\n              }\n            }, function () {\n              _this.unset(name);\n\n              if (stopFunc) {\n                stopFunc.call(_this);\n              }\n            });\n          },\n          unwatch: function unwatch(name) {\n            var watcher = this._watchers[name];\n\n            if (watcher) {\n              delete this._watchers[name];\n              watcher.teardown();\n            }\n          },\n          _watchDeps: function _watchDeps(depList, startFunc, stopFunc) {\n            var _this = this;\n\n            var queuedChangeCnt = 0;\n            var depCnt = depList.length;\n            var satisfyCnt = 0;\n            var values = {}; // what's passed as the `deps` arguments\n\n            var bindTuples = []; // array of [ eventName, handlerFunc ] arrays\n\n            var isCallingStop = false;\n\n            function onBeforeDepChange(depName, val, isOptional) {\n              queuedChangeCnt++;\n\n              if (queuedChangeCnt === 1) {\n                // first change to cause a \"stop\" ?\n                if (satisfyCnt === depCnt) {\n                  // all deps previously satisfied?\n                  isCallingStop = true;\n                  stopFunc();\n                  isCallingStop = false;\n                }\n              }\n            }\n\n            function onDepChange(depName, val, isOptional) {\n              if (val === undefined) {\n                // unsetting a value?\n                // required dependency that was previously set?\n                if (!isOptional && values[depName] !== undefined) {\n                  satisfyCnt--;\n                }\n\n                delete values[depName];\n              } else {\n                // setting a value?\n                // required dependency that was previously unset?\n                if (!isOptional && values[depName] === undefined) {\n                  satisfyCnt++;\n                }\n\n                values[depName] = val;\n              }\n\n              queuedChangeCnt--;\n\n              if (!queuedChangeCnt) {\n                // last change to cause a \"start\"?\n                // now finally satisfied or satisfied all along?\n                if (satisfyCnt === depCnt) {\n                  // if the stopFunc initiated another value change, ignore it.\n                  // it will be processed by another change event anyway.\n                  if (!isCallingStop) {\n                    startFunc(values);\n                  }\n                }\n              }\n            } // intercept for .on() that remembers handlers\n\n\n            function bind(eventName, handler) {\n              _this.on(eventName, handler);\n\n              bindTuples.push([eventName, handler]);\n            } // listen to dependency changes\n\n\n            depList.forEach(function (depName) {\n              var isOptional = false;\n\n              if (depName.charAt(0) === '?') {\n                // TODO: more DRY\n                depName = depName.substring(1);\n                isOptional = true;\n              }\n\n              bind('before:change:' + depName, function (val) {\n                onBeforeDepChange(depName, val, isOptional);\n              });\n              bind('change:' + depName, function (val) {\n                onDepChange(depName, val, isOptional);\n              });\n            }); // process current dependency values\n\n            depList.forEach(function (depName) {\n              var isOptional = false;\n\n              if (depName.charAt(0) === '?') {\n                // TODO: more DRY\n                depName = depName.substring(1);\n                isOptional = true;\n              }\n\n              if (_this.has(depName)) {\n                values[depName] = _this.get(depName);\n                satisfyCnt++;\n              } else if (isOptional) {\n                satisfyCnt++;\n              }\n            }); // initially satisfied\n\n            if (satisfyCnt === depCnt) {\n              startFunc(values);\n            }\n\n            return {\n              teardown: function teardown() {\n                // remove all handlers\n                for (var i = 0; i < bindTuples.length; i++) {\n                  _this.off(bindTuples[i][0], bindTuples[i][1]);\n                }\n\n                bindTuples = null; // was satisfied, so call stopFunc\n\n                if (satisfyCnt === depCnt) {\n                  stopFunc();\n                }\n              },\n              flash: function flash() {\n                if (satisfyCnt === depCnt) {\n                  stopFunc();\n                  startFunc(values);\n                }\n              }\n            };\n          },\n          flash: function flash(name) {\n            var watcher = this._watchers[name];\n\n            if (watcher) {\n              watcher.flash();\n            }\n          }\n        });\n\n        Model.watch = function ()\n        /* same arguments as this.watch() */\n        {\n          var proto = this.prototype;\n\n          if (!proto._globalWatchArgs) {\n            proto._globalWatchArgs = [];\n          }\n\n          proto._globalWatchArgs.push(arguments);\n        };\n\n        FC.Model = Model;\n        ;\n        ;\n        var Promise = {\n          construct: function construct(executor) {\n            var deferred = $.Deferred();\n            var promise = deferred.promise();\n\n            if (typeof executor === 'function') {\n              executor(function (val) {\n                // resolve\n                deferred.resolve(val);\n                attachImmediatelyResolvingThen(promise, val);\n              }, function () {\n                // reject\n                deferred.reject();\n                attachImmediatelyRejectingThen(promise);\n              });\n            }\n\n            return promise;\n          },\n          resolve: function resolve(val) {\n            var deferred = $.Deferred().resolve(val);\n            var promise = deferred.promise();\n            attachImmediatelyResolvingThen(promise, val);\n            return promise;\n          },\n          reject: function reject() {\n            var deferred = $.Deferred().reject();\n            var promise = deferred.promise();\n            attachImmediatelyRejectingThen(promise);\n            return promise;\n          }\n        };\n\n        function attachImmediatelyResolvingThen(promise, val) {\n          promise.then = function (onResolve) {\n            if (typeof onResolve === 'function') {\n              onResolve(val);\n            }\n\n            return promise; // for chaining\n          };\n        }\n\n        function attachImmediatelyRejectingThen(promise) {\n          promise.then = function (onResolve, onReject) {\n            if (typeof onReject === 'function') {\n              onReject();\n            }\n\n            return promise; // for chaining\n          };\n        }\n\n        FC.Promise = Promise;\n        ;\n        ;\n        var TaskQueue = Class.extend(EmitterMixin, {\n          q: null,\n          isPaused: false,\n          isRunning: false,\n          constructor: function constructor() {\n            this.q = [];\n          },\n          queue: function queue()\n          /* taskFunc, taskFunc... */\n          {\n            this.q.push.apply(this.q, arguments); // append\n\n            this.tryStart();\n          },\n          pause: function pause() {\n            this.isPaused = true;\n          },\n          resume: function resume() {\n            this.isPaused = false;\n            this.tryStart();\n          },\n          tryStart: function tryStart() {\n            if (!this.isRunning && this.canRunNext()) {\n              this.isRunning = true;\n              this.trigger('start');\n              this.runNext();\n            }\n          },\n          canRunNext: function canRunNext() {\n            return !this.isPaused && this.q.length;\n          },\n          runNext: function runNext() {\n            // does not check canRunNext\n            this.runTask(this.q.shift());\n          },\n          runTask: function runTask(task) {\n            this.runTaskFunc(task);\n          },\n          runTaskFunc: function runTaskFunc(taskFunc) {\n            var _this = this;\n\n            var res = taskFunc();\n\n            if (res && res.then) {\n              res.then(done);\n            } else {\n              done();\n            }\n\n            function done() {\n              if (_this.canRunNext()) {\n                _this.runNext();\n              } else {\n                _this.isRunning = false;\n\n                _this.trigger('stop');\n              }\n            }\n          }\n        });\n        FC.TaskQueue = TaskQueue;\n        ;\n        ;\n        var RenderQueue = TaskQueue.extend({\n          waitsByNamespace: null,\n          waitNamespace: null,\n          waitId: null,\n          constructor: function constructor(waitsByNamespace) {\n            TaskQueue.call(this); // super-constructor\n\n            this.waitsByNamespace = waitsByNamespace || {};\n          },\n          queue: function queue(taskFunc, namespace, type) {\n            var task = {\n              func: taskFunc,\n              namespace: namespace,\n              type: type\n            };\n            var waitMs;\n\n            if (namespace) {\n              waitMs = this.waitsByNamespace[namespace];\n            }\n\n            if (this.waitNamespace) {\n              if (namespace === this.waitNamespace && waitMs != null) {\n                this.delayWait(waitMs);\n              } else {\n                this.clearWait();\n                this.tryStart();\n              }\n            }\n\n            if (this.compoundTask(task)) {\n              // appended to queue?\n              if (!this.waitNamespace && waitMs != null) {\n                this.startWait(namespace, waitMs);\n              } else {\n                this.tryStart();\n              }\n            }\n          },\n          startWait: function startWait(namespace, waitMs) {\n            this.waitNamespace = namespace;\n            this.spawnWait(waitMs);\n          },\n          delayWait: function delayWait(waitMs) {\n            clearTimeout(this.waitId);\n            this.spawnWait(waitMs);\n          },\n          spawnWait: function spawnWait(waitMs) {\n            var _this = this;\n\n            this.waitId = setTimeout(function () {\n              _this.waitNamespace = null;\n\n              _this.tryStart();\n            }, waitMs);\n          },\n          clearWait: function clearWait() {\n            if (this.waitNamespace) {\n              clearTimeout(this.waitId);\n              this.waitId = null;\n              this.waitNamespace = null;\n            }\n          },\n          canRunNext: function canRunNext() {\n            if (!TaskQueue.prototype.canRunNext.apply(this, arguments)) {\n              return false;\n            } // waiting for a certain namespace to stop receiving tasks?\n\n\n            if (this.waitNamespace) {\n              // if there was a different namespace task in the meantime,\n              // that forces all previously-waiting tasks to suddenly execute.\n              // TODO: find a way to do this in constant time.\n              for (var q = this.q, i = 0; i < q.length; i++) {\n                if (q[i].namespace !== this.waitNamespace) {\n                  return true; // allow execution\n                }\n              }\n\n              return false;\n            }\n\n            return true;\n          },\n          runTask: function runTask(task) {\n            this.runTaskFunc(task.func);\n          },\n          compoundTask: function compoundTask(newTask) {\n            var q = this.q;\n            var shouldAppend = true;\n            var i, task;\n\n            if (newTask.namespace) {\n              if (newTask.type === 'destroy' || newTask.type === 'init') {\n                // remove all add/remove ops with same namespace, regardless of order\n                for (i = q.length - 1; i >= 0; i--) {\n                  task = q[i];\n\n                  if (task.namespace === newTask.namespace && (task.type === 'add' || task.type === 'remove')) {\n                    q.splice(i, 1); // remove task\n                  }\n                }\n\n                if (newTask.type === 'destroy') {\n                  // eat away final init/destroy operation\n                  if (q.length) {\n                    task = q[q.length - 1]; // last task\n\n                    if (task.namespace === newTask.namespace) {\n                      // the init and our destroy cancel each other out\n                      if (task.type === 'init') {\n                        shouldAppend = false;\n                        q.pop();\n                      } // prefer to use the destroy operation that's already present\n                      else if (task.type === 'destroy') {\n                          shouldAppend = false;\n                        }\n                    }\n                  }\n                } else if (newTask.type === 'init') {\n                  // eat away final init operation\n                  if (q.length) {\n                    task = q[q.length - 1]; // last task\n\n                    if (task.namespace === newTask.namespace && task.type === 'init') {\n                      // our init operation takes precedence\n                      q.pop();\n                    }\n                  }\n                }\n              }\n            }\n\n            if (shouldAppend) {\n              q.push(newTask);\n            }\n\n            return shouldAppend;\n          }\n        });\n        FC.RenderQueue = RenderQueue;\n        ;\n        ;\n        var EmitterMixin = FC.EmitterMixin = {\n          // jQuery-ification via $(this) allows a non-DOM object to have\n          // the same event handling capabilities (including namespaces).\n          on: function on(types, handler) {\n            $(this).on(types, this._prepareIntercept(handler));\n            return this; // for chaining\n          },\n          one: function one(types, handler) {\n            $(this).one(types, this._prepareIntercept(handler));\n            return this; // for chaining\n          },\n          _prepareIntercept: function _prepareIntercept(handler) {\n            // handlers are always called with an \"event\" object as their first param.\n            // sneak the `this` context and arguments into the extra parameter object\n            // and forward them on to the original handler.\n            var intercept = function intercept(ev, extra) {\n              return handler.apply(extra.context || this, extra.args || []);\n            }; // mimick jQuery's internal \"proxy\" system (risky, I know)\n            // causing all functions with the same .guid to appear to be the same.\n            // https://github.com/jquery/jquery/blob/2.2.4/src/core.js#L448\n            // this is needed for calling .off with the original non-intercept handler.\n\n\n            if (!handler.guid) {\n              handler.guid = $.guid++;\n            }\n\n            intercept.guid = handler.guid;\n            return intercept;\n          },\n          off: function off(types, handler) {\n            $(this).off(types, handler);\n            return this; // for chaining\n          },\n          trigger: function trigger(types) {\n            var args = Array.prototype.slice.call(arguments, 1); // arguments after the first\n            // pass in \"extra\" info to the intercept\n\n            $(this).triggerHandler(types, {\n              args: args\n            });\n            return this; // for chaining\n          },\n          triggerWith: function triggerWith(types, context, args) {\n            // `triggerHandler` is less reliant on the DOM compared to `trigger`.\n            // pass in \"extra\" info to the intercept.\n            $(this).triggerHandler(types, {\n              context: context,\n              args: args\n            });\n            return this; // for chaining\n          }\n        };\n        ;\n        ;\n        /*\n        Utility methods for easily listening to events on another object,\n        and more importantly, easily unlistening from them.\n        */\n\n        var ListenerMixin = FC.ListenerMixin = function () {\n          var guid = 0;\n          var ListenerMixin = {\n            listenerId: null,\n\n            /*\n            Given an `other` object that has on/off methods, bind the given `callback` to an event by the given name.\n            The `callback` will be called with the `this` context of the object that .listenTo is being called on.\n            Can be called:\n            \t.listenTo(other, eventName, callback)\n            OR\n            \t.listenTo(other, {\n            \t\teventName1: callback1,\n            \t\teventName2: callback2\n            \t})\n            */\n            listenTo: function listenTo(other, arg, callback) {\n              if (typeof arg === 'object') {\n                // given dictionary of callbacks\n                for (var eventName in arg) {\n                  if (arg.hasOwnProperty(eventName)) {\n                    this.listenTo(other, eventName, arg[eventName]);\n                  }\n                }\n              } else if (typeof arg === 'string') {\n                other.on(arg + '.' + this.getListenerNamespace(), // use event namespacing to identify this object\n                $.proxy(callback, this) // always use `this` context\n                // the usually-undesired jQuery guid behavior doesn't matter,\n                // because we always unbind via namespace\n                );\n              }\n            },\n\n            /*\n            Causes the current object to stop listening to events on the `other` object.\n            `eventName` is optional. If omitted, will stop listening to ALL events on `other`.\n            */\n            stopListeningTo: function stopListeningTo(other, eventName) {\n              other.off((eventName || '') + '.' + this.getListenerNamespace());\n            },\n\n            /*\n            Returns a string, unique to this object, to be used for event namespacing\n            */\n            getListenerNamespace: function getListenerNamespace() {\n              if (this.listenerId == null) {\n                this.listenerId = guid++;\n              }\n\n              return '_listener' + this.listenerId;\n            }\n          };\n          return ListenerMixin;\n        }();\n\n        ;\n        ;\n        /* A rectangular panel that is absolutely positioned over other content\n        ------------------------------------------------------------------------------------------------------------------------\n        Options:\n        \t- className (string)\n        \t- content (HTML string or jQuery element set)\n        \t- parentEl\n        \t- top\n        \t- left\n        \t- right (the x coord of where the right edge should be. not a \"CSS\" right)\n        \t- autoHide (boolean)\n        \t- show (callback)\n        \t- hide (callback)\n        */\n\n        var Popover = Class.extend(ListenerMixin, {\n          isHidden: true,\n          options: null,\n          el: null,\n          // the container element for the popover. generated by this object\n          margin: 10,\n          // the space required between the popover and the edges of the scroll container\n          constructor: function constructor(options) {\n            this.options = options || {};\n          },\n          // Shows the popover on the specified position. Renders it if not already\n          show: function show() {\n            if (this.isHidden) {\n              if (!this.el) {\n                this.render();\n              }\n\n              this.el.show();\n              this.position();\n              this.isHidden = false;\n              this.trigger('show');\n            }\n          },\n          // Hides the popover, through CSS, but does not remove it from the DOM\n          hide: function hide() {\n            if (!this.isHidden) {\n              this.el.hide();\n              this.isHidden = true;\n              this.trigger('hide');\n            }\n          },\n          // Creates `this.el` and renders content inside of it\n          render: function render() {\n            var _this = this;\n\n            var options = this.options;\n            this.el = $('<div class=\"fc-popover\"/>').addClass(options.className || '').css({\n              // position initially to the top left to avoid creating scrollbars\n              top: 0,\n              left: 0\n            }).append(options.content).appendTo(options.parentEl); // when a click happens on anything inside with a 'fc-close' className, hide the popover\n\n            this.el.on('click', '.fc-close', function () {\n              _this.hide();\n            });\n\n            if (options.autoHide) {\n              this.listenTo($(document), 'mousedown', this.documentMousedown);\n            }\n          },\n          // Triggered when the user clicks *anywhere* in the document, for the autoHide feature\n          documentMousedown: function documentMousedown(ev) {\n            // only hide the popover if the click happened outside the popover\n            if (this.el && !$(ev.target).closest(this.el).length) {\n              this.hide();\n            }\n          },\n          // Hides and unregisters any handlers\n          removeElement: function removeElement() {\n            this.hide();\n\n            if (this.el) {\n              this.el.remove();\n              this.el = null;\n            }\n\n            this.stopListeningTo($(document), 'mousedown');\n          },\n          // Positions the popover optimally, using the top/left/right options\n          position: function position() {\n            var options = this.options;\n            var origin = this.el.offsetParent().offset();\n            var width = this.el.outerWidth();\n            var height = this.el.outerHeight();\n            var windowEl = $(window);\n            var viewportEl = getScrollParent(this.el);\n            var viewportTop;\n            var viewportLeft;\n            var viewportOffset;\n            var top; // the \"position\" (not \"offset\") values for the popover\n\n            var left; //\n            // compute top and left\n\n            top = options.top || 0;\n\n            if (options.left !== undefined) {\n              left = options.left;\n            } else if (options.right !== undefined) {\n              left = options.right - width; // derive the left value from the right value\n            } else {\n              left = 0;\n            }\n\n            if (viewportEl.is(window) || viewportEl.is(document)) {\n              // normalize getScrollParent's result\n              viewportEl = windowEl;\n              viewportTop = 0; // the window is always at the top left\n\n              viewportLeft = 0; // (and .offset() won't work if called here)\n            } else {\n              viewportOffset = viewportEl.offset();\n              viewportTop = viewportOffset.top;\n              viewportLeft = viewportOffset.left;\n            } // if the window is scrolled, it causes the visible area to be further down\n\n\n            viewportTop += windowEl.scrollTop();\n            viewportLeft += windowEl.scrollLeft(); // constrain to the view port. if constrained by two edges, give precedence to top/left\n\n            if (options.viewportConstrain !== false) {\n              top = Math.min(top, viewportTop + viewportEl.outerHeight() - height - this.margin);\n              top = Math.max(top, viewportTop + this.margin);\n              left = Math.min(left, viewportLeft + viewportEl.outerWidth() - width - this.margin);\n              left = Math.max(left, viewportLeft + this.margin);\n            }\n\n            this.el.css({\n              top: top - origin.top,\n              left: left - origin.left\n            });\n          },\n          // Triggers a callback. Calls a function in the option hash of the same name.\n          // Arguments beyond the first `name` are forwarded on.\n          // TODO: better code reuse for this. Repeat code\n          trigger: function trigger(name) {\n            if (this.options[name]) {\n              this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n          }\n        });\n        ;\n        ;\n        /*\n        A cache for the left/right/top/bottom/width/height values for one or more elements.\n        Works with both offset (from topleft document) and position (from offsetParent).\n        \n        options:\n        - els\n        - isHorizontal\n        - isVertical\n        */\n\n        var CoordCache = FC.CoordCache = Class.extend({\n          els: null,\n          // jQuery set (assumed to be siblings)\n          forcedOffsetParentEl: null,\n          // options can override the natural offsetParent\n          origin: null,\n          // {left,top} position of offsetParent of els\n          boundingRect: null,\n          // constrain cordinates to this rectangle. {left,right,top,bottom} or null\n          isHorizontal: false,\n          // whether to query for left/right/width\n          isVertical: false,\n          // whether to query for top/bottom/height\n          // arrays of coordinates (offsets from topleft of document)\n          lefts: null,\n          rights: null,\n          tops: null,\n          bottoms: null,\n          constructor: function constructor(options) {\n            this.els = $(options.els);\n            this.isHorizontal = options.isHorizontal;\n            this.isVertical = options.isVertical;\n            this.forcedOffsetParentEl = options.offsetParent ? $(options.offsetParent) : null;\n          },\n          // Queries the els for coordinates and stores them.\n          // Call this method before using and of the get* methods below.\n          build: function build() {\n            var offsetParentEl = this.forcedOffsetParentEl;\n\n            if (!offsetParentEl && this.els.length > 0) {\n              offsetParentEl = this.els.eq(0).offsetParent();\n            }\n\n            this.origin = offsetParentEl ? offsetParentEl.offset() : null;\n            this.boundingRect = this.queryBoundingRect();\n\n            if (this.isHorizontal) {\n              this.buildElHorizontals();\n            }\n\n            if (this.isVertical) {\n              this.buildElVerticals();\n            }\n          },\n          // Destroys all internal data about coordinates, freeing memory\n          clear: function clear() {\n            this.origin = null;\n            this.boundingRect = null;\n            this.lefts = null;\n            this.rights = null;\n            this.tops = null;\n            this.bottoms = null;\n          },\n          // When called, if coord caches aren't built, builds them\n          ensureBuilt: function ensureBuilt() {\n            if (!this.origin) {\n              this.build();\n            }\n          },\n          // Populates the left/right internal coordinate arrays\n          buildElHorizontals: function buildElHorizontals() {\n            var lefts = [];\n            var rights = [];\n            this.els.each(function (i, node) {\n              var el = $(node);\n              var left = el.offset().left;\n              var width = el.outerWidth();\n              lefts.push(left);\n              rights.push(left + width);\n            });\n            this.lefts = lefts;\n            this.rights = rights;\n          },\n          // Populates the top/bottom internal coordinate arrays\n          buildElVerticals: function buildElVerticals() {\n            var tops = [];\n            var bottoms = [];\n            this.els.each(function (i, node) {\n              var el = $(node);\n              var top = el.offset().top;\n              var height = el.outerHeight();\n              tops.push(top);\n              bottoms.push(top + height);\n            });\n            this.tops = tops;\n            this.bottoms = bottoms;\n          },\n          // Given a left offset (from document left), returns the index of the el that it horizontally intersects.\n          // If no intersection is made, returns undefined.\n          getHorizontalIndex: function getHorizontalIndex(leftOffset) {\n            this.ensureBuilt();\n            var lefts = this.lefts;\n            var rights = this.rights;\n            var len = lefts.length;\n            var i;\n\n            for (i = 0; i < len; i++) {\n              if (leftOffset >= lefts[i] && leftOffset < rights[i]) {\n                return i;\n              }\n            }\n          },\n          // Given a top offset (from document top), returns the index of the el that it vertically intersects.\n          // If no intersection is made, returns undefined.\n          getVerticalIndex: function getVerticalIndex(topOffset) {\n            this.ensureBuilt();\n            var tops = this.tops;\n            var bottoms = this.bottoms;\n            var len = tops.length;\n            var i;\n\n            for (i = 0; i < len; i++) {\n              if (topOffset >= tops[i] && topOffset < bottoms[i]) {\n                return i;\n              }\n            }\n          },\n          // Gets the left offset (from document left) of the element at the given index\n          getLeftOffset: function getLeftOffset(leftIndex) {\n            this.ensureBuilt();\n            return this.lefts[leftIndex];\n          },\n          // Gets the left position (from offsetParent left) of the element at the given index\n          getLeftPosition: function getLeftPosition(leftIndex) {\n            this.ensureBuilt();\n            return this.lefts[leftIndex] - this.origin.left;\n          },\n          // Gets the right offset (from document left) of the element at the given index.\n          // This value is NOT relative to the document's right edge, like the CSS concept of \"right\" would be.\n          getRightOffset: function getRightOffset(leftIndex) {\n            this.ensureBuilt();\n            return this.rights[leftIndex];\n          },\n          // Gets the right position (from offsetParent left) of the element at the given index.\n          // This value is NOT relative to the offsetParent's right edge, like the CSS concept of \"right\" would be.\n          getRightPosition: function getRightPosition(leftIndex) {\n            this.ensureBuilt();\n            return this.rights[leftIndex] - this.origin.left;\n          },\n          // Gets the width of the element at the given index\n          getWidth: function getWidth(leftIndex) {\n            this.ensureBuilt();\n            return this.rights[leftIndex] - this.lefts[leftIndex];\n          },\n          // Gets the top offset (from document top) of the element at the given index\n          getTopOffset: function getTopOffset(topIndex) {\n            this.ensureBuilt();\n            return this.tops[topIndex];\n          },\n          // Gets the top position (from offsetParent top) of the element at the given position\n          getTopPosition: function getTopPosition(topIndex) {\n            this.ensureBuilt();\n            return this.tops[topIndex] - this.origin.top;\n          },\n          // Gets the bottom offset (from the document top) of the element at the given index.\n          // This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of \"bottom\" would be.\n          getBottomOffset: function getBottomOffset(topIndex) {\n            this.ensureBuilt();\n            return this.bottoms[topIndex];\n          },\n          // Gets the bottom position (from the offsetParent top) of the element at the given index.\n          // This value is NOT relative to the offsetParent's bottom edge, like the CSS concept of \"bottom\" would be.\n          getBottomPosition: function getBottomPosition(topIndex) {\n            this.ensureBuilt();\n            return this.bottoms[topIndex] - this.origin.top;\n          },\n          // Gets the height of the element at the given index\n          getHeight: function getHeight(topIndex) {\n            this.ensureBuilt();\n            return this.bottoms[topIndex] - this.tops[topIndex];\n          },\n          // Bounding Rect\n          // TODO: decouple this from CoordCache\n          // Compute and return what the elements' bounding rectangle is, from the user's perspective.\n          // Right now, only returns a rectangle if constrained by an overflow:scroll element.\n          // Returns null if there are no elements\n          queryBoundingRect: function queryBoundingRect() {\n            var scrollParentEl;\n\n            if (this.els.length > 0) {\n              scrollParentEl = getScrollParent(this.els.eq(0));\n\n              if (!scrollParentEl.is(document)) {\n                return getClientRect(scrollParentEl);\n              }\n            }\n\n            return null;\n          },\n          isPointInBounds: function isPointInBounds(leftOffset, topOffset) {\n            return this.isLeftInBounds(leftOffset) && this.isTopInBounds(topOffset);\n          },\n          isLeftInBounds: function isLeftInBounds(leftOffset) {\n            return !this.boundingRect || leftOffset >= this.boundingRect.left && leftOffset < this.boundingRect.right;\n          },\n          isTopInBounds: function isTopInBounds(topOffset) {\n            return !this.boundingRect || topOffset >= this.boundingRect.top && topOffset < this.boundingRect.bottom;\n          }\n        });\n        ;\n        ;\n        /* Tracks a drag's mouse movement, firing various handlers\n        ----------------------------------------------------------------------------------------------------------------------*/\n        // TODO: use Emitter\n\n        var DragListener = FC.DragListener = Class.extend(ListenerMixin, {\n          options: null,\n          subjectEl: null,\n          // coordinates of the initial mousedown\n          originX: null,\n          originY: null,\n          // the wrapping element that scrolls, or MIGHT scroll if there's overflow.\n          // TODO: do this for wrappers that have overflow:hidden as well.\n          scrollEl: null,\n          isInteracting: false,\n          isDistanceSurpassed: false,\n          isDelayEnded: false,\n          isDragging: false,\n          isTouch: false,\n          isGeneric: false,\n          // initiated by 'dragstart' (jqui)\n          delay: null,\n          delayTimeoutId: null,\n          minDistance: null,\n          shouldCancelTouchScroll: true,\n          scrollAlwaysKills: false,\n          constructor: function constructor(options) {\n            this.options = options || {};\n          },\n          // Interaction (high-level)\n          // -----------------------------------------------------------------------------------------------------------------\n          startInteraction: function startInteraction(ev, extraOptions) {\n            if (ev.type === 'mousedown') {\n              if (GlobalEmitter.get().shouldIgnoreMouse()) {\n                return;\n              } else if (!isPrimaryMouseButton(ev)) {\n                return;\n              } else {\n                ev.preventDefault(); // prevents native selection in most browsers\n              }\n            }\n\n            if (!this.isInteracting) {\n              // process options\n              extraOptions = extraOptions || {};\n              this.delay = firstDefined(extraOptions.delay, this.options.delay, 0);\n              this.minDistance = firstDefined(extraOptions.distance, this.options.distance, 0);\n              this.subjectEl = this.options.subjectEl;\n              preventSelection($('body'));\n              this.isInteracting = true;\n              this.isTouch = getEvIsTouch(ev);\n              this.isGeneric = ev.type === 'dragstart';\n              this.isDelayEnded = false;\n              this.isDistanceSurpassed = false;\n              this.originX = getEvX(ev);\n              this.originY = getEvY(ev);\n              this.scrollEl = getScrollParent($(ev.target));\n              this.bindHandlers();\n              this.initAutoScroll();\n              this.handleInteractionStart(ev);\n              this.startDelay(ev);\n\n              if (!this.minDistance) {\n                this.handleDistanceSurpassed(ev);\n              }\n            }\n          },\n          handleInteractionStart: function handleInteractionStart(ev) {\n            this.trigger('interactionStart', ev);\n          },\n          endInteraction: function endInteraction(ev, isCancelled) {\n            if (this.isInteracting) {\n              this.endDrag(ev);\n\n              if (this.delayTimeoutId) {\n                clearTimeout(this.delayTimeoutId);\n                this.delayTimeoutId = null;\n              }\n\n              this.destroyAutoScroll();\n              this.unbindHandlers();\n              this.isInteracting = false;\n              this.handleInteractionEnd(ev, isCancelled);\n              allowSelection($('body'));\n            }\n          },\n          handleInteractionEnd: function handleInteractionEnd(ev, isCancelled) {\n            this.trigger('interactionEnd', ev, isCancelled || false);\n          },\n          // Binding To DOM\n          // -----------------------------------------------------------------------------------------------------------------\n          bindHandlers: function bindHandlers() {\n            // some browsers (Safari in iOS 10) don't allow preventDefault on touch events that are bound after touchstart,\n            // so listen to the GlobalEmitter singleton, which is always bound, instead of the document directly.\n            var globalEmitter = GlobalEmitter.get();\n\n            if (this.isGeneric) {\n              this.listenTo($(document), {\n                // might only work on iOS because of GlobalEmitter's bind :(\n                drag: this.handleMove,\n                dragstop: this.endInteraction\n              });\n            } else if (this.isTouch) {\n              this.listenTo(globalEmitter, {\n                touchmove: this.handleTouchMove,\n                touchend: this.endInteraction,\n                scroll: this.handleTouchScroll\n              });\n            } else {\n              this.listenTo(globalEmitter, {\n                mousemove: this.handleMouseMove,\n                mouseup: this.endInteraction\n              });\n            }\n\n            this.listenTo(globalEmitter, {\n              selectstart: preventDefault,\n              // don't allow selection while dragging\n              contextmenu: preventDefault // long taps would open menu on Chrome dev tools\n\n            });\n          },\n          unbindHandlers: function unbindHandlers() {\n            this.stopListeningTo(GlobalEmitter.get());\n            this.stopListeningTo($(document)); // for isGeneric\n          },\n          // Drag (high-level)\n          // -----------------------------------------------------------------------------------------------------------------\n          // extraOptions ignored if drag already started\n          startDrag: function startDrag(ev, extraOptions) {\n            this.startInteraction(ev, extraOptions); // ensure interaction began\n\n            if (!this.isDragging) {\n              this.isDragging = true;\n              this.handleDragStart(ev);\n            }\n          },\n          handleDragStart: function handleDragStart(ev) {\n            this.trigger('dragStart', ev);\n          },\n          handleMove: function handleMove(ev) {\n            var dx = getEvX(ev) - this.originX;\n            var dy = getEvY(ev) - this.originY;\n            var minDistance = this.minDistance;\n            var distanceSq; // current distance from the origin, squared\n\n            if (!this.isDistanceSurpassed) {\n              distanceSq = dx * dx + dy * dy;\n\n              if (distanceSq >= minDistance * minDistance) {\n                // use pythagorean theorem\n                this.handleDistanceSurpassed(ev);\n              }\n            }\n\n            if (this.isDragging) {\n              this.handleDrag(dx, dy, ev);\n            }\n          },\n          // Called while the mouse is being moved and when we know a legitimate drag is taking place\n          handleDrag: function handleDrag(dx, dy, ev) {\n            this.trigger('drag', dx, dy, ev);\n            this.updateAutoScroll(ev); // will possibly cause scrolling\n          },\n          endDrag: function endDrag(ev) {\n            if (this.isDragging) {\n              this.isDragging = false;\n              this.handleDragEnd(ev);\n            }\n          },\n          handleDragEnd: function handleDragEnd(ev) {\n            this.trigger('dragEnd', ev);\n          },\n          // Delay\n          // -----------------------------------------------------------------------------------------------------------------\n          startDelay: function startDelay(initialEv) {\n            var _this = this;\n\n            if (this.delay) {\n              this.delayTimeoutId = setTimeout(function () {\n                _this.handleDelayEnd(initialEv);\n              }, this.delay);\n            } else {\n              this.handleDelayEnd(initialEv);\n            }\n          },\n          handleDelayEnd: function handleDelayEnd(initialEv) {\n            this.isDelayEnded = true;\n\n            if (this.isDistanceSurpassed) {\n              this.startDrag(initialEv);\n            }\n          },\n          // Distance\n          // -----------------------------------------------------------------------------------------------------------------\n          handleDistanceSurpassed: function handleDistanceSurpassed(ev) {\n            this.isDistanceSurpassed = true;\n\n            if (this.isDelayEnded) {\n              this.startDrag(ev);\n            }\n          },\n          // Mouse / Touch\n          // -----------------------------------------------------------------------------------------------------------------\n          handleTouchMove: function handleTouchMove(ev) {\n            // prevent inertia and touchmove-scrolling while dragging\n            if (this.isDragging && this.shouldCancelTouchScroll) {\n              ev.preventDefault();\n            }\n\n            this.handleMove(ev);\n          },\n          handleMouseMove: function handleMouseMove(ev) {\n            this.handleMove(ev);\n          },\n          // Scrolling (unrelated to auto-scroll)\n          // -----------------------------------------------------------------------------------------------------------------\n          handleTouchScroll: function handleTouchScroll(ev) {\n            // if the drag is being initiated by touch, but a scroll happens before\n            // the drag-initiating delay is over, cancel the drag\n            if (!this.isDragging || this.scrollAlwaysKills) {\n              this.endInteraction(ev, true); // isCancelled=true\n            }\n          },\n          // Utils\n          // -----------------------------------------------------------------------------------------------------------------\n          // Triggers a callback. Calls a function in the option hash of the same name.\n          // Arguments beyond the first `name` are forwarded on.\n          trigger: function trigger(name) {\n            if (this.options[name]) {\n              this.options[name].apply(this, Array.prototype.slice.call(arguments, 1));\n            } // makes _methods callable by event name. TODO: kill this\n\n\n            if (this['_' + name]) {\n              this['_' + name].apply(this, Array.prototype.slice.call(arguments, 1));\n            }\n          }\n        });\n        ;\n        ;\n        /*\n        this.scrollEl is set in DragListener\n        */\n\n        DragListener.mixin({\n          isAutoScroll: false,\n          scrollBounds: null,\n          // { top, bottom, left, right }\n          scrollTopVel: null,\n          // pixels per second\n          scrollLeftVel: null,\n          // pixels per second\n          scrollIntervalId: null,\n          // ID of setTimeout for scrolling animation loop\n          // defaults\n          scrollSensitivity: 30,\n          // pixels from edge for scrolling to start\n          scrollSpeed: 200,\n          // pixels per second, at maximum speed\n          scrollIntervalMs: 50,\n          // millisecond wait between scroll increment\n          initAutoScroll: function initAutoScroll() {\n            var scrollEl = this.scrollEl;\n            this.isAutoScroll = this.options.scroll && scrollEl && !scrollEl.is(window) && !scrollEl.is(document);\n\n            if (this.isAutoScroll) {\n              // debounce makes sure rapid calls don't happen\n              this.listenTo(scrollEl, 'scroll', debounce(this.handleDebouncedScroll, 100));\n            }\n          },\n          destroyAutoScroll: function destroyAutoScroll() {\n            this.endAutoScroll(); // kill any animation loop\n            // remove the scroll handler if there is a scrollEl\n\n            if (this.isAutoScroll) {\n              this.stopListeningTo(this.scrollEl, 'scroll'); // will probably get removed by unbindHandlers too :(\n            }\n          },\n          // Computes and stores the bounding rectangle of scrollEl\n          computeScrollBounds: function computeScrollBounds() {\n            if (this.isAutoScroll) {\n              this.scrollBounds = getOuterRect(this.scrollEl); // TODO: use getClientRect in future. but prevents auto scrolling when on top of scrollbars\n            }\n          },\n          // Called when the dragging is in progress and scrolling should be updated\n          updateAutoScroll: function updateAutoScroll(ev) {\n            var sensitivity = this.scrollSensitivity;\n            var bounds = this.scrollBounds;\n            var topCloseness, bottomCloseness;\n            var leftCloseness, rightCloseness;\n            var topVel = 0;\n            var leftVel = 0;\n\n            if (bounds) {\n              // only scroll if scrollEl exists\n              // compute closeness to edges. valid range is from 0.0 - 1.0\n              topCloseness = (sensitivity - (getEvY(ev) - bounds.top)) / sensitivity;\n              bottomCloseness = (sensitivity - (bounds.bottom - getEvY(ev))) / sensitivity;\n              leftCloseness = (sensitivity - (getEvX(ev) - bounds.left)) / sensitivity;\n              rightCloseness = (sensitivity - (bounds.right - getEvX(ev))) / sensitivity; // translate vertical closeness into velocity.\n              // mouse must be completely in bounds for velocity to happen.\n\n              if (topCloseness >= 0 && topCloseness <= 1) {\n                topVel = topCloseness * this.scrollSpeed * -1; // negative. for scrolling up\n              } else if (bottomCloseness >= 0 && bottomCloseness <= 1) {\n                topVel = bottomCloseness * this.scrollSpeed;\n              } // translate horizontal closeness into velocity\n\n\n              if (leftCloseness >= 0 && leftCloseness <= 1) {\n                leftVel = leftCloseness * this.scrollSpeed * -1; // negative. for scrolling left\n              } else if (rightCloseness >= 0 && rightCloseness <= 1) {\n                leftVel = rightCloseness * this.scrollSpeed;\n              }\n            }\n\n            this.setScrollVel(topVel, leftVel);\n          },\n          // Sets the speed-of-scrolling for the scrollEl\n          setScrollVel: function setScrollVel(topVel, leftVel) {\n            this.scrollTopVel = topVel;\n            this.scrollLeftVel = leftVel;\n            this.constrainScrollVel(); // massages into realistic values\n            // if there is non-zero velocity, and an animation loop hasn't already started, then START\n\n            if ((this.scrollTopVel || this.scrollLeftVel) && !this.scrollIntervalId) {\n              this.scrollIntervalId = setInterval(proxy(this, 'scrollIntervalFunc'), // scope to `this`\n              this.scrollIntervalMs);\n            }\n          },\n          // Forces scrollTopVel and scrollLeftVel to be zero if scrolling has already gone all the way\n          constrainScrollVel: function constrainScrollVel() {\n            var el = this.scrollEl;\n\n            if (this.scrollTopVel < 0) {\n              // scrolling up?\n              if (el.scrollTop() <= 0) {\n                // already scrolled all the way up?\n                this.scrollTopVel = 0;\n              }\n            } else if (this.scrollTopVel > 0) {\n              // scrolling down?\n              if (el.scrollTop() + el[0].clientHeight >= el[0].scrollHeight) {\n                // already scrolled all the way down?\n                this.scrollTopVel = 0;\n              }\n            }\n\n            if (this.scrollLeftVel < 0) {\n              // scrolling left?\n              if (el.scrollLeft() <= 0) {\n                // already scrolled all the left?\n                this.scrollLeftVel = 0;\n              }\n            } else if (this.scrollLeftVel > 0) {\n              // scrolling right?\n              if (el.scrollLeft() + el[0].clientWidth >= el[0].scrollWidth) {\n                // already scrolled all the way right?\n                this.scrollLeftVel = 0;\n              }\n            }\n          },\n          // This function gets called during every iteration of the scrolling animation loop\n          scrollIntervalFunc: function scrollIntervalFunc() {\n            var el = this.scrollEl;\n            var frac = this.scrollIntervalMs / 1000; // considering animation frequency, what the vel should be mult'd by\n            // change the value of scrollEl's scroll\n\n            if (this.scrollTopVel) {\n              el.scrollTop(el.scrollTop() + this.scrollTopVel * frac);\n            }\n\n            if (this.scrollLeftVel) {\n              el.scrollLeft(el.scrollLeft() + this.scrollLeftVel * frac);\n            }\n\n            this.constrainScrollVel(); // since the scroll values changed, recompute the velocities\n            // if scrolled all the way, which causes the vels to be zero, stop the animation loop\n\n            if (!this.scrollTopVel && !this.scrollLeftVel) {\n              this.endAutoScroll();\n            }\n          },\n          // Kills any existing scrolling animation loop\n          endAutoScroll: function endAutoScroll() {\n            if (this.scrollIntervalId) {\n              clearInterval(this.scrollIntervalId);\n              this.scrollIntervalId = null;\n              this.handleScrollEnd();\n            }\n          },\n          // Get called when the scrollEl is scrolled (NOTE: this is delayed via debounce)\n          handleDebouncedScroll: function handleDebouncedScroll() {\n            // recompute all coordinates, but *only* if this is *not* part of our scrolling animation\n            if (!this.scrollIntervalId) {\n              this.handleScrollEnd();\n            }\n          },\n          // Called when scrolling has stopped, whether through auto scroll, or the user scrolling\n          handleScrollEnd: function handleScrollEnd() {}\n        });\n        ;\n        ;\n        /* Tracks mouse movements over a component and raises events about which hit the mouse is over.\n        ------------------------------------------------------------------------------------------------------------------------\n        options:\n        - subjectEl\n        - subjectCenter\n        */\n\n        var HitDragListener = DragListener.extend({\n          component: null,\n          // converts coordinates to hits\n          // methods: hitsNeeded, hitsNotNeeded, queryHit\n          origHit: null,\n          // the hit the mouse was over when listening started\n          hit: null,\n          // the hit the mouse is over\n          coordAdjust: null,\n          // delta that will be added to the mouse coordinates when computing collisions\n          constructor: function constructor(component, options) {\n            DragListener.call(this, options); // call the super-constructor\n\n            this.component = component;\n          },\n          // Called when drag listening starts (but a real drag has not necessarily began).\n          // ev might be undefined if dragging was started manually.\n          handleInteractionStart: function handleInteractionStart(ev) {\n            var subjectEl = this.subjectEl;\n            var subjectRect;\n            var origPoint;\n            var point;\n            this.component.hitsNeeded();\n            this.computeScrollBounds(); // for autoscroll\n\n            if (ev) {\n              origPoint = {\n                left: getEvX(ev),\n                top: getEvY(ev)\n              };\n              point = origPoint; // constrain the point to bounds of the element being dragged\n\n              if (subjectEl) {\n                subjectRect = getOuterRect(subjectEl); // used for centering as well\n\n                point = constrainPoint(point, subjectRect);\n              }\n\n              this.origHit = this.queryHit(point.left, point.top); // treat the center of the subject as the collision point?\n\n              if (subjectEl && this.options.subjectCenter) {\n                // only consider the area the subject overlaps the hit. best for large subjects.\n                // TODO: skip this if hit didn't supply left/right/top/bottom\n                if (this.origHit) {\n                  subjectRect = intersectRects(this.origHit, subjectRect) || subjectRect; // in case there is no intersection\n                }\n\n                point = getRectCenter(subjectRect);\n              }\n\n              this.coordAdjust = diffPoints(point, origPoint); // point - origPoint\n            } else {\n              this.origHit = null;\n              this.coordAdjust = null;\n            } // call the super-method. do it after origHit has been computed\n\n\n            DragListener.prototype.handleInteractionStart.apply(this, arguments);\n          },\n          // Called when the actual drag has started\n          handleDragStart: function handleDragStart(ev) {\n            var hit;\n            DragListener.prototype.handleDragStart.apply(this, arguments); // call the super-method\n            // might be different from this.origHit if the min-distance is large\n\n            hit = this.queryHit(getEvX(ev), getEvY(ev)); // report the initial hit the mouse is over\n            // especially important if no min-distance and drag starts immediately\n\n            if (hit) {\n              this.handleHitOver(hit);\n            }\n          },\n          // Called when the drag moves\n          handleDrag: function handleDrag(dx, dy, ev) {\n            var hit;\n            DragListener.prototype.handleDrag.apply(this, arguments); // call the super-method\n\n            hit = this.queryHit(getEvX(ev), getEvY(ev));\n\n            if (!isHitsEqual(hit, this.hit)) {\n              // a different hit than before?\n              if (this.hit) {\n                this.handleHitOut();\n              }\n\n              if (hit) {\n                this.handleHitOver(hit);\n              }\n            }\n          },\n          // Called when dragging has been stopped\n          handleDragEnd: function handleDragEnd() {\n            this.handleHitDone();\n            DragListener.prototype.handleDragEnd.apply(this, arguments); // call the super-method\n          },\n          // Called when a the mouse has just moved over a new hit\n          handleHitOver: function handleHitOver(hit) {\n            var isOrig = isHitsEqual(hit, this.origHit);\n            this.hit = hit;\n            this.trigger('hitOver', this.hit, isOrig, this.origHit);\n          },\n          // Called when the mouse has just moved out of a hit\n          handleHitOut: function handleHitOut() {\n            if (this.hit) {\n              this.trigger('hitOut', this.hit);\n              this.handleHitDone();\n              this.hit = null;\n            }\n          },\n          // Called after a hitOut. Also called before a dragStop\n          handleHitDone: function handleHitDone() {\n            if (this.hit) {\n              this.trigger('hitDone', this.hit);\n            }\n          },\n          // Called when the interaction ends, whether there was a real drag or not\n          handleInteractionEnd: function handleInteractionEnd() {\n            DragListener.prototype.handleInteractionEnd.apply(this, arguments); // call the super-method\n\n            this.origHit = null;\n            this.hit = null;\n            this.component.hitsNotNeeded();\n          },\n          // Called when scrolling has stopped, whether through auto scroll, or the user scrolling\n          handleScrollEnd: function handleScrollEnd() {\n            DragListener.prototype.handleScrollEnd.apply(this, arguments); // call the super-method\n            // hits' absolute positions will be in new places after a user's scroll.\n            // HACK for recomputing.\n\n            if (this.isDragging) {\n              this.component.releaseHits();\n              this.component.prepareHits();\n            }\n          },\n          // Gets the hit underneath the coordinates for the given mouse event\n          queryHit: function queryHit(left, top) {\n            if (this.coordAdjust) {\n              left += this.coordAdjust.left;\n              top += this.coordAdjust.top;\n            }\n\n            return this.component.queryHit(left, top);\n          }\n        }); // Returns `true` if the hits are identically equal. `false` otherwise. Must be from the same component.\n        // Two null values will be considered equal, as two \"out of the component\" states are the same.\n\n        function isHitsEqual(hit0, hit1) {\n          if (!hit0 && !hit1) {\n            return true;\n          }\n\n          if (hit0 && hit1) {\n            return hit0.component === hit1.component && isHitPropsWithin(hit0, hit1) && isHitPropsWithin(hit1, hit0); // ensures all props are identical\n          }\n\n          return false;\n        } // Returns true if all of subHit's non-standard properties are within superHit\n\n\n        function isHitPropsWithin(subHit, superHit) {\n          for (var propName in subHit) {\n            if (!/^(component|left|right|top|bottom)$/.test(propName)) {\n              if (subHit[propName] !== superHit[propName]) {\n                return false;\n              }\n            }\n          }\n\n          return true;\n        }\n\n        ;\n        ;\n        /*\n        Listens to document and window-level user-interaction events, like touch events and mouse events,\n        and fires these events as-is to whoever is observing a GlobalEmitter.\n        Best when used as a singleton via GlobalEmitter.get()\n        \n        Normalizes mouse/touch events. For examples:\n        - ignores the the simulated mouse events that happen after a quick tap: mousemove+mousedown+mouseup+click\n        - compensates for various buggy scenarios where a touchend does not fire\n        */\n\n        FC.touchMouseIgnoreWait = 500;\n        var GlobalEmitter = Class.extend(ListenerMixin, EmitterMixin, {\n          isTouching: false,\n          mouseIgnoreDepth: 0,\n          handleScrollProxy: null,\n          bind: function bind() {\n            var _this = this;\n\n            this.listenTo($(document), {\n              touchstart: this.handleTouchStart,\n              touchcancel: this.handleTouchCancel,\n              touchend: this.handleTouchEnd,\n              mousedown: this.handleMouseDown,\n              mousemove: this.handleMouseMove,\n              mouseup: this.handleMouseUp,\n              click: this.handleClick,\n              selectstart: this.handleSelectStart,\n              contextmenu: this.handleContextMenu\n            }); // because we need to call preventDefault\n            // because https://www.chromestatus.com/features/5093566007214080\n            // TODO: investigate performance because this is a global handler\n\n            window.addEventListener('touchmove', this.handleTouchMoveProxy = function (ev) {\n              _this.handleTouchMove($.Event(ev));\n            }, {\n              passive: false // allows preventDefault()\n\n            }); // attach a handler to get called when ANY scroll action happens on the page.\n            // this was impossible to do with normal on/off because 'scroll' doesn't bubble.\n            // http://stackoverflow.com/a/32954565/96342\n\n            window.addEventListener('scroll', this.handleScrollProxy = function (ev) {\n              _this.handleScroll($.Event(ev));\n            }, true // useCapture\n            );\n          },\n          unbind: function unbind() {\n            this.stopListeningTo($(document));\n            window.removeEventListener('touchmove', this.handleTouchMoveProxy);\n            window.removeEventListener('scroll', this.handleScrollProxy, true // useCapture\n            );\n          },\n          // Touch Handlers\n          // -----------------------------------------------------------------------------------------------------------------\n          handleTouchStart: function handleTouchStart(ev) {\n            // if a previous touch interaction never ended with a touchend, then implicitly end it,\n            // but since a new touch interaction is about to begin, don't start the mouse ignore period.\n            this.stopTouch(ev, true); // skipMouseIgnore=true\n\n            this.isTouching = true;\n            this.trigger('touchstart', ev);\n          },\n          handleTouchMove: function handleTouchMove(ev) {\n            if (this.isTouching) {\n              this.trigger('touchmove', ev);\n            }\n          },\n          handleTouchCancel: function handleTouchCancel(ev) {\n            if (this.isTouching) {\n              this.trigger('touchcancel', ev); // Have touchcancel fire an artificial touchend. That way, handlers won't need to listen to both.\n              // If touchend fires later, it won't have any effect b/c isTouching will be false.\n\n              this.stopTouch(ev);\n            }\n          },\n          handleTouchEnd: function handleTouchEnd(ev) {\n            this.stopTouch(ev);\n          },\n          // Mouse Handlers\n          // -----------------------------------------------------------------------------------------------------------------\n          handleMouseDown: function handleMouseDown(ev) {\n            if (!this.shouldIgnoreMouse()) {\n              this.trigger('mousedown', ev);\n            }\n          },\n          handleMouseMove: function handleMouseMove(ev) {\n            if (!this.shouldIgnoreMouse()) {\n              this.trigger('mousemove', ev);\n            }\n          },\n          handleMouseUp: function handleMouseUp(ev) {\n            if (!this.shouldIgnoreMouse()) {\n              this.trigger('mouseup', ev);\n            }\n          },\n          handleClick: function handleClick(ev) {\n            if (!this.shouldIgnoreMouse()) {\n              this.trigger('click', ev);\n            }\n          },\n          // Misc Handlers\n          // -----------------------------------------------------------------------------------------------------------------\n          handleSelectStart: function handleSelectStart(ev) {\n            this.trigger('selectstart', ev);\n          },\n          handleContextMenu: function handleContextMenu(ev) {\n            this.trigger('contextmenu', ev);\n          },\n          handleScroll: function handleScroll(ev) {\n            this.trigger('scroll', ev);\n          },\n          // Utils\n          // -----------------------------------------------------------------------------------------------------------------\n          stopTouch: function stopTouch(ev, skipMouseIgnore) {\n            if (this.isTouching) {\n              this.isTouching = false;\n              this.trigger('touchend', ev);\n\n              if (!skipMouseIgnore) {\n                this.startTouchMouseIgnore();\n              }\n            }\n          },\n          startTouchMouseIgnore: function startTouchMouseIgnore() {\n            var _this = this;\n\n            var wait = FC.touchMouseIgnoreWait;\n\n            if (wait) {\n              this.mouseIgnoreDepth++;\n              setTimeout(function () {\n                _this.mouseIgnoreDepth--;\n              }, wait);\n            }\n          },\n          shouldIgnoreMouse: function shouldIgnoreMouse() {\n            return this.isTouching || Boolean(this.mouseIgnoreDepth);\n          }\n        }); // Singleton\n        // ---------------------------------------------------------------------------------------------------------------------\n\n        (function () {\n          var globalEmitter = null;\n          var neededCount = 0; // gets the singleton\n\n          GlobalEmitter.get = function () {\n            if (!globalEmitter) {\n              globalEmitter = new GlobalEmitter();\n              globalEmitter.bind();\n            }\n\n            return globalEmitter;\n          }; // called when an object knows it will need a GlobalEmitter in the near future.\n\n\n          GlobalEmitter.needed = function () {\n            GlobalEmitter.get(); // ensures globalEmitter\n\n            neededCount++;\n          }; // called when the object that originally called needed() doesn't need a GlobalEmitter anymore.\n\n\n          GlobalEmitter.unneeded = function () {\n            neededCount--;\n\n            if (!neededCount) {\n              // nobody else needs it\n              globalEmitter.unbind();\n              globalEmitter = null;\n            }\n          };\n        })();\n\n        ;\n        ;\n        /* Creates a clone of an element and lets it track the mouse as it moves\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n        var MouseFollower = Class.extend(ListenerMixin, {\n          options: null,\n          sourceEl: null,\n          // the element that will be cloned and made to look like it is dragging\n          el: null,\n          // the clone of `sourceEl` that will track the mouse\n          parentEl: null,\n          // the element that `el` (the clone) will be attached to\n          // the initial position of el, relative to the offset parent. made to match the initial offset of sourceEl\n          top0: null,\n          left0: null,\n          // the absolute coordinates of the initiating touch/mouse action\n          y0: null,\n          x0: null,\n          // the number of pixels the mouse has moved from its initial position\n          topDelta: null,\n          leftDelta: null,\n          isFollowing: false,\n          isHidden: false,\n          isAnimating: false,\n          // doing the revert animation?\n          constructor: function constructor(sourceEl, options) {\n            this.options = options = options || {};\n            this.sourceEl = sourceEl;\n            this.parentEl = options.parentEl ? $(options.parentEl) : sourceEl.parent(); // default to sourceEl's parent\n          },\n          // Causes the element to start following the mouse\n          start: function start(ev) {\n            if (!this.isFollowing) {\n              this.isFollowing = true;\n              this.y0 = getEvY(ev);\n              this.x0 = getEvX(ev);\n              this.topDelta = 0;\n              this.leftDelta = 0;\n\n              if (!this.isHidden) {\n                this.updatePosition();\n              }\n\n              if (getEvIsTouch(ev)) {\n                this.listenTo($(document), 'touchmove', this.handleMove);\n              } else {\n                this.listenTo($(document), 'mousemove', this.handleMove);\n              }\n            }\n          },\n          // Causes the element to stop following the mouse. If shouldRevert is true, will animate back to original position.\n          // `callback` gets invoked when the animation is complete. If no animation, it is invoked immediately.\n          stop: function stop(shouldRevert, callback) {\n            var _this = this;\n\n            var revertDuration = this.options.revertDuration;\n\n            function complete() {\n              // might be called by .animate(), which might change `this` context\n              _this.isAnimating = false;\n\n              _this.removeElement();\n\n              _this.top0 = _this.left0 = null; // reset state for future updatePosition calls\n\n              if (callback) {\n                callback();\n              }\n            }\n\n            if (this.isFollowing && !this.isAnimating) {\n              // disallow more than one stop animation at a time\n              this.isFollowing = false;\n              this.stopListeningTo($(document));\n\n              if (shouldRevert && revertDuration && !this.isHidden) {\n                // do a revert animation?\n                this.isAnimating = true;\n                this.el.animate({\n                  top: this.top0,\n                  left: this.left0\n                }, {\n                  duration: revertDuration,\n                  complete: complete\n                });\n              } else {\n                complete();\n              }\n            }\n          },\n          // Gets the tracking element. Create it if necessary\n          getEl: function getEl() {\n            var el = this.el;\n\n            if (!el) {\n              el = this.el = this.sourceEl.clone().addClass(this.options.additionalClass || '').css({\n                position: 'absolute',\n                visibility: '',\n                // in case original element was hidden (commonly through hideEvents())\n                display: this.isHidden ? 'none' : '',\n                // for when initially hidden\n                margin: 0,\n                right: 'auto',\n                // erase and set width instead\n                bottom: 'auto',\n                // erase and set height instead\n                width: this.sourceEl.width(),\n                // explicit height in case there was a 'right' value\n                height: this.sourceEl.height(),\n                // explicit width in case there was a 'bottom' value\n                opacity: this.options.opacity || '',\n                zIndex: this.options.zIndex\n              }); // we don't want long taps or any mouse interaction causing selection/menus.\n              // would use preventSelection(), but that prevents selectstart, causing problems.\n\n              el.addClass('fc-unselectable');\n              el.appendTo(this.parentEl);\n            }\n\n            return el;\n          },\n          // Removes the tracking element if it has already been created\n          removeElement: function removeElement() {\n            if (this.el) {\n              this.el.remove();\n              this.el = null;\n            }\n          },\n          // Update the CSS position of the tracking element\n          updatePosition: function updatePosition() {\n            var sourceOffset;\n            var origin;\n            this.getEl(); // ensure this.el\n            // make sure origin info was computed\n\n            if (this.top0 === null) {\n              sourceOffset = this.sourceEl.offset();\n              origin = this.el.offsetParent().offset();\n              this.top0 = sourceOffset.top - origin.top;\n              this.left0 = sourceOffset.left - origin.left;\n            }\n\n            this.el.css({\n              top: this.top0 + this.topDelta,\n              left: this.left0 + this.leftDelta\n            });\n          },\n          // Gets called when the user moves the mouse\n          handleMove: function handleMove(ev) {\n            this.topDelta = getEvY(ev) - this.y0;\n            this.leftDelta = getEvX(ev) - this.x0;\n\n            if (!this.isHidden) {\n              this.updatePosition();\n            }\n          },\n          // Temporarily makes the tracking element invisible. Can be called before following starts\n          hide: function hide() {\n            if (!this.isHidden) {\n              this.isHidden = true;\n\n              if (this.el) {\n                this.el.hide();\n              }\n            }\n          },\n          // Show the tracking element after it has been temporarily hidden\n          show: function show() {\n            if (this.isHidden) {\n              this.isHidden = false;\n              this.updatePosition();\n              this.getEl().show();\n            }\n          }\n        });\n        ;\n        ;\n        /* An abstract class comprised of a \"grid\" of areas that each represent a specific datetime\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n        var Grid = FC.Grid = Class.extend(ListenerMixin, {\n          // self-config, overridable by subclasses\n          hasDayInteractions: true,\n          // can user click/select ranges of time?\n          view: null,\n          // a View object\n          isRTL: null,\n          // shortcut to the view's isRTL option\n          start: null,\n          end: null,\n          el: null,\n          // the containing element\n          elsByFill: null,\n          // a hash of jQuery element sets used for rendering each fill. Keyed by fill name.\n          // derived from options\n          eventTimeFormat: null,\n          displayEventTime: null,\n          displayEventEnd: null,\n          minResizeDuration: null,\n          // TODO: hack. set by subclasses. minumum event resize duration\n          // if defined, holds the unit identified (ex: \"year\" or \"month\") that determines the level of granularity\n          // of the date areas. if not defined, assumes to be day and time granularity.\n          // TODO: port isTimeScale into same system?\n          largeUnit: null,\n          dayClickListener: null,\n          daySelectListener: null,\n          segDragListener: null,\n          segResizeListener: null,\n          externalDragListener: null,\n          constructor: function constructor(view) {\n            this.view = view;\n            this.isRTL = view.opt('isRTL');\n            this.elsByFill = {};\n            this.dayClickListener = this.buildDayClickListener();\n            this.daySelectListener = this.buildDaySelectListener();\n          },\n\n          /* Options\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Generates the format string used for event time text, if not explicitly defined by 'timeFormat'\n          computeEventTimeFormat: function computeEventTimeFormat() {\n            return this.view.opt('smallTimeFormat');\n          },\n          // Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventTime'.\n          // Only applies to non-all-day events.\n          computeDisplayEventTime: function computeDisplayEventTime() {\n            return true;\n          },\n          // Determines whether events should have their end times displayed, if not explicitly defined by 'displayEventEnd'\n          computeDisplayEventEnd: function computeDisplayEventEnd() {\n            return true;\n          },\n\n          /* Dates\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Tells the grid about what period of time to display.\n          // Any date-related internal data should be generated.\n          setRange: function setRange(range) {\n            this.start = range.start.clone();\n            this.end = range.end.clone();\n            this.rangeUpdated();\n            this.processRangeOptions();\n          },\n          // Called when internal variables that rely on the range should be updated\n          rangeUpdated: function rangeUpdated() {},\n          // Updates values that rely on options and also relate to range\n          processRangeOptions: function processRangeOptions() {\n            var view = this.view;\n            var displayEventTime;\n            var displayEventEnd;\n            this.eventTimeFormat = view.opt('eventTimeFormat') || view.opt('timeFormat') || // deprecated\n            this.computeEventTimeFormat();\n            displayEventTime = view.opt('displayEventTime');\n\n            if (displayEventTime == null) {\n              displayEventTime = this.computeDisplayEventTime(); // might be based off of range\n            }\n\n            displayEventEnd = view.opt('displayEventEnd');\n\n            if (displayEventEnd == null) {\n              displayEventEnd = this.computeDisplayEventEnd(); // might be based off of range\n            }\n\n            this.displayEventTime = displayEventTime;\n            this.displayEventEnd = displayEventEnd;\n          },\n          // Converts a span (has unzoned start/end and any other grid-specific location information)\n          // into an array of segments (pieces of events whose format is decided by the grid).\n          spanToSegs: function spanToSegs(span) {// subclasses must implement\n          },\n          // Diffs the two dates, returning a duration, based on granularity of the grid\n          // TODO: port isTimeScale into this system?\n          diffDates: function diffDates(a, b) {\n            if (this.largeUnit) {\n              return diffByUnit(a, b, this.largeUnit);\n            } else {\n              return diffDayTime(a, b);\n            }\n          },\n\n          /* Hit Area\n          ------------------------------------------------------------------------------------------------------------------*/\n          hitsNeededDepth: 0,\n          // necessary because multiple callers might need the same hits\n          hitsNeeded: function hitsNeeded() {\n            if (!this.hitsNeededDepth++) {\n              this.prepareHits();\n            }\n          },\n          hitsNotNeeded: function hitsNotNeeded() {\n            if (this.hitsNeededDepth && ! --this.hitsNeededDepth) {\n              this.releaseHits();\n            }\n          },\n          // Called before one or more queryHit calls might happen. Should prepare any cached coordinates for queryHit\n          prepareHits: function prepareHits() {},\n          // Called when queryHit calls have subsided. Good place to clear any coordinate caches.\n          releaseHits: function releaseHits() {},\n          // Given coordinates from the topleft of the document, return data about the date-related area underneath.\n          // Can return an object with arbitrary properties (although top/right/left/bottom are encouraged).\n          // Must have a `grid` property, a reference to this current grid. TODO: avoid this\n          // The returned object will be processed by getHitSpan and getHitEl.\n          queryHit: function queryHit(leftOffset, topOffset) {},\n          // like getHitSpan, but returns null if the resulting span's range is invalid\n          getSafeHitSpan: function getSafeHitSpan(hit) {\n            var hitSpan = this.getHitSpan(hit);\n\n            if (!isRangeWithinRange(hitSpan, this.view.activeRange)) {\n              return null;\n            }\n\n            return hitSpan;\n          },\n          // Given position-level information about a date-related area within the grid,\n          // should return an object with at least a start/end date. Can provide other information as well.\n          getHitSpan: function getHitSpan(hit) {},\n          // Given position-level information about a date-related area within the grid,\n          // should return a jQuery element that best represents it. passed to dayClick callback.\n          getHitEl: function getHitEl(hit) {},\n\n          /* Rendering\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Sets the container element that the grid should render inside of.\n          // Does other DOM-related initializations.\n          setElement: function setElement(el) {\n            this.el = el;\n\n            if (this.hasDayInteractions) {\n              preventSelection(el);\n              this.bindDayHandler('touchstart', this.dayTouchStart);\n              this.bindDayHandler('mousedown', this.dayMousedown);\n            } // attach event-element-related handlers. in Grid.events\n            // same garbage collection note as above.\n\n\n            this.bindSegHandlers();\n            this.bindGlobalHandlers();\n          },\n          bindDayHandler: function bindDayHandler(name, handler) {\n            var _this = this; // attach a handler to the grid's root element.\n            // jQuery will take care of unregistering them when removeElement gets called.\n\n\n            this.el.on(name, function (ev) {\n              if (!$(ev.target).is(_this.segSelector + ',' + // directly on an event element\n              _this.segSelector + ' *,' + // within an event element\n              '.fc-more,' + // a \"more..\" link\n              'a[data-goto]' // a clickable nav link\n              )) {\n                return handler.call(_this, ev);\n              }\n            });\n          },\n          // Removes the grid's container element from the DOM. Undoes any other DOM-related attachments.\n          // DOES NOT remove any content beforehand (doesn't clear events or call unrenderDates), unlike View\n          removeElement: function removeElement() {\n            this.unbindGlobalHandlers();\n            this.clearDragListeners();\n            this.el.remove(); // NOTE: we don't null-out this.el for the same reasons we don't do it within View::removeElement\n          },\n          // Renders the basic structure of grid view before any content is rendered\n          renderSkeleton: function renderSkeleton() {// subclasses should implement\n          },\n          // Renders the grid's date-related content (like areas that represent days/times).\n          // Assumes setRange has already been called and the skeleton has already been rendered.\n          renderDates: function renderDates() {// subclasses should implement\n          },\n          // Unrenders the grid's date-related content\n          unrenderDates: function unrenderDates() {// subclasses should implement\n          },\n\n          /* Handlers\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Binds DOM handlers to elements that reside outside the grid, such as the document\n          bindGlobalHandlers: function bindGlobalHandlers() {\n            this.listenTo($(document), {\n              dragstart: this.externalDragStart,\n              // jqui\n              sortstart: this.externalDragStart // jqui\n\n            });\n          },\n          // Unbinds DOM handlers from elements that reside outside the grid\n          unbindGlobalHandlers: function unbindGlobalHandlers() {\n            this.stopListeningTo($(document));\n          },\n          // Process a mousedown on an element that represents a day. For day clicking and selecting.\n          dayMousedown: function dayMousedown(ev) {\n            var view = this.view; // HACK\n            // This will still work even though bindDayHandler doesn't use GlobalEmitter.\n\n            if (GlobalEmitter.get().shouldIgnoreMouse()) {\n              return;\n            }\n\n            this.dayClickListener.startInteraction(ev);\n\n            if (view.opt('selectable')) {\n              this.daySelectListener.startInteraction(ev, {\n                distance: view.opt('selectMinDistance')\n              });\n            }\n          },\n          dayTouchStart: function dayTouchStart(ev) {\n            var view = this.view;\n            var selectLongPressDelay; // On iOS (and Android?) when a new selection is initiated overtop another selection,\n            // the touchend never fires because the elements gets removed mid-touch-interaction (my theory).\n            // HACK: simply don't allow this to happen.\n            // ALSO: prevent selection when an *event* is already raised.\n\n            if (view.isSelected || view.selectedEvent) {\n              return;\n            }\n\n            selectLongPressDelay = view.opt('selectLongPressDelay');\n\n            if (selectLongPressDelay == null) {\n              selectLongPressDelay = view.opt('longPressDelay'); // fallback\n            }\n\n            this.dayClickListener.startInteraction(ev);\n\n            if (view.opt('selectable')) {\n              this.daySelectListener.startInteraction(ev, {\n                delay: selectLongPressDelay\n              });\n            }\n          },\n          // Creates a listener that tracks the user's drag across day elements, for day clicking.\n          buildDayClickListener: function buildDayClickListener() {\n            var _this = this;\n\n            var view = this.view;\n            var dayClickHit; // null if invalid dayClick\n\n            var dragListener = new HitDragListener(this, {\n              scroll: view.opt('dragScroll'),\n              interactionStart: function interactionStart() {\n                dayClickHit = dragListener.origHit;\n              },\n              hitOver: function hitOver(hit, isOrig, origHit) {\n                // if user dragged to another cell at any point, it can no longer be a dayClick\n                if (!isOrig) {\n                  dayClickHit = null;\n                }\n              },\n              hitOut: function hitOut() {\n                // called before mouse moves to a different hit OR moved out of all hits\n                dayClickHit = null;\n              },\n              interactionEnd: function interactionEnd(ev, isCancelled) {\n                var hitSpan;\n\n                if (!isCancelled && dayClickHit) {\n                  hitSpan = _this.getSafeHitSpan(dayClickHit);\n\n                  if (hitSpan) {\n                    view.triggerDayClick(hitSpan, _this.getHitEl(dayClickHit), ev);\n                  }\n                }\n              }\n            }); // because dayClickListener won't be called with any time delay, \"dragging\" will begin immediately,\n            // which will kill any touchmoving/scrolling. Prevent this.\n\n            dragListener.shouldCancelTouchScroll = false;\n            dragListener.scrollAlwaysKills = true;\n            return dragListener;\n          },\n          // Creates a listener that tracks the user's drag across day elements, for day selecting.\n          buildDaySelectListener: function buildDaySelectListener() {\n            var _this = this;\n\n            var view = this.view;\n            var selectionSpan; // null if invalid selection\n\n            var dragListener = new HitDragListener(this, {\n              scroll: view.opt('dragScroll'),\n              interactionStart: function interactionStart() {\n                selectionSpan = null;\n              },\n              dragStart: function dragStart() {\n                view.unselect(); // since we could be rendering a new selection, we want to clear any old one\n              },\n              hitOver: function hitOver(hit, isOrig, origHit) {\n                var origHitSpan;\n                var hitSpan;\n\n                if (origHit) {\n                  // click needs to have started on a hit\n                  origHitSpan = _this.getSafeHitSpan(origHit);\n                  hitSpan = _this.getSafeHitSpan(hit);\n\n                  if (origHitSpan && hitSpan) {\n                    selectionSpan = _this.computeSelection(origHitSpan, hitSpan);\n                  } else {\n                    selectionSpan = null;\n                  }\n\n                  if (selectionSpan) {\n                    _this.renderSelection(selectionSpan);\n                  } else if (selectionSpan === false) {\n                    disableCursor();\n                  }\n                }\n              },\n              hitOut: function hitOut() {\n                // called before mouse moves to a different hit OR moved out of all hits\n                selectionSpan = null;\n\n                _this.unrenderSelection();\n              },\n              hitDone: function hitDone() {\n                // called after a hitOut OR before a dragEnd\n                enableCursor();\n              },\n              interactionEnd: function interactionEnd(ev, isCancelled) {\n                if (!isCancelled && selectionSpan) {\n                  // the selection will already have been rendered. just report it\n                  view.reportSelection(selectionSpan, ev);\n                }\n              }\n            });\n            return dragListener;\n          },\n          // Kills all in-progress dragging.\n          // Useful for when public API methods that result in re-rendering are invoked during a drag.\n          // Also useful for when touch devices misbehave and don't fire their touchend.\n          clearDragListeners: function clearDragListeners() {\n            this.dayClickListener.endInteraction();\n            this.daySelectListener.endInteraction();\n\n            if (this.segDragListener) {\n              this.segDragListener.endInteraction(); // will clear this.segDragListener\n            }\n\n            if (this.segResizeListener) {\n              this.segResizeListener.endInteraction(); // will clear this.segResizeListener\n            }\n\n            if (this.externalDragListener) {\n              this.externalDragListener.endInteraction(); // will clear this.externalDragListener\n            }\n          },\n\n          /* Event Helper\n          ------------------------------------------------------------------------------------------------------------------*/\n          // TODO: should probably move this to Grid.events, like we did event dragging / resizing\n          // Renders a mock event at the given event location, which contains zoned start/end properties.\n          // Returns all mock event elements.\n          renderEventLocationHelper: function renderEventLocationHelper(eventLocation, sourceSeg) {\n            var fakeEvent = this.fabricateHelperEvent(eventLocation, sourceSeg);\n            return this.renderHelper(fakeEvent, sourceSeg); // do the actual rendering\n          },\n          // Builds a fake event given zoned event date properties and a segment is should be inspired from.\n          // The range's end can be null, in which case the mock event that is rendered will have a null end time.\n          // `sourceSeg` is the internal segment object involved in the drag. If null, something external is dragging.\n          fabricateHelperEvent: function fabricateHelperEvent(eventLocation, sourceSeg) {\n            var fakeEvent = sourceSeg ? createObject(sourceSeg.event) : {}; // mask the original event object if possible\n\n            fakeEvent.start = eventLocation.start.clone();\n            fakeEvent.end = eventLocation.end ? eventLocation.end.clone() : null;\n            fakeEvent.allDay = null; // force it to be freshly computed by normalizeEventDates\n\n            this.view.calendar.normalizeEventDates(fakeEvent); // this extra className will be useful for differentiating real events from mock events in CSS\n\n            fakeEvent.className = (fakeEvent.className || []).concat('fc-helper'); // if something external is being dragged in, don't render a resizer\n\n            if (!sourceSeg) {\n              fakeEvent.editable = false;\n            }\n\n            return fakeEvent;\n          },\n          // Renders a mock event. Given zoned event date properties.\n          // Must return all mock event elements.\n          renderHelper: function renderHelper(eventLocation, sourceSeg) {// subclasses must implement\n          },\n          // Unrenders a mock event\n          unrenderHelper: function unrenderHelper() {// subclasses must implement\n          },\n\n          /* Selection\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders a visual indication of a selection. Will highlight by default but can be overridden by subclasses.\n          // Given a span (unzoned start/end and other misc data)\n          renderSelection: function renderSelection(span) {\n            this.renderHighlight(span);\n          },\n          // Unrenders any visual indications of a selection. Will unrender a highlight by default.\n          unrenderSelection: function unrenderSelection() {\n            this.unrenderHighlight();\n          },\n          // Given the first and last date-spans of a selection, returns another date-span object.\n          // Subclasses can override and provide additional data in the span object. Will be passed to renderSelection().\n          // Will return false if the selection is invalid and this should be indicated to the user.\n          // Will return null/undefined if a selection invalid but no error should be reported.\n          computeSelection: function computeSelection(span0, span1) {\n            var span = this.computeSelectionSpan(span0, span1);\n\n            if (span && !this.view.calendar.isSelectionSpanAllowed(span)) {\n              return false;\n            }\n\n            return span;\n          },\n          // Given two spans, must return the combination of the two.\n          // TODO: do this separation of concerns (combining VS validation) for event dnd/resize too.\n          computeSelectionSpan: function computeSelectionSpan(span0, span1) {\n            var dates = [span0.start, span0.end, span1.start, span1.end];\n            dates.sort(compareNumbers); // sorts chronologically. works with Moments\n\n            return {\n              start: dates[0].clone(),\n              end: dates[3].clone()\n            };\n          },\n\n          /* Highlight\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders an emphasis on the given date range. Given a span (unzoned start/end and other misc data)\n          renderHighlight: function renderHighlight(span) {\n            this.renderFill('highlight', this.spanToSegs(span));\n          },\n          // Unrenders the emphasis on a date range\n          unrenderHighlight: function unrenderHighlight() {\n            this.unrenderFill('highlight');\n          },\n          // Generates an array of classNames for rendering the highlight. Used by the fill system.\n          highlightSegClasses: function highlightSegClasses() {\n            return ['fc-highlight'];\n          },\n\n          /* Business Hours\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderBusinessHours: function renderBusinessHours() {},\n          unrenderBusinessHours: function unrenderBusinessHours() {},\n\n          /* Now Indicator\n          ------------------------------------------------------------------------------------------------------------------*/\n          getNowIndicatorUnit: function getNowIndicatorUnit() {},\n          renderNowIndicator: function renderNowIndicator(date) {},\n          unrenderNowIndicator: function unrenderNowIndicator() {},\n\n          /* Fill System (highlight, background events, business hours)\n          --------------------------------------------------------------------------------------------------------------------\n          TODO: remove this system. like we did in TimeGrid\n          */\n          // Renders a set of rectangles over the given segments of time.\n          // MUST RETURN a subset of segs, the segs that were actually rendered.\n          // Responsible for populating this.elsByFill. TODO: better API for expressing this requirement\n          renderFill: function renderFill(type, segs) {// subclasses must implement\n          },\n          // Unrenders a specific type of fill that is currently rendered on the grid\n          unrenderFill: function unrenderFill(type) {\n            var el = this.elsByFill[type];\n\n            if (el) {\n              el.remove();\n              delete this.elsByFill[type];\n            }\n          },\n          // Renders and assigns an `el` property for each fill segment. Generic enough to work with different types.\n          // Only returns segments that successfully rendered.\n          // To be harnessed by renderFill (implemented by subclasses).\n          // Analagous to renderFgSegEls.\n          renderFillSegEls: function renderFillSegEls(type, segs) {\n            var _this = this;\n\n            var segElMethod = this[type + 'SegEl'];\n            var html = '';\n            var renderedSegs = [];\n            var i;\n\n            if (segs.length) {\n              // build a large concatenation of segment HTML\n              for (i = 0; i < segs.length; i++) {\n                html += this.fillSegHtml(type, segs[i]);\n              } // Grab individual elements from the combined HTML string. Use each as the default rendering.\n              // Then, compute the 'el' for each segment.\n\n\n              $(html).each(function (i, node) {\n                var seg = segs[i];\n                var el = $(node); // allow custom filter methods per-type\n\n                if (segElMethod) {\n                  el = segElMethod.call(_this, seg, el);\n                }\n\n                if (el) {\n                  // custom filters did not cancel the render\n                  el = $(el); // allow custom filter to return raw DOM node\n                  // correct element type? (would be bad if a non-TD were inserted into a table for example)\n\n                  if (el.is(_this.fillSegTag)) {\n                    seg.el = el;\n                    renderedSegs.push(seg);\n                  }\n                }\n              });\n            }\n\n            return renderedSegs;\n          },\n          fillSegTag: 'div',\n          // subclasses can override\n          // Builds the HTML needed for one fill segment. Generic enough to work with different types.\n          fillSegHtml: function fillSegHtml(type, seg) {\n            // custom hooks per-type\n            var classesMethod = this[type + 'SegClasses'];\n            var cssMethod = this[type + 'SegCss'];\n            var classes = classesMethod ? classesMethod.call(this, seg) : [];\n            var css = cssToStr(cssMethod ? cssMethod.call(this, seg) : {});\n            return '<' + this.fillSegTag + (classes.length ? ' class=\"' + classes.join(' ') + '\"' : '') + (css ? ' style=\"' + css + '\"' : '') + ' />';\n          },\n\n          /* Generic rendering utilities for subclasses\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Computes HTML classNames for a single-day element\n          getDayClasses: function getDayClasses(date, noThemeHighlight) {\n            var view = this.view;\n            var classes = [];\n            var today;\n\n            if (!isDateWithinRange(date, view.activeRange)) {\n              classes.push('fc-disabled-day'); // TODO: jQuery UI theme?\n            } else {\n              classes.push('fc-' + dayIDs[date.day()]);\n\n              if (view.currentRangeAs('months') == 1 && // TODO: somehow get into MonthView\n              date.month() != view.currentRange.start.month()) {\n                classes.push('fc-other-month');\n              }\n\n              today = view.calendar.getNow();\n\n              if (date.isSame(today, 'day')) {\n                classes.push('fc-today');\n\n                if (noThemeHighlight !== true) {\n                  classes.push(view.highlightStateClass);\n                }\n              } else if (date < today) {\n                classes.push('fc-past');\n              } else {\n                classes.push('fc-future');\n              }\n            }\n\n            return classes;\n          }\n        });\n        ;\n        ;\n        /* Event-rendering and event-interaction methods for the abstract Grid class\n        ----------------------------------------------------------------------------------------------------------------------\n        \n        Data Types:\n        \tevent - { title, id, start, (end), whatever }\n        \tlocation - { start, (end), allDay }\n        \trawEventRange - { start, end }\n        \teventRange - { start, end, isStart, isEnd }\n        \teventSpan - { start, end, isStart, isEnd, whatever }\n        \teventSeg - { event, whatever }\n        \tseg - { whatever }\n        */\n\n        Grid.mixin({\n          // self-config, overridable by subclasses\n          segSelector: '.fc-event-container > *',\n          // what constitutes an event element?\n          mousedOverSeg: null,\n          // the segment object the user's mouse is over. null if over nothing\n          isDraggingSeg: false,\n          // is a segment being dragged? boolean\n          isResizingSeg: false,\n          // is a segment being resized? boolean\n          isDraggingExternal: false,\n          // jqui-dragging an external element? boolean\n          segs: null,\n          // the *event* segments currently rendered in the grid. TODO: rename to `eventSegs`\n          // Renders the given events onto the grid\n          renderEvents: function renderEvents(events) {\n            var bgEvents = [];\n            var fgEvents = [];\n            var i;\n\n            for (i = 0; i < events.length; i++) {\n              (isBgEvent(events[i]) ? bgEvents : fgEvents).push(events[i]);\n            }\n\n            this.segs = [].concat( // record all segs\n            this.renderBgEvents(bgEvents), this.renderFgEvents(fgEvents));\n          },\n          renderBgEvents: function renderBgEvents(events) {\n            var segs = this.eventsToSegs(events); // renderBgSegs might return a subset of segs, segs that were actually rendered\n\n            return this.renderBgSegs(segs) || segs;\n          },\n          renderFgEvents: function renderFgEvents(events) {\n            var segs = this.eventsToSegs(events); // renderFgSegs might return a subset of segs, segs that were actually rendered\n\n            return this.renderFgSegs(segs) || segs;\n          },\n          // Unrenders all events currently rendered on the grid\n          unrenderEvents: function unrenderEvents() {\n            this.handleSegMouseout(); // trigger an eventMouseout if user's mouse is over an event\n\n            this.clearDragListeners();\n            this.unrenderFgSegs();\n            this.unrenderBgSegs();\n            this.segs = null;\n          },\n          // Retrieves all rendered segment objects currently rendered on the grid\n          getEventSegs: function getEventSegs() {\n            return this.segs || [];\n          },\n\n          /* Foreground Segment Rendering\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders foreground event segments onto the grid. May return a subset of segs that were rendered.\n          renderFgSegs: function renderFgSegs(segs) {// subclasses must implement\n          },\n          // Unrenders all currently rendered foreground segments\n          unrenderFgSegs: function unrenderFgSegs() {// subclasses must implement\n          },\n          // Renders and assigns an `el` property for each foreground event segment.\n          // Only returns segments that successfully rendered.\n          // A utility that subclasses may use.\n          renderFgSegEls: function renderFgSegEls(segs, disableResizing) {\n            var view = this.view;\n            var html = '';\n            var renderedSegs = [];\n            var i;\n\n            if (segs.length) {\n              // don't build an empty html string\n              // build a large concatenation of event segment HTML\n              for (i = 0; i < segs.length; i++) {\n                html += this.fgSegHtml(segs[i], disableResizing);\n              } // Grab individual elements from the combined HTML string. Use each as the default rendering.\n              // Then, compute the 'el' for each segment. An el might be null if the eventRender callback returned false.\n\n\n              $(html).each(function (i, node) {\n                var seg = segs[i];\n                var el = view.resolveEventEl(seg.event, $(node));\n\n                if (el) {\n                  el.data('fc-seg', seg); // used by handlers\n\n                  seg.el = el;\n                  renderedSegs.push(seg);\n                }\n              });\n            }\n\n            return renderedSegs;\n          },\n          // Generates the HTML for the default rendering of a foreground event segment. Used by renderFgSegEls()\n          fgSegHtml: function fgSegHtml(seg, disableResizing) {// subclasses should implement\n          },\n\n          /* Background Segment Rendering\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders the given background event segments onto the grid.\n          // Returns a subset of the segs that were actually rendered.\n          renderBgSegs: function renderBgSegs(segs) {\n            return this.renderFill('bgEvent', segs);\n          },\n          // Unrenders all the currently rendered background event segments\n          unrenderBgSegs: function unrenderBgSegs() {\n            this.unrenderFill('bgEvent');\n          },\n          // Renders a background event element, given the default rendering. Called by the fill system.\n          bgEventSegEl: function bgEventSegEl(seg, el) {\n            return this.view.resolveEventEl(seg.event, el); // will filter through eventRender\n          },\n          // Generates an array of classNames to be used for the default rendering of a background event.\n          // Called by fillSegHtml.\n          bgEventSegClasses: function bgEventSegClasses(seg) {\n            var event = seg.event;\n            var source = event.source || {};\n            return ['fc-bgevent'].concat(event.className, source.className || []);\n          },\n          // Generates a semicolon-separated CSS string to be used for the default rendering of a background event.\n          // Called by fillSegHtml.\n          bgEventSegCss: function bgEventSegCss(seg) {\n            return {\n              'background-color': this.getSegSkinCss(seg)['background-color']\n            };\n          },\n          // Generates an array of classNames to be used for the rendering business hours overlay. Called by the fill system.\n          // Called by fillSegHtml.\n          businessHoursSegClasses: function businessHoursSegClasses(seg) {\n            return ['fc-nonbusiness', 'fc-bgevent'];\n          },\n\n          /* Business Hours\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Compute business hour segs for the grid's current date range.\n          // Caller must ask if whole-day business hours are needed.\n          // If no `businessHours` configuration value is specified, assumes the calendar default.\n          buildBusinessHourSegs: function buildBusinessHourSegs(wholeDay, businessHours) {\n            return this.eventsToSegs(this.buildBusinessHourEvents(wholeDay, businessHours));\n          },\n          // Compute business hour *events* for the grid's current date range.\n          // Caller must ask if whole-day business hours are needed.\n          // If no `businessHours` configuration value is specified, assumes the calendar default.\n          buildBusinessHourEvents: function buildBusinessHourEvents(wholeDay, businessHours) {\n            var calendar = this.view.calendar;\n            var events;\n\n            if (businessHours == null) {\n              // fallback\n              // access from calendawr. don't access from view. doesn't update with dynamic options.\n              businessHours = calendar.opt('businessHours');\n            }\n\n            events = calendar.computeBusinessHourEvents(wholeDay, businessHours); // HACK. Eventually refactor business hours \"events\" system.\n            // If no events are given, but businessHours is activated, this means the entire visible range should be\n            // marked as *not* business-hours, via inverse-background rendering.\n\n            if (!events.length && businessHours) {\n              events = [$.extend({}, BUSINESS_HOUR_EVENT_DEFAULTS, {\n                start: this.view.activeRange.end,\n                // guaranteed out-of-range\n                end: this.view.activeRange.end,\n                // \"\n                dow: null\n              })];\n            }\n\n            return events;\n          },\n\n          /* Handlers\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Attaches event-element-related handlers for *all* rendered event segments of the view.\n          bindSegHandlers: function bindSegHandlers() {\n            this.bindSegHandlersToEl(this.el);\n          },\n          // Attaches event-element-related handlers to an arbitrary container element. leverages bubbling.\n          bindSegHandlersToEl: function bindSegHandlersToEl(el) {\n            this.bindSegHandlerToEl(el, 'touchstart', this.handleSegTouchStart);\n            this.bindSegHandlerToEl(el, 'mouseenter', this.handleSegMouseover);\n            this.bindSegHandlerToEl(el, 'mouseleave', this.handleSegMouseout);\n            this.bindSegHandlerToEl(el, 'mousedown', this.handleSegMousedown);\n            this.bindSegHandlerToEl(el, 'click', this.handleSegClick);\n          },\n          // Executes a handler for any a user-interaction on a segment.\n          // Handler gets called with (seg, ev), and with the `this` context of the Grid\n          bindSegHandlerToEl: function bindSegHandlerToEl(el, name, handler) {\n            var _this = this;\n\n            el.on(name, this.segSelector, function (ev) {\n              var seg = $(this).data('fc-seg'); // grab segment data. put there by View::renderEvents\n              // only call the handlers if there is not a drag/resize in progress\n\n              if (seg && !_this.isDraggingSeg && !_this.isResizingSeg) {\n                return handler.call(_this, seg, ev); // context will be the Grid\n              }\n            });\n          },\n          handleSegClick: function handleSegClick(seg, ev) {\n            var res = this.view.publiclyTrigger('eventClick', seg.el[0], seg.event, ev); // can return `false` to cancel\n\n            if (res === false) {\n              ev.preventDefault();\n            }\n          },\n          // Updates internal state and triggers handlers for when an event element is moused over\n          handleSegMouseover: function handleSegMouseover(seg, ev) {\n            if (!GlobalEmitter.get().shouldIgnoreMouse() && !this.mousedOverSeg) {\n              this.mousedOverSeg = seg;\n\n              if (this.view.isEventResizable(seg.event)) {\n                seg.el.addClass('fc-allow-mouse-resize');\n              }\n\n              this.view.publiclyTrigger('eventMouseover', seg.el[0], seg.event, ev);\n            }\n          },\n          // Updates internal state and triggers handlers for when an event element is moused out.\n          // Can be given no arguments, in which case it will mouseout the segment that was previously moused over.\n          handleSegMouseout: function handleSegMouseout(seg, ev) {\n            ev = ev || {}; // if given no args, make a mock mouse event\n\n            if (this.mousedOverSeg) {\n              seg = seg || this.mousedOverSeg; // if given no args, use the currently moused-over segment\n\n              this.mousedOverSeg = null;\n\n              if (this.view.isEventResizable(seg.event)) {\n                seg.el.removeClass('fc-allow-mouse-resize');\n              }\n\n              this.view.publiclyTrigger('eventMouseout', seg.el[0], seg.event, ev);\n            }\n          },\n          handleSegMousedown: function handleSegMousedown(seg, ev) {\n            var isResizing = this.startSegResize(seg, ev, {\n              distance: 5\n            });\n\n            if (!isResizing && this.view.isEventDraggable(seg.event)) {\n              this.buildSegDragListener(seg).startInteraction(ev, {\n                distance: 5\n              });\n            }\n          },\n          handleSegTouchStart: function handleSegTouchStart(seg, ev) {\n            var view = this.view;\n            var event = seg.event;\n            var isSelected = view.isEventSelected(event);\n            var isDraggable = view.isEventDraggable(event);\n            var isResizable = view.isEventResizable(event);\n            var isResizing = false;\n            var dragListener;\n            var eventLongPressDelay;\n\n            if (isSelected && isResizable) {\n              // only allow resizing of the event is selected\n              isResizing = this.startSegResize(seg, ev);\n            }\n\n            if (!isResizing && (isDraggable || isResizable)) {\n              // allowed to be selected?\n              eventLongPressDelay = view.opt('eventLongPressDelay');\n\n              if (eventLongPressDelay == null) {\n                eventLongPressDelay = view.opt('longPressDelay'); // fallback\n              }\n\n              dragListener = isDraggable ? this.buildSegDragListener(seg) : this.buildSegSelectListener(seg); // seg isn't draggable, but still needs to be selected\n\n              dragListener.startInteraction(ev, {\n                // won't start if already started\n                delay: isSelected ? 0 : eventLongPressDelay // do delay if not already selected\n\n              });\n            }\n          },\n          // returns boolean whether resizing actually started or not.\n          // assumes the seg allows resizing.\n          // `dragOptions` are optional.\n          startSegResize: function startSegResize(seg, ev, dragOptions) {\n            if ($(ev.target).is('.fc-resizer')) {\n              this.buildSegResizeListener(seg, $(ev.target).is('.fc-start-resizer')).startInteraction(ev, dragOptions);\n              return true;\n            }\n\n            return false;\n          },\n\n          /* Event Dragging\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Builds a listener that will track user-dragging on an event segment.\n          // Generic enough to work with any type of Grid.\n          // Has side effect of setting/unsetting `segDragListener`\n          buildSegDragListener: function buildSegDragListener(seg) {\n            var _this = this;\n\n            var view = this.view;\n            var el = seg.el;\n            var event = seg.event;\n            var isDragging;\n            var mouseFollower; // A clone of the original element that will move with the mouse\n\n            var dropLocation; // zoned event date properties\n\n            if (this.segDragListener) {\n              return this.segDragListener;\n            } // Tracks mouse movement over the *view's* coordinate map. Allows dragging and dropping between subcomponents\n            // of the view.\n\n\n            var dragListener = this.segDragListener = new HitDragListener(view, {\n              scroll: view.opt('dragScroll'),\n              subjectEl: el,\n              subjectCenter: true,\n              interactionStart: function interactionStart(ev) {\n                seg.component = _this; // for renderDrag\n\n                isDragging = false;\n                mouseFollower = new MouseFollower(seg.el, {\n                  additionalClass: 'fc-dragging',\n                  parentEl: view.el,\n                  opacity: dragListener.isTouch ? null : view.opt('dragOpacity'),\n                  revertDuration: view.opt('dragRevertDuration'),\n                  zIndex: 2 // one above the .fc-view\n\n                });\n                mouseFollower.hide(); // don't show until we know this is a real drag\n\n                mouseFollower.start(ev);\n              },\n              dragStart: function dragStart(ev) {\n                if (dragListener.isTouch && !view.isEventSelected(event)) {\n                  // if not previously selected, will fire after a delay. then, select the event\n                  view.selectEvent(event);\n                }\n\n                isDragging = true;\n\n                _this.handleSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported\n\n\n                _this.segDragStart(seg, ev);\n\n                view.hideEvent(event); // hide all event segments. our mouseFollower will take over\n              },\n              hitOver: function hitOver(hit, isOrig, origHit) {\n                var isAllowed = true;\n                var origHitSpan;\n                var hitSpan;\n                var dragHelperEls; // starting hit could be forced (DayGrid.limit)\n\n                if (seg.hit) {\n                  origHit = seg.hit;\n                } // hit might not belong to this grid, so query origin grid\n\n\n                origHitSpan = origHit.component.getSafeHitSpan(origHit);\n                hitSpan = hit.component.getSafeHitSpan(hit);\n\n                if (origHitSpan && hitSpan) {\n                  dropLocation = _this.computeEventDrop(origHitSpan, hitSpan, event);\n                  isAllowed = dropLocation && _this.isEventLocationAllowed(dropLocation, event);\n                } else {\n                  isAllowed = false;\n                }\n\n                if (!isAllowed) {\n                  dropLocation = null;\n                  disableCursor();\n                } // if a valid drop location, have the subclass render a visual indication\n\n\n                if (dropLocation && (dragHelperEls = view.renderDrag(dropLocation, seg))) {\n                  dragHelperEls.addClass('fc-dragging');\n\n                  if (!dragListener.isTouch) {\n                    _this.applyDragOpacity(dragHelperEls);\n                  }\n\n                  mouseFollower.hide(); // if the subclass is already using a mock event \"helper\", hide our own\n                } else {\n                  mouseFollower.show(); // otherwise, have the helper follow the mouse (no snapping)\n                }\n\n                if (isOrig) {\n                  dropLocation = null; // needs to have moved hits to be a valid drop\n                }\n              },\n              hitOut: function hitOut() {\n                // called before mouse moves to a different hit OR moved out of all hits\n                view.unrenderDrag(); // unrender whatever was done in renderDrag\n\n                mouseFollower.show(); // show in case we are moving out of all hits\n\n                dropLocation = null;\n              },\n              hitDone: function hitDone() {\n                // Called after a hitOut OR before a dragEnd\n                enableCursor();\n              },\n              interactionEnd: function interactionEnd(ev) {\n                delete seg.component; // prevent side effects\n                // do revert animation if hasn't changed. calls a callback when finished (whether animation or not)\n\n                mouseFollower.stop(!dropLocation, function () {\n                  if (isDragging) {\n                    view.unrenderDrag();\n\n                    _this.segDragStop(seg, ev);\n                  }\n\n                  if (dropLocation) {\n                    // no need to re-show original, will rerender all anyways. esp important if eventRenderWait\n                    view.reportSegDrop(seg, dropLocation, _this.largeUnit, el, ev);\n                  } else {\n                    view.showEvent(event);\n                  }\n                });\n                _this.segDragListener = null;\n              }\n            });\n            return dragListener;\n          },\n          // seg isn't draggable, but let's use a generic DragListener\n          // simply for the delay, so it can be selected.\n          // Has side effect of setting/unsetting `segDragListener`\n          buildSegSelectListener: function buildSegSelectListener(seg) {\n            var _this = this;\n\n            var view = this.view;\n            var event = seg.event;\n\n            if (this.segDragListener) {\n              return this.segDragListener;\n            }\n\n            var dragListener = this.segDragListener = new DragListener({\n              dragStart: function dragStart(ev) {\n                if (dragListener.isTouch && !view.isEventSelected(event)) {\n                  // if not previously selected, will fire after a delay. then, select the event\n                  view.selectEvent(event);\n                }\n              },\n              interactionEnd: function interactionEnd(ev) {\n                _this.segDragListener = null;\n              }\n            });\n            return dragListener;\n          },\n          // Called before event segment dragging starts\n          segDragStart: function segDragStart(seg, ev) {\n            this.isDraggingSeg = true;\n            this.view.publiclyTrigger('eventDragStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n          },\n          // Called after event segment dragging stops\n          segDragStop: function segDragStop(seg, ev) {\n            this.isDraggingSeg = false;\n            this.view.publiclyTrigger('eventDragStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n          },\n          // Given the spans an event drag began, and the span event was dropped, calculates the new zoned start/end/allDay\n          // values for the event. Subclasses may override and set additional properties to be used by renderDrag.\n          // A falsy returned value indicates an invalid drop.\n          // DOES NOT consider overlap/constraint.\n          computeEventDrop: function computeEventDrop(startSpan, endSpan, event) {\n            var calendar = this.view.calendar;\n            var dragStart = startSpan.start;\n            var dragEnd = endSpan.start;\n            var delta;\n            var dropLocation; // zoned event date properties\n\n            if (dragStart.hasTime() === dragEnd.hasTime()) {\n              delta = this.diffDates(dragEnd, dragStart); // if an all-day event was in a timed area and it was dragged to a different time,\n              // guarantee an end and adjust start/end to have times\n\n              if (event.allDay && durationHasTime(delta)) {\n                dropLocation = {\n                  start: event.start.clone(),\n                  end: calendar.getEventEnd(event),\n                  // will be an ambig day\n                  allDay: false // for normalizeEventTimes\n\n                };\n                calendar.normalizeEventTimes(dropLocation);\n              } // othewise, work off existing values\n              else {\n                  dropLocation = pluckEventDateProps(event);\n                }\n\n              dropLocation.start.add(delta);\n\n              if (dropLocation.end) {\n                dropLocation.end.add(delta);\n              }\n            } else {\n              // if switching from day <-> timed, start should be reset to the dropped date, and the end cleared\n              dropLocation = {\n                start: dragEnd.clone(),\n                end: null,\n                // end should be cleared\n                allDay: !dragEnd.hasTime()\n              };\n            }\n\n            return dropLocation;\n          },\n          // Utility for apply dragOpacity to a jQuery set\n          applyDragOpacity: function applyDragOpacity(els) {\n            var opacity = this.view.opt('dragOpacity');\n\n            if (opacity != null) {\n              els.css('opacity', opacity);\n            }\n          },\n\n          /* External Element Dragging\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Called when a jQuery UI drag is initiated anywhere in the DOM\n          externalDragStart: function externalDragStart(ev, ui) {\n            var view = this.view;\n            var el;\n            var accept;\n\n            if (view.opt('droppable')) {\n              // only listen if this setting is on\n              el = $((ui ? ui.item : null) || ev.target); // Test that the dragged element passes the dropAccept selector or filter function.\n              // FYI, the default is \"*\" (matches all)\n\n              accept = view.opt('dropAccept');\n\n              if ($.isFunction(accept) ? accept.call(el[0], el) : el.is(accept)) {\n                if (!this.isDraggingExternal) {\n                  // prevent double-listening if fired twice\n                  this.listenToExternalDrag(el, ev, ui);\n                }\n              }\n            }\n          },\n          // Called when a jQuery UI drag starts and it needs to be monitored for dropping\n          listenToExternalDrag: function listenToExternalDrag(el, ev, ui) {\n            var _this = this;\n\n            var view = this.view;\n            var meta = getDraggedElMeta(el); // extra data about event drop, including possible event to create\n\n            var dropLocation; // a null value signals an unsuccessful drag\n            // listener that tracks mouse movement over date-associated pixel regions\n\n            var dragListener = _this.externalDragListener = new HitDragListener(this, {\n              interactionStart: function interactionStart() {\n                _this.isDraggingExternal = true;\n              },\n              hitOver: function hitOver(hit) {\n                var isAllowed = true;\n                var hitSpan = hit.component.getSafeHitSpan(hit); // hit might not belong to this grid\n\n                if (hitSpan) {\n                  dropLocation = _this.computeExternalDrop(hitSpan, meta);\n                  isAllowed = dropLocation && _this.isExternalLocationAllowed(dropLocation, meta.eventProps);\n                } else {\n                  isAllowed = false;\n                }\n\n                if (!isAllowed) {\n                  dropLocation = null;\n                  disableCursor();\n                }\n\n                if (dropLocation) {\n                  _this.renderDrag(dropLocation); // called without a seg parameter\n\n                }\n              },\n              hitOut: function hitOut() {\n                dropLocation = null; // signal unsuccessful\n              },\n              hitDone: function hitDone() {\n                // Called after a hitOut OR before a dragEnd\n                enableCursor();\n\n                _this.unrenderDrag();\n              },\n              interactionEnd: function interactionEnd(ev) {\n                if (dropLocation) {\n                  // element was dropped on a valid hit\n                  view.reportExternalDrop(meta, dropLocation, el, ev, ui);\n                }\n\n                _this.isDraggingExternal = false;\n                _this.externalDragListener = null;\n              }\n            });\n            dragListener.startDrag(ev); // start listening immediately\n          },\n          // Given a hit to be dropped upon, and misc data associated with the jqui drag (guaranteed to be a plain object),\n          // returns the zoned start/end dates for the event that would result from the hypothetical drop. end might be null.\n          // Returning a null value signals an invalid drop hit.\n          // DOES NOT consider overlap/constraint.\n          computeExternalDrop: function computeExternalDrop(span, meta) {\n            var calendar = this.view.calendar;\n            var dropLocation = {\n              start: calendar.applyTimezone(span.start),\n              // simulate a zoned event start date\n              end: null\n            }; // if dropped on an all-day span, and element's metadata specified a time, set it\n\n            if (meta.startTime && !dropLocation.start.hasTime()) {\n              dropLocation.start.time(meta.startTime);\n            }\n\n            if (meta.duration) {\n              dropLocation.end = dropLocation.start.clone().add(meta.duration);\n            }\n\n            return dropLocation;\n          },\n\n          /* Drag Rendering (for both events and an external elements)\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders a visual indication of an event or external element being dragged.\n          // `dropLocation` contains hypothetical start/end/allDay values the event would have if dropped. end can be null.\n          // `seg` is the internal segment object that is being dragged. If dragging an external element, `seg` is null.\n          // A truthy returned value indicates this method has rendered a helper element.\n          // Must return elements used for any mock events.\n          renderDrag: function renderDrag(dropLocation, seg) {// subclasses must implement\n          },\n          // Unrenders a visual indication of an event or external element being dragged\n          unrenderDrag: function unrenderDrag() {// subclasses must implement\n          },\n\n          /* Resizing\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Creates a listener that tracks the user as they resize an event segment.\n          // Generic enough to work with any type of Grid.\n          buildSegResizeListener: function buildSegResizeListener(seg, isStart) {\n            var _this = this;\n\n            var view = this.view;\n            var calendar = view.calendar;\n            var el = seg.el;\n            var event = seg.event;\n            var eventEnd = calendar.getEventEnd(event);\n            var isDragging;\n            var resizeLocation; // zoned event date properties. falsy if invalid resize\n            // Tracks mouse movement over the *grid's* coordinate map\n\n            var dragListener = this.segResizeListener = new HitDragListener(this, {\n              scroll: view.opt('dragScroll'),\n              subjectEl: el,\n              interactionStart: function interactionStart() {\n                isDragging = false;\n              },\n              dragStart: function dragStart(ev) {\n                isDragging = true;\n\n                _this.handleSegMouseout(seg, ev); // ensure a mouseout on the manipulated event has been reported\n\n\n                _this.segResizeStart(seg, ev);\n              },\n              hitOver: function hitOver(hit, isOrig, origHit) {\n                var isAllowed = true;\n\n                var origHitSpan = _this.getSafeHitSpan(origHit);\n\n                var hitSpan = _this.getSafeHitSpan(hit);\n\n                if (origHitSpan && hitSpan) {\n                  resizeLocation = isStart ? _this.computeEventStartResize(origHitSpan, hitSpan, event) : _this.computeEventEndResize(origHitSpan, hitSpan, event);\n                  isAllowed = resizeLocation && _this.isEventLocationAllowed(resizeLocation, event);\n                } else {\n                  isAllowed = false;\n                }\n\n                if (!isAllowed) {\n                  resizeLocation = null;\n                  disableCursor();\n                } else {\n                  if (resizeLocation.start.isSame(event.start.clone().stripZone()) && resizeLocation.end.isSame(eventEnd.clone().stripZone())) {\n                    // no change. (FYI, event dates might have zones)\n                    resizeLocation = null;\n                  }\n                }\n\n                if (resizeLocation) {\n                  view.hideEvent(event);\n\n                  _this.renderEventResize(resizeLocation, seg);\n                }\n              },\n              hitOut: function hitOut() {\n                // called before mouse moves to a different hit OR moved out of all hits\n                resizeLocation = null;\n                view.showEvent(event); // for when out-of-bounds. show original\n              },\n              hitDone: function hitDone() {\n                // resets the rendering to show the original event\n                _this.unrenderEventResize();\n\n                enableCursor();\n              },\n              interactionEnd: function interactionEnd(ev) {\n                if (isDragging) {\n                  _this.segResizeStop(seg, ev);\n                }\n\n                if (resizeLocation) {\n                  // valid date to resize to?\n                  // no need to re-show original, will rerender all anyways. esp important if eventRenderWait\n                  view.reportSegResize(seg, resizeLocation, _this.largeUnit, el, ev);\n                } else {\n                  view.showEvent(event);\n                }\n\n                _this.segResizeListener = null;\n              }\n            });\n            return dragListener;\n          },\n          // Called before event segment resizing starts\n          segResizeStart: function segResizeStart(seg, ev) {\n            this.isResizingSeg = true;\n            this.view.publiclyTrigger('eventResizeStart', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n          },\n          // Called after event segment resizing stops\n          segResizeStop: function segResizeStop(seg, ev) {\n            this.isResizingSeg = false;\n            this.view.publiclyTrigger('eventResizeStop', seg.el[0], seg.event, ev, {}); // last argument is jqui dummy\n          },\n          // Returns new date-information for an event segment being resized from its start\n          computeEventStartResize: function computeEventStartResize(startSpan, endSpan, event) {\n            return this.computeEventResize('start', startSpan, endSpan, event);\n          },\n          // Returns new date-information for an event segment being resized from its end\n          computeEventEndResize: function computeEventEndResize(startSpan, endSpan, event) {\n            return this.computeEventResize('end', startSpan, endSpan, event);\n          },\n          // Returns new zoned date information for an event segment being resized from its start OR end\n          // `type` is either 'start' or 'end'.\n          // DOES NOT consider overlap/constraint.\n          computeEventResize: function computeEventResize(type, startSpan, endSpan, event) {\n            var calendar = this.view.calendar;\n            var delta = this.diffDates(endSpan[type], startSpan[type]);\n            var resizeLocation; // zoned event date properties\n\n            var defaultDuration; // build original values to work from, guaranteeing a start and end\n\n            resizeLocation = {\n              start: event.start.clone(),\n              end: calendar.getEventEnd(event),\n              allDay: event.allDay\n            }; // if an all-day event was in a timed area and was resized to a time, adjust start/end to have times\n\n            if (resizeLocation.allDay && durationHasTime(delta)) {\n              resizeLocation.allDay = false;\n              calendar.normalizeEventTimes(resizeLocation);\n            }\n\n            resizeLocation[type].add(delta); // apply delta to start or end\n            // if the event was compressed too small, find a new reasonable duration for it\n\n            if (!resizeLocation.start.isBefore(resizeLocation.end)) {\n              defaultDuration = this.minResizeDuration || ( // TODO: hack\n              event.allDay ? calendar.defaultAllDayEventDuration : calendar.defaultTimedEventDuration);\n\n              if (type == 'start') {\n                // resizing the start?\n                resizeLocation.start = resizeLocation.end.clone().subtract(defaultDuration);\n              } else {\n                // resizing the end?\n                resizeLocation.end = resizeLocation.start.clone().add(defaultDuration);\n              }\n            }\n\n            return resizeLocation;\n          },\n          // Renders a visual indication of an event being resized.\n          // `range` has the updated dates of the event. `seg` is the original segment object involved in the drag.\n          // Must return elements used for any mock events.\n          renderEventResize: function renderEventResize(range, seg) {// subclasses must implement\n          },\n          // Unrenders a visual indication of an event being resized.\n          unrenderEventResize: function unrenderEventResize() {// subclasses must implement\n          },\n\n          /* Rendering Utils\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Compute the text that should be displayed on an event's element.\n          // `range` can be the Event object itself, or something range-like, with at least a `start`.\n          // If event times are disabled, or the event has no time, will return a blank string.\n          // If not specified, formatStr will default to the eventTimeFormat setting,\n          // and displayEnd will default to the displayEventEnd setting.\n          getEventTimeText: function getEventTimeText(range, formatStr, displayEnd) {\n            if (formatStr == null) {\n              formatStr = this.eventTimeFormat;\n            }\n\n            if (displayEnd == null) {\n              displayEnd = this.displayEventEnd;\n            }\n\n            if (this.displayEventTime && range.start.hasTime()) {\n              if (displayEnd && range.end) {\n                return this.view.formatRange(range, formatStr);\n              } else {\n                return range.start.format(formatStr);\n              }\n            }\n\n            return '';\n          },\n          // Generic utility for generating the HTML classNames for an event segment's element\n          getSegClasses: function getSegClasses(seg, isDraggable, isResizable) {\n            var view = this.view;\n            var classes = ['fc-event', seg.isStart ? 'fc-start' : 'fc-not-start', seg.isEnd ? 'fc-end' : 'fc-not-end'].concat(this.getSegCustomClasses(seg));\n\n            if (isDraggable) {\n              classes.push('fc-draggable');\n            }\n\n            if (isResizable) {\n              classes.push('fc-resizable');\n            } // event is currently selected? attach a className.\n\n\n            if (view.isEventSelected(seg.event)) {\n              classes.push('fc-selected');\n            }\n\n            return classes;\n          },\n          // List of classes that were defined by the caller of the API in some way\n          getSegCustomClasses: function getSegCustomClasses(seg) {\n            var event = seg.event;\n            return [].concat(event.className, // guaranteed to be an array\n            event.source ? event.source.className : []);\n          },\n          // Utility for generating event skin-related CSS properties\n          getSegSkinCss: function getSegSkinCss(seg) {\n            return {\n              'background-color': this.getSegBackgroundColor(seg),\n              'border-color': this.getSegBorderColor(seg),\n              color: this.getSegTextColor(seg)\n            };\n          },\n          // Queries for caller-specified color, then falls back to default\n          getSegBackgroundColor: function getSegBackgroundColor(seg) {\n            return seg.event.backgroundColor || seg.event.color || this.getSegDefaultBackgroundColor(seg);\n          },\n          getSegDefaultBackgroundColor: function getSegDefaultBackgroundColor(seg) {\n            var source = seg.event.source || {};\n            return source.backgroundColor || source.color || this.view.opt('eventBackgroundColor') || this.view.opt('eventColor');\n          },\n          // Queries for caller-specified color, then falls back to default\n          getSegBorderColor: function getSegBorderColor(seg) {\n            return seg.event.borderColor || seg.event.color || this.getSegDefaultBorderColor(seg);\n          },\n          getSegDefaultBorderColor: function getSegDefaultBorderColor(seg) {\n            var source = seg.event.source || {};\n            return source.borderColor || source.color || this.view.opt('eventBorderColor') || this.view.opt('eventColor');\n          },\n          // Queries for caller-specified color, then falls back to default\n          getSegTextColor: function getSegTextColor(seg) {\n            return seg.event.textColor || this.getSegDefaultTextColor(seg);\n          },\n          getSegDefaultTextColor: function getSegDefaultTextColor(seg) {\n            var source = seg.event.source || {};\n            return source.textColor || this.view.opt('eventTextColor');\n          },\n\n          /* Event Location Validation\n          ------------------------------------------------------------------------------------------------------------------*/\n          isEventLocationAllowed: function isEventLocationAllowed(eventLocation, event) {\n            if (this.isEventLocationInRange(eventLocation)) {\n              var calendar = this.view.calendar;\n              var eventSpans = this.eventToSpans(eventLocation);\n              var i;\n\n              if (eventSpans.length) {\n                for (i = 0; i < eventSpans.length; i++) {\n                  if (!calendar.isEventSpanAllowed(eventSpans[i], event)) {\n                    return false;\n                  }\n                }\n\n                return true;\n              }\n            }\n\n            return false;\n          },\n          isExternalLocationAllowed: function isExternalLocationAllowed(eventLocation, metaProps) {\n            // FOR the external element\n            if (this.isEventLocationInRange(eventLocation)) {\n              var calendar = this.view.calendar;\n              var eventSpans = this.eventToSpans(eventLocation);\n              var i;\n\n              if (eventSpans.length) {\n                for (i = 0; i < eventSpans.length; i++) {\n                  if (!calendar.isExternalSpanAllowed(eventSpans[i], eventLocation, metaProps)) {\n                    return false;\n                  }\n                }\n\n                return true;\n              }\n            }\n\n            return false;\n          },\n          isEventLocationInRange: function isEventLocationInRange(eventLocation) {\n            return isRangeWithinRange(this.eventToRawRange(eventLocation), this.view.validRange);\n          },\n\n          /* Converting events -> eventRange -> eventSpan -> eventSegs\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Generates an array of segments for the given single event\n          // Can accept an event \"location\" as well (which only has start/end and no allDay)\n          eventToSegs: function eventToSegs(event) {\n            return this.eventsToSegs([event]);\n          },\n          // Generates spans (always unzoned) for the given event.\n          // Does not do any inverting for inverse-background events.\n          // Can accept an event \"location\" as well (which only has start/end and no allDay)\n          eventToSpans: function eventToSpans(event) {\n            var eventRange = this.eventToRange(event); // { start, end, isStart, isEnd }\n\n            if (eventRange) {\n              return this.eventRangeToSpans(eventRange, event);\n            } else {\n              // out of view's valid range\n              return [];\n            }\n          },\n          // Converts an array of event objects into an array of event segment objects.\n          // A custom `segSliceFunc` may be given for arbitrarily slicing up events.\n          // Doesn't guarantee an order for the resulting array.\n          eventsToSegs: function eventsToSegs(allEvents, segSliceFunc) {\n            var _this = this;\n\n            var eventsById = groupEventsById(allEvents);\n            var segs = [];\n            $.each(eventsById, function (id, events) {\n              var visibleEvents = [];\n              var eventRanges = [];\n              var eventRange; // { start, end, isStart, isEnd }\n\n              var i;\n\n              for (i = 0; i < events.length; i++) {\n                eventRange = _this.eventToRange(events[i]); // might be null if completely out of range\n\n                if (eventRange) {\n                  eventRanges.push(eventRange);\n                  visibleEvents.push(events[i]);\n                }\n              } // inverse-background events (utilize only the first event in calculations)\n\n\n              if (isInverseBgEvent(events[0])) {\n                eventRanges = _this.invertRanges(eventRanges); // will lose isStart/isEnd\n\n                for (i = 0; i < eventRanges.length; i++) {\n                  segs.push.apply(segs, // append to\n                  _this.eventRangeToSegs(eventRanges[i], events[0], segSliceFunc));\n                }\n              } // normal event ranges\n              else {\n                  for (i = 0; i < eventRanges.length; i++) {\n                    segs.push.apply(segs, // append to\n                    _this.eventRangeToSegs(eventRanges[i], visibleEvents[i], segSliceFunc));\n                  }\n                }\n            });\n            return segs;\n          },\n          // Generates the unzoned start/end dates an event appears to occupy\n          // Can accept an event \"location\" as well (which only has start/end and no allDay)\n          // returns { start, end, isStart, isEnd }\n          // If the event is completely outside of the grid's valid range, will return undefined.\n          eventToRange: function eventToRange(event) {\n            return this.refineRawEventRange(this.eventToRawRange(event));\n          },\n          // Ensures the given range is within the view's activeRange and is correctly localized.\n          // Always returns a result\n          refineRawEventRange: function refineRawEventRange(rawRange) {\n            var view = this.view;\n            var calendar = view.calendar;\n            var range = intersectRanges(rawRange, view.activeRange);\n\n            if (range) {\n              // otherwise, event doesn't have valid range\n              // hack: dynamic locale change forgets to upate stored event localed\n              calendar.localizeMoment(range.start);\n              calendar.localizeMoment(range.end);\n              return range;\n            }\n          },\n          // not constrained to valid dates\n          // not given localizeMoment hack\n          eventToRawRange: function eventToRawRange(event) {\n            var calendar = this.view.calendar;\n            var start = event.start.clone().stripZone();\n            var end = (event.end ? event.end.clone() : // derive the end from the start and allDay. compute allDay if necessary\n            calendar.getDefaultEventEnd(event.allDay != null ? event.allDay : !event.start.hasTime(), event.start)).stripZone();\n            return {\n              start: start,\n              end: end\n            };\n          },\n          // Given an event's range (unzoned start/end), and the event itself,\n          // slice into segments (using the segSliceFunc function if specified)\n          // eventRange - { start, end, isStart, isEnd }\n          eventRangeToSegs: function eventRangeToSegs(eventRange, event, segSliceFunc) {\n            var eventSpans = this.eventRangeToSpans(eventRange, event);\n            var segs = [];\n            var i;\n\n            for (i = 0; i < eventSpans.length; i++) {\n              segs.push.apply(segs, // append to\n              this.eventSpanToSegs(eventSpans[i], event, segSliceFunc));\n            }\n\n            return segs;\n          },\n          // Given an event's unzoned date range, return an array of eventSpan objects.\n          // eventSpan - { start, end, isStart, isEnd, otherthings... }\n          // Subclasses can override.\n          // Subclasses are obligated to forward eventRange.isStart/isEnd to the resulting spans.\n          eventRangeToSpans: function eventRangeToSpans(eventRange, event) {\n            return [$.extend({}, eventRange)]; // copy into a single-item array\n          },\n          // Given an event's span (unzoned start/end and other misc data), and the event itself,\n          // slices into segments and attaches event-derived properties to them.\n          // eventSpan - { start, end, isStart, isEnd, otherthings... }\n          eventSpanToSegs: function eventSpanToSegs(eventSpan, event, segSliceFunc) {\n            var segs = segSliceFunc ? segSliceFunc(eventSpan) : this.spanToSegs(eventSpan);\n            var i, seg;\n\n            for (i = 0; i < segs.length; i++) {\n              seg = segs[i]; // the eventSpan's isStart/isEnd takes precedence over the seg's\n\n              if (!eventSpan.isStart) {\n                seg.isStart = false;\n              }\n\n              if (!eventSpan.isEnd) {\n                seg.isEnd = false;\n              }\n\n              seg.event = event;\n              seg.eventStartMS = +eventSpan.start; // TODO: not the best name after making spans unzoned\n\n              seg.eventDurationMS = eventSpan.end - eventSpan.start;\n            }\n\n            return segs;\n          },\n          // Produces a new array of range objects that will cover all the time NOT covered by the given ranges.\n          // SIDE EFFECT: will mutate the given array and will use its date references.\n          invertRanges: function invertRanges(ranges) {\n            var view = this.view;\n            var viewStart = view.activeRange.start.clone(); // need a copy\n\n            var viewEnd = view.activeRange.end.clone(); // need a copy\n\n            var inverseRanges = [];\n            var start = viewStart; // the end of the previous range. the start of the new range\n\n            var i, range; // ranges need to be in order. required for our date-walking algorithm\n\n            ranges.sort(compareRanges);\n\n            for (i = 0; i < ranges.length; i++) {\n              range = ranges[i]; // add the span of time before the event (if there is any)\n\n              if (range.start > start) {\n                // compare millisecond time (skip any ambig logic)\n                inverseRanges.push({\n                  start: start,\n                  end: range.start\n                });\n              }\n\n              if (range.end > start) {\n                start = range.end;\n              }\n            } // add the span of time after the last event (if there is any)\n\n\n            if (start < viewEnd) {\n              // compare millisecond time (skip any ambig logic)\n              inverseRanges.push({\n                start: start,\n                end: viewEnd\n              });\n            }\n\n            return inverseRanges;\n          },\n          sortEventSegs: function sortEventSegs(segs) {\n            segs.sort(proxy(this, 'compareEventSegs'));\n          },\n          // A cmp function for determining which segments should take visual priority\n          compareEventSegs: function compareEventSegs(seg1, seg2) {\n            return seg1.eventStartMS - seg2.eventStartMS || // earlier events go first\n            seg2.eventDurationMS - seg1.eventDurationMS || // tie? longer events go first\n            seg2.event.allDay - seg1.event.allDay || // tie? put all-day events first (booleans cast to 0/1)\n            compareByFieldSpecs(seg1.event, seg2.event, this.view.eventOrderSpecs);\n          }\n        });\n        /* Utilities\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n        function pluckEventDateProps(event) {\n          return {\n            start: event.start.clone(),\n            end: event.end ? event.end.clone() : null,\n            allDay: event.allDay // keep it the same\n\n          };\n        }\n\n        FC.pluckEventDateProps = pluckEventDateProps;\n\n        function isBgEvent(event) {\n          // returns true if background OR inverse-background\n          var rendering = getEventRendering(event);\n          return rendering === 'background' || rendering === 'inverse-background';\n        }\n\n        FC.isBgEvent = isBgEvent; // export\n\n        function isInverseBgEvent(event) {\n          return getEventRendering(event) === 'inverse-background';\n        }\n\n        function getEventRendering(event) {\n          return firstDefined((event.source || {}).rendering, event.rendering);\n        }\n\n        function groupEventsById(events) {\n          var eventsById = {};\n          var i, event;\n\n          for (i = 0; i < events.length; i++) {\n            event = events[i];\n            (eventsById[event._id] || (eventsById[event._id] = [])).push(event);\n          }\n\n          return eventsById;\n        } // A cmp function for determining which non-inverted \"ranges\" (see above) happen earlier\n\n\n        function compareRanges(range1, range2) {\n          return range1.start - range2.start; // earlier ranges go first\n        }\n        /* External-Dragging-Element Data\n        ----------------------------------------------------------------------------------------------------------------------*/\n        // Require all HTML5 data-* attributes used by FullCalendar to have this prefix.\n        // A value of '' will query attributes like data-event. A value of 'fc' will query attributes like data-fc-event.\n\n\n        FC.dataAttrPrefix = ''; // Given a jQuery element that might represent a dragged FullCalendar event, returns an intermediate data structure\n        // to be used for Event Object creation.\n        // A defined `.eventProps`, even when empty, indicates that an event should be created.\n\n        function getDraggedElMeta(el) {\n          var prefix = FC.dataAttrPrefix;\n          var eventProps; // properties for creating the event, not related to date/time\n\n          var startTime; // a Duration\n\n          var duration;\n          var stick;\n\n          if (prefix) {\n            prefix += '-';\n          }\n\n          eventProps = el.data(prefix + 'event') || null;\n\n          if (eventProps) {\n            if (typeof eventProps === 'object') {\n              eventProps = $.extend({}, eventProps); // make a copy\n            } else {\n              // something like 1 or true. still signal event creation\n              eventProps = {};\n            } // pluck special-cased date/time properties\n\n\n            startTime = eventProps.start;\n\n            if (startTime == null) {\n              startTime = eventProps.time;\n            } // accept 'time' as well\n\n\n            duration = eventProps.duration;\n            stick = eventProps.stick;\n            delete eventProps.start;\n            delete eventProps.time;\n            delete eventProps.duration;\n            delete eventProps.stick;\n          } // fallback to standalone attribute values for each of the date/time properties\n\n\n          if (startTime == null) {\n            startTime = el.data(prefix + 'start');\n          }\n\n          if (startTime == null) {\n            startTime = el.data(prefix + 'time');\n          } // accept 'time' as well\n\n\n          if (duration == null) {\n            duration = el.data(prefix + 'duration');\n          }\n\n          if (stick == null) {\n            stick = el.data(prefix + 'stick');\n          } // massage into correct data types\n\n\n          startTime = startTime != null ? moment.duration(startTime) : null;\n          duration = duration != null ? moment.duration(duration) : null;\n          stick = Boolean(stick);\n          return {\n            eventProps: eventProps,\n            startTime: startTime,\n            duration: duration,\n            stick: stick\n          };\n        }\n\n        ;\n        ;\n        /*\n        A set of rendering and date-related methods for a visual component comprised of one or more rows of day columns.\n        Prerequisite: the object being mixed into needs to be a *Grid*\n        */\n\n        var DayTableMixin = FC.DayTableMixin = {\n          breakOnWeeks: false,\n          // should create a new row for each week?\n          dayDates: null,\n          // whole-day dates for each column. left to right\n          dayIndices: null,\n          // for each day from start, the offset\n          daysPerRow: null,\n          rowCnt: null,\n          colCnt: null,\n          colHeadFormat: null,\n          // Populates internal variables used for date calculation and rendering\n          updateDayTable: function updateDayTable() {\n            var view = this.view;\n            var date = this.start.clone();\n            var dayIndex = -1;\n            var dayIndices = [];\n            var dayDates = [];\n            var daysPerRow;\n            var firstDay;\n            var rowCnt;\n\n            while (date.isBefore(this.end)) {\n              // loop each day from start to end\n              if (view.isHiddenDay(date)) {\n                dayIndices.push(dayIndex + 0.5); // mark that it's between indices\n              } else {\n                dayIndex++;\n                dayIndices.push(dayIndex);\n                dayDates.push(date.clone());\n              }\n\n              date.add(1, 'days');\n            }\n\n            if (this.breakOnWeeks) {\n              // count columns until the day-of-week repeats\n              firstDay = dayDates[0].day();\n\n              for (daysPerRow = 1; daysPerRow < dayDates.length; daysPerRow++) {\n                if (dayDates[daysPerRow].day() == firstDay) {\n                  break;\n                }\n              }\n\n              rowCnt = Math.ceil(dayDates.length / daysPerRow);\n            } else {\n              rowCnt = 1;\n              daysPerRow = dayDates.length;\n            }\n\n            this.dayDates = dayDates;\n            this.dayIndices = dayIndices;\n            this.daysPerRow = daysPerRow;\n            this.rowCnt = rowCnt;\n            this.updateDayTableCols();\n          },\n          // Computes and assigned the colCnt property and updates any options that may be computed from it\n          updateDayTableCols: function updateDayTableCols() {\n            this.colCnt = this.computeColCnt();\n            this.colHeadFormat = this.view.opt('columnFormat') || this.computeColHeadFormat();\n          },\n          // Determines how many columns there should be in the table\n          computeColCnt: function computeColCnt() {\n            return this.daysPerRow;\n          },\n          // Computes the ambiguously-timed moment for the given cell\n          getCellDate: function getCellDate(row, col) {\n            return this.dayDates[this.getCellDayIndex(row, col)].clone();\n          },\n          // Computes the ambiguously-timed date range for the given cell\n          getCellRange: function getCellRange(row, col) {\n            var start = this.getCellDate(row, col);\n            var end = start.clone().add(1, 'days');\n            return {\n              start: start,\n              end: end\n            };\n          },\n          // Returns the number of day cells, chronologically, from the first of the grid (0-based)\n          getCellDayIndex: function getCellDayIndex(row, col) {\n            return row * this.daysPerRow + this.getColDayIndex(col);\n          },\n          // Returns the numner of day cells, chronologically, from the first cell in *any given row*\n          getColDayIndex: function getColDayIndex(col) {\n            if (this.isRTL) {\n              return this.colCnt - 1 - col;\n            } else {\n              return col;\n            }\n          },\n          // Given a date, returns its chronolocial cell-index from the first cell of the grid.\n          // If the date lies between cells (because of hiddenDays), returns a floating-point value between offsets.\n          // If before the first offset, returns a negative number.\n          // If after the last offset, returns an offset past the last cell offset.\n          // Only works for *start* dates of cells. Will not work for exclusive end dates for cells.\n          getDateDayIndex: function getDateDayIndex(date) {\n            var dayIndices = this.dayIndices;\n            var dayOffset = date.diff(this.start, 'days');\n\n            if (dayOffset < 0) {\n              return dayIndices[0] - 1;\n            } else if (dayOffset >= dayIndices.length) {\n              return dayIndices[dayIndices.length - 1] + 1;\n            } else {\n              return dayIndices[dayOffset];\n            }\n          },\n\n          /* Options\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Computes a default column header formatting string if `colFormat` is not explicitly defined\n          computeColHeadFormat: function computeColHeadFormat() {\n            // if more than one week row, or if there are a lot of columns with not much space,\n            // put just the day numbers will be in each cell\n            if (this.rowCnt > 1 || this.colCnt > 10) {\n              return 'ddd'; // \"Sat\"\n            } // multiple days, so full single date string WON'T be in title text\n            else if (this.colCnt > 1) {\n                return this.view.opt('dayOfMonthFormat'); // \"Sat 12/10\"\n              } // single day, so full single date string will probably be in title text\n              else {\n                  return 'dddd'; // \"Saturday\"\n                }\n          },\n\n          /* Slicing\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Slices up a date range into a segment for every week-row it intersects with\n          sliceRangeByRow: function sliceRangeByRow(range) {\n            var daysPerRow = this.daysPerRow;\n            var normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold\n\n            var rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index\n\n            var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index\n\n            var segs = [];\n            var row;\n            var rowFirst, rowLast; // inclusive day-index range for current row\n\n            var segFirst, segLast; // inclusive day-index range for segment\n\n            for (row = 0; row < this.rowCnt; row++) {\n              rowFirst = row * daysPerRow;\n              rowLast = rowFirst + daysPerRow - 1; // intersect segment's offset range with the row's\n\n              segFirst = Math.max(rangeFirst, rowFirst);\n              segLast = Math.min(rangeLast, rowLast); // deal with in-between indices\n\n              segFirst = Math.ceil(segFirst); // in-between starts round to next cell\n\n              segLast = Math.floor(segLast); // in-between ends round to prev cell\n\n              if (segFirst <= segLast) {\n                // was there any intersection with the current row?\n                segs.push({\n                  row: row,\n                  // normalize to start of row\n                  firstRowDayIndex: segFirst - rowFirst,\n                  lastRowDayIndex: segLast - rowFirst,\n                  // must be matching integers to be the segment's start/end\n                  isStart: segFirst === rangeFirst,\n                  isEnd: segLast === rangeLast\n                });\n              }\n            }\n\n            return segs;\n          },\n          // Slices up a date range into a segment for every day-cell it intersects with.\n          // TODO: make more DRY with sliceRangeByRow somehow.\n          sliceRangeByDay: function sliceRangeByDay(range) {\n            var daysPerRow = this.daysPerRow;\n            var normalRange = this.view.computeDayRange(range); // make whole-day range, considering nextDayThreshold\n\n            var rangeFirst = this.getDateDayIndex(normalRange.start); // inclusive first index\n\n            var rangeLast = this.getDateDayIndex(normalRange.end.clone().subtract(1, 'days')); // inclusive last index\n\n            var segs = [];\n            var row;\n            var rowFirst, rowLast; // inclusive day-index range for current row\n\n            var i;\n            var segFirst, segLast; // inclusive day-index range for segment\n\n            for (row = 0; row < this.rowCnt; row++) {\n              rowFirst = row * daysPerRow;\n              rowLast = rowFirst + daysPerRow - 1;\n\n              for (i = rowFirst; i <= rowLast; i++) {\n                // intersect segment's offset range with the row's\n                segFirst = Math.max(rangeFirst, i);\n                segLast = Math.min(rangeLast, i); // deal with in-between indices\n\n                segFirst = Math.ceil(segFirst); // in-between starts round to next cell\n\n                segLast = Math.floor(segLast); // in-between ends round to prev cell\n\n                if (segFirst <= segLast) {\n                  // was there any intersection with the current row?\n                  segs.push({\n                    row: row,\n                    // normalize to start of row\n                    firstRowDayIndex: segFirst - rowFirst,\n                    lastRowDayIndex: segLast - rowFirst,\n                    // must be matching integers to be the segment's start/end\n                    isStart: segFirst === rangeFirst,\n                    isEnd: segLast === rangeLast\n                  });\n                }\n              }\n            }\n\n            return segs;\n          },\n\n          /* Header Rendering\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderHeadHtml: function renderHeadHtml() {\n            var view = this.view;\n            return '' + '<div class=\"fc-row ' + view.widgetHeaderClass + '\">' + '<table>' + '<thead>' + this.renderHeadTrHtml() + '</thead>' + '</table>' + '</div>';\n          },\n          renderHeadIntroHtml: function renderHeadIntroHtml() {\n            return this.renderIntroHtml(); // fall back to generic\n          },\n          renderHeadTrHtml: function renderHeadTrHtml() {\n            return '' + '<tr>' + (this.isRTL ? '' : this.renderHeadIntroHtml()) + this.renderHeadDateCellsHtml() + (this.isRTL ? this.renderHeadIntroHtml() : '') + '</tr>';\n          },\n          renderHeadDateCellsHtml: function renderHeadDateCellsHtml() {\n            var htmls = [];\n            var col, date;\n\n            for (col = 0; col < this.colCnt; col++) {\n              date = this.getCellDate(0, col);\n              htmls.push(this.renderHeadDateCellHtml(date));\n            }\n\n            return htmls.join('');\n          },\n          // TODO: when internalApiVersion, accept an object for HTML attributes\n          // (colspan should be no different)\n          renderHeadDateCellHtml: function renderHeadDateCellHtml(date, colspan, otherAttrs) {\n            var view = this.view;\n            var isDateValid = isDateWithinRange(date, view.activeRange); // TODO: called too frequently. cache somehow.\n\n            var classNames = ['fc-day-header', view.widgetHeaderClass];\n            var innerHtml = htmlEscape(date.format(this.colHeadFormat)); // if only one row of days, the classNames on the header can represent the specific days beneath\n\n            if (this.rowCnt === 1) {\n              classNames = classNames.concat( // includes the day-of-week class\n              // noThemeHighlight=true (don't highlight the header)\n              this.getDayClasses(date, true));\n            } else {\n              classNames.push('fc-' + dayIDs[date.day()]); // only add the day-of-week class\n            }\n\n            return '' + '<th class=\"' + classNames.join(' ') + '\"' + ((isDateValid && this.rowCnt) === 1 ? ' data-date=\"' + date.format('YYYY-MM-DD') + '\"' : '') + (colspan > 1 ? ' colspan=\"' + colspan + '\"' : '') + (otherAttrs ? ' ' + otherAttrs : '') + '>' + (isDateValid ? // don't make a link if the heading could represent multiple days, or if there's only one day (forceOff)\n            view.buildGotoAnchorHtml({\n              date: date,\n              forceOff: this.rowCnt > 1 || this.colCnt === 1\n            }, innerHtml) : // if not valid, display text, but no link\n            innerHtml) + '</th>';\n          },\n\n          /* Background Rendering\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderBgTrHtml: function renderBgTrHtml(row) {\n            return '' + '<tr>' + (this.isRTL ? '' : this.renderBgIntroHtml(row)) + this.renderBgCellsHtml(row) + (this.isRTL ? this.renderBgIntroHtml(row) : '') + '</tr>';\n          },\n          renderBgIntroHtml: function renderBgIntroHtml(row) {\n            return this.renderIntroHtml(); // fall back to generic\n          },\n          renderBgCellsHtml: function renderBgCellsHtml(row) {\n            var htmls = [];\n            var col, date;\n\n            for (col = 0; col < this.colCnt; col++) {\n              date = this.getCellDate(row, col);\n              htmls.push(this.renderBgCellHtml(date));\n            }\n\n            return htmls.join('');\n          },\n          renderBgCellHtml: function renderBgCellHtml(date, otherAttrs) {\n            var view = this.view;\n            var isDateValid = isDateWithinRange(date, view.activeRange); // TODO: called too frequently. cache somehow.\n\n            var classes = this.getDayClasses(date);\n            classes.unshift('fc-day', view.widgetContentClass);\n            return '<td class=\"' + classes.join(' ') + '\"' + (isDateValid ? ' data-date=\"' + date.format('YYYY-MM-DD') + '\"' : // if date has a time, won't format it\n            '') + (otherAttrs ? ' ' + otherAttrs : '') + '></td>';\n          },\n\n          /* Generic\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Generates the default HTML intro for any row. User classes should override\n          renderIntroHtml: function renderIntroHtml() {},\n          // TODO: a generic method for dealing with <tr>, RTL, intro\n          // when increment internalApiVersion\n          // wrapTr (scheduler)\n\n          /* Utils\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Applies the generic \"intro\" and \"outro\" HTML to the given cells.\n          // Intro means the leftmost cell when the calendar is LTR and the rightmost cell when RTL. Vice-versa for outro.\n          bookendCells: function bookendCells(trEl) {\n            var introHtml = this.renderIntroHtml();\n\n            if (introHtml) {\n              if (this.isRTL) {\n                trEl.append(introHtml);\n              } else {\n                trEl.prepend(introHtml);\n              }\n            }\n          }\n        };\n        ;\n        ;\n        /* A component that renders a grid of whole-days that runs horizontally. There can be multiple rows, one per week.\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n        var DayGrid = FC.DayGrid = Grid.extend(DayTableMixin, {\n          numbersVisible: false,\n          // should render a row for day/week numbers? set by outside view. TODO: make internal\n          bottomCoordPadding: 0,\n          // hack for extending the hit area for the last row of the coordinate grid\n          rowEls: null,\n          // set of fake row elements\n          cellEls: null,\n          // set of whole-day elements comprising the row's background\n          helperEls: null,\n          // set of cell skeleton elements for rendering the mock event \"helper\"\n          rowCoordCache: null,\n          colCoordCache: null,\n          // Renders the rows and columns into the component's `this.el`, which should already be assigned.\n          // isRigid determins whether the individual rows should ignore the contents and be a constant height.\n          // Relies on the view's colCnt and rowCnt. In the future, this component should probably be self-sufficient.\n          renderDates: function renderDates(isRigid) {\n            var view = this.view;\n            var rowCnt = this.rowCnt;\n            var colCnt = this.colCnt;\n            var html = '';\n            var row;\n            var col;\n\n            for (row = 0; row < rowCnt; row++) {\n              html += this.renderDayRowHtml(row, isRigid);\n            }\n\n            this.el.html(html);\n            this.rowEls = this.el.find('.fc-row');\n            this.cellEls = this.el.find('.fc-day, .fc-disabled-day');\n            this.rowCoordCache = new CoordCache({\n              els: this.rowEls,\n              isVertical: true\n            });\n            this.colCoordCache = new CoordCache({\n              els: this.cellEls.slice(0, this.colCnt),\n              // only the first row\n              isHorizontal: true\n            }); // trigger dayRender with each cell's element\n\n            for (row = 0; row < rowCnt; row++) {\n              for (col = 0; col < colCnt; col++) {\n                view.publiclyTrigger('dayRender', null, this.getCellDate(row, col), this.getCellEl(row, col));\n              }\n            }\n          },\n          unrenderDates: function unrenderDates() {\n            this.removeSegPopover();\n          },\n          renderBusinessHours: function renderBusinessHours() {\n            var segs = this.buildBusinessHourSegs(true); // wholeDay=true\n\n            this.renderFill('businessHours', segs, 'bgevent');\n          },\n          unrenderBusinessHours: function unrenderBusinessHours() {\n            this.unrenderFill('businessHours');\n          },\n          // Generates the HTML for a single row, which is a div that wraps a table.\n          // `row` is the row number.\n          renderDayRowHtml: function renderDayRowHtml(row, isRigid) {\n            var view = this.view;\n            var classes = ['fc-row', 'fc-week', view.widgetContentClass];\n\n            if (isRigid) {\n              classes.push('fc-rigid');\n            }\n\n            return '' + '<div class=\"' + classes.join(' ') + '\">' + '<div class=\"fc-bg\">' + '<table>' + this.renderBgTrHtml(row) + '</table>' + '</div>' + '<div class=\"fc-content-skeleton\">' + '<table>' + (this.numbersVisible ? '<thead>' + this.renderNumberTrHtml(row) + '</thead>' : '') + '</table>' + '</div>' + '</div>';\n          },\n\n          /* Grid Number Rendering\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderNumberTrHtml: function renderNumberTrHtml(row) {\n            return '' + '<tr>' + (this.isRTL ? '' : this.renderNumberIntroHtml(row)) + this.renderNumberCellsHtml(row) + (this.isRTL ? this.renderNumberIntroHtml(row) : '') + '</tr>';\n          },\n          renderNumberIntroHtml: function renderNumberIntroHtml(row) {\n            return this.renderIntroHtml();\n          },\n          renderNumberCellsHtml: function renderNumberCellsHtml(row) {\n            var htmls = [];\n            var col, date;\n\n            for (col = 0; col < this.colCnt; col++) {\n              date = this.getCellDate(row, col);\n              htmls.push(this.renderNumberCellHtml(date));\n            }\n\n            return htmls.join('');\n          },\n          // Generates the HTML for the <td>s of the \"number\" row in the DayGrid's content skeleton.\n          // The number row will only exist if either day numbers or week numbers are turned on.\n          renderNumberCellHtml: function renderNumberCellHtml(date) {\n            var view = this.view;\n            var html = '';\n            var isDateValid = isDateWithinRange(date, view.activeRange); // TODO: called too frequently. cache somehow.\n\n            var isDayNumberVisible = view.dayNumbersVisible && isDateValid;\n            var classes;\n            var weekCalcFirstDoW;\n\n            if (!isDayNumberVisible && !view.cellWeekNumbersVisible) {\n              // no numbers in day cell (week number must be along the side)\n              return '<td/>'; //  will create an empty space above events :(\n            }\n\n            classes = this.getDayClasses(date);\n            classes.unshift('fc-day-top');\n\n            if (view.cellWeekNumbersVisible) {\n              // To determine the day of week number change under ISO, we cannot\n              // rely on moment.js methods such as firstDayOfWeek() or weekday(),\n              // because they rely on the locale's dow (possibly overridden by\n              // our firstDay option), which may not be Monday. We cannot change\n              // dow, because that would affect the calendar start day as well.\n              if (date._locale._fullCalendar_weekCalc === 'ISO') {\n                weekCalcFirstDoW = 1; // Monday by ISO 8601 definition\n              } else {\n                weekCalcFirstDoW = date._locale.firstDayOfWeek();\n              }\n            }\n\n            html += '<td class=\"' + classes.join(' ') + '\"' + (isDateValid ? ' data-date=\"' + date.format() + '\"' : '') + '>';\n\n            if (view.cellWeekNumbersVisible && date.day() == weekCalcFirstDoW) {\n              html += view.buildGotoAnchorHtml({\n                date: date,\n                type: 'week'\n              }, {\n                'class': 'fc-week-number'\n              }, date.format('w') // inner HTML\n              );\n            }\n\n            if (isDayNumberVisible) {\n              html += view.buildGotoAnchorHtml(date, {\n                'class': 'fc-day-number'\n              }, date.date() // inner HTML\n              );\n            }\n\n            html += '</td>';\n            return html;\n          },\n\n          /* Options\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Computes a default event time formatting string if `timeFormat` is not explicitly defined\n          computeEventTimeFormat: function computeEventTimeFormat() {\n            return this.view.opt('extraSmallTimeFormat'); // like \"6p\" or \"6:30p\"\n          },\n          // Computes a default `displayEventEnd` value if one is not expliclty defined\n          computeDisplayEventEnd: function computeDisplayEventEnd() {\n            return this.colCnt == 1; // we'll likely have space if there's only one day\n          },\n\n          /* Dates\n          ------------------------------------------------------------------------------------------------------------------*/\n          rangeUpdated: function rangeUpdated() {\n            this.updateDayTable();\n          },\n          // Slices up the given span (unzoned start/end with other misc data) into an array of segments\n          spanToSegs: function spanToSegs(span) {\n            var segs = this.sliceRangeByRow(span);\n            var i, seg;\n\n            for (i = 0; i < segs.length; i++) {\n              seg = segs[i];\n\n              if (this.isRTL) {\n                seg.leftCol = this.daysPerRow - 1 - seg.lastRowDayIndex;\n                seg.rightCol = this.daysPerRow - 1 - seg.firstRowDayIndex;\n              } else {\n                seg.leftCol = seg.firstRowDayIndex;\n                seg.rightCol = seg.lastRowDayIndex;\n              }\n            }\n\n            return segs;\n          },\n\n          /* Hit System\n          ------------------------------------------------------------------------------------------------------------------*/\n          prepareHits: function prepareHits() {\n            this.colCoordCache.build();\n            this.rowCoordCache.build();\n            this.rowCoordCache.bottoms[this.rowCnt - 1] += this.bottomCoordPadding; // hack\n          },\n          releaseHits: function releaseHits() {\n            this.colCoordCache.clear();\n            this.rowCoordCache.clear();\n          },\n          queryHit: function queryHit(leftOffset, topOffset) {\n            if (this.colCoordCache.isLeftInBounds(leftOffset) && this.rowCoordCache.isTopInBounds(topOffset)) {\n              var col = this.colCoordCache.getHorizontalIndex(leftOffset);\n              var row = this.rowCoordCache.getVerticalIndex(topOffset);\n\n              if (row != null && col != null) {\n                return this.getCellHit(row, col);\n              }\n            }\n          },\n          getHitSpan: function getHitSpan(hit) {\n            return this.getCellRange(hit.row, hit.col);\n          },\n          getHitEl: function getHitEl(hit) {\n            return this.getCellEl(hit.row, hit.col);\n          },\n\n          /* Cell System\n          ------------------------------------------------------------------------------------------------------------------*/\n          // FYI: the first column is the leftmost column, regardless of date\n          getCellHit: function getCellHit(row, col) {\n            return {\n              row: row,\n              col: col,\n              component: this,\n              // needed unfortunately :(\n              left: this.colCoordCache.getLeftOffset(col),\n              right: this.colCoordCache.getRightOffset(col),\n              top: this.rowCoordCache.getTopOffset(row),\n              bottom: this.rowCoordCache.getBottomOffset(row)\n            };\n          },\n          getCellEl: function getCellEl(row, col) {\n            return this.cellEls.eq(row * this.colCnt + col);\n          },\n\n          /* Event Drag Visualization\n          ------------------------------------------------------------------------------------------------------------------*/\n          // TODO: move to DayGrid.event, similar to what we did with Grid's drag methods\n          // Renders a visual indication of an event or external element being dragged.\n          // `eventLocation` has zoned start and end (optional)\n          renderDrag: function renderDrag(eventLocation, seg) {\n            var eventSpans = this.eventToSpans(eventLocation);\n            var i; // always render a highlight underneath\n\n            for (i = 0; i < eventSpans.length; i++) {\n              this.renderHighlight(eventSpans[i]);\n            } // if a segment from the same calendar but another component is being dragged, render a helper event\n\n\n            if (seg && seg.component !== this) {\n              return this.renderEventLocationHelper(eventLocation, seg); // returns mock event elements\n            }\n          },\n          // Unrenders any visual indication of a hovering event\n          unrenderDrag: function unrenderDrag() {\n            this.unrenderHighlight();\n            this.unrenderHelper();\n          },\n\n          /* Event Resize Visualization\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders a visual indication of an event being resized\n          renderEventResize: function renderEventResize(eventLocation, seg) {\n            var eventSpans = this.eventToSpans(eventLocation);\n            var i;\n\n            for (i = 0; i < eventSpans.length; i++) {\n              this.renderHighlight(eventSpans[i]);\n            }\n\n            return this.renderEventLocationHelper(eventLocation, seg); // returns mock event elements\n          },\n          // Unrenders a visual indication of an event being resized\n          unrenderEventResize: function unrenderEventResize() {\n            this.unrenderHighlight();\n            this.unrenderHelper();\n          },\n\n          /* Event Helper\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders a mock \"helper\" event. `sourceSeg` is the associated internal segment object. It can be null.\n          renderHelper: function renderHelper(event, sourceSeg) {\n            var helperNodes = [];\n            var segs = this.eventToSegs(event);\n            var rowStructs;\n            segs = this.renderFgSegEls(segs); // assigns each seg's el and returns a subset of segs that were rendered\n\n            rowStructs = this.renderSegRows(segs); // inject each new event skeleton into each associated row\n\n            this.rowEls.each(function (row, rowNode) {\n              var rowEl = $(rowNode); // the .fc-row\n\n              var skeletonEl = $('<div class=\"fc-helper-skeleton\"><table/></div>'); // will be absolutely positioned\n\n              var skeletonTop; // If there is an original segment, match the top position. Otherwise, put it at the row's top level\n\n              if (sourceSeg && sourceSeg.row === row) {\n                skeletonTop = sourceSeg.el.position().top;\n              } else {\n                skeletonTop = rowEl.find('.fc-content-skeleton tbody').position().top;\n              }\n\n              skeletonEl.css('top', skeletonTop).find('table').append(rowStructs[row].tbodyEl);\n              rowEl.append(skeletonEl);\n              helperNodes.push(skeletonEl[0]);\n            });\n            return (// must return the elements rendered\n              this.helperEls = $(helperNodes) // array -> jQuery set\n\n            );\n          },\n          // Unrenders any visual indication of a mock helper event\n          unrenderHelper: function unrenderHelper() {\n            if (this.helperEls) {\n              this.helperEls.remove();\n              this.helperEls = null;\n            }\n          },\n\n          /* Fill System (highlight, background events, business hours)\n          ------------------------------------------------------------------------------------------------------------------*/\n          fillSegTag: 'td',\n          // override the default tag name\n          // Renders a set of rectangles over the given segments of days.\n          // Only returns segments that successfully rendered.\n          renderFill: function renderFill(type, segs, className) {\n            var nodes = [];\n            var i, seg;\n            var skeletonEl;\n            segs = this.renderFillSegEls(type, segs); // assignes `.el` to each seg. returns successfully rendered segs\n\n            for (i = 0; i < segs.length; i++) {\n              seg = segs[i];\n              skeletonEl = this.renderFillRow(type, seg, className);\n              this.rowEls.eq(seg.row).append(skeletonEl);\n              nodes.push(skeletonEl[0]);\n            }\n\n            this.elsByFill[type] = $(nodes);\n            return segs;\n          },\n          // Generates the HTML needed for one row of a fill. Requires the seg's el to be rendered.\n          renderFillRow: function renderFillRow(type, seg, className) {\n            var colCnt = this.colCnt;\n            var startCol = seg.leftCol;\n            var endCol = seg.rightCol + 1;\n            var skeletonEl;\n            var trEl;\n            className = className || type.toLowerCase();\n            skeletonEl = $('<div class=\"fc-' + className + '-skeleton\">' + '<table><tr/></table>' + '</div>');\n            trEl = skeletonEl.find('tr');\n\n            if (startCol > 0) {\n              trEl.append('<td colspan=\"' + startCol + '\"/>');\n            }\n\n            trEl.append(seg.el.attr('colspan', endCol - startCol));\n\n            if (endCol < colCnt) {\n              trEl.append('<td colspan=\"' + (colCnt - endCol) + '\"/>');\n            }\n\n            this.bookendCells(trEl);\n            return skeletonEl;\n          }\n        });\n        ;\n        ;\n        /* Event-rendering methods for the DayGrid class\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n        DayGrid.mixin({\n          rowStructs: null,\n          // an array of objects, each holding information about a row's foreground event-rendering\n          // Unrenders all events currently rendered on the grid\n          unrenderEvents: function unrenderEvents() {\n            this.removeSegPopover(); // removes the \"more..\" events popover\n\n            Grid.prototype.unrenderEvents.apply(this, arguments); // calls the super-method\n          },\n          // Retrieves all rendered segment objects currently rendered on the grid\n          getEventSegs: function getEventSegs() {\n            return Grid.prototype.getEventSegs.call(this) // get the segments from the super-method\n            .concat(this.popoverSegs || []); // append the segments from the \"more...\" popover\n          },\n          // Renders the given background event segments onto the grid\n          renderBgSegs: function renderBgSegs(segs) {\n            // don't render timed background events\n            var allDaySegs = $.grep(segs, function (seg) {\n              return seg.event.allDay;\n            });\n            return Grid.prototype.renderBgSegs.call(this, allDaySegs); // call the super-method\n          },\n          // Renders the given foreground event segments onto the grid\n          renderFgSegs: function renderFgSegs(segs) {\n            var rowStructs; // render an `.el` on each seg\n            // returns a subset of the segs. segs that were actually rendered\n\n            segs = this.renderFgSegEls(segs);\n            rowStructs = this.rowStructs = this.renderSegRows(segs); // append to each row's content skeleton\n\n            this.rowEls.each(function (i, rowNode) {\n              $(rowNode).find('.fc-content-skeleton > table').append(rowStructs[i].tbodyEl);\n            });\n            return segs; // return only the segs that were actually rendered\n          },\n          // Unrenders all currently rendered foreground event segments\n          unrenderFgSegs: function unrenderFgSegs() {\n            var rowStructs = this.rowStructs || [];\n            var rowStruct;\n\n            while (rowStruct = rowStructs.pop()) {\n              rowStruct.tbodyEl.remove();\n            }\n\n            this.rowStructs = null;\n          },\n          // Uses the given events array to generate <tbody> elements that should be appended to each row's content skeleton.\n          // Returns an array of rowStruct objects (see the bottom of `renderSegRow`).\n          // PRECONDITION: each segment shoud already have a rendered and assigned `.el`\n          renderSegRows: function renderSegRows(segs) {\n            var rowStructs = [];\n            var segRows;\n            var row;\n            segRows = this.groupSegRows(segs); // group into nested arrays\n            // iterate each row of segment groupings\n\n            for (row = 0; row < segRows.length; row++) {\n              rowStructs.push(this.renderSegRow(row, segRows[row]));\n            }\n\n            return rowStructs;\n          },\n          // Builds the HTML to be used for the default element for an individual segment\n          fgSegHtml: function fgSegHtml(seg, disableResizing) {\n            var view = this.view;\n            var event = seg.event;\n            var isDraggable = view.isEventDraggable(event);\n            var isResizableFromStart = !disableResizing && event.allDay && seg.isStart && view.isEventResizableFromStart(event);\n            var isResizableFromEnd = !disableResizing && event.allDay && seg.isEnd && view.isEventResizableFromEnd(event);\n            var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);\n            var skinCss = cssToStr(this.getSegSkinCss(seg));\n            var timeHtml = '';\n            var timeText;\n            var titleHtml;\n            classes.unshift('fc-day-grid-event', 'fc-h-event'); // Only display a timed events time if it is the starting segment\n\n            if (seg.isStart) {\n              timeText = this.getEventTimeText(event);\n\n              if (timeText) {\n                timeHtml = '<span class=\"fc-time\">' + htmlEscape(timeText) + '</span>';\n              }\n            }\n\n            titleHtml = '<span class=\"fc-title\">' + (htmlEscape(event.title || '') || '&nbsp;') + // we always want one line of height\n            '</span>';\n            return '<a class=\"' + classes.join(' ') + '\"' + (event.url ? ' href=\"' + htmlEscape(event.url) + '\"' : '') + (skinCss ? ' style=\"' + skinCss + '\"' : '') + '>' + '<div class=\"fc-content\">' + (this.isRTL ? titleHtml + ' ' + timeHtml : // put a natural space in between\n            timeHtml + ' ' + titleHtml //\n            ) + '</div>' + (isResizableFromStart ? '<div class=\"fc-resizer fc-start-resizer\" />' : '') + (isResizableFromEnd ? '<div class=\"fc-resizer fc-end-resizer\" />' : '') + '</a>';\n          },\n          // Given a row # and an array of segments all in the same row, render a <tbody> element, a skeleton that contains\n          // the segments. Returns object with a bunch of internal data about how the render was calculated.\n          // NOTE: modifies rowSegs\n          renderSegRow: function renderSegRow(row, rowSegs) {\n            var colCnt = this.colCnt;\n            var segLevels = this.buildSegLevels(rowSegs); // group into sub-arrays of levels\n\n            var levelCnt = Math.max(1, segLevels.length); // ensure at least one level\n\n            var tbody = $('<tbody/>');\n            var segMatrix = []; // lookup for which segments are rendered into which level+col cells\n\n            var cellMatrix = []; // lookup for all <td> elements of the level+col matrix\n\n            var loneCellMatrix = []; // lookup for <td> elements that only take up a single column\n\n            var i, levelSegs;\n            var col;\n            var tr;\n            var j, seg;\n            var td; // populates empty cells from the current column (`col`) to `endCol`\n\n            function emptyCellsUntil(endCol) {\n              while (col < endCol) {\n                // try to grab a cell from the level above and extend its rowspan. otherwise, create a fresh cell\n                td = (loneCellMatrix[i - 1] || [])[col];\n\n                if (td) {\n                  td.attr('rowspan', parseInt(td.attr('rowspan') || 1, 10) + 1);\n                } else {\n                  td = $('<td/>');\n                  tr.append(td);\n                }\n\n                cellMatrix[i][col] = td;\n                loneCellMatrix[i][col] = td;\n                col++;\n              }\n            }\n\n            for (i = 0; i < levelCnt; i++) {\n              // iterate through all levels\n              levelSegs = segLevels[i];\n              col = 0;\n              tr = $('<tr/>');\n              segMatrix.push([]);\n              cellMatrix.push([]);\n              loneCellMatrix.push([]); // levelCnt might be 1 even though there are no actual levels. protect against this.\n              // this single empty row is useful for styling.\n\n              if (levelSegs) {\n                for (j = 0; j < levelSegs.length; j++) {\n                  // iterate through segments in level\n                  seg = levelSegs[j];\n                  emptyCellsUntil(seg.leftCol); // create a container that occupies or more columns. append the event element.\n\n                  td = $('<td class=\"fc-event-container\"/>').append(seg.el);\n\n                  if (seg.leftCol != seg.rightCol) {\n                    td.attr('colspan', seg.rightCol - seg.leftCol + 1);\n                  } else {\n                    // a single-column segment\n                    loneCellMatrix[i][col] = td;\n                  }\n\n                  while (col <= seg.rightCol) {\n                    cellMatrix[i][col] = td;\n                    segMatrix[i][col] = seg;\n                    col++;\n                  }\n\n                  tr.append(td);\n                }\n              }\n\n              emptyCellsUntil(colCnt); // finish off the row\n\n              this.bookendCells(tr);\n              tbody.append(tr);\n            }\n\n            return {\n              // a \"rowStruct\"\n              row: row,\n              // the row number\n              tbodyEl: tbody,\n              cellMatrix: cellMatrix,\n              segMatrix: segMatrix,\n              segLevels: segLevels,\n              segs: rowSegs\n            };\n          },\n          // Stacks a flat array of segments, which are all assumed to be in the same row, into subarrays of vertical levels.\n          // NOTE: modifies segs\n          buildSegLevels: function buildSegLevels(segs) {\n            var levels = [];\n            var i, seg;\n            var j; // Give preference to elements with certain criteria, so they have\n            // a chance to be closer to the top.\n\n            this.sortEventSegs(segs);\n\n            for (i = 0; i < segs.length; i++) {\n              seg = segs[i]; // loop through levels, starting with the topmost, until the segment doesn't collide with other segments\n\n              for (j = 0; j < levels.length; j++) {\n                if (!isDaySegCollision(seg, levels[j])) {\n                  break;\n                }\n              } // `j` now holds the desired subrow index\n\n\n              seg.level = j; // create new level array if needed and append segment\n\n              (levels[j] || (levels[j] = [])).push(seg);\n            } // order segments left-to-right. very important if calendar is RTL\n\n\n            for (j = 0; j < levels.length; j++) {\n              levels[j].sort(compareDaySegCols);\n            }\n\n            return levels;\n          },\n          // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's row\n          groupSegRows: function groupSegRows(segs) {\n            var segRows = [];\n            var i;\n\n            for (i = 0; i < this.rowCnt; i++) {\n              segRows.push([]);\n            }\n\n            for (i = 0; i < segs.length; i++) {\n              segRows[segs[i].row].push(segs[i]);\n            }\n\n            return segRows;\n          }\n        }); // Computes whether two segments' columns collide. They are assumed to be in the same row.\n\n        function isDaySegCollision(seg, otherSegs) {\n          var i, otherSeg;\n\n          for (i = 0; i < otherSegs.length; i++) {\n            otherSeg = otherSegs[i];\n\n            if (otherSeg.leftCol <= seg.rightCol && otherSeg.rightCol >= seg.leftCol) {\n              return true;\n            }\n          }\n\n          return false;\n        } // A cmp function for determining the leftmost event\n\n\n        function compareDaySegCols(a, b) {\n          return a.leftCol - b.leftCol;\n        }\n\n        ;\n        ;\n        /* Methods relate to limiting the number events for a given day on a DayGrid\n        ----------------------------------------------------------------------------------------------------------------------*/\n        // NOTE: all the segs being passed around in here are foreground segs\n\n        DayGrid.mixin({\n          segPopover: null,\n          // the Popover that holds events that can't fit in a cell. null when not visible\n          popoverSegs: null,\n          // an array of segment objects that the segPopover holds. null when not visible\n          removeSegPopover: function removeSegPopover() {\n            if (this.segPopover) {\n              this.segPopover.hide(); // in handler, will call segPopover's removeElement\n            }\n          },\n          // Limits the number of \"levels\" (vertically stacking layers of events) for each row of the grid.\n          // `levelLimit` can be false (don't limit), a number, or true (should be computed).\n          limitRows: function limitRows(levelLimit) {\n            var rowStructs = this.rowStructs || [];\n            var row; // row #\n\n            var rowLevelLimit;\n\n            for (row = 0; row < rowStructs.length; row++) {\n              this.unlimitRow(row);\n\n              if (!levelLimit) {\n                rowLevelLimit = false;\n              } else if (typeof levelLimit === 'number') {\n                rowLevelLimit = levelLimit;\n              } else {\n                rowLevelLimit = this.computeRowLevelLimit(row);\n              }\n\n              if (rowLevelLimit !== false) {\n                this.limitRow(row, rowLevelLimit);\n              }\n            }\n          },\n          // Computes the number of levels a row will accomodate without going outside its bounds.\n          // Assumes the row is \"rigid\" (maintains a constant height regardless of what is inside).\n          // `row` is the row number.\n          computeRowLevelLimit: function computeRowLevelLimit(row) {\n            var rowEl = this.rowEls.eq(row); // the containing \"fake\" row div\n\n            var rowHeight = rowEl.height(); // TODO: cache somehow?\n\n            var trEls = this.rowStructs[row].tbodyEl.children();\n            var i, trEl;\n            var trHeight;\n\n            function iterInnerHeights(i, childNode) {\n              trHeight = Math.max(trHeight, $(childNode).outerHeight());\n            } // Reveal one level <tr> at a time and stop when we find one out of bounds\n\n\n            for (i = 0; i < trEls.length; i++) {\n              trEl = trEls.eq(i).removeClass('fc-limited'); // reset to original state (reveal)\n              // with rowspans>1 and IE8, trEl.outerHeight() would return the height of the largest cell,\n              // so instead, find the tallest inner content element.\n\n              trHeight = 0;\n              trEl.find('> td > :first-child').each(iterInnerHeights);\n\n              if (trEl.position().top + trHeight > rowHeight) {\n                return i;\n              }\n            }\n\n            return false; // should not limit at all\n          },\n          // Limits the given grid row to the maximum number of levels and injects \"more\" links if necessary.\n          // `row` is the row number.\n          // `levelLimit` is a number for the maximum (inclusive) number of levels allowed.\n          limitRow: function limitRow(row, levelLimit) {\n            var _this = this;\n\n            var rowStruct = this.rowStructs[row];\n            var moreNodes = []; // array of \"more\" <a> links and <td> DOM nodes\n\n            var col = 0; // col #, left-to-right (not chronologically)\n\n            var levelSegs; // array of segment objects in the last allowable level, ordered left-to-right\n\n            var cellMatrix; // a matrix (by level, then column) of all <td> jQuery elements in the row\n\n            var limitedNodes; // array of temporarily hidden level <tr> and segment <td> DOM nodes\n\n            var i, seg;\n            var segsBelow; // array of segment objects below `seg` in the current `col`\n\n            var totalSegsBelow; // total number of segments below `seg` in any of the columns `seg` occupies\n\n            var colSegsBelow; // array of segment arrays, below seg, one for each column (offset from segs's first column)\n\n            var td, rowspan;\n            var segMoreNodes; // array of \"more\" <td> cells that will stand-in for the current seg's cell\n\n            var j;\n            var moreTd, moreWrap, moreLink; // Iterates through empty level cells and places \"more\" links inside if need be\n\n            function emptyCellsUntil(endCol) {\n              // goes from current `col` to `endCol`\n              while (col < endCol) {\n                segsBelow = _this.getCellSegs(row, col, levelLimit);\n\n                if (segsBelow.length) {\n                  td = cellMatrix[levelLimit - 1][col];\n                  moreLink = _this.renderMoreLink(row, col, segsBelow);\n                  moreWrap = $('<div/>').append(moreLink);\n                  td.append(moreWrap);\n                  moreNodes.push(moreWrap[0]);\n                }\n\n                col++;\n              }\n            }\n\n            if (levelLimit && levelLimit < rowStruct.segLevels.length) {\n              // is it actually over the limit?\n              levelSegs = rowStruct.segLevels[levelLimit - 1];\n              cellMatrix = rowStruct.cellMatrix;\n              limitedNodes = rowStruct.tbodyEl.children().slice(levelLimit) // get level <tr> elements past the limit\n              .addClass('fc-limited').get(); // hide elements and get a simple DOM-nodes array\n              // iterate though segments in the last allowable level\n\n              for (i = 0; i < levelSegs.length; i++) {\n                seg = levelSegs[i];\n                emptyCellsUntil(seg.leftCol); // process empty cells before the segment\n                // determine *all* segments below `seg` that occupy the same columns\n\n                colSegsBelow = [];\n                totalSegsBelow = 0;\n\n                while (col <= seg.rightCol) {\n                  segsBelow = this.getCellSegs(row, col, levelLimit);\n                  colSegsBelow.push(segsBelow);\n                  totalSegsBelow += segsBelow.length;\n                  col++;\n                }\n\n                if (totalSegsBelow) {\n                  // do we need to replace this segment with one or many \"more\" links?\n                  td = cellMatrix[levelLimit - 1][seg.leftCol]; // the segment's parent cell\n\n                  rowspan = td.attr('rowspan') || 1;\n                  segMoreNodes = []; // make a replacement <td> for each column the segment occupies. will be one for each colspan\n\n                  for (j = 0; j < colSegsBelow.length; j++) {\n                    moreTd = $('<td class=\"fc-more-cell\"/>').attr('rowspan', rowspan);\n                    segsBelow = colSegsBelow[j];\n                    moreLink = this.renderMoreLink(row, seg.leftCol + j, [seg].concat(segsBelow) // count seg as hidden too\n                    );\n                    moreWrap = $('<div/>').append(moreLink);\n                    moreTd.append(moreWrap);\n                    segMoreNodes.push(moreTd[0]);\n                    moreNodes.push(moreTd[0]);\n                  }\n\n                  td.addClass('fc-limited').after($(segMoreNodes)); // hide original <td> and inject replacements\n\n                  limitedNodes.push(td[0]);\n                }\n              }\n\n              emptyCellsUntil(this.colCnt); // finish off the level\n\n              rowStruct.moreEls = $(moreNodes); // for easy undoing later\n\n              rowStruct.limitedEls = $(limitedNodes); // for easy undoing later\n            }\n          },\n          // Reveals all levels and removes all \"more\"-related elements for a grid's row.\n          // `row` is a row number.\n          unlimitRow: function unlimitRow(row) {\n            var rowStruct = this.rowStructs[row];\n\n            if (rowStruct.moreEls) {\n              rowStruct.moreEls.remove();\n              rowStruct.moreEls = null;\n            }\n\n            if (rowStruct.limitedEls) {\n              rowStruct.limitedEls.removeClass('fc-limited');\n              rowStruct.limitedEls = null;\n            }\n          },\n          // Renders an <a> element that represents hidden event element for a cell.\n          // Responsible for attaching click handler as well.\n          renderMoreLink: function renderMoreLink(row, col, hiddenSegs) {\n            var _this = this;\n\n            var view = this.view;\n            return $('<a class=\"fc-more\"/>').text(this.getMoreLinkText(hiddenSegs.length)).on('click', function (ev) {\n              var clickOption = view.opt('eventLimitClick');\n\n              var date = _this.getCellDate(row, col);\n\n              var moreEl = $(this);\n\n              var dayEl = _this.getCellEl(row, col);\n\n              var allSegs = _this.getCellSegs(row, col); // rescope the segments to be within the cell's date\n\n\n              var reslicedAllSegs = _this.resliceDaySegs(allSegs, date);\n\n              var reslicedHiddenSegs = _this.resliceDaySegs(hiddenSegs, date);\n\n              if (typeof clickOption === 'function') {\n                // the returned value can be an atomic option\n                clickOption = view.publiclyTrigger('eventLimitClick', null, {\n                  date: date,\n                  dayEl: dayEl,\n                  moreEl: moreEl,\n                  segs: reslicedAllSegs,\n                  hiddenSegs: reslicedHiddenSegs\n                }, ev);\n              }\n\n              if (clickOption === 'popover') {\n                _this.showSegPopover(row, col, moreEl, reslicedAllSegs);\n              } else if (typeof clickOption === 'string') {\n                // a view name\n                view.calendar.zoomTo(date, clickOption);\n              }\n            });\n          },\n          // Reveals the popover that displays all events within a cell\n          showSegPopover: function showSegPopover(row, col, moreLink, segs) {\n            var _this = this;\n\n            var view = this.view;\n            var moreWrap = moreLink.parent(); // the <div> wrapper around the <a>\n\n            var topEl; // the element we want to match the top coordinate of\n\n            var options;\n\n            if (this.rowCnt == 1) {\n              topEl = view.el; // will cause the popover to cover any sort of header\n            } else {\n              topEl = this.rowEls.eq(row); // will align with top of row\n            }\n\n            options = {\n              className: 'fc-more-popover',\n              content: this.renderSegPopoverContent(row, col, segs),\n              parentEl: this.view.el,\n              // attach to root of view. guarantees outside of scrollbars.\n              top: topEl.offset().top,\n              autoHide: true,\n              // when the user clicks elsewhere, hide the popover\n              viewportConstrain: view.opt('popoverViewportConstrain'),\n              hide: function hide() {\n                // kill everything when the popover is hidden\n                // notify events to be removed\n                if (_this.popoverSegs) {\n                  var seg;\n\n                  for (var i = 0; i < _this.popoverSegs.length; ++i) {\n                    seg = _this.popoverSegs[i];\n                    view.publiclyTrigger('eventDestroy', seg.event, seg.event, seg.el);\n                  }\n                }\n\n                _this.segPopover.removeElement();\n\n                _this.segPopover = null;\n                _this.popoverSegs = null;\n              }\n            }; // Determine horizontal coordinate.\n            // We use the moreWrap instead of the <td> to avoid border confusion.\n\n            if (this.isRTL) {\n              options.right = moreWrap.offset().left + moreWrap.outerWidth() + 1; // +1 to be over cell border\n            } else {\n              options.left = moreWrap.offset().left - 1; // -1 to be over cell border\n            }\n\n            this.segPopover = new Popover(options);\n            this.segPopover.show(); // the popover doesn't live within the grid's container element, and thus won't get the event\n            // delegated-handlers for free. attach event-related handlers to the popover.\n\n            this.bindSegHandlersToEl(this.segPopover.el);\n          },\n          // Builds the inner DOM contents of the segment popover\n          renderSegPopoverContent: function renderSegPopoverContent(row, col, segs) {\n            var view = this.view;\n            var isTheme = view.opt('theme');\n            var title = this.getCellDate(row, col).format(view.opt('dayPopoverFormat'));\n            var content = $('<div class=\"fc-header ' + view.widgetHeaderClass + '\">' + '<span class=\"fc-close ' + (isTheme ? 'ui-icon ui-icon-closethick' : 'fc-icon fc-icon-x') + '\"></span>' + '<span class=\"fc-title\">' + htmlEscape(title) + '</span>' + '<div class=\"fc-clear\"/>' + '</div>' + '<div class=\"fc-body ' + view.widgetContentClass + '\">' + '<div class=\"fc-event-container\"></div>' + '</div>');\n            var segContainer = content.find('.fc-event-container');\n            var i; // render each seg's `el` and only return the visible segs\n\n            segs = this.renderFgSegEls(segs, true); // disableResizing=true\n\n            this.popoverSegs = segs;\n\n            for (i = 0; i < segs.length; i++) {\n              // because segments in the popover are not part of a grid coordinate system, provide a hint to any\n              // grids that want to do drag-n-drop about which cell it came from\n              this.hitsNeeded();\n              segs[i].hit = this.getCellHit(row, col);\n              this.hitsNotNeeded();\n              segContainer.append(segs[i].el);\n            }\n\n            return content;\n          },\n          // Given the events within an array of segment objects, reslice them to be in a single day\n          resliceDaySegs: function resliceDaySegs(segs, dayDate) {\n            // build an array of the original events\n            var events = $.map(segs, function (seg) {\n              return seg.event;\n            });\n            var dayStart = dayDate.clone();\n            var dayEnd = dayStart.clone().add(1, 'days');\n            var dayRange = {\n              start: dayStart,\n              end: dayEnd\n            }; // slice the events with a custom slicing function\n\n            segs = this.eventsToSegs(events, function (range) {\n              var seg = intersectRanges(range, dayRange); // undefind if no intersection\n\n              return seg ? [seg] : []; // must return an array of segments\n            }); // force an order because eventsToSegs doesn't guarantee one\n\n            this.sortEventSegs(segs);\n            return segs;\n          },\n          // Generates the text that should be inside a \"more\" link, given the number of events it represents\n          getMoreLinkText: function getMoreLinkText(num) {\n            var opt = this.view.opt('eventLimitText');\n\n            if (typeof opt === 'function') {\n              return opt(num);\n            } else {\n              return '+' + num + ' ' + opt;\n            }\n          },\n          // Returns segments within a given cell.\n          // If `startLevel` is specified, returns only events including and below that level. Otherwise returns all segs.\n          getCellSegs: function getCellSegs(row, col, startLevel) {\n            var segMatrix = this.rowStructs[row].segMatrix;\n            var level = startLevel || 0;\n            var segs = [];\n            var seg;\n\n            while (level < segMatrix.length) {\n              seg = segMatrix[level][col];\n\n              if (seg) {\n                segs.push(seg);\n              }\n\n              level++;\n            }\n\n            return segs;\n          }\n        });\n        ;\n        ;\n        /* A component that renders one or more columns of vertical time slots\n        ----------------------------------------------------------------------------------------------------------------------*/\n        // We mixin DayTable, even though there is only a single row of days\n\n        var TimeGrid = FC.TimeGrid = Grid.extend(DayTableMixin, {\n          slotDuration: null,\n          // duration of a \"slot\", a distinct time segment on given day, visualized by lines\n          snapDuration: null,\n          // granularity of time for dragging and selecting\n          snapsPerSlot: null,\n          labelFormat: null,\n          // formatting string for times running along vertical axis\n          labelInterval: null,\n          // duration of how often a label should be displayed for a slot\n          colEls: null,\n          // cells elements in the day-row background\n          slatContainerEl: null,\n          // div that wraps all the slat rows\n          slatEls: null,\n          // elements running horizontally across all columns\n          nowIndicatorEls: null,\n          colCoordCache: null,\n          slatCoordCache: null,\n          constructor: function constructor() {\n            Grid.apply(this, arguments); // call the super-constructor\n\n            this.processOptions();\n          },\n          // Renders the time grid into `this.el`, which should already be assigned.\n          // Relies on the view's colCnt. In the future, this component should probably be self-sufficient.\n          renderDates: function renderDates() {\n            this.el.html(this.renderHtml());\n            this.colEls = this.el.find('.fc-day, .fc-disabled-day');\n            this.slatContainerEl = this.el.find('.fc-slats');\n            this.slatEls = this.slatContainerEl.find('tr');\n            this.colCoordCache = new CoordCache({\n              els: this.colEls,\n              isHorizontal: true\n            });\n            this.slatCoordCache = new CoordCache({\n              els: this.slatEls,\n              isVertical: true\n            });\n            this.renderContentSkeleton();\n          },\n          // Renders the basic HTML skeleton for the grid\n          renderHtml: function renderHtml() {\n            return '' + '<div class=\"fc-bg\">' + '<table>' + this.renderBgTrHtml(0) + // row=0\n            '</table>' + '</div>' + '<div class=\"fc-slats\">' + '<table>' + this.renderSlatRowHtml() + '</table>' + '</div>';\n          },\n          // Generates the HTML for the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n          renderSlatRowHtml: function renderSlatRowHtml() {\n            var view = this.view;\n            var isRTL = this.isRTL;\n            var html = '';\n            var slotTime = moment.duration(+this.view.minTime); // wish there was .clone() for durations\n\n            var slotDate; // will be on the view's first day, but we only care about its time\n\n            var isLabeled;\n            var axisHtml; // Calculate the time for each slot\n\n            while (slotTime < this.view.maxTime) {\n              slotDate = this.start.clone().time(slotTime);\n              isLabeled = isInt(divideDurationByDuration(slotTime, this.labelInterval));\n              axisHtml = '<td class=\"fc-axis fc-time ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '>' + (isLabeled ? '<span>' + // for matchCellWidths\n              htmlEscape(slotDate.format(this.labelFormat)) + '</span>' : '') + '</td>';\n              html += '<tr data-time=\"' + slotDate.format('HH:mm:ss') + '\"' + (isLabeled ? '' : ' class=\"fc-minor\"') + '>' + (!isRTL ? axisHtml : '') + '<td class=\"' + view.widgetContentClass + '\"/>' + (isRTL ? axisHtml : '') + \"</tr>\";\n              slotTime.add(this.slotDuration);\n            }\n\n            return html;\n          },\n\n          /* Options\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Parses various options into properties of this object\n          processOptions: function processOptions() {\n            var view = this.view;\n            var slotDuration = view.opt('slotDuration');\n            var snapDuration = view.opt('snapDuration');\n            var input;\n            slotDuration = moment.duration(slotDuration);\n            snapDuration = snapDuration ? moment.duration(snapDuration) : slotDuration;\n            this.slotDuration = slotDuration;\n            this.snapDuration = snapDuration;\n            this.snapsPerSlot = slotDuration / snapDuration; // TODO: ensure an integer multiple?\n\n            this.minResizeDuration = snapDuration; // hack\n            // might be an array value (for TimelineView).\n            // if so, getting the most granular entry (the last one probably).\n\n            input = view.opt('slotLabelFormat');\n\n            if ($.isArray(input)) {\n              input = input[input.length - 1];\n            }\n\n            this.labelFormat = input || view.opt('smallTimeFormat'); // the computed default\n\n            input = view.opt('slotLabelInterval');\n            this.labelInterval = input ? moment.duration(input) : this.computeLabelInterval(slotDuration);\n          },\n          // Computes an automatic value for slotLabelInterval\n          computeLabelInterval: function computeLabelInterval(slotDuration) {\n            var i;\n            var labelInterval;\n            var slotsPerLabel; // find the smallest stock label interval that results in more than one slots-per-label\n\n            for (i = AGENDA_STOCK_SUB_DURATIONS.length - 1; i >= 0; i--) {\n              labelInterval = moment.duration(AGENDA_STOCK_SUB_DURATIONS[i]);\n              slotsPerLabel = divideDurationByDuration(labelInterval, slotDuration);\n\n              if (isInt(slotsPerLabel) && slotsPerLabel > 1) {\n                return labelInterval;\n              }\n            }\n\n            return moment.duration(slotDuration); // fall back. clone\n          },\n          // Computes a default event time formatting string if `timeFormat` is not explicitly defined\n          computeEventTimeFormat: function computeEventTimeFormat() {\n            return this.view.opt('noMeridiemTimeFormat'); // like \"6:30\" (no AM/PM)\n          },\n          // Computes a default `displayEventEnd` value if one is not expliclty defined\n          computeDisplayEventEnd: function computeDisplayEventEnd() {\n            return true;\n          },\n\n          /* Hit System\n          ------------------------------------------------------------------------------------------------------------------*/\n          prepareHits: function prepareHits() {\n            this.colCoordCache.build();\n            this.slatCoordCache.build();\n          },\n          releaseHits: function releaseHits() {\n            this.colCoordCache.clear(); // NOTE: don't clear slatCoordCache because we rely on it for computeTimeTop\n          },\n          queryHit: function queryHit(leftOffset, topOffset) {\n            var snapsPerSlot = this.snapsPerSlot;\n            var colCoordCache = this.colCoordCache;\n            var slatCoordCache = this.slatCoordCache;\n\n            if (colCoordCache.isLeftInBounds(leftOffset) && slatCoordCache.isTopInBounds(topOffset)) {\n              var colIndex = colCoordCache.getHorizontalIndex(leftOffset);\n              var slatIndex = slatCoordCache.getVerticalIndex(topOffset);\n\n              if (colIndex != null && slatIndex != null) {\n                var slatTop = slatCoordCache.getTopOffset(slatIndex);\n                var slatHeight = slatCoordCache.getHeight(slatIndex);\n                var partial = (topOffset - slatTop) / slatHeight; // floating point number between 0 and 1\n\n                var localSnapIndex = Math.floor(partial * snapsPerSlot); // the snap # relative to start of slat\n\n                var snapIndex = slatIndex * snapsPerSlot + localSnapIndex;\n                var snapTop = slatTop + localSnapIndex / snapsPerSlot * slatHeight;\n                var snapBottom = slatTop + (localSnapIndex + 1) / snapsPerSlot * slatHeight;\n                return {\n                  col: colIndex,\n                  snap: snapIndex,\n                  component: this,\n                  // needed unfortunately :(\n                  left: colCoordCache.getLeftOffset(colIndex),\n                  right: colCoordCache.getRightOffset(colIndex),\n                  top: snapTop,\n                  bottom: snapBottom\n                };\n              }\n            }\n          },\n          getHitSpan: function getHitSpan(hit) {\n            var start = this.getCellDate(0, hit.col); // row=0\n\n            var time = this.computeSnapTime(hit.snap); // pass in the snap-index\n\n            var end;\n            start.time(time);\n            end = start.clone().add(this.snapDuration);\n            return {\n              start: start,\n              end: end\n            };\n          },\n          getHitEl: function getHitEl(hit) {\n            return this.colEls.eq(hit.col);\n          },\n\n          /* Dates\n          ------------------------------------------------------------------------------------------------------------------*/\n          rangeUpdated: function rangeUpdated() {\n            this.updateDayTable();\n          },\n          // Given a row number of the grid, representing a \"snap\", returns a time (Duration) from its start-of-day\n          computeSnapTime: function computeSnapTime(snapIndex) {\n            return moment.duration(this.view.minTime + this.snapDuration * snapIndex);\n          },\n          // Slices up the given span (unzoned start/end with other misc data) into an array of segments\n          spanToSegs: function spanToSegs(span) {\n            var segs = this.sliceRangeByTimes(span);\n            var i;\n\n            for (i = 0; i < segs.length; i++) {\n              if (this.isRTL) {\n                segs[i].col = this.daysPerRow - 1 - segs[i].dayIndex;\n              } else {\n                segs[i].col = segs[i].dayIndex;\n              }\n            }\n\n            return segs;\n          },\n          sliceRangeByTimes: function sliceRangeByTimes(range) {\n            var segs = [];\n            var seg;\n            var dayIndex;\n            var dayDate;\n            var dayRange;\n\n            for (dayIndex = 0; dayIndex < this.daysPerRow; dayIndex++) {\n              dayDate = this.dayDates[dayIndex].clone().time(0); // TODO: better API for this?\n\n              dayRange = {\n                start: dayDate.clone().add(this.view.minTime),\n                // don't use .time() because it sux with negatives\n                end: dayDate.clone().add(this.view.maxTime)\n              };\n              seg = intersectRanges(range, dayRange); // both will be ambig timezone\n\n              if (seg) {\n                seg.dayIndex = dayIndex;\n                segs.push(seg);\n              }\n            }\n\n            return segs;\n          },\n\n          /* Coordinates\n          ------------------------------------------------------------------------------------------------------------------*/\n          updateSize: function updateSize(isResize) {\n            // NOT a standard Grid method\n            this.slatCoordCache.build();\n\n            if (isResize) {\n              this.updateSegVerticals([].concat(this.fgSegs || [], this.bgSegs || [], this.businessSegs || []));\n            }\n          },\n          getTotalSlatHeight: function getTotalSlatHeight() {\n            return this.slatContainerEl.outerHeight();\n          },\n          // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n          // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n          computeDateTop: function computeDateTop(date, startOfDayDate) {\n            return this.computeTimeTop(moment.duration(date - startOfDayDate.clone().stripTime()));\n          },\n          // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n          computeTimeTop: function computeTimeTop(time) {\n            var len = this.slatEls.length;\n            var slatCoverage = (time - this.view.minTime) / this.slotDuration; // floating-point value of # of slots covered\n\n            var slatIndex;\n            var slatRemainder; // compute a floating-point number for how many slats should be progressed through.\n            // from 0 to number of slats (inclusive)\n            // constrained because minTime/maxTime might be customized.\n\n            slatCoverage = Math.max(0, slatCoverage);\n            slatCoverage = Math.min(len, slatCoverage); // an integer index of the furthest whole slat\n            // from 0 to number slats (*exclusive*, so len-1)\n\n            slatIndex = Math.floor(slatCoverage);\n            slatIndex = Math.min(slatIndex, len - 1); // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n            // could be 1.0 if slatCoverage is covering *all* the slots\n\n            slatRemainder = slatCoverage - slatIndex;\n            return this.slatCoordCache.getTopPosition(slatIndex) + this.slatCoordCache.getHeight(slatIndex) * slatRemainder;\n          },\n\n          /* Event Drag Visualization\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders a visual indication of an event being dragged over the specified date(s).\n          // A returned value of `true` signals that a mock \"helper\" event has been rendered.\n          renderDrag: function renderDrag(eventLocation, seg) {\n            var eventSpans;\n            var i;\n\n            if (seg) {\n              // if there is event information for this drag, render a helper event\n              // returns mock event elements\n              // signal that a helper has been rendered\n              return this.renderEventLocationHelper(eventLocation, seg);\n            } else {\n              // otherwise, just render a highlight\n              eventSpans = this.eventToSpans(eventLocation);\n\n              for (i = 0; i < eventSpans.length; i++) {\n                this.renderHighlight(eventSpans[i]);\n              }\n            }\n          },\n          // Unrenders any visual indication of an event being dragged\n          unrenderDrag: function unrenderDrag() {\n            this.unrenderHelper();\n            this.unrenderHighlight();\n          },\n\n          /* Event Resize Visualization\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders a visual indication of an event being resized\n          renderEventResize: function renderEventResize(eventLocation, seg) {\n            return this.renderEventLocationHelper(eventLocation, seg); // returns mock event elements\n          },\n          // Unrenders any visual indication of an event being resized\n          unrenderEventResize: function unrenderEventResize() {\n            this.unrenderHelper();\n          },\n\n          /* Event Helper\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders a mock \"helper\" event. `sourceSeg` is the original segment object and might be null (an external drag)\n          renderHelper: function renderHelper(event, sourceSeg) {\n            return this.renderHelperSegs(this.eventToSegs(event), sourceSeg); // returns mock event elements\n          },\n          // Unrenders any mock helper event\n          unrenderHelper: function unrenderHelper() {\n            this.unrenderHelperSegs();\n          },\n\n          /* Business Hours\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderBusinessHours: function renderBusinessHours() {\n            this.renderBusinessSegs(this.buildBusinessHourSegs());\n          },\n          unrenderBusinessHours: function unrenderBusinessHours() {\n            this.unrenderBusinessSegs();\n          },\n\n          /* Now Indicator\n          ------------------------------------------------------------------------------------------------------------------*/\n          getNowIndicatorUnit: function getNowIndicatorUnit() {\n            return 'minute'; // will refresh on the minute\n          },\n          renderNowIndicator: function renderNowIndicator(date) {\n            // seg system might be overkill, but it handles scenario where line needs to be rendered\n            //  more than once because of columns with the same date (resources columns for example)\n            var segs = this.spanToSegs({\n              start: date,\n              end: date\n            });\n            var top = this.computeDateTop(date, date);\n            var nodes = [];\n            var i; // render lines within the columns\n\n            for (i = 0; i < segs.length; i++) {\n              nodes.push($('<div class=\"fc-now-indicator fc-now-indicator-line\"></div>').css('top', top).appendTo(this.colContainerEls.eq(segs[i].col))[0]);\n            } // render an arrow over the axis\n\n\n            if (segs.length > 0) {\n              // is the current time in view?\n              nodes.push($('<div class=\"fc-now-indicator fc-now-indicator-arrow\"></div>').css('top', top).appendTo(this.el.find('.fc-content-skeleton'))[0]);\n            }\n\n            this.nowIndicatorEls = $(nodes);\n          },\n          unrenderNowIndicator: function unrenderNowIndicator() {\n            if (this.nowIndicatorEls) {\n              this.nowIndicatorEls.remove();\n              this.nowIndicatorEls = null;\n            }\n          },\n\n          /* Selection\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders a visual indication of a selection. Overrides the default, which was to simply render a highlight.\n          renderSelection: function renderSelection(span) {\n            if (this.view.opt('selectHelper')) {\n              // this setting signals that a mock helper event should be rendered\n              // normally acceps an eventLocation, span has a start/end, which is good enough\n              this.renderEventLocationHelper(span);\n            } else {\n              this.renderHighlight(span);\n            }\n          },\n          // Unrenders any visual indication of a selection\n          unrenderSelection: function unrenderSelection() {\n            this.unrenderHelper();\n            this.unrenderHighlight();\n          },\n\n          /* Highlight\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderHighlight: function renderHighlight(span) {\n            this.renderHighlightSegs(this.spanToSegs(span));\n          },\n          unrenderHighlight: function unrenderHighlight() {\n            this.unrenderHighlightSegs();\n          }\n        });\n        ;\n        ;\n        /* Methods for rendering SEGMENTS, pieces of content that live on the view\n         ( this file is no longer just for events )\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n        TimeGrid.mixin({\n          colContainerEls: null,\n          // containers for each column\n          // inner-containers for each column where different types of segs live\n          fgContainerEls: null,\n          bgContainerEls: null,\n          helperContainerEls: null,\n          highlightContainerEls: null,\n          businessContainerEls: null,\n          // arrays of different types of displayed segments\n          fgSegs: null,\n          bgSegs: null,\n          helperSegs: null,\n          highlightSegs: null,\n          businessSegs: null,\n          // Renders the DOM that the view's content will live in\n          renderContentSkeleton: function renderContentSkeleton() {\n            var cellHtml = '';\n            var i;\n            var skeletonEl;\n\n            for (i = 0; i < this.colCnt; i++) {\n              cellHtml += '<td>' + '<div class=\"fc-content-col\">' + '<div class=\"fc-event-container fc-helper-container\"></div>' + '<div class=\"fc-event-container\"></div>' + '<div class=\"fc-highlight-container\"></div>' + '<div class=\"fc-bgevent-container\"></div>' + '<div class=\"fc-business-container\"></div>' + '</div>' + '</td>';\n            }\n\n            skeletonEl = $('<div class=\"fc-content-skeleton\">' + '<table>' + '<tr>' + cellHtml + '</tr>' + '</table>' + '</div>');\n            this.colContainerEls = skeletonEl.find('.fc-content-col');\n            this.helperContainerEls = skeletonEl.find('.fc-helper-container');\n            this.fgContainerEls = skeletonEl.find('.fc-event-container:not(.fc-helper-container)');\n            this.bgContainerEls = skeletonEl.find('.fc-bgevent-container');\n            this.highlightContainerEls = skeletonEl.find('.fc-highlight-container');\n            this.businessContainerEls = skeletonEl.find('.fc-business-container');\n            this.bookendCells(skeletonEl.find('tr')); // TODO: do this on string level\n\n            this.el.append(skeletonEl);\n          },\n\n          /* Foreground Events\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderFgSegs: function renderFgSegs(segs) {\n            segs = this.renderFgSegsIntoContainers(segs, this.fgContainerEls);\n            this.fgSegs = segs;\n            return segs; // needed for Grid::renderEvents\n          },\n          unrenderFgSegs: function unrenderFgSegs() {\n            this.unrenderNamedSegs('fgSegs');\n          },\n\n          /* Foreground Helper Events\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderHelperSegs: function renderHelperSegs(segs, sourceSeg) {\n            var helperEls = [];\n            var i, seg;\n            var sourceEl;\n            segs = this.renderFgSegsIntoContainers(segs, this.helperContainerEls); // Try to make the segment that is in the same row as sourceSeg look the same\n\n            for (i = 0; i < segs.length; i++) {\n              seg = segs[i];\n\n              if (sourceSeg && sourceSeg.col === seg.col) {\n                sourceEl = sourceSeg.el;\n                seg.el.css({\n                  left: sourceEl.css('left'),\n                  right: sourceEl.css('right'),\n                  'margin-left': sourceEl.css('margin-left'),\n                  'margin-right': sourceEl.css('margin-right')\n                });\n              }\n\n              helperEls.push(seg.el[0]);\n            }\n\n            this.helperSegs = segs;\n            return $(helperEls); // must return rendered helpers\n          },\n          unrenderHelperSegs: function unrenderHelperSegs() {\n            this.unrenderNamedSegs('helperSegs');\n          },\n\n          /* Background Events\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderBgSegs: function renderBgSegs(segs) {\n            segs = this.renderFillSegEls('bgEvent', segs); // TODO: old fill system\n\n            this.updateSegVerticals(segs);\n            this.attachSegsByCol(this.groupSegsByCol(segs), this.bgContainerEls);\n            this.bgSegs = segs;\n            return segs; // needed for Grid::renderEvents\n          },\n          unrenderBgSegs: function unrenderBgSegs() {\n            this.unrenderNamedSegs('bgSegs');\n          },\n\n          /* Highlight\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderHighlightSegs: function renderHighlightSegs(segs) {\n            segs = this.renderFillSegEls('highlight', segs); // TODO: old fill system\n\n            this.updateSegVerticals(segs);\n            this.attachSegsByCol(this.groupSegsByCol(segs), this.highlightContainerEls);\n            this.highlightSegs = segs;\n          },\n          unrenderHighlightSegs: function unrenderHighlightSegs() {\n            this.unrenderNamedSegs('highlightSegs');\n          },\n\n          /* Business Hours\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderBusinessSegs: function renderBusinessSegs(segs) {\n            segs = this.renderFillSegEls('businessHours', segs); // TODO: old fill system\n\n            this.updateSegVerticals(segs);\n            this.attachSegsByCol(this.groupSegsByCol(segs), this.businessContainerEls);\n            this.businessSegs = segs;\n          },\n          unrenderBusinessSegs: function unrenderBusinessSegs() {\n            this.unrenderNamedSegs('businessSegs');\n          },\n\n          /* Seg Rendering Utils\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Given a flat array of segments, return an array of sub-arrays, grouped by each segment's col\n          groupSegsByCol: function groupSegsByCol(segs) {\n            var segsByCol = [];\n            var i;\n\n            for (i = 0; i < this.colCnt; i++) {\n              segsByCol.push([]);\n            }\n\n            for (i = 0; i < segs.length; i++) {\n              segsByCol[segs[i].col].push(segs[i]);\n            }\n\n            return segsByCol;\n          },\n          // Given segments grouped by column, insert the segments' elements into a parallel array of container\n          // elements, each living within a column.\n          attachSegsByCol: function attachSegsByCol(segsByCol, containerEls) {\n            var col;\n            var segs;\n            var i;\n\n            for (col = 0; col < this.colCnt; col++) {\n              // iterate each column grouping\n              segs = segsByCol[col];\n\n              for (i = 0; i < segs.length; i++) {\n                containerEls.eq(col).append(segs[i].el);\n              }\n            }\n          },\n          // Given the name of a property of `this` object, assumed to be an array of segments,\n          // loops through each segment and removes from DOM. Will null-out the property afterwards.\n          unrenderNamedSegs: function unrenderNamedSegs(propName) {\n            var segs = this[propName];\n            var i;\n\n            if (segs) {\n              for (i = 0; i < segs.length; i++) {\n                segs[i].el.remove();\n              }\n\n              this[propName] = null;\n            }\n          },\n\n          /* Foreground Event Rendering Utils\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Given an array of foreground segments, render a DOM element for each, computes position,\n          // and attaches to the column inner-container elements.\n          renderFgSegsIntoContainers: function renderFgSegsIntoContainers(segs, containerEls) {\n            var segsByCol;\n            var col;\n            segs = this.renderFgSegEls(segs); // will call fgSegHtml\n\n            segsByCol = this.groupSegsByCol(segs);\n\n            for (col = 0; col < this.colCnt; col++) {\n              this.updateFgSegCoords(segsByCol[col]);\n            }\n\n            this.attachSegsByCol(segsByCol, containerEls);\n            return segs;\n          },\n          // Renders the HTML for a single event segment's default rendering\n          fgSegHtml: function fgSegHtml(seg, disableResizing) {\n            var view = this.view;\n            var event = seg.event;\n            var isDraggable = view.isEventDraggable(event);\n            var isResizableFromStart = !disableResizing && seg.isStart && view.isEventResizableFromStart(event);\n            var isResizableFromEnd = !disableResizing && seg.isEnd && view.isEventResizableFromEnd(event);\n            var classes = this.getSegClasses(seg, isDraggable, isResizableFromStart || isResizableFromEnd);\n            var skinCss = cssToStr(this.getSegSkinCss(seg));\n            var timeText;\n            var fullTimeText; // more verbose time text. for the print stylesheet\n\n            var startTimeText; // just the start time text\n\n            classes.unshift('fc-time-grid-event', 'fc-v-event');\n\n            if (view.isMultiDayEvent(event)) {\n              // if the event appears to span more than one day...\n              // Don't display time text on segments that run entirely through a day.\n              // That would appear as midnight-midnight and would look dumb.\n              // Otherwise, display the time text for the *segment's* times (like 6pm-midnight or midnight-10am)\n              if (seg.isStart || seg.isEnd) {\n                timeText = this.getEventTimeText(seg);\n                fullTimeText = this.getEventTimeText(seg, 'LT');\n                startTimeText = this.getEventTimeText(seg, null, false); // displayEnd=false\n              }\n            } else {\n              // Display the normal time text for the *event's* times\n              timeText = this.getEventTimeText(event);\n              fullTimeText = this.getEventTimeText(event, 'LT');\n              startTimeText = this.getEventTimeText(event, null, false); // displayEnd=false\n            }\n\n            return '<a class=\"' + classes.join(' ') + '\"' + (event.url ? ' href=\"' + htmlEscape(event.url) + '\"' : '') + (skinCss ? ' style=\"' + skinCss + '\"' : '') + '>' + '<div class=\"fc-content\">' + (timeText ? '<div class=\"fc-time\"' + ' data-start=\"' + htmlEscape(startTimeText) + '\"' + ' data-full=\"' + htmlEscape(fullTimeText) + '\"' + '>' + '<span>' + htmlEscape(timeText) + '</span>' + '</div>' : '') + (event.title ? '<div class=\"fc-title\">' + htmlEscape(event.title) + '</div>' : '') + '</div>' + '<div class=\"fc-bg\"/>' + (\n            /* TODO: write CSS for this\n            (isResizableFromStart ?\n            \t'<div class=\"fc-resizer fc-start-resizer\" />' :\n            \t''\n            \t) +\n            */\n            isResizableFromEnd ? '<div class=\"fc-resizer fc-end-resizer\" />' : '') + '</a>';\n          },\n\n          /* Seg Position Utils\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Refreshes the CSS top/bottom coordinates for each segment element.\n          // Works when called after initial render, after a window resize/zoom for example.\n          updateSegVerticals: function updateSegVerticals(segs) {\n            this.computeSegVerticals(segs);\n            this.assignSegVerticals(segs);\n          },\n          // For each segment in an array, computes and assigns its top and bottom properties\n          computeSegVerticals: function computeSegVerticals(segs) {\n            var i, seg;\n            var dayDate;\n\n            for (i = 0; i < segs.length; i++) {\n              seg = segs[i];\n              dayDate = this.dayDates[seg.dayIndex];\n              seg.top = this.computeDateTop(seg.start, dayDate);\n              seg.bottom = this.computeDateTop(seg.end, dayDate);\n            }\n          },\n          // Given segments that already have their top/bottom properties computed, applies those values to\n          // the segments' elements.\n          assignSegVerticals: function assignSegVerticals(segs) {\n            var i, seg;\n\n            for (i = 0; i < segs.length; i++) {\n              seg = segs[i];\n              seg.el.css(this.generateSegVerticalCss(seg));\n            }\n          },\n          // Generates an object with CSS properties for the top/bottom coordinates of a segment element\n          generateSegVerticalCss: function generateSegVerticalCss(seg) {\n            return {\n              top: seg.top,\n              bottom: -seg.bottom // flipped because needs to be space beyond bottom edge of event container\n\n            };\n          },\n\n          /* Foreground Event Positioning Utils\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Given segments that are assumed to all live in the *same column*,\n          // compute their verical/horizontal coordinates and assign to their elements.\n          updateFgSegCoords: function updateFgSegCoords(segs) {\n            this.computeSegVerticals(segs); // horizontals relies on this\n\n            this.computeFgSegHorizontals(segs); // compute horizontal coordinates, z-index's, and reorder the array\n\n            this.assignSegVerticals(segs);\n            this.assignFgSegHorizontals(segs);\n          },\n          // Given an array of segments that are all in the same column, sets the backwardCoord and forwardCoord on each.\n          // NOTE: Also reorders the given array by date!\n          computeFgSegHorizontals: function computeFgSegHorizontals(segs) {\n            var levels;\n            var level0;\n            var i;\n            this.sortEventSegs(segs); // order by certain criteria\n\n            levels = buildSlotSegLevels(segs);\n            computeForwardSlotSegs(levels);\n\n            if (level0 = levels[0]) {\n              for (i = 0; i < level0.length; i++) {\n                computeSlotSegPressures(level0[i]);\n              }\n\n              for (i = 0; i < level0.length; i++) {\n                this.computeFgSegForwardBack(level0[i], 0, 0);\n              }\n            }\n          },\n          // Calculate seg.forwardCoord and seg.backwardCoord for the segment, where both values range\n          // from 0 to 1. If the calendar is left-to-right, the seg.backwardCoord maps to \"left\" and\n          // seg.forwardCoord maps to \"right\" (via percentage). Vice-versa if the calendar is right-to-left.\n          //\n          // The segment might be part of a \"series\", which means consecutive segments with the same pressure\n          // who's width is unknown until an edge has been hit. `seriesBackwardPressure` is the number of\n          // segments behind this one in the current series, and `seriesBackwardCoord` is the starting\n          // coordinate of the first segment in the series.\n          computeFgSegForwardBack: function computeFgSegForwardBack(seg, seriesBackwardPressure, seriesBackwardCoord) {\n            var forwardSegs = seg.forwardSegs;\n            var i;\n\n            if (seg.forwardCoord === undefined) {\n              // not already computed\n              if (!forwardSegs.length) {\n                // if there are no forward segments, this segment should butt up against the edge\n                seg.forwardCoord = 1;\n              } else {\n                // sort highest pressure first\n                this.sortForwardSegs(forwardSegs); // this segment's forwardCoord will be calculated from the backwardCoord of the\n                // highest-pressure forward segment.\n\n                this.computeFgSegForwardBack(forwardSegs[0], seriesBackwardPressure + 1, seriesBackwardCoord);\n                seg.forwardCoord = forwardSegs[0].backwardCoord;\n              } // calculate the backwardCoord from the forwardCoord. consider the series\n\n\n              seg.backwardCoord = seg.forwardCoord - (seg.forwardCoord - seriesBackwardCoord) / ( // available width for series\n              seriesBackwardPressure + 1); // # of segments in the series\n              // use this segment's coordinates to computed the coordinates of the less-pressurized\n              // forward segments\n\n              for (i = 0; i < forwardSegs.length; i++) {\n                this.computeFgSegForwardBack(forwardSegs[i], 0, seg.forwardCoord);\n              }\n            }\n          },\n          sortForwardSegs: function sortForwardSegs(forwardSegs) {\n            forwardSegs.sort(proxy(this, 'compareForwardSegs'));\n          },\n          // A cmp function for determining which forward segment to rely on more when computing coordinates.\n          compareForwardSegs: function compareForwardSegs(seg1, seg2) {\n            // put higher-pressure first\n            return seg2.forwardPressure - seg1.forwardPressure || // put segments that are closer to initial edge first (and favor ones with no coords yet)\n            (seg1.backwardCoord || 0) - (seg2.backwardCoord || 0) || // do normal sorting...\n            this.compareEventSegs(seg1, seg2);\n          },\n          // Given foreground event segments that have already had their position coordinates computed,\n          // assigns position-related CSS values to their elements.\n          assignFgSegHorizontals: function assignFgSegHorizontals(segs) {\n            var i, seg;\n\n            for (i = 0; i < segs.length; i++) {\n              seg = segs[i];\n              seg.el.css(this.generateFgSegHorizontalCss(seg)); // if the height is short, add a className for alternate styling\n\n              if (seg.bottom - seg.top < 30) {\n                seg.el.addClass('fc-short');\n              }\n            }\n          },\n          // Generates an object with CSS properties/values that should be applied to an event segment element.\n          // Contains important positioning-related properties that should be applied to any event element, customized or not.\n          generateFgSegHorizontalCss: function generateFgSegHorizontalCss(seg) {\n            var shouldOverlap = this.view.opt('slotEventOverlap');\n            var backwardCoord = seg.backwardCoord; // the left side if LTR. the right side if RTL. floating-point\n\n            var forwardCoord = seg.forwardCoord; // the right side if LTR. the left side if RTL. floating-point\n\n            var props = this.generateSegVerticalCss(seg); // get top/bottom first\n\n            var left; // amount of space from left edge, a fraction of the total width\n\n            var right; // amount of space from right edge, a fraction of the total width\n\n            if (shouldOverlap) {\n              // double the width, but don't go beyond the maximum forward coordinate (1.0)\n              forwardCoord = Math.min(1, backwardCoord + (forwardCoord - backwardCoord) * 2);\n            }\n\n            if (this.isRTL) {\n              left = 1 - forwardCoord;\n              right = backwardCoord;\n            } else {\n              left = backwardCoord;\n              right = 1 - forwardCoord;\n            }\n\n            props.zIndex = seg.level + 1; // convert from 0-base to 1-based\n\n            props.left = left * 100 + '%';\n            props.right = right * 100 + '%';\n\n            if (shouldOverlap && seg.forwardPressure) {\n              // add padding to the edge so that forward stacked events don't cover the resizer's icon\n              props[this.isRTL ? 'marginLeft' : 'marginRight'] = 10 * 2; // 10 is a guesstimate of the icon's width\n            }\n\n            return props;\n          }\n        }); // Builds an array of segments \"levels\". The first level will be the leftmost tier of segments if the calendar is\n        // left-to-right, or the rightmost if the calendar is right-to-left. Assumes the segments are already ordered by date.\n\n        function buildSlotSegLevels(segs) {\n          var levels = [];\n          var i, seg;\n          var j;\n\n          for (i = 0; i < segs.length; i++) {\n            seg = segs[i]; // go through all the levels and stop on the first level where there are no collisions\n\n            for (j = 0; j < levels.length; j++) {\n              if (!computeSlotSegCollisions(seg, levels[j]).length) {\n                break;\n              }\n            }\n\n            seg.level = j;\n            (levels[j] || (levels[j] = [])).push(seg);\n          }\n\n          return levels;\n        } // For every segment, figure out the other segments that are in subsequent\n        // levels that also occupy the same vertical space. Accumulate in seg.forwardSegs\n\n\n        function computeForwardSlotSegs(levels) {\n          var i, level;\n          var j, seg;\n          var k;\n\n          for (i = 0; i < levels.length; i++) {\n            level = levels[i];\n\n            for (j = 0; j < level.length; j++) {\n              seg = level[j];\n              seg.forwardSegs = [];\n\n              for (k = i + 1; k < levels.length; k++) {\n                computeSlotSegCollisions(seg, levels[k], seg.forwardSegs);\n              }\n            }\n          }\n        } // Figure out which path forward (via seg.forwardSegs) results in the longest path until\n        // the furthest edge is reached. The number of segments in this path will be seg.forwardPressure\n\n\n        function computeSlotSegPressures(seg) {\n          var forwardSegs = seg.forwardSegs;\n          var forwardPressure = 0;\n          var i, forwardSeg;\n\n          if (seg.forwardPressure === undefined) {\n            // not already computed\n            for (i = 0; i < forwardSegs.length; i++) {\n              forwardSeg = forwardSegs[i]; // figure out the child's maximum forward path\n\n              computeSlotSegPressures(forwardSeg); // either use the existing maximum, or use the child's forward pressure\n              // plus one (for the forwardSeg itself)\n\n              forwardPressure = Math.max(forwardPressure, 1 + forwardSeg.forwardPressure);\n            }\n\n            seg.forwardPressure = forwardPressure;\n          }\n        } // Find all the segments in `otherSegs` that vertically collide with `seg`.\n        // Append into an optionally-supplied `results` array and return.\n\n\n        function computeSlotSegCollisions(seg, otherSegs, results) {\n          results = results || [];\n\n          for (var i = 0; i < otherSegs.length; i++) {\n            if (isSlotSegCollision(seg, otherSegs[i])) {\n              results.push(otherSegs[i]);\n            }\n          }\n\n          return results;\n        } // Do these segments occupy the same vertical space?\n\n\n        function isSlotSegCollision(seg1, seg2) {\n          return seg1.bottom > seg2.top && seg1.top < seg2.bottom;\n        }\n\n        ;\n        ;\n        /* An abstract class from which other views inherit from\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n        var View = FC.View = Model.extend({\n          type: null,\n          // subclass' view name (string)\n          name: null,\n          // deprecated. use `type` instead\n          title: null,\n          // the text that will be displayed in the header's title\n          calendar: null,\n          // owner Calendar object\n          viewSpec: null,\n          options: null,\n          // hash containing all options. already merged with view-specific-options\n          el: null,\n          // the view's containing element. set by Calendar\n          renderQueue: null,\n          batchRenderDepth: 0,\n          isDatesRendered: false,\n          isEventsRendered: false,\n          isBaseRendered: false,\n          // related to viewRender/viewDestroy triggers\n          queuedScroll: null,\n          isRTL: false,\n          isSelected: false,\n          // boolean whether a range of time is user-selected or not\n          selectedEvent: null,\n          eventOrderSpecs: null,\n          // criteria for ordering events when they have same date/time\n          // classNames styled by jqui themes\n          widgetHeaderClass: null,\n          widgetContentClass: null,\n          highlightStateClass: null,\n          // for date utils, computed from options\n          nextDayThreshold: null,\n          isHiddenDayHash: null,\n          // now indicator\n          isNowIndicatorRendered: null,\n          initialNowDate: null,\n          // result first getNow call\n          initialNowQueriedMs: null,\n          // ms time the getNow was called\n          nowIndicatorTimeoutID: null,\n          // for refresh timing of now indicator\n          nowIndicatorIntervalID: null,\n          // \"\n          constructor: function constructor(calendar, viewSpec) {\n            Model.prototype.constructor.call(this);\n            this.calendar = calendar;\n            this.viewSpec = viewSpec; // shortcuts\n\n            this.type = viewSpec.type;\n            this.options = viewSpec.options; // .name is deprecated\n\n            this.name = this.type;\n            this.nextDayThreshold = moment.duration(this.opt('nextDayThreshold'));\n            this.initThemingProps();\n            this.initHiddenDays();\n            this.isRTL = this.opt('isRTL');\n            this.eventOrderSpecs = parseFieldSpecs(this.opt('eventOrder'));\n            this.renderQueue = this.buildRenderQueue();\n            this.initAutoBatchRender();\n            this.initialize();\n          },\n          buildRenderQueue: function buildRenderQueue() {\n            var _this = this;\n\n            var renderQueue = new RenderQueue({\n              event: this.opt('eventRenderWait')\n            });\n            renderQueue.on('start', function () {\n              _this.freezeHeight();\n\n              _this.addScroll(_this.queryScroll());\n            });\n            renderQueue.on('stop', function () {\n              _this.thawHeight();\n\n              _this.popScroll();\n            });\n            return renderQueue;\n          },\n          initAutoBatchRender: function initAutoBatchRender() {\n            var _this = this;\n\n            this.on('before:change', function () {\n              _this.startBatchRender();\n            });\n            this.on('change', function () {\n              _this.stopBatchRender();\n            });\n          },\n          startBatchRender: function startBatchRender() {\n            if (!this.batchRenderDepth++) {\n              this.renderQueue.pause();\n            }\n          },\n          stopBatchRender: function stopBatchRender() {\n            if (! --this.batchRenderDepth) {\n              this.renderQueue.resume();\n            }\n          },\n          // A good place for subclasses to initialize member variables\n          initialize: function initialize() {// subclasses can implement\n          },\n          // Retrieves an option with the given name\n          opt: function opt(name) {\n            return this.options[name];\n          },\n          // Triggers handlers that are view-related. Modifies args before passing to calendar.\n          publiclyTrigger: function publiclyTrigger(name, thisObj) {\n            // arguments beyond thisObj are passed along\n            var calendar = this.calendar;\n            return calendar.publiclyTrigger.apply(calendar, [name, thisObj || this].concat(Array.prototype.slice.call(arguments, 2), // arguments beyond thisObj\n            [this] // always make the last argument a reference to the view. TODO: deprecate\n            ));\n          },\n\n          /* Title and Date Formatting\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Sets the view's title property to the most updated computed value\n          updateTitle: function updateTitle() {\n            this.title = this.computeTitle();\n            this.calendar.setToolbarsTitle(this.title);\n          },\n          // Computes what the title at the top of the calendar should be for this view\n          computeTitle: function computeTitle() {\n            var range; // for views that span a large unit of time, show the proper interval, ignoring stray days before and after\n\n            if (/^(year|month)$/.test(this.currentRangeUnit)) {\n              range = this.currentRange;\n            } else {\n              // for day units or smaller, use the actual day range\n              range = this.activeRange;\n            }\n\n            return this.formatRange({\n              // in case currentRange has a time, make sure timezone is correct\n              start: this.calendar.applyTimezone(range.start),\n              end: this.calendar.applyTimezone(range.end)\n            }, this.opt('titleFormat') || this.computeTitleFormat(), this.opt('titleRangeSeparator'));\n          },\n          // Generates the format string that should be used to generate the title for the current date range.\n          // Attempts to compute the most appropriate format if not explicitly specified with `titleFormat`.\n          computeTitleFormat: function computeTitleFormat() {\n            if (this.currentRangeUnit == 'year') {\n              return 'YYYY';\n            } else if (this.currentRangeUnit == 'month') {\n              return this.opt('monthYearFormat'); // like \"September 2014\"\n            } else if (this.currentRangeAs('days') > 1) {\n              return 'll'; // multi-day range. shorter, like \"Sep 9 - 10 2014\"\n            } else {\n              return 'LL'; // one day. longer, like \"September 9 2014\"\n            }\n          },\n          // Utility for formatting a range. Accepts a range object, formatting string, and optional separator.\n          // Displays all-day ranges naturally, with an inclusive end. Takes the current isRTL into account.\n          // The timezones of the dates within `range` will be respected.\n          formatRange: function formatRange(range, formatStr, separator) {\n            var end = range.end;\n\n            if (!end.hasTime()) {\n              // all-day?\n              end = end.clone().subtract(1); // convert to inclusive. last ms of previous day\n            }\n\n            return _formatRange(range.start, end, formatStr, separator, this.opt('isRTL'));\n          },\n          getAllDayHtml: function getAllDayHtml() {\n            return this.opt('allDayHtml') || htmlEscape(this.opt('allDayText'));\n          },\n\n          /* Navigation\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Generates HTML for an anchor to another view into the calendar.\n          // Will either generate an <a> tag or a non-clickable <span> tag, depending on enabled settings.\n          // `gotoOptions` can either be a moment input, or an object with the form:\n          // { date, type, forceOff }\n          // `type` is a view-type like \"day\" or \"week\". default value is \"day\".\n          // `attrs` and `innerHtml` are use to generate the rest of the HTML tag.\n          buildGotoAnchorHtml: function buildGotoAnchorHtml(gotoOptions, attrs, innerHtml) {\n            var date, type, forceOff;\n            var finalOptions;\n\n            if ($.isPlainObject(gotoOptions)) {\n              date = gotoOptions.date;\n              type = gotoOptions.type;\n              forceOff = gotoOptions.forceOff;\n            } else {\n              date = gotoOptions; // a single moment input\n            }\n\n            date = FC.moment(date); // if a string, parse it\n\n            finalOptions = {\n              // for serialization into the link\n              date: date.format('YYYY-MM-DD'),\n              type: type || 'day'\n            };\n\n            if (typeof attrs === 'string') {\n              innerHtml = attrs;\n              attrs = null;\n            }\n\n            attrs = attrs ? ' ' + attrsToStr(attrs) : ''; // will have a leading space\n\n            innerHtml = innerHtml || '';\n\n            if (!forceOff && this.opt('navLinks')) {\n              return '<a' + attrs + ' data-goto=\"' + htmlEscape(JSON.stringify(finalOptions)) + '\">' + innerHtml + '</a>';\n            } else {\n              return '<span' + attrs + '>' + innerHtml + '</span>';\n            }\n          },\n          // Rendering Non-date-related Content\n          // -----------------------------------------------------------------------------------------------------------------\n          // Sets the container element that the view should render inside of, does global DOM-related initializations,\n          // and renders all the non-date-related content inside.\n          setElement: function setElement(el) {\n            this.el = el;\n            this.bindGlobalHandlers();\n            this.bindBaseRenderHandlers();\n            this.renderSkeleton();\n          },\n          // Removes the view's container element from the DOM, clearing any content beforehand.\n          // Undoes any other DOM-related attachments.\n          removeElement: function removeElement() {\n            this.unsetDate();\n            this.unrenderSkeleton();\n            this.unbindGlobalHandlers();\n            this.unbindBaseRenderHandlers();\n            this.el.remove(); // NOTE: don't null-out this.el in case the View was destroyed within an API callback.\n            // We don't null-out the View's other jQuery element references upon destroy,\n            //  so we shouldn't kill this.el either.\n          },\n          // Renders the basic structure of the view before any content is rendered\n          renderSkeleton: function renderSkeleton() {// subclasses should implement\n          },\n          // Unrenders the basic structure of the view\n          unrenderSkeleton: function unrenderSkeleton() {// subclasses should implement\n          },\n          // Date Setting/Unsetting\n          // -----------------------------------------------------------------------------------------------------------------\n          setDate: function setDate(date) {\n            var currentDateProfile = this.get('dateProfile');\n            var newDateProfile = this.buildDateProfile(date, null, true); // forceToValid=true\n\n            if (!currentDateProfile || !isRangesEqual(currentDateProfile.activeRange, newDateProfile.activeRange)) {\n              this.set('dateProfile', newDateProfile);\n            }\n\n            return newDateProfile.date;\n          },\n          unsetDate: function unsetDate() {\n            this.unset('dateProfile');\n          },\n          // Date Rendering\n          // -----------------------------------------------------------------------------------------------------------------\n          requestDateRender: function requestDateRender(dateProfile) {\n            var _this = this;\n\n            this.renderQueue.queue(function () {\n              _this.executeDateRender(dateProfile);\n            }, 'date', 'init');\n          },\n          requestDateUnrender: function requestDateUnrender() {\n            var _this = this;\n\n            this.renderQueue.queue(function () {\n              _this.executeDateUnrender();\n            }, 'date', 'destroy');\n          },\n          // Event Data\n          // -----------------------------------------------------------------------------------------------------------------\n          fetchInitialEvents: function fetchInitialEvents(dateProfile) {\n            return this.calendar.requestEvents(dateProfile.activeRange.start, dateProfile.activeRange.end);\n          },\n          bindEventChanges: function bindEventChanges() {\n            this.listenTo(this.calendar, 'eventsReset', this.resetEvents);\n          },\n          unbindEventChanges: function unbindEventChanges() {\n            this.stopListeningTo(this.calendar, 'eventsReset');\n          },\n          setEvents: function setEvents(events) {\n            this.set('currentEvents', events);\n            this.set('hasEvents', true);\n          },\n          unsetEvents: function unsetEvents() {\n            this.unset('currentEvents');\n            this.unset('hasEvents');\n          },\n          resetEvents: function resetEvents(events) {\n            this.startBatchRender();\n            this.unsetEvents();\n            this.setEvents(events);\n            this.stopBatchRender();\n          },\n          // Event Rendering\n          // -----------------------------------------------------------------------------------------------------------------\n          requestEventsRender: function requestEventsRender(events) {\n            var _this = this;\n\n            this.renderQueue.queue(function () {\n              _this.executeEventsRender(events);\n            }, 'event', 'init');\n          },\n          requestEventsUnrender: function requestEventsUnrender() {\n            var _this = this;\n\n            this.renderQueue.queue(function () {\n              _this.executeEventsUnrender();\n            }, 'event', 'destroy');\n          },\n          // Date High-level Rendering\n          // -----------------------------------------------------------------------------------------------------------------\n          // if dateProfile not specified, uses current\n          executeDateRender: function executeDateRender(dateProfile, skipScroll) {\n            this.setDateProfileForRendering(dateProfile);\n            this.updateTitle();\n            this.calendar.updateToolbarButtons();\n\n            if (this.render) {\n              this.render(); // TODO: deprecate\n            }\n\n            this.renderDates();\n            this.updateSize();\n            this.renderBusinessHours(); // might need coordinates, so should go after updateSize()\n\n            this.startNowIndicator();\n\n            if (!skipScroll) {\n              this.addScroll(this.computeInitialDateScroll());\n            }\n\n            this.isDatesRendered = true;\n            this.trigger('datesRendered');\n          },\n          executeDateUnrender: function executeDateUnrender() {\n            this.unselect();\n            this.stopNowIndicator();\n            this.trigger('before:datesUnrendered');\n            this.unrenderBusinessHours();\n            this.unrenderDates();\n\n            if (this.destroy) {\n              this.destroy(); // TODO: deprecate\n            }\n\n            this.isDatesRendered = false;\n          },\n          // Date Low-level Rendering\n          // -----------------------------------------------------------------------------------------------------------------\n          // date-cell content only\n          renderDates: function renderDates() {// subclasses should implement\n          },\n          // date-cell content only\n          unrenderDates: function unrenderDates() {// subclasses should override\n          },\n          // Determing when the \"meat\" of the view is rendered (aka the base)\n          // -----------------------------------------------------------------------------------------------------------------\n          bindBaseRenderHandlers: function bindBaseRenderHandlers() {\n            var _this = this;\n\n            this.on('datesRendered.baseHandler', function () {\n              _this.onBaseRender();\n            });\n            this.on('before:datesUnrendered.baseHandler', function () {\n              _this.onBeforeBaseUnrender();\n            });\n          },\n          unbindBaseRenderHandlers: function unbindBaseRenderHandlers() {\n            this.off('.baseHandler');\n          },\n          onBaseRender: function onBaseRender() {\n            this.applyScreenState();\n            this.publiclyTrigger('viewRender', this, this, this.el);\n          },\n          onBeforeBaseUnrender: function onBeforeBaseUnrender() {\n            this.applyScreenState();\n            this.publiclyTrigger('viewDestroy', this, this, this.el);\n          },\n          // Misc view rendering utils\n          // -----------------------------------------------------------------------------------------------------------------\n          // Binds DOM handlers to elements that reside outside the view container, such as the document\n          bindGlobalHandlers: function bindGlobalHandlers() {\n            this.listenTo(GlobalEmitter.get(), {\n              touchstart: this.processUnselect,\n              mousedown: this.handleDocumentMousedown\n            });\n          },\n          // Unbinds DOM handlers from elements that reside outside the view container\n          unbindGlobalHandlers: function unbindGlobalHandlers() {\n            this.stopListeningTo(GlobalEmitter.get());\n          },\n          // Initializes internal variables related to theming\n          initThemingProps: function initThemingProps() {\n            var tm = this.opt('theme') ? 'ui' : 'fc';\n            this.widgetHeaderClass = tm + '-widget-header';\n            this.widgetContentClass = tm + '-widget-content';\n            this.highlightStateClass = tm + '-state-highlight';\n          },\n\n          /* Business Hours\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders business-hours onto the view. Assumes updateSize has already been called.\n          renderBusinessHours: function renderBusinessHours() {// subclasses should implement\n          },\n          // Unrenders previously-rendered business-hours\n          unrenderBusinessHours: function unrenderBusinessHours() {// subclasses should implement\n          },\n\n          /* Now Indicator\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Immediately render the current time indicator and begins re-rendering it at an interval,\n          // which is defined by this.getNowIndicatorUnit().\n          // TODO: somehow do this for the current whole day's background too\n          startNowIndicator: function startNowIndicator() {\n            var _this = this;\n\n            var unit;\n            var update;\n            var delay; // ms wait value\n\n            if (this.opt('nowIndicator')) {\n              unit = this.getNowIndicatorUnit();\n\n              if (unit) {\n                update = proxy(this, 'updateNowIndicator'); // bind to `this`\n\n                this.initialNowDate = this.calendar.getNow();\n                this.initialNowQueriedMs = +new Date();\n                this.renderNowIndicator(this.initialNowDate);\n                this.isNowIndicatorRendered = true; // wait until the beginning of the next interval\n\n                delay = this.initialNowDate.clone().startOf(unit).add(1, unit) - this.initialNowDate;\n                this.nowIndicatorTimeoutID = setTimeout(function () {\n                  _this.nowIndicatorTimeoutID = null;\n                  update();\n                  delay = +moment.duration(1, unit);\n                  delay = Math.max(100, delay); // prevent too frequent\n\n                  _this.nowIndicatorIntervalID = setInterval(update, delay); // update every interval\n                }, delay);\n              }\n            }\n          },\n          // rerenders the now indicator, computing the new current time from the amount of time that has passed\n          // since the initial getNow call.\n          updateNowIndicator: function updateNowIndicator() {\n            if (this.isNowIndicatorRendered) {\n              this.unrenderNowIndicator();\n              this.renderNowIndicator(this.initialNowDate.clone().add(new Date() - this.initialNowQueriedMs) // add ms\n              );\n            }\n          },\n          // Immediately unrenders the view's current time indicator and stops any re-rendering timers.\n          // Won't cause side effects if indicator isn't rendered.\n          stopNowIndicator: function stopNowIndicator() {\n            if (this.isNowIndicatorRendered) {\n              if (this.nowIndicatorTimeoutID) {\n                clearTimeout(this.nowIndicatorTimeoutID);\n                this.nowIndicatorTimeoutID = null;\n              }\n\n              if (this.nowIndicatorIntervalID) {\n                clearTimeout(this.nowIndicatorIntervalID);\n                this.nowIndicatorIntervalID = null;\n              }\n\n              this.unrenderNowIndicator();\n              this.isNowIndicatorRendered = false;\n            }\n          },\n          // Returns a string unit, like 'second' or 'minute' that defined how often the current time indicator\n          // should be refreshed. If something falsy is returned, no time indicator is rendered at all.\n          getNowIndicatorUnit: function getNowIndicatorUnit() {// subclasses should implement\n          },\n          // Renders a current time indicator at the given datetime\n          renderNowIndicator: function renderNowIndicator(date) {// subclasses should implement\n          },\n          // Undoes the rendering actions from renderNowIndicator\n          unrenderNowIndicator: function unrenderNowIndicator() {// subclasses should implement\n          },\n\n          /* Dimensions\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Refreshes anything dependant upon sizing of the container element of the grid\n          updateSize: function updateSize(isResize) {\n            var scroll;\n\n            if (isResize) {\n              scroll = this.queryScroll();\n            }\n\n            this.updateHeight(isResize);\n            this.updateWidth(isResize);\n            this.updateNowIndicator();\n\n            if (isResize) {\n              this.applyScroll(scroll);\n            }\n          },\n          // Refreshes the horizontal dimensions of the calendar\n          updateWidth: function updateWidth(isResize) {// subclasses should implement\n          },\n          // Refreshes the vertical dimensions of the calendar\n          updateHeight: function updateHeight(isResize) {\n            var calendar = this.calendar; // we poll the calendar for height information\n\n            this.setHeight(calendar.getSuggestedViewHeight(), calendar.isHeightAuto());\n          },\n          // Updates the vertical dimensions of the calendar to the specified height.\n          // if `isAuto` is set to true, height becomes merely a suggestion and the view should use its \"natural\" height.\n          setHeight: function setHeight(height, isAuto) {// subclasses should implement\n          },\n\n          /* Scroller\n          ------------------------------------------------------------------------------------------------------------------*/\n          addForcedScroll: function addForcedScroll(scroll) {\n            this.addScroll($.extend(scroll, {\n              isForced: true\n            }));\n          },\n          addScroll: function addScroll(scroll) {\n            var queuedScroll = this.queuedScroll || (this.queuedScroll = {});\n\n            if (!queuedScroll.isForced) {\n              $.extend(queuedScroll, scroll);\n            }\n          },\n          popScroll: function popScroll() {\n            this.applyQueuedScroll();\n            this.queuedScroll = null;\n          },\n          applyQueuedScroll: function applyQueuedScroll() {\n            if (this.queuedScroll) {\n              this.applyScroll(this.queuedScroll);\n            }\n          },\n          queryScroll: function queryScroll() {\n            var scroll = {};\n\n            if (this.isDatesRendered) {\n              $.extend(scroll, this.queryDateScroll());\n            }\n\n            return scroll;\n          },\n          applyScroll: function applyScroll(scroll) {\n            if (this.isDatesRendered) {\n              this.applyDateScroll(scroll);\n            }\n          },\n          computeInitialDateScroll: function computeInitialDateScroll() {\n            return {}; // subclasses must implement\n          },\n          queryDateScroll: function queryDateScroll() {\n            return {}; // subclasses must implement\n          },\n          applyDateScroll: function applyDateScroll(scroll) {\n            ; // subclasses must implement\n          },\n\n          /* Height Freezing\n          ------------------------------------------------------------------------------------------------------------------*/\n          freezeHeight: function freezeHeight() {\n            this.calendar.freezeContentHeight();\n          },\n          thawHeight: function thawHeight() {\n            this.calendar.thawContentHeight();\n          },\n          // Event High-level Rendering\n          // -----------------------------------------------------------------------------------------------------------------\n          executeEventsRender: function executeEventsRender(events) {\n            this.renderEvents(events);\n            this.isEventsRendered = true;\n            this.onEventsRender();\n          },\n          executeEventsUnrender: function executeEventsUnrender() {\n            this.onBeforeEventsUnrender();\n\n            if (this.destroyEvents) {\n              this.destroyEvents(); // TODO: deprecate\n            }\n\n            this.unrenderEvents();\n            this.isEventsRendered = false;\n          },\n          // Event Rendering Triggers\n          // -----------------------------------------------------------------------------------------------------------------\n          // Signals that all events have been rendered\n          onEventsRender: function onEventsRender() {\n            this.applyScreenState();\n            this.renderedEventSegEach(function (seg) {\n              this.publiclyTrigger('eventAfterRender', seg.event, seg.event, seg.el);\n            });\n            this.publiclyTrigger('eventAfterAllRender');\n          },\n          // Signals that all event elements are about to be removed\n          onBeforeEventsUnrender: function onBeforeEventsUnrender() {\n            this.applyScreenState();\n            this.renderedEventSegEach(function (seg) {\n              this.publiclyTrigger('eventDestroy', seg.event, seg.event, seg.el);\n            });\n          },\n          applyScreenState: function applyScreenState() {\n            this.thawHeight();\n            this.freezeHeight();\n            this.applyQueuedScroll();\n          },\n          // Event Low-level Rendering\n          // -----------------------------------------------------------------------------------------------------------------\n          // Renders the events onto the view.\n          renderEvents: function renderEvents(events) {// subclasses should implement\n          },\n          // Removes event elements from the view.\n          unrenderEvents: function unrenderEvents() {// subclasses should implement\n          },\n          // Event Rendering Utils\n          // -----------------------------------------------------------------------------------------------------------------\n          // Given an event and the default element used for rendering, returns the element that should actually be used.\n          // Basically runs events and elements through the eventRender hook.\n          resolveEventEl: function resolveEventEl(event, el) {\n            var custom = this.publiclyTrigger('eventRender', event, event, el);\n\n            if (custom === false) {\n              // means don't render at all\n              el = null;\n            } else if (custom && custom !== true) {\n              el = $(custom);\n            }\n\n            return el;\n          },\n          // Hides all rendered event segments linked to the given event\n          showEvent: function showEvent(event) {\n            this.renderedEventSegEach(function (seg) {\n              seg.el.css('visibility', '');\n            }, event);\n          },\n          // Shows all rendered event segments linked to the given event\n          hideEvent: function hideEvent(event) {\n            this.renderedEventSegEach(function (seg) {\n              seg.el.css('visibility', 'hidden');\n            }, event);\n          },\n          // Iterates through event segments that have been rendered (have an el). Goes through all by default.\n          // If the optional `event` argument is specified, only iterates through segments linked to that event.\n          // The `this` value of the callback function will be the view.\n          renderedEventSegEach: function renderedEventSegEach(func, event) {\n            var segs = this.getEventSegs();\n            var i;\n\n            for (i = 0; i < segs.length; i++) {\n              if (!event || segs[i].event._id === event._id) {\n                if (segs[i].el) {\n                  func.call(this, segs[i]);\n                }\n              }\n            }\n          },\n          // Retrieves all the rendered segment objects for the view\n          getEventSegs: function getEventSegs() {\n            // subclasses must implement\n            return [];\n          },\n\n          /* Event Drag-n-Drop\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Computes if the given event is allowed to be dragged by the user\n          isEventDraggable: function isEventDraggable(event) {\n            return this.isEventStartEditable(event);\n          },\n          isEventStartEditable: function isEventStartEditable(event) {\n            return firstDefined(event.startEditable, (event.source || {}).startEditable, this.opt('eventStartEditable'), this.isEventGenerallyEditable(event));\n          },\n          isEventGenerallyEditable: function isEventGenerallyEditable(event) {\n            return firstDefined(event.editable, (event.source || {}).editable, this.opt('editable'));\n          },\n          // Must be called when an event in the view is dropped onto new location.\n          // `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.\n          reportSegDrop: function reportSegDrop(seg, dropLocation, largeUnit, el, ev) {\n            var calendar = this.calendar;\n            var mutateResult = calendar.mutateSeg(seg, dropLocation, largeUnit);\n\n            var undoFunc = function undoFunc() {\n              mutateResult.undo();\n              calendar.reportEventChange();\n            };\n\n            this.triggerEventDrop(seg.event, mutateResult.dateDelta, undoFunc, el, ev);\n            calendar.reportEventChange(); // will rerender events\n          },\n          // Triggers event-drop handlers that have subscribed via the API\n          triggerEventDrop: function triggerEventDrop(event, dateDelta, undoFunc, el, ev) {\n            this.publiclyTrigger('eventDrop', el[0], event, dateDelta, undoFunc, ev, {}); // {} = jqui dummy\n          },\n\n          /* External Element Drag-n-Drop\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Must be called when an external element, via jQuery UI, has been dropped onto the calendar.\n          // `meta` is the parsed data that has been embedded into the dragging event.\n          // `dropLocation` is an object that contains the new zoned start/end/allDay values for the event.\n          reportExternalDrop: function reportExternalDrop(meta, dropLocation, el, ev, ui) {\n            var eventProps = meta.eventProps;\n            var eventInput;\n            var event; // Try to build an event object and render it. TODO: decouple the two\n\n            if (eventProps) {\n              eventInput = $.extend({}, eventProps, dropLocation);\n              event = this.calendar.renderEvent(eventInput, meta.stick)[0]; // renderEvent returns an array\n            }\n\n            this.triggerExternalDrop(event, dropLocation, el, ev, ui);\n          },\n          // Triggers external-drop handlers that have subscribed via the API\n          triggerExternalDrop: function triggerExternalDrop(event, dropLocation, el, ev, ui) {\n            // trigger 'drop' regardless of whether element represents an event\n            this.publiclyTrigger('drop', el[0], dropLocation.start, ev, ui);\n\n            if (event) {\n              this.publiclyTrigger('eventReceive', null, event); // signal an external event landed\n            }\n          },\n\n          /* Drag-n-Drop Rendering (for both events and external elements)\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders a visual indication of a event or external-element drag over the given drop zone.\n          // If an external-element, seg will be `null`.\n          // Must return elements used for any mock events.\n          renderDrag: function renderDrag(dropLocation, seg) {// subclasses must implement\n          },\n          // Unrenders a visual indication of an event or external-element being dragged.\n          unrenderDrag: function unrenderDrag() {// subclasses must implement\n          },\n\n          /* Event Resizing\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Computes if the given event is allowed to be resized from its starting edge\n          isEventResizableFromStart: function isEventResizableFromStart(event) {\n            return this.opt('eventResizableFromStart') && this.isEventResizable(event);\n          },\n          // Computes if the given event is allowed to be resized from its ending edge\n          isEventResizableFromEnd: function isEventResizableFromEnd(event) {\n            return this.isEventResizable(event);\n          },\n          // Computes if the given event is allowed to be resized by the user at all\n          isEventResizable: function isEventResizable(event) {\n            var source = event.source || {};\n            return firstDefined(event.durationEditable, source.durationEditable, this.opt('eventDurationEditable'), event.editable, source.editable, this.opt('editable'));\n          },\n          // Must be called when an event in the view has been resized to a new length\n          reportSegResize: function reportSegResize(seg, resizeLocation, largeUnit, el, ev) {\n            var calendar = this.calendar;\n            var mutateResult = calendar.mutateSeg(seg, resizeLocation, largeUnit);\n\n            var undoFunc = function undoFunc() {\n              mutateResult.undo();\n              calendar.reportEventChange();\n            };\n\n            this.triggerEventResize(seg.event, mutateResult.durationDelta, undoFunc, el, ev);\n            calendar.reportEventChange(); // will rerender events\n          },\n          // Triggers event-resize handlers that have subscribed via the API\n          triggerEventResize: function triggerEventResize(event, durationDelta, undoFunc, el, ev) {\n            this.publiclyTrigger('eventResize', el[0], event, durationDelta, undoFunc, ev, {}); // {} = jqui dummy\n          },\n\n          /* Selection (time range)\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Selects a date span on the view. `start` and `end` are both Moments.\n          // `ev` is the native mouse event that begin the interaction.\n          select: function select(span, ev) {\n            this.unselect(ev);\n            this.renderSelection(span);\n            this.reportSelection(span, ev);\n          },\n          // Renders a visual indication of the selection\n          renderSelection: function renderSelection(span) {// subclasses should implement\n          },\n          // Called when a new selection is made. Updates internal state and triggers handlers.\n          reportSelection: function reportSelection(span, ev) {\n            this.isSelected = true;\n            this.triggerSelect(span, ev);\n          },\n          // Triggers handlers to 'select'\n          triggerSelect: function triggerSelect(span, ev) {\n            this.publiclyTrigger('select', null, this.calendar.applyTimezone(span.start), // convert to calendar's tz for external API\n            this.calendar.applyTimezone(span.end), // \"\n            ev);\n          },\n          // Undoes a selection. updates in the internal state and triggers handlers.\n          // `ev` is the native mouse event that began the interaction.\n          unselect: function unselect(ev) {\n            if (this.isSelected) {\n              this.isSelected = false;\n\n              if (this.destroySelection) {\n                this.destroySelection(); // TODO: deprecate\n              }\n\n              this.unrenderSelection();\n              this.publiclyTrigger('unselect', null, ev);\n            }\n          },\n          // Unrenders a visual indication of selection\n          unrenderSelection: function unrenderSelection() {// subclasses should implement\n          },\n\n          /* Event Selection\n          ------------------------------------------------------------------------------------------------------------------*/\n          selectEvent: function selectEvent(event) {\n            if (!this.selectedEvent || this.selectedEvent !== event) {\n              this.unselectEvent();\n              this.renderedEventSegEach(function (seg) {\n                seg.el.addClass('fc-selected');\n              }, event);\n              this.selectedEvent = event;\n            }\n          },\n          unselectEvent: function unselectEvent() {\n            if (this.selectedEvent) {\n              this.renderedEventSegEach(function (seg) {\n                seg.el.removeClass('fc-selected');\n              }, this.selectedEvent);\n              this.selectedEvent = null;\n            }\n          },\n          isEventSelected: function isEventSelected(event) {\n            // event references might change on refetchEvents(), while selectedEvent doesn't,\n            // so compare IDs\n            return this.selectedEvent && this.selectedEvent._id === event._id;\n          },\n\n          /* Mouse / Touch Unselecting (time range & event unselection)\n          ------------------------------------------------------------------------------------------------------------------*/\n          // TODO: move consistently to down/start or up/end?\n          // TODO: don't kill previous selection if touch scrolling\n          handleDocumentMousedown: function handleDocumentMousedown(ev) {\n            if (isPrimaryMouseButton(ev)) {\n              this.processUnselect(ev);\n            }\n          },\n          processUnselect: function processUnselect(ev) {\n            this.processRangeUnselect(ev);\n            this.processEventUnselect(ev);\n          },\n          processRangeUnselect: function processRangeUnselect(ev) {\n            var ignore; // is there a time-range selection?\n\n            if (this.isSelected && this.opt('unselectAuto')) {\n              // only unselect if the clicked element is not identical to or inside of an 'unselectCancel' element\n              ignore = this.opt('unselectCancel');\n\n              if (!ignore || !$(ev.target).closest(ignore).length) {\n                this.unselect(ev);\n              }\n            }\n          },\n          processEventUnselect: function processEventUnselect(ev) {\n            if (this.selectedEvent) {\n              if (!$(ev.target).closest('.fc-selected').length) {\n                this.unselectEvent();\n              }\n            }\n          },\n\n          /* Day Click\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Triggers handlers to 'dayClick'\n          // Span has start/end of the clicked area. Only the start is useful.\n          triggerDayClick: function triggerDayClick(span, dayEl, ev) {\n            this.publiclyTrigger('dayClick', dayEl, this.calendar.applyTimezone(span.start), // convert to calendar's timezone for external API\n            ev);\n          },\n\n          /* Date Utils\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Returns the date range of the full days the given range visually appears to occupy.\n          // Returns a new range object.\n          computeDayRange: function computeDayRange(range) {\n            var startDay = range.start.clone().stripTime(); // the beginning of the day the range starts\n\n            var end = range.end;\n            var endDay = null;\n            var endTimeMS;\n\n            if (end) {\n              endDay = end.clone().stripTime(); // the beginning of the day the range exclusively ends\n\n              endTimeMS = +end.time(); // # of milliseconds into `endDay`\n              // If the end time is actually inclusively part of the next day and is equal to or\n              // beyond the next day threshold, adjust the end to be the exclusive end of `endDay`.\n              // Otherwise, leaving it as inclusive will cause it to exclude `endDay`.\n\n              if (endTimeMS && endTimeMS >= this.nextDayThreshold) {\n                endDay.add(1, 'days');\n              }\n            } // If no end was specified, or if it is within `startDay` but not past nextDayThreshold,\n            // assign the default duration of one day.\n\n\n            if (!end || endDay <= startDay) {\n              endDay = startDay.clone().add(1, 'days');\n            }\n\n            return {\n              start: startDay,\n              end: endDay\n            };\n          },\n          // Does the given event visually appear to occupy more than one day?\n          isMultiDayEvent: function isMultiDayEvent(event) {\n            var range = this.computeDayRange(event); // event is range-ish\n\n            return range.end.diff(range.start, 'days') > 1;\n          }\n        });\n        View.watch('displayingDates', ['dateProfile'], function (deps) {\n          this.requestDateRender(deps.dateProfile);\n        }, function () {\n          this.requestDateUnrender();\n        });\n        View.watch('initialEvents', ['dateProfile'], function (deps) {\n          return this.fetchInitialEvents(deps.dateProfile);\n        });\n        View.watch('bindingEvents', ['initialEvents'], function (deps) {\n          this.setEvents(deps.initialEvents);\n          this.bindEventChanges();\n        }, function () {\n          this.unbindEventChanges();\n          this.unsetEvents();\n        });\n        View.watch('displayingEvents', ['displayingDates', 'hasEvents'], function () {\n          this.requestEventsRender(this.get('currentEvents')); // if there were event mutations after initialEvents\n        }, function () {\n          this.requestEventsUnrender();\n        });\n        ;\n        ;\n        View.mixin({\n          // range the view is formally responsible for.\n          // for example, a month view might have 1st-31st, excluding padded dates\n          currentRange: null,\n          currentRangeUnit: null,\n          // name of largest unit being displayed, like \"month\" or \"week\"\n          // date range with a rendered skeleton\n          // includes not-active days that need some sort of DOM\n          renderRange: null,\n          // dates that display events and accept drag-n-drop\n          activeRange: null,\n          // constraint for where prev/next operations can go and where events can be dragged/resized to.\n          // an object with optional start and end properties.\n          validRange: null,\n          // how far the current date will move for a prev/next operation\n          dateIncrement: null,\n          minTime: null,\n          // Duration object that denotes the first visible time of any given day\n          maxTime: null,\n          // Duration object that denotes the exclusive visible end time of any given day\n          usesMinMaxTime: false,\n          // whether minTime/maxTime will affect the activeRange. Views must opt-in.\n          // DEPRECATED\n          start: null,\n          // use activeRange.start\n          end: null,\n          // use activeRange.end\n          intervalStart: null,\n          // use currentRange.start\n          intervalEnd: null,\n          // use currentRange.end\n\n          /* Date Range Computation\n          ------------------------------------------------------------------------------------------------------------------*/\n          setDateProfileForRendering: function setDateProfileForRendering(dateProfile) {\n            this.currentRange = dateProfile.currentRange;\n            this.currentRangeUnit = dateProfile.currentRangeUnit;\n            this.renderRange = dateProfile.renderRange;\n            this.activeRange = dateProfile.activeRange;\n            this.validRange = dateProfile.validRange;\n            this.dateIncrement = dateProfile.dateIncrement;\n            this.minTime = dateProfile.minTime;\n            this.maxTime = dateProfile.maxTime; // DEPRECATED, but we need to keep it updated\n\n            this.start = dateProfile.activeRange.start;\n            this.end = dateProfile.activeRange.end;\n            this.intervalStart = dateProfile.currentRange.start;\n            this.intervalEnd = dateProfile.currentRange.end;\n          },\n          // Builds a structure with info about what the dates/ranges will be for the \"prev\" view.\n          buildPrevDateProfile: function buildPrevDateProfile(date) {\n            var prevDate = date.clone().startOf(this.currentRangeUnit).subtract(this.dateIncrement);\n            return this.buildDateProfile(prevDate, -1);\n          },\n          // Builds a structure with info about what the dates/ranges will be for the \"next\" view.\n          buildNextDateProfile: function buildNextDateProfile(date) {\n            var nextDate = date.clone().startOf(this.currentRangeUnit).add(this.dateIncrement);\n            return this.buildDateProfile(nextDate, 1);\n          },\n          // Builds a structure holding dates/ranges for rendering around the given date.\n          // Optional direction param indicates whether the date is being incremented/decremented\n          // from its previous value. decremented = -1, incremented = 1 (default).\n          buildDateProfile: function buildDateProfile(date, direction, forceToValid) {\n            var validRange = this.buildValidRange();\n            var minTime = null;\n            var maxTime = null;\n            var currentInfo;\n            var renderRange;\n            var activeRange;\n            var isValid;\n\n            if (forceToValid) {\n              date = constrainDate(date, validRange);\n            }\n\n            currentInfo = this.buildCurrentRangeInfo(date, direction);\n            renderRange = this.buildRenderRange(currentInfo.range, currentInfo.unit);\n            activeRange = cloneRange(renderRange);\n\n            if (!this.opt('showNonCurrentDates')) {\n              activeRange = constrainRange(activeRange, currentInfo.range);\n            }\n\n            minTime = moment.duration(this.opt('minTime'));\n            maxTime = moment.duration(this.opt('maxTime'));\n            this.adjustActiveRange(activeRange, minTime, maxTime);\n            activeRange = constrainRange(activeRange, validRange);\n            date = constrainDate(date, activeRange); // it's invalid if the originally requested date is not contained,\n            // or if the range is completely outside of the valid range.\n\n            isValid = doRangesIntersect(currentInfo.range, validRange);\n            return {\n              validRange: validRange,\n              currentRange: currentInfo.range,\n              currentRangeUnit: currentInfo.unit,\n              activeRange: activeRange,\n              renderRange: renderRange,\n              minTime: minTime,\n              maxTime: maxTime,\n              isValid: isValid,\n              date: date,\n              dateIncrement: this.buildDateIncrement(currentInfo.duration) // pass a fallback (might be null) ^\n\n            };\n          },\n          // Builds an object with optional start/end properties.\n          // Indicates the minimum/maximum dates to display.\n          buildValidRange: function buildValidRange() {\n            return this.getRangeOption('validRange', this.calendar.getNow()) || {};\n          },\n          // Builds a structure with info about the \"current\" range, the range that is\n          // highlighted as being the current month for example.\n          // See buildDateProfile for a description of `direction`.\n          // Guaranteed to have `range` and `unit` properties. `duration` is optional.\n          buildCurrentRangeInfo: function buildCurrentRangeInfo(date, direction) {\n            var duration = null;\n            var unit = null;\n            var range = null;\n            var dayCount;\n\n            if (this.viewSpec.duration) {\n              duration = this.viewSpec.duration;\n              unit = this.viewSpec.durationUnit;\n              range = this.buildRangeFromDuration(date, direction, duration, unit);\n            } else if (dayCount = this.opt('dayCount')) {\n              unit = 'day';\n              range = this.buildRangeFromDayCount(date, direction, dayCount);\n            } else if (range = this.buildCustomVisibleRange(date)) {\n              unit = computeGreatestUnit(range.start, range.end);\n            } else {\n              duration = this.getFallbackDuration();\n              unit = computeGreatestUnit(duration);\n              range = this.buildRangeFromDuration(date, direction, duration, unit);\n            }\n\n            this.normalizeCurrentRange(range, unit); // modifies in-place\n\n            return {\n              duration: duration,\n              unit: unit,\n              range: range\n            };\n          },\n          getFallbackDuration: function getFallbackDuration() {\n            return moment.duration({\n              days: 1\n            });\n          },\n          // If the range has day units or larger, remove times. Otherwise, ensure times.\n          normalizeCurrentRange: function normalizeCurrentRange(range, unit) {\n            if (/^(year|month|week|day)$/.test(unit)) {\n              // whole-days?\n              range.start.stripTime();\n              range.end.stripTime();\n            } else {\n              // needs to have a time?\n              if (!range.start.hasTime()) {\n                range.start.time(0); // give 00:00 time\n              }\n\n              if (!range.end.hasTime()) {\n                range.end.time(0); // give 00:00 time\n              }\n            }\n          },\n          // Mutates the given activeRange to have time values (un-ambiguate)\n          // if the minTime or maxTime causes the range to expand.\n          // TODO: eventually activeRange should *always* have times.\n          adjustActiveRange: function adjustActiveRange(range, minTime, maxTime) {\n            var hasSpecialTimes = false;\n\n            if (this.usesMinMaxTime) {\n              if (minTime < 0) {\n                range.start.time(0).add(minTime);\n                hasSpecialTimes = true;\n              }\n\n              if (maxTime > 24 * 60 * 60 * 1000) {\n                // beyond 24 hours?\n                range.end.time(maxTime - 24 * 60 * 60 * 1000);\n                hasSpecialTimes = true;\n              }\n\n              if (hasSpecialTimes) {\n                if (!range.start.hasTime()) {\n                  range.start.time(0);\n                }\n\n                if (!range.end.hasTime()) {\n                  range.end.time(0);\n                }\n              }\n            }\n          },\n          // Builds the \"current\" range when it is specified as an explicit duration.\n          // `unit` is the already-computed computeGreatestUnit value of duration.\n          buildRangeFromDuration: function buildRangeFromDuration(date, direction, duration, unit) {\n            var alignment = this.opt('dateAlignment');\n            var start = date.clone();\n            var end;\n            var dateIncrementInput;\n            var dateIncrementDuration; // if the view displays a single day or smaller\n\n            if (duration.as('days') <= 1) {\n              if (this.isHiddenDay(start)) {\n                start = this.skipHiddenDays(start, direction);\n                start.startOf('day');\n              }\n            } // compute what the alignment should be\n\n\n            if (!alignment) {\n              dateIncrementInput = this.opt('dateIncrement');\n\n              if (dateIncrementInput) {\n                dateIncrementDuration = moment.duration(dateIncrementInput); // use the smaller of the two units\n\n                if (dateIncrementDuration < duration) {\n                  alignment = computeDurationGreatestUnit(dateIncrementDuration, dateIncrementInput);\n                } else {\n                  alignment = unit;\n                }\n              } else {\n                alignment = unit;\n              }\n            }\n\n            start.startOf(alignment);\n            end = start.clone().add(duration);\n            return {\n              start: start,\n              end: end\n            };\n          },\n          // Builds the \"current\" range when a dayCount is specified.\n          buildRangeFromDayCount: function buildRangeFromDayCount(date, direction, dayCount) {\n            var customAlignment = this.opt('dateAlignment');\n            var runningCount = 0;\n            var start = date.clone();\n            var end;\n\n            if (customAlignment) {\n              start.startOf(customAlignment);\n            }\n\n            start.startOf('day');\n            start = this.skipHiddenDays(start, direction);\n            end = start.clone();\n\n            do {\n              end.add(1, 'day');\n\n              if (!this.isHiddenDay(end)) {\n                runningCount++;\n              }\n            } while (runningCount < dayCount);\n\n            return {\n              start: start,\n              end: end\n            };\n          },\n          // Builds a normalized range object for the \"visible\" range,\n          // which is a way to define the currentRange and activeRange at the same time.\n          buildCustomVisibleRange: function buildCustomVisibleRange(date) {\n            var visibleRange = this.getRangeOption('visibleRange', this.calendar.moment(date) // correct zone. also generates new obj that avoids mutations\n            );\n\n            if (visibleRange && (!visibleRange.start || !visibleRange.end)) {\n              return null;\n            }\n\n            return visibleRange;\n          },\n          // Computes the range that will represent the element/cells for *rendering*,\n          // but which may have voided days/times.\n          buildRenderRange: function buildRenderRange(currentRange, currentRangeUnit) {\n            // cut off days in the currentRange that are hidden\n            return this.trimHiddenDays(currentRange);\n          },\n          // Compute the duration value that should be added/substracted to the current date\n          // when a prev/next operation happens.\n          buildDateIncrement: function buildDateIncrement(fallback) {\n            var dateIncrementInput = this.opt('dateIncrement');\n            var customAlignment;\n\n            if (dateIncrementInput) {\n              return moment.duration(dateIncrementInput);\n            } else if (customAlignment = this.opt('dateAlignment')) {\n              return moment.duration(1, customAlignment);\n            } else if (fallback) {\n              return fallback;\n            } else {\n              return moment.duration({\n                days: 1\n              });\n            }\n          },\n          // Remove days from the beginning and end of the range that are computed as hidden.\n          trimHiddenDays: function trimHiddenDays(inputRange) {\n            return {\n              start: this.skipHiddenDays(inputRange.start),\n              end: this.skipHiddenDays(inputRange.end, -1, true) // exclusively move backwards\n\n            };\n          },\n          // Compute the number of the give units in the \"current\" range.\n          // Will return a floating-point number. Won't round.\n          currentRangeAs: function currentRangeAs(unit) {\n            var currentRange = this.currentRange;\n            return currentRange.end.diff(currentRange.start, unit, true);\n          },\n          // Arguments after name will be forwarded to a hypothetical function value\n          // WARNING: passed-in arguments will be given to generator functions as-is and can cause side-effects.\n          // Always clone your objects if you fear mutation.\n          getRangeOption: function getRangeOption(name) {\n            var val = this.opt(name);\n\n            if (typeof val === 'function') {\n              val = val.apply(null, Array.prototype.slice.call(arguments, 1));\n            }\n\n            if (val) {\n              return this.calendar.parseRange(val);\n            }\n          },\n\n          /* Hidden Days\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Initializes internal variables related to calculating hidden days-of-week\n          initHiddenDays: function initHiddenDays() {\n            var hiddenDays = this.opt('hiddenDays') || []; // array of day-of-week indices that are hidden\n\n            var isHiddenDayHash = []; // is the day-of-week hidden? (hash with day-of-week-index -> bool)\n\n            var dayCnt = 0;\n            var i;\n\n            if (this.opt('weekends') === false) {\n              hiddenDays.push(0, 6); // 0=sunday, 6=saturday\n            }\n\n            for (i = 0; i < 7; i++) {\n              if (!(isHiddenDayHash[i] = $.inArray(i, hiddenDays) !== -1)) {\n                dayCnt++;\n              }\n            }\n\n            if (!dayCnt) {\n              throw 'invalid hiddenDays'; // all days were hidden? bad.\n            }\n\n            this.isHiddenDayHash = isHiddenDayHash;\n          },\n          // Is the current day hidden?\n          // `day` is a day-of-week index (0-6), or a Moment\n          isHiddenDay: function isHiddenDay(day) {\n            if (moment.isMoment(day)) {\n              day = day.day();\n            }\n\n            return this.isHiddenDayHash[day];\n          },\n          // Incrementing the current day until it is no longer a hidden day, returning a copy.\n          // DOES NOT CONSIDER validRange!\n          // If the initial value of `date` is not a hidden day, don't do anything.\n          // Pass `isExclusive` as `true` if you are dealing with an end date.\n          // `inc` defaults to `1` (increment one day forward each time)\n          skipHiddenDays: function skipHiddenDays(date, inc, isExclusive) {\n            var out = date.clone();\n            inc = inc || 1;\n\n            while (this.isHiddenDayHash[(out.day() + (isExclusive ? inc : 0) + 7) % 7]) {\n              out.add(inc, 'days');\n            }\n\n            return out;\n          }\n        });\n        ;\n        ;\n        /*\n        Embodies a div that has potential scrollbars\n        */\n\n        var Scroller = FC.Scroller = Class.extend({\n          el: null,\n          // the guaranteed outer element\n          scrollEl: null,\n          // the element with the scrollbars\n          overflowX: null,\n          overflowY: null,\n          constructor: function constructor(options) {\n            options = options || {};\n            this.overflowX = options.overflowX || options.overflow || 'auto';\n            this.overflowY = options.overflowY || options.overflow || 'auto';\n          },\n          render: function render() {\n            this.el = this.renderEl();\n            this.applyOverflow();\n          },\n          renderEl: function renderEl() {\n            return this.scrollEl = $('<div class=\"fc-scroller\"></div>');\n          },\n          // sets to natural height, unlocks overflow\n          clear: function clear() {\n            this.setHeight('auto');\n            this.applyOverflow();\n          },\n          destroy: function destroy() {\n            this.el.remove();\n          },\n          // Overflow\n          // -----------------------------------------------------------------------------------------------------------------\n          applyOverflow: function applyOverflow() {\n            this.scrollEl.css({\n              'overflow-x': this.overflowX,\n              'overflow-y': this.overflowY\n            });\n          },\n          // Causes any 'auto' overflow values to resolves to 'scroll' or 'hidden'.\n          // Useful for preserving scrollbar widths regardless of future resizes.\n          // Can pass in scrollbarWidths for optimization.\n          lockOverflow: function lockOverflow(scrollbarWidths) {\n            var overflowX = this.overflowX;\n            var overflowY = this.overflowY;\n            scrollbarWidths = scrollbarWidths || this.getScrollbarWidths();\n\n            if (overflowX === 'auto') {\n              overflowX = scrollbarWidths.top || scrollbarWidths.bottom || // horizontal scrollbars?\n              // OR scrolling pane with massless scrollbars?\n              this.scrollEl[0].scrollWidth - 1 > this.scrollEl[0].clientWidth // subtract 1 because of IE off-by-one issue\n              ? 'scroll' : 'hidden';\n            }\n\n            if (overflowY === 'auto') {\n              overflowY = scrollbarWidths.left || scrollbarWidths.right || // vertical scrollbars?\n              // OR scrolling pane with massless scrollbars?\n              this.scrollEl[0].scrollHeight - 1 > this.scrollEl[0].clientHeight // subtract 1 because of IE off-by-one issue\n              ? 'scroll' : 'hidden';\n            }\n\n            this.scrollEl.css({\n              'overflow-x': overflowX,\n              'overflow-y': overflowY\n            });\n          },\n          // Getters / Setters\n          // -----------------------------------------------------------------------------------------------------------------\n          setHeight: function setHeight(height) {\n            this.scrollEl.height(height);\n          },\n          getScrollTop: function getScrollTop() {\n            return this.scrollEl.scrollTop();\n          },\n          setScrollTop: function setScrollTop(top) {\n            this.scrollEl.scrollTop(top);\n          },\n          getClientWidth: function getClientWidth() {\n            return this.scrollEl[0].clientWidth;\n          },\n          getClientHeight: function getClientHeight() {\n            return this.scrollEl[0].clientHeight;\n          },\n          getScrollbarWidths: function getScrollbarWidths() {\n            return _getScrollbarWidths(this.scrollEl);\n          }\n        });\n        ;\n        ;\n\n        function Iterator(items) {\n          this.items = items || [];\n        }\n        /* Calls a method on every item passing the arguments through */\n\n\n        Iterator.prototype.proxyCall = function (methodName) {\n          var args = Array.prototype.slice.call(arguments, 1);\n          var results = [];\n          this.items.forEach(function (item) {\n            results.push(item[methodName].apply(item, args));\n          });\n          return results;\n        };\n\n        ;\n        ;\n        /* Toolbar with buttons and title\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n        function Toolbar(calendar, toolbarOptions) {\n          var t = this; // exports\n\n          t.setToolbarOptions = setToolbarOptions;\n          t.render = render;\n          t.removeElement = removeElement;\n          t.updateTitle = updateTitle;\n          t.activateButton = activateButton;\n          t.deactivateButton = deactivateButton;\n          t.disableButton = disableButton;\n          t.enableButton = enableButton;\n          t.getViewsWithButtons = getViewsWithButtons;\n          t.el = null; // mirrors local `el`\n          // locals\n\n          var el;\n          var viewsWithButtons = [];\n          var tm; // method to update toolbar-specific options, not calendar-wide options\n\n          function setToolbarOptions(newToolbarOptions) {\n            toolbarOptions = newToolbarOptions;\n          } // can be called repeatedly and will rerender\n\n\n          function render() {\n            var sections = toolbarOptions.layout;\n            tm = calendar.opt('theme') ? 'ui' : 'fc';\n\n            if (sections) {\n              if (!el) {\n                el = this.el = $(\"<div class='fc-toolbar \" + toolbarOptions.extraClasses + \"'/>\");\n              } else {\n                el.empty();\n              }\n\n              el.append(renderSection('left')).append(renderSection('right')).append(renderSection('center')).append('<div class=\"fc-clear\"/>');\n            } else {\n              removeElement();\n            }\n          }\n\n          function removeElement() {\n            if (el) {\n              el.remove();\n              el = t.el = null;\n            }\n          }\n\n          function renderSection(position) {\n            var sectionEl = $('<div class=\"fc-' + position + '\"/>');\n            var buttonStr = toolbarOptions.layout[position];\n            var calendarCustomButtons = calendar.opt('customButtons') || {};\n            var calendarButtonText = calendar.opt('buttonText') || {};\n\n            if (buttonStr) {\n              $.each(buttonStr.split(' '), function (i) {\n                var groupChildren = $();\n                var isOnlyButtons = true;\n                var groupEl;\n                $.each(this.split(','), function (j, buttonName) {\n                  var customButtonProps;\n                  var viewSpec;\n                  var buttonClick;\n                  var overrideText; // text explicitly set by calendar's constructor options. overcomes icons\n\n                  var defaultText;\n                  var themeIcon;\n                  var normalIcon;\n                  var innerHtml;\n                  var classes;\n                  var button; // the element\n\n                  if (buttonName == 'title') {\n                    groupChildren = groupChildren.add($('<h2>&nbsp;</h2>')); // we always want it to take up height\n\n                    isOnlyButtons = false;\n                  } else {\n                    if (customButtonProps = calendarCustomButtons[buttonName]) {\n                      buttonClick = function buttonClick(ev) {\n                        if (customButtonProps.click) {\n                          customButtonProps.click.call(button[0], ev);\n                        }\n                      };\n\n                      overrideText = ''; // icons will override text\n\n                      defaultText = customButtonProps.text;\n                    } else if (viewSpec = calendar.getViewSpec(buttonName)) {\n                      buttonClick = function buttonClick() {\n                        calendar.changeView(buttonName);\n                      };\n\n                      viewsWithButtons.push(buttonName);\n                      overrideText = viewSpec.buttonTextOverride;\n                      defaultText = viewSpec.buttonTextDefault;\n                    } else if (calendar[buttonName]) {\n                      // a calendar method\n                      buttonClick = function buttonClick() {\n                        calendar[buttonName]();\n                      };\n\n                      overrideText = (calendar.overrides.buttonText || {})[buttonName];\n                      defaultText = calendarButtonText[buttonName]; // everything else is considered default\n                    }\n\n                    if (buttonClick) {\n                      themeIcon = customButtonProps ? customButtonProps.themeIcon : calendar.opt('themeButtonIcons')[buttonName];\n                      normalIcon = customButtonProps ? customButtonProps.icon : calendar.opt('buttonIcons')[buttonName];\n\n                      if (overrideText) {\n                        innerHtml = htmlEscape(overrideText);\n                      } else if (themeIcon && calendar.opt('theme')) {\n                        innerHtml = \"<span class='ui-icon ui-icon-\" + themeIcon + \"'></span>\";\n                      } else if (normalIcon && !calendar.opt('theme')) {\n                        innerHtml = \"<span class='fc-icon fc-icon-\" + normalIcon + \"'></span>\";\n                      } else {\n                        innerHtml = htmlEscape(defaultText);\n                      }\n\n                      classes = ['fc-' + buttonName + '-button', tm + '-button', tm + '-state-default'];\n                      button = $( // type=\"button\" so that it doesn't submit a form\n                      '<button type=\"button\" class=\"' + classes.join(' ') + '\">' + innerHtml + '</button>').click(function (ev) {\n                        // don't process clicks for disabled buttons\n                        if (!button.hasClass(tm + '-state-disabled')) {\n                          buttonClick(ev); // after the click action, if the button becomes the \"active\" tab, or disabled,\n                          // it should never have a hover class, so remove it now.\n\n                          if (button.hasClass(tm + '-state-active') || button.hasClass(tm + '-state-disabled')) {\n                            button.removeClass(tm + '-state-hover');\n                          }\n                        }\n                      }).mousedown(function () {\n                        // the *down* effect (mouse pressed in).\n                        // only on buttons that are not the \"active\" tab, or disabled\n                        button.not('.' + tm + '-state-active').not('.' + tm + '-state-disabled').addClass(tm + '-state-down');\n                      }).mouseup(function () {\n                        // undo the *down* effect\n                        button.removeClass(tm + '-state-down');\n                      }).hover(function () {\n                        // the *hover* effect.\n                        // only on buttons that are not the \"active\" tab, or disabled\n                        button.not('.' + tm + '-state-active').not('.' + tm + '-state-disabled').addClass(tm + '-state-hover');\n                      }, function () {\n                        // undo the *hover* effect\n                        button.removeClass(tm + '-state-hover').removeClass(tm + '-state-down'); // if mouseleave happens before mouseup\n                      });\n                      groupChildren = groupChildren.add(button);\n                    }\n                  }\n                });\n\n                if (isOnlyButtons) {\n                  groupChildren.first().addClass(tm + '-corner-left').end().last().addClass(tm + '-corner-right').end();\n                }\n\n                if (groupChildren.length > 1) {\n                  groupEl = $('<div/>');\n\n                  if (isOnlyButtons) {\n                    groupEl.addClass('fc-button-group');\n                  }\n\n                  groupEl.append(groupChildren);\n                  sectionEl.append(groupEl);\n                } else {\n                  sectionEl.append(groupChildren); // 1 or 0 children\n                }\n              });\n            }\n\n            return sectionEl;\n          }\n\n          function updateTitle(text) {\n            if (el) {\n              el.find('h2').text(text);\n            }\n          }\n\n          function activateButton(buttonName) {\n            if (el) {\n              el.find('.fc-' + buttonName + '-button').addClass(tm + '-state-active');\n            }\n          }\n\n          function deactivateButton(buttonName) {\n            if (el) {\n              el.find('.fc-' + buttonName + '-button').removeClass(tm + '-state-active');\n            }\n          }\n\n          function disableButton(buttonName) {\n            if (el) {\n              el.find('.fc-' + buttonName + '-button').prop('disabled', true).addClass(tm + '-state-disabled');\n            }\n          }\n\n          function enableButton(buttonName) {\n            if (el) {\n              el.find('.fc-' + buttonName + '-button').prop('disabled', false).removeClass(tm + '-state-disabled');\n            }\n          }\n\n          function getViewsWithButtons() {\n            return viewsWithButtons;\n          }\n        }\n\n        ;\n        ;\n        var Calendar = FC.Calendar = Class.extend(EmitterMixin, {\n          view: null,\n          // current View object\n          viewsByType: null,\n          // holds all instantiated view instances, current or not\n          currentDate: null,\n          // unzoned moment. private (public API should use getDate instead)\n          loadingLevel: 0,\n          // number of simultaneous loading tasks\n          constructor: function constructor(el, overrides) {\n            // declare the current calendar instance relies on GlobalEmitter. needed for garbage collection.\n            // unneeded() is called in destroy.\n            GlobalEmitter.needed();\n            this.el = el;\n            this.viewsByType = {};\n            this.viewSpecCache = {};\n            this.initOptionsInternals(overrides);\n            this.initMomentInternals(); // needs to happen after options hash initialized\n\n            this.initCurrentDate();\n            EventManager.call(this); // needs options immediately\n\n            this.initialize();\n          },\n          // Subclasses can override this for initialization logic after the constructor has been called\n          initialize: function initialize() {},\n          // Public API\n          // -----------------------------------------------------------------------------------------------------------------\n          getCalendar: function getCalendar() {\n            return this;\n          },\n          getView: function getView() {\n            return this.view;\n          },\n          publiclyTrigger: function publiclyTrigger(name, thisObj) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            var optHandler = this.opt(name);\n            thisObj = thisObj || this.el[0];\n            this.triggerWith(name, thisObj, args); // Emitter's method\n\n            if (optHandler) {\n              return optHandler.apply(thisObj, args);\n            }\n          },\n          // View\n          // -----------------------------------------------------------------------------------------------------------------\n          // Given a view name for a custom view or a standard view, creates a ready-to-go View object\n          instantiateView: function instantiateView(viewType) {\n            var spec = this.getViewSpec(viewType);\n            return new spec['class'](this, spec);\n          },\n          // Returns a boolean about whether the view is okay to instantiate at some point\n          isValidViewType: function isValidViewType(viewType) {\n            return Boolean(this.getViewSpec(viewType));\n          },\n          changeView: function changeView(viewName, dateOrRange) {\n            if (dateOrRange) {\n              if (dateOrRange.start && dateOrRange.end) {\n                // a range\n                this.recordOptionOverrides({\n                  // will not rerender\n                  visibleRange: dateOrRange\n                });\n              } else {\n                // a date\n                this.currentDate = this.moment(dateOrRange).stripZone(); // just like gotoDate\n              }\n            }\n\n            this.renderView(viewName);\n          },\n          // Forces navigation to a view for the given date.\n          // `viewType` can be a specific view name or a generic one like \"week\" or \"day\".\n          zoomTo: function zoomTo(newDate, viewType) {\n            var spec;\n            viewType = viewType || 'day'; // day is default zoom\n\n            spec = this.getViewSpec(viewType) || this.getUnitViewSpec(viewType);\n            this.currentDate = newDate.clone();\n            this.renderView(spec ? spec.type : null);\n          },\n          // Current Date\n          // -----------------------------------------------------------------------------------------------------------------\n          initCurrentDate: function initCurrentDate() {\n            var defaultDateInput = this.opt('defaultDate'); // compute the initial ambig-timezone date\n\n            if (defaultDateInput != null) {\n              this.currentDate = this.moment(defaultDateInput).stripZone();\n            } else {\n              this.currentDate = this.getNow(); // getNow already returns unzoned\n            }\n          },\n          prev: function prev() {\n            var prevInfo = this.view.buildPrevDateProfile(this.currentDate);\n\n            if (prevInfo.isValid) {\n              this.currentDate = prevInfo.date;\n              this.renderView();\n            }\n          },\n          next: function next() {\n            var nextInfo = this.view.buildNextDateProfile(this.currentDate);\n\n            if (nextInfo.isValid) {\n              this.currentDate = nextInfo.date;\n              this.renderView();\n            }\n          },\n          prevYear: function prevYear() {\n            this.currentDate.add(-1, 'years');\n            this.renderView();\n          },\n          nextYear: function nextYear() {\n            this.currentDate.add(1, 'years');\n            this.renderView();\n          },\n          today: function today() {\n            this.currentDate = this.getNow(); // should deny like prev/next?\n\n            this.renderView();\n          },\n          gotoDate: function gotoDate(zonedDateInput) {\n            this.currentDate = this.moment(zonedDateInput).stripZone();\n            this.renderView();\n          },\n          incrementDate: function incrementDate(delta) {\n            this.currentDate.add(moment.duration(delta));\n            this.renderView();\n          },\n          // for external API\n          getDate: function getDate() {\n            return this.applyTimezone(this.currentDate); // infuse the calendar's timezone\n          },\n          // Loading Triggering\n          // -----------------------------------------------------------------------------------------------------------------\n          // Should be called when any type of async data fetching begins\n          pushLoading: function pushLoading() {\n            if (!this.loadingLevel++) {\n              this.publiclyTrigger('loading', null, true, this.view);\n            }\n          },\n          // Should be called when any type of async data fetching completes\n          popLoading: function popLoading() {\n            if (! --this.loadingLevel) {\n              this.publiclyTrigger('loading', null, false, this.view);\n            }\n          },\n          // Selection\n          // -----------------------------------------------------------------------------------------------------------------\n          // this public method receives start/end dates in any format, with any timezone\n          select: function select(zonedStartInput, zonedEndInput) {\n            this.view.select(this.buildSelectSpan.apply(this, arguments));\n          },\n          unselect: function unselect() {\n            // safe to be called before renderView\n            if (this.view) {\n              this.view.unselect();\n            }\n          },\n          // Given arguments to the select method in the API, returns a span (unzoned start/end and other info)\n          buildSelectSpan: function buildSelectSpan(zonedStartInput, zonedEndInput) {\n            var start = this.moment(zonedStartInput).stripZone();\n            var end;\n\n            if (zonedEndInput) {\n              end = this.moment(zonedEndInput).stripZone();\n            } else if (start.hasTime()) {\n              end = start.clone().add(this.defaultTimedEventDuration);\n            } else {\n              end = start.clone().add(this.defaultAllDayEventDuration);\n            }\n\n            return {\n              start: start,\n              end: end\n            };\n          },\n          // Misc\n          // -----------------------------------------------------------------------------------------------------------------\n          // will return `null` if invalid range\n          parseRange: function parseRange(rangeInput) {\n            var start = null;\n            var end = null;\n\n            if (rangeInput.start) {\n              start = this.moment(rangeInput.start).stripZone();\n            }\n\n            if (rangeInput.end) {\n              end = this.moment(rangeInput.end).stripZone();\n            }\n\n            if (!start && !end) {\n              return null;\n            }\n\n            if (start && end && end.isBefore(start)) {\n              return null;\n            }\n\n            return {\n              start: start,\n              end: end\n            };\n          },\n          rerenderEvents: function rerenderEvents() {\n            // API method. destroys old events if previously rendered.\n            if (this.elementVisible()) {\n              this.reportEventChange(); // will re-trasmit events to the view, causing a rerender\n            }\n          }\n        });\n        ;\n        ;\n        /*\n        Options binding/triggering system.\n        */\n\n        Calendar.mixin({\n          dirDefaults: null,\n          // option defaults related to LTR or RTL\n          localeDefaults: null,\n          // option defaults related to current locale\n          overrides: null,\n          // option overrides given to the fullCalendar constructor\n          dynamicOverrides: null,\n          // options set with dynamic setter method. higher precedence than view overrides.\n          optionsModel: null,\n          // all defaults combined with overrides\n          initOptionsInternals: function initOptionsInternals(overrides) {\n            this.overrides = $.extend({}, overrides); // make a copy\n\n            this.dynamicOverrides = {};\n            this.optionsModel = new Model();\n            this.populateOptionsHash();\n          },\n          // public getter/setter\n          option: function option(name, value) {\n            var newOptionHash;\n\n            if (typeof name === 'string') {\n              if (value === undefined) {\n                // getter\n                return this.optionsModel.get(name);\n              } else {\n                // setter for individual option\n                newOptionHash = {};\n                newOptionHash[name] = value;\n                this.setOptions(newOptionHash);\n              }\n            } else if (typeof name === 'object') {\n              // compound setter with object input\n              this.setOptions(name);\n            }\n          },\n          // private getter\n          opt: function opt(name) {\n            return this.optionsModel.get(name);\n          },\n          setOptions: function setOptions(newOptionHash) {\n            var optionCnt = 0;\n            var optionName;\n            this.recordOptionOverrides(newOptionHash);\n\n            for (optionName in newOptionHash) {\n              optionCnt++;\n            } // special-case handling of single option change.\n            // if only one option change, `optionName` will be its name.\n\n\n            if (optionCnt === 1) {\n              if (optionName === 'height' || optionName === 'contentHeight' || optionName === 'aspectRatio') {\n                this.updateSize(true); // true = allow recalculation of height\n\n                return;\n              } else if (optionName === 'defaultDate') {\n                return; // can't change date this way. use gotoDate instead\n              } else if (optionName === 'businessHours') {\n                if (this.view) {\n                  this.view.unrenderBusinessHours();\n                  this.view.renderBusinessHours();\n                }\n\n                return;\n              } else if (optionName === 'timezone') {\n                this.rezoneArrayEventSources();\n                this.refetchEvents();\n                return;\n              }\n            } // catch-all. rerender the header and footer and rebuild/rerender the current view\n\n\n            this.renderHeader();\n            this.renderFooter(); // even non-current views will be affected by this option change. do before rerender\n            // TODO: detangle\n\n            this.viewsByType = {};\n            this.reinitView();\n          },\n          // Computes the flattened options hash for the calendar and assigns to `this.options`.\n          // Assumes this.overrides and this.dynamicOverrides have already been initialized.\n          populateOptionsHash: function populateOptionsHash() {\n            var locale, localeDefaults;\n            var isRTL, dirDefaults;\n            var rawOptions;\n            locale = firstDefined( // explicit locale option given?\n            this.dynamicOverrides.locale, this.overrides.locale);\n            localeDefaults = localeOptionHash[locale];\n\n            if (!localeDefaults) {\n              // explicit locale option not given or invalid?\n              locale = Calendar.defaults.locale;\n              localeDefaults = localeOptionHash[locale] || {};\n            }\n\n            isRTL = firstDefined( // based on options computed so far, is direction RTL?\n            this.dynamicOverrides.isRTL, this.overrides.isRTL, localeDefaults.isRTL, Calendar.defaults.isRTL);\n            dirDefaults = isRTL ? Calendar.rtlDefaults : {};\n            this.dirDefaults = dirDefaults;\n            this.localeDefaults = localeDefaults;\n            rawOptions = mergeOptions([// merge defaults and overrides. lowest to highest precedence\n            Calendar.defaults, // global defaults\n            dirDefaults, localeDefaults, this.overrides, this.dynamicOverrides]);\n            populateInstanceComputableOptions(rawOptions); // fill in gaps with computed options\n\n            this.optionsModel.reset(rawOptions);\n          },\n          // stores the new options internally, but does not rerender anything.\n          recordOptionOverrides: function recordOptionOverrides(newOptionHash) {\n            var optionName;\n\n            for (optionName in newOptionHash) {\n              this.dynamicOverrides[optionName] = newOptionHash[optionName];\n            }\n\n            this.viewSpecCache = {}; // the dynamic override invalidates the options in this cache, so just clear it\n\n            this.populateOptionsHash(); // this.options needs to be recomputed after the dynamic override\n          }\n        });\n        ;\n        ;\n        Calendar.mixin({\n          defaultAllDayEventDuration: null,\n          defaultTimedEventDuration: null,\n          localeData: null,\n          initMomentInternals: function initMomentInternals() {\n            var _this = this;\n\n            this.defaultAllDayEventDuration = moment.duration(this.opt('defaultAllDayEventDuration'));\n            this.defaultTimedEventDuration = moment.duration(this.opt('defaultTimedEventDuration')); // Called immediately, and when any of the options change.\n            // Happens before any internal objects rebuild or rerender, because this is very core.\n\n            this.optionsModel.watch('buildingMomentLocale', ['?locale', '?monthNames', '?monthNamesShort', '?dayNames', '?dayNamesShort', '?firstDay', '?weekNumberCalculation'], function (opts) {\n              var weekNumberCalculation = opts.weekNumberCalculation;\n              var firstDay = opts.firstDay;\n\n              var _week; // normalize\n\n\n              if (weekNumberCalculation === 'iso') {\n                weekNumberCalculation = 'ISO'; // normalize\n              }\n\n              var localeData = createObject( // make a cheap copy\n              getMomentLocaleData(opts.locale) // will fall back to en\n              );\n\n              if (opts.monthNames) {\n                localeData._months = opts.monthNames;\n              }\n\n              if (opts.monthNamesShort) {\n                localeData._monthsShort = opts.monthNamesShort;\n              }\n\n              if (opts.dayNames) {\n                localeData._weekdays = opts.dayNames;\n              }\n\n              if (opts.dayNamesShort) {\n                localeData._weekdaysShort = opts.dayNamesShort;\n              }\n\n              if (firstDay == null && weekNumberCalculation === 'ISO') {\n                firstDay = 1;\n              }\n\n              if (firstDay != null) {\n                _week = createObject(localeData._week); // _week: { dow: # }\n\n                _week.dow = firstDay;\n                localeData._week = _week;\n              }\n\n              if ( // whitelist certain kinds of input\n              weekNumberCalculation === 'ISO' || weekNumberCalculation === 'local' || typeof weekNumberCalculation === 'function') {\n                localeData._fullCalendar_weekCalc = weekNumberCalculation; // moment-ext will know what to do with it\n              }\n\n              _this.localeData = localeData; // If the internal current date object already exists, move to new locale.\n              // We do NOT need to do this technique for event dates, because this happens when converting to \"segments\".\n\n              if (_this.currentDate) {\n                _this.localizeMoment(_this.currentDate); // sets to localeData\n\n              }\n            });\n          },\n          // Builds a moment using the settings of the current calendar: timezone and locale.\n          // Accepts anything the vanilla moment() constructor accepts.\n          moment: function moment() {\n            var mom;\n\n            if (this.opt('timezone') === 'local') {\n              mom = FC.moment.apply(null, arguments); // Force the moment to be local, because FC.moment doesn't guarantee it.\n\n              if (mom.hasTime()) {\n                // don't give ambiguously-timed moments a local zone\n                mom.local();\n              }\n            } else if (this.opt('timezone') === 'UTC') {\n              mom = FC.moment.utc.apply(null, arguments); // process as UTC\n            } else {\n              mom = FC.moment.parseZone.apply(null, arguments); // let the input decide the zone\n            }\n\n            this.localizeMoment(mom); // TODO\n\n            return mom;\n          },\n          // Updates the given moment's locale settings to the current calendar locale settings.\n          localizeMoment: function localizeMoment(mom) {\n            mom._locale = this.localeData;\n          },\n          // Returns a boolean about whether or not the calendar knows how to calculate\n          // the timezone offset of arbitrary dates in the current timezone.\n          getIsAmbigTimezone: function getIsAmbigTimezone() {\n            return this.opt('timezone') !== 'local' && this.opt('timezone') !== 'UTC';\n          },\n          // Returns a copy of the given date in the current timezone. Has no effect on dates without times.\n          applyTimezone: function applyTimezone(date) {\n            if (!date.hasTime()) {\n              return date.clone();\n            }\n\n            var zonedDate = this.moment(date.toArray());\n            var timeAdjust = date.time() - zonedDate.time();\n            var adjustedZonedDate; // Safari sometimes has problems with this coersion when near DST. Adjust if necessary. (bug #2396)\n\n            if (timeAdjust) {\n              // is the time result different than expected?\n              adjustedZonedDate = zonedDate.clone().add(timeAdjust); // add milliseconds\n\n              if (date.time() - adjustedZonedDate.time() === 0) {\n                // does it match perfectly now?\n                zonedDate = adjustedZonedDate;\n              }\n            }\n\n            return zonedDate;\n          },\n          // Returns a moment for the current date, as defined by the client's computer or from the `now` option.\n          // Will return an moment with an ambiguous timezone.\n          getNow: function getNow() {\n            var now = this.opt('now');\n\n            if (typeof now === 'function') {\n              now = now();\n            }\n\n            return this.moment(now).stripZone();\n          },\n          // Produces a human-readable string for the given duration.\n          // Side-effect: changes the locale of the given duration.\n          humanizeDuration: function humanizeDuration(duration) {\n            return duration.locale(this.opt('locale')).humanize();\n          },\n          // Event-Specific Date Utilities. TODO: move\n          // -----------------------------------------------------------------------------------------------------------------\n          // Get an event's normalized end date. If not present, calculate it from the defaults.\n          getEventEnd: function getEventEnd(event) {\n            if (event.end) {\n              return event.end.clone();\n            } else {\n              return this.getDefaultEventEnd(event.allDay, event.start);\n            }\n          },\n          // Given an event's allDay status and start date, return what its fallback end date should be.\n          // TODO: rename to computeDefaultEventEnd\n          getDefaultEventEnd: function getDefaultEventEnd(allDay, zonedStart) {\n            var end = zonedStart.clone();\n\n            if (allDay) {\n              end.stripTime().add(this.defaultAllDayEventDuration);\n            } else {\n              end.add(this.defaultTimedEventDuration);\n            }\n\n            if (this.getIsAmbigTimezone()) {\n              end.stripZone(); // we don't know what the tzo should be\n            }\n\n            return end;\n          }\n        });\n        ;\n        ;\n        Calendar.mixin({\n          viewSpecCache: null,\n          // cache of view definitions (initialized in Calendar.js)\n          // Gets information about how to create a view. Will use a cache.\n          getViewSpec: function getViewSpec(viewType) {\n            var cache = this.viewSpecCache;\n            return cache[viewType] || (cache[viewType] = this.buildViewSpec(viewType));\n          },\n          // Given a duration singular unit, like \"week\" or \"day\", finds a matching view spec.\n          // Preference is given to views that have corresponding buttons.\n          getUnitViewSpec: function getUnitViewSpec(unit) {\n            var viewTypes;\n            var i;\n            var spec;\n\n            if ($.inArray(unit, unitsDesc) != -1) {\n              // put views that have buttons first. there will be duplicates, but oh well\n              viewTypes = this.header.getViewsWithButtons(); // TODO: include footer as well?\n\n              $.each(FC.views, function (viewType) {\n                // all views\n                viewTypes.push(viewType);\n              });\n\n              for (i = 0; i < viewTypes.length; i++) {\n                spec = this.getViewSpec(viewTypes[i]);\n\n                if (spec) {\n                  if (spec.singleUnit == unit) {\n                    return spec;\n                  }\n                }\n              }\n            }\n          },\n          // Builds an object with information on how to create a given view\n          buildViewSpec: function buildViewSpec(requestedViewType) {\n            var viewOverrides = this.overrides.views || {};\n            var specChain = []; // for the view. lowest to highest priority\n\n            var defaultsChain = []; // for the view. lowest to highest priority\n\n            var overridesChain = []; // for the view. lowest to highest priority\n\n            var viewType = requestedViewType;\n            var spec; // for the view\n\n            var overrides; // for the view\n\n            var durationInput;\n            var duration;\n            var unit; // iterate from the specific view definition to a more general one until we hit an actual View class\n\n            while (viewType) {\n              spec = fcViews[viewType];\n              overrides = viewOverrides[viewType];\n              viewType = null; // clear. might repopulate for another iteration\n\n              if (typeof spec === 'function') {\n                // TODO: deprecate\n                spec = {\n                  'class': spec\n                };\n              }\n\n              if (spec) {\n                specChain.unshift(spec);\n                defaultsChain.unshift(spec.defaults || {});\n                durationInput = durationInput || spec.duration;\n                viewType = viewType || spec.type;\n              }\n\n              if (overrides) {\n                overridesChain.unshift(overrides); // view-specific option hashes have options at zero-level\n\n                durationInput = durationInput || overrides.duration;\n                viewType = viewType || overrides.type;\n              }\n            }\n\n            spec = mergeProps(specChain);\n            spec.type = requestedViewType;\n\n            if (!spec['class']) {\n              return false;\n            } // fall back to top-level `duration` option\n\n\n            durationInput = durationInput || this.dynamicOverrides.duration || this.overrides.duration;\n\n            if (durationInput) {\n              duration = moment.duration(durationInput);\n\n              if (duration.valueOf()) {\n                // valid?\n                unit = computeDurationGreatestUnit(duration, durationInput);\n                spec.duration = duration;\n                spec.durationUnit = unit; // view is a single-unit duration, like \"week\" or \"day\"\n                // incorporate options for this. lowest priority\n\n                if (duration.as(unit) === 1) {\n                  spec.singleUnit = unit;\n                  overridesChain.unshift(viewOverrides[unit] || {});\n                }\n              }\n            }\n\n            spec.defaults = mergeOptions(defaultsChain);\n            spec.overrides = mergeOptions(overridesChain);\n            this.buildViewSpecOptions(spec);\n            this.buildViewSpecButtonText(spec, requestedViewType);\n            return spec;\n          },\n          // Builds and assigns a view spec's options object from its already-assigned defaults and overrides\n          buildViewSpecOptions: function buildViewSpecOptions(spec) {\n            spec.options = mergeOptions([// lowest to highest priority\n            Calendar.defaults, // global defaults\n            spec.defaults, // view's defaults (from ViewSubclass.defaults)\n            this.dirDefaults, this.localeDefaults, // locale and dir take precedence over view's defaults!\n            this.overrides, // calendar's overrides (options given to constructor)\n            spec.overrides, // view's overrides (view-specific options)\n            this.dynamicOverrides // dynamically set via setter. highest precedence\n            ]);\n            populateInstanceComputableOptions(spec.options);\n          },\n          // Computes and assigns a view spec's buttonText-related options\n          buildViewSpecButtonText: function buildViewSpecButtonText(spec, requestedViewType) {\n            // given an options object with a possible `buttonText` hash, lookup the buttonText for the\n            // requested view, falling back to a generic unit entry like \"week\" or \"day\"\n            function queryButtonText(options) {\n              var buttonText = options.buttonText || {};\n              return buttonText[requestedViewType] || ( // view can decide to look up a certain key\n              spec.buttonTextKey ? buttonText[spec.buttonTextKey] : null) || ( // a key like \"month\"\n              spec.singleUnit ? buttonText[spec.singleUnit] : null);\n            } // highest to lowest priority\n\n\n            spec.buttonTextOverride = queryButtonText(this.dynamicOverrides) || queryButtonText(this.overrides) || // constructor-specified buttonText lookup hash takes precedence\n            spec.overrides.buttonText; // `buttonText` for view-specific options is a string\n            // highest to lowest priority. mirrors buildViewSpecOptions\n\n            spec.buttonTextDefault = queryButtonText(this.localeDefaults) || queryButtonText(this.dirDefaults) || spec.defaults.buttonText || // a single string. from ViewSubclass.defaults\n            queryButtonText(Calendar.defaults) || (spec.duration ? this.humanizeDuration(spec.duration) : null) || // like \"3 days\"\n            requestedViewType; // fall back to given view name\n          }\n        });\n        ;\n        ;\n        Calendar.mixin({\n          el: null,\n          contentEl: null,\n          suggestedViewHeight: null,\n          windowResizeProxy: null,\n          ignoreWindowResize: 0,\n          render: function render() {\n            if (!this.contentEl) {\n              this.initialRender();\n            } else if (this.elementVisible()) {\n              // mainly for the public API\n              this.calcSize();\n              this.renderView();\n            }\n          },\n          initialRender: function initialRender() {\n            var _this = this;\n\n            var el = this.el;\n            el.addClass('fc'); // event delegation for nav links\n\n            el.on('click.fc', 'a[data-goto]', function (ev) {\n              var anchorEl = $(this);\n              var gotoOptions = anchorEl.data('goto'); // will automatically parse JSON\n\n              var date = _this.moment(gotoOptions.date);\n\n              var viewType = gotoOptions.type; // property like \"navLinkDayClick\". might be a string or a function\n\n              var customAction = _this.view.opt('navLink' + capitaliseFirstLetter(viewType) + 'Click');\n\n              if (typeof customAction === 'function') {\n                customAction(date, ev);\n              } else {\n                if (typeof customAction === 'string') {\n                  viewType = customAction;\n                }\n\n                _this.zoomTo(date, viewType);\n              }\n            }); // called immediately, and upon option change\n\n            this.optionsModel.watch('applyingThemeClasses', ['?theme'], function (opts) {\n              el.toggleClass('ui-widget', opts.theme);\n              el.toggleClass('fc-unthemed', !opts.theme);\n            }); // called immediately, and upon option change.\n            // HACK: locale often affects isRTL, so we explicitly listen to that too.\n\n            this.optionsModel.watch('applyingDirClasses', ['?isRTL', '?locale'], function (opts) {\n              el.toggleClass('fc-ltr', !opts.isRTL);\n              el.toggleClass('fc-rtl', opts.isRTL);\n            });\n            this.contentEl = $(\"<div class='fc-view-container'/>\").prependTo(el);\n            this.initToolbars();\n            this.renderHeader();\n            this.renderFooter();\n            this.renderView(this.opt('defaultView'));\n\n            if (this.opt('handleWindowResize')) {\n              $(window).resize(this.windowResizeProxy = debounce( // prevents rapid calls\n              this.windowResize.bind(this), this.opt('windowResizeDelay')));\n            }\n          },\n          destroy: function destroy() {\n            if (this.view) {\n              this.view.removeElement(); // NOTE: don't null-out this.view in case API methods are called after destroy.\n              // It is still the \"current\" view, just not rendered.\n            }\n\n            this.toolbarsManager.proxyCall('removeElement');\n            this.contentEl.remove();\n            this.el.removeClass('fc fc-ltr fc-rtl fc-unthemed ui-widget');\n            this.el.off('.fc'); // unbind nav link handlers\n\n            if (this.windowResizeProxy) {\n              $(window).unbind('resize', this.windowResizeProxy);\n              this.windowResizeProxy = null;\n            }\n\n            GlobalEmitter.unneeded();\n          },\n          elementVisible: function elementVisible() {\n            return this.el.is(':visible');\n          },\n          // View Rendering\n          // -----------------------------------------------------------------------------------\n          // Renders a view because of a date change, view-type change, or for the first time.\n          // If not given a viewType, keep the current view but render different dates.\n          // Accepts an optional scroll state to restore to.\n          renderView: function renderView(viewType, forcedScroll) {\n            this.ignoreWindowResize++;\n            var needsClearView = this.view && viewType && this.view.type !== viewType; // if viewType is changing, remove the old view's rendering\n\n            if (needsClearView) {\n              this.freezeContentHeight(); // prevent a scroll jump when view element is removed\n\n              this.clearView();\n            } // if viewType changed, or the view was never created, create a fresh view\n\n\n            if (!this.view && viewType) {\n              this.view = this.viewsByType[viewType] || (this.viewsByType[viewType] = this.instantiateView(viewType));\n              this.view.setElement($(\"<div class='fc-view fc-\" + viewType + \"-view' />\").appendTo(this.contentEl));\n              this.toolbarsManager.proxyCall('activateButton', viewType);\n            }\n\n            if (this.view) {\n              if (forcedScroll) {\n                this.view.addForcedScroll(forcedScroll);\n              }\n\n              if (this.elementVisible()) {\n                this.currentDate = this.view.setDate(this.currentDate);\n              }\n            }\n\n            if (needsClearView) {\n              this.thawContentHeight();\n            }\n\n            this.ignoreWindowResize--;\n          },\n          // Unrenders the current view and reflects this change in the Header.\n          // Unregsiters the `view`, but does not remove from viewByType hash.\n          clearView: function clearView() {\n            this.toolbarsManager.proxyCall('deactivateButton', this.view.type);\n            this.view.removeElement();\n            this.view = null;\n          },\n          // Destroys the view, including the view object. Then, re-instantiates it and renders it.\n          // Maintains the same scroll state.\n          // TODO: maintain any other user-manipulated state.\n          reinitView: function reinitView() {\n            this.ignoreWindowResize++;\n            this.freezeContentHeight();\n            var viewType = this.view.type;\n            var scrollState = this.view.queryScroll();\n            this.clearView();\n            this.calcSize();\n            this.renderView(viewType, scrollState);\n            this.thawContentHeight();\n            this.ignoreWindowResize--;\n          },\n          // Resizing\n          // -----------------------------------------------------------------------------------\n          getSuggestedViewHeight: function getSuggestedViewHeight() {\n            if (this.suggestedViewHeight === null) {\n              this.calcSize();\n            }\n\n            return this.suggestedViewHeight;\n          },\n          isHeightAuto: function isHeightAuto() {\n            return this.opt('contentHeight') === 'auto' || this.opt('height') === 'auto';\n          },\n          updateSize: function updateSize(shouldRecalc) {\n            if (this.elementVisible()) {\n              if (shouldRecalc) {\n                this._calcSize();\n              }\n\n              this.ignoreWindowResize++;\n              this.view.updateSize(true); // isResize=true. will poll getSuggestedViewHeight() and isHeightAuto()\n\n              this.ignoreWindowResize--;\n              return true; // signal success\n            }\n          },\n          calcSize: function calcSize() {\n            if (this.elementVisible()) {\n              this._calcSize();\n            }\n          },\n          _calcSize: function _calcSize() {\n            // assumes elementVisible\n            var contentHeightInput = this.opt('contentHeight');\n            var heightInput = this.opt('height');\n\n            if (typeof contentHeightInput === 'number') {\n              // exists and not 'auto'\n              this.suggestedViewHeight = contentHeightInput;\n            } else if (typeof contentHeightInput === 'function') {\n              // exists and is a function\n              this.suggestedViewHeight = contentHeightInput();\n            } else if (typeof heightInput === 'number') {\n              // exists and not 'auto'\n              this.suggestedViewHeight = heightInput - this.queryToolbarsHeight();\n            } else if (typeof heightInput === 'function') {\n              // exists and is a function\n              this.suggestedViewHeight = heightInput() - this.queryToolbarsHeight();\n            } else if (heightInput === 'parent') {\n              // set to height of parent element\n              this.suggestedViewHeight = this.el.parent().height() - this.queryToolbarsHeight();\n            } else {\n              this.suggestedViewHeight = Math.round(this.contentEl.width() / Math.max(this.opt('aspectRatio'), .5));\n            }\n          },\n          windowResize: function windowResize(ev) {\n            if (!this.ignoreWindowResize && ev.target === window && // so we don't process jqui \"resize\" events that have bubbled up\n            this.view.renderRange // view has already been rendered\n            ) {\n                if (this.updateSize(true)) {\n                  this.view.publiclyTrigger('windowResize', this.el[0]);\n                }\n              }\n          },\n\n          /* Height \"Freezing\"\n          -----------------------------------------------------------------------------*/\n          freezeContentHeight: function freezeContentHeight() {\n            this.contentEl.css({\n              width: '100%',\n              height: this.contentEl.height(),\n              overflow: 'hidden'\n            });\n          },\n          thawContentHeight: function thawContentHeight() {\n            this.contentEl.css({\n              width: '',\n              height: '',\n              overflow: ''\n            });\n          }\n        });\n        ;\n        ;\n        Calendar.mixin({\n          header: null,\n          footer: null,\n          toolbarsManager: null,\n          initToolbars: function initToolbars() {\n            this.header = new Toolbar(this, this.computeHeaderOptions());\n            this.footer = new Toolbar(this, this.computeFooterOptions());\n            this.toolbarsManager = new Iterator([this.header, this.footer]);\n          },\n          computeHeaderOptions: function computeHeaderOptions() {\n            return {\n              extraClasses: 'fc-header-toolbar',\n              layout: this.opt('header')\n            };\n          },\n          computeFooterOptions: function computeFooterOptions() {\n            return {\n              extraClasses: 'fc-footer-toolbar',\n              layout: this.opt('footer')\n            };\n          },\n          // can be called repeatedly and Header will rerender\n          renderHeader: function renderHeader() {\n            var header = this.header;\n            header.setToolbarOptions(this.computeHeaderOptions());\n            header.render();\n\n            if (header.el) {\n              this.el.prepend(header.el);\n            }\n          },\n          // can be called repeatedly and Footer will rerender\n          renderFooter: function renderFooter() {\n            var footer = this.footer;\n            footer.setToolbarOptions(this.computeFooterOptions());\n            footer.render();\n\n            if (footer.el) {\n              this.el.append(footer.el);\n            }\n          },\n          setToolbarsTitle: function setToolbarsTitle(title) {\n            this.toolbarsManager.proxyCall('updateTitle', title);\n          },\n          updateToolbarButtons: function updateToolbarButtons() {\n            var now = this.getNow();\n            var view = this.view;\n            var todayInfo = view.buildDateProfile(now);\n            var prevInfo = view.buildPrevDateProfile(this.currentDate);\n            var nextInfo = view.buildNextDateProfile(this.currentDate);\n            this.toolbarsManager.proxyCall(todayInfo.isValid && !isDateWithinRange(now, view.currentRange) ? 'enableButton' : 'disableButton', 'today');\n            this.toolbarsManager.proxyCall(prevInfo.isValid ? 'enableButton' : 'disableButton', 'prev');\n            this.toolbarsManager.proxyCall(nextInfo.isValid ? 'enableButton' : 'disableButton', 'next');\n          },\n          queryToolbarsHeight: function queryToolbarsHeight() {\n            return this.toolbarsManager.items.reduce(function (accumulator, toolbar) {\n              var toolbarHeight = toolbar.el ? toolbar.el.outerHeight(true) : 0; // includes margin\n\n              return accumulator + toolbarHeight;\n            }, 0);\n          }\n        });\n        ;\n        ;\n        Calendar.defaults = {\n          titleRangeSeparator: \" \\u2013 \",\n          // en dash\n          monthYearFormat: 'MMMM YYYY',\n          // required for en. other locales rely on datepicker computable option\n          defaultTimedEventDuration: '02:00:00',\n          defaultAllDayEventDuration: {\n            days: 1\n          },\n          forceEventDuration: false,\n          nextDayThreshold: '09:00:00',\n          // 9am\n          // display\n          defaultView: 'month',\n          aspectRatio: 1.35,\n          header: {\n            left: 'title',\n            center: '',\n            right: 'today prev,next'\n          },\n          weekends: true,\n          weekNumbers: false,\n          weekNumberTitle: 'W',\n          weekNumberCalculation: 'local',\n          //editable: false,\n          //nowIndicator: false,\n          scrollTime: '06:00:00',\n          minTime: '00:00:00',\n          maxTime: '24:00:00',\n          showNonCurrentDates: true,\n          // event ajax\n          lazyFetching: true,\n          startParam: 'start',\n          endParam: 'end',\n          timezoneParam: 'timezone',\n          timezone: false,\n          //allDayDefault: undefined,\n          // locale\n          isRTL: false,\n          buttonText: {\n            prev: \"prev\",\n            next: \"next\",\n            prevYear: \"prev year\",\n            nextYear: \"next year\",\n            year: 'year',\n            // TODO: locale files need to specify this\n            today: 'today',\n            month: 'month',\n            week: 'week',\n            day: 'day'\n          },\n          buttonIcons: {\n            prev: 'left-single-arrow',\n            next: 'right-single-arrow',\n            prevYear: 'left-double-arrow',\n            nextYear: 'right-double-arrow'\n          },\n          allDayText: 'all-day',\n          // jquery-ui theming\n          theme: false,\n          themeButtonIcons: {\n            prev: 'circle-triangle-w',\n            next: 'circle-triangle-e',\n            prevYear: 'seek-prev',\n            nextYear: 'seek-next'\n          },\n          //eventResizableFromStart: false,\n          dragOpacity: .75,\n          dragRevertDuration: 500,\n          dragScroll: true,\n          //selectable: false,\n          unselectAuto: true,\n          //selectMinDistance: 0,\n          dropAccept: '*',\n          eventOrder: 'title',\n          //eventRenderWait: null,\n          eventLimit: false,\n          eventLimitText: 'more',\n          eventLimitClick: 'popover',\n          dayPopoverFormat: 'LL',\n          handleWindowResize: true,\n          windowResizeDelay: 100,\n          // milliseconds before an updateSize happens\n          longPressDelay: 1000\n        };\n        Calendar.englishDefaults = {\n          // used by locale.js\n          dayPopoverFormat: 'dddd, MMMM D'\n        };\n        Calendar.rtlDefaults = {\n          // right-to-left defaults\n          header: {\n            // TODO: smarter solution (first/center/last ?)\n            left: 'next,prev today',\n            center: '',\n            right: 'title'\n          },\n          buttonIcons: {\n            prev: 'right-single-arrow',\n            next: 'left-single-arrow',\n            prevYear: 'right-double-arrow',\n            nextYear: 'left-double-arrow'\n          },\n          themeButtonIcons: {\n            prev: 'circle-triangle-e',\n            next: 'circle-triangle-w',\n            nextYear: 'seek-prev',\n            prevYear: 'seek-next'\n          }\n        };\n        ;\n        ;\n        var localeOptionHash = FC.locales = {}; // initialize and expose\n        // TODO: document the structure and ordering of a FullCalendar locale file\n        // Initialize jQuery UI datepicker translations while using some of the translations\n        // Will set this as the default locales for datepicker.\n\n        FC.datepickerLocale = function (localeCode, dpLocaleCode, dpOptions) {\n          // get the FullCalendar internal option hash for this locale. create if necessary\n          var fcOptions = localeOptionHash[localeCode] || (localeOptionHash[localeCode] = {}); // transfer some simple options from datepicker to fc\n\n          fcOptions.isRTL = dpOptions.isRTL;\n          fcOptions.weekNumberTitle = dpOptions.weekHeader; // compute some more complex options from datepicker\n\n          $.each(dpComputableOptions, function (name, func) {\n            fcOptions[name] = func(dpOptions);\n          }); // is jQuery UI Datepicker is on the page?\n\n          if ($.datepicker) {\n            // Register the locale data.\n            // FullCalendar and MomentJS use locale codes like \"pt-br\" but Datepicker\n            // does it like \"pt-BR\" or if it doesn't have the locale, maybe just \"pt\".\n            // Make an alias so the locale can be referenced either way.\n            $.datepicker.regional[dpLocaleCode] = $.datepicker.regional[localeCode] = // alias\n            dpOptions; // Alias 'en' to the default locale data. Do this every time.\n\n            $.datepicker.regional.en = $.datepicker.regional['']; // Set as Datepicker's global defaults.\n\n            $.datepicker.setDefaults(dpOptions);\n          }\n        }; // Sets FullCalendar-specific translations. Will set the locales as the global default.\n\n\n        FC.locale = function (localeCode, newFcOptions) {\n          var fcOptions;\n          var momOptions; // get the FullCalendar internal option hash for this locale. create if necessary\n\n          fcOptions = localeOptionHash[localeCode] || (localeOptionHash[localeCode] = {}); // provided new options for this locales? merge them in\n\n          if (newFcOptions) {\n            fcOptions = localeOptionHash[localeCode] = mergeOptions([fcOptions, newFcOptions]);\n          } // compute locale options that weren't defined.\n          // always do this. newFcOptions can be undefined when initializing from i18n file,\n          // so no way to tell if this is an initialization or a default-setting.\n\n\n          momOptions = getMomentLocaleData(localeCode); // will fall back to en\n\n          $.each(momComputableOptions, function (name, func) {\n            if (fcOptions[name] == null) {\n              fcOptions[name] = func(momOptions, fcOptions);\n            }\n          }); // set it as the default locale for FullCalendar\n\n          Calendar.defaults.locale = localeCode;\n        }; // NOTE: can't guarantee any of these computations will run because not every locale has datepicker\n        // configs, so make sure there are English fallbacks for these in the defaults file.\n\n\n        var dpComputableOptions = {\n          buttonText: function buttonText(dpOptions) {\n            return {\n              // the translations sometimes wrongly contain HTML entities\n              prev: stripHtmlEntities(dpOptions.prevText),\n              next: stripHtmlEntities(dpOptions.nextText),\n              today: stripHtmlEntities(dpOptions.currentText)\n            };\n          },\n          // Produces format strings like \"MMMM YYYY\" -> \"September 2014\"\n          monthYearFormat: function monthYearFormat(dpOptions) {\n            return dpOptions.showMonthAfterYear ? 'YYYY[' + dpOptions.yearSuffix + '] MMMM' : 'MMMM YYYY[' + dpOptions.yearSuffix + ']';\n          }\n        };\n        var momComputableOptions = {\n          // Produces format strings like \"ddd M/D\" -> \"Fri 9/15\"\n          dayOfMonthFormat: function dayOfMonthFormat(momOptions, fcOptions) {\n            var format = momOptions.longDateFormat('l'); // for the format like \"M/D/YYYY\"\n            // strip the year off the edge, as well as other misc non-whitespace chars\n\n            format = format.replace(/^Y+[^\\w\\s]*|[^\\w\\s]*Y+$/g, '');\n\n            if (fcOptions.isRTL) {\n              format += ' ddd'; // for RTL, add day-of-week to end\n            } else {\n              format = 'ddd ' + format; // for LTR, add day-of-week to beginning\n            }\n\n            return format;\n          },\n          // Produces format strings like \"h:mma\" -> \"6:00pm\"\n          mediumTimeFormat: function mediumTimeFormat(momOptions) {\n            // can't be called `timeFormat` because collides with option\n            return momOptions.longDateFormat('LT').replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand\n          },\n          // Produces format strings like \"h(:mm)a\" -> \"6pm\" / \"6:30pm\"\n          smallTimeFormat: function smallTimeFormat(momOptions) {\n            return momOptions.longDateFormat('LT').replace(':mm', '(:mm)').replace(/(\\Wmm)$/, '($1)') // like above, but for foreign locales\n            .replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand\n          },\n          // Produces format strings like \"h(:mm)t\" -> \"6p\" / \"6:30p\"\n          extraSmallTimeFormat: function extraSmallTimeFormat(momOptions) {\n            return momOptions.longDateFormat('LT').replace(':mm', '(:mm)').replace(/(\\Wmm)$/, '($1)') // like above, but for foreign locales\n            .replace(/\\s*a$/i, 't'); // convert to AM/PM/am/pm to lowercase one-letter. remove any spaces beforehand\n          },\n          // Produces format strings like \"ha\" / \"H\" -> \"6pm\" / \"18\"\n          hourFormat: function hourFormat(momOptions) {\n            return momOptions.longDateFormat('LT').replace(':mm', '').replace(/(\\Wmm)$/, '') // like above, but for foreign locales\n            .replace(/\\s*a$/i, 'a'); // convert AM/PM/am/pm to lowercase. remove any spaces beforehand\n          },\n          // Produces format strings like \"h:mm\" -> \"6:30\" (with no AM/PM)\n          noMeridiemTimeFormat: function noMeridiemTimeFormat(momOptions) {\n            return momOptions.longDateFormat('LT').replace(/\\s*a$/i, ''); // remove trailing AM/PM\n          }\n        }; // options that should be computed off live calendar options (considers override options)\n        // TODO: best place for this? related to locale?\n        // TODO: flipping text based on isRTL is a bad idea because the CSS `direction` might want to handle it\n\n        var instanceComputableOptions = {\n          // Produces format strings for results like \"Mo 16\"\n          smallDayDateFormat: function smallDayDateFormat(options) {\n            return options.isRTL ? 'D dd' : 'dd D';\n          },\n          // Produces format strings for results like \"Wk 5\"\n          weekFormat: function weekFormat(options) {\n            return options.isRTL ? 'w[ ' + options.weekNumberTitle + ']' : '[' + options.weekNumberTitle + ' ]w';\n          },\n          // Produces format strings for results like \"Wk5\"\n          smallWeekFormat: function smallWeekFormat(options) {\n            return options.isRTL ? 'w[' + options.weekNumberTitle + ']' : '[' + options.weekNumberTitle + ']w';\n          }\n        }; // TODO: make these computable properties in optionsModel\n\n        function populateInstanceComputableOptions(options) {\n          $.each(instanceComputableOptions, function (name, func) {\n            if (options[name] == null) {\n              options[name] = func(options);\n            }\n          });\n        } // Returns moment's internal locale data. If doesn't exist, returns English.\n\n\n        function getMomentLocaleData(localeCode) {\n          return moment.localeData(localeCode) || moment.localeData('en');\n        } // Initialize English by forcing computation of moment-derived options.\n        // Also, sets it as the default.\n\n\n        FC.locale('en', Calendar.englishDefaults);\n        ;\n        ;\n        FC.sourceNormalizers = [];\n        FC.sourceFetchers = [];\n        var ajaxDefaults = {\n          dataType: 'json',\n          cache: false\n        };\n        var eventGUID = 1;\n\n        function EventManager() {\n          // assumed to be a calendar\n          var t = this; // exports\n\n          t.requestEvents = requestEvents;\n          t.reportEventChange = reportEventChange;\n          t.isFetchNeeded = isFetchNeeded;\n          t.fetchEvents = fetchEvents;\n          t.fetchEventSources = fetchEventSources;\n          t.refetchEvents = refetchEvents;\n          t.refetchEventSources = refetchEventSources;\n          t.getEventSources = getEventSources;\n          t.getEventSourceById = getEventSourceById;\n          t.addEventSource = addEventSource;\n          t.removeEventSource = removeEventSource;\n          t.removeEventSources = removeEventSources;\n          t.updateEvent = updateEvent;\n          t.updateEvents = updateEvents;\n          t.renderEvent = renderEvent;\n          t.renderEvents = renderEvents;\n          t.removeEvents = removeEvents;\n          t.clientEvents = clientEvents;\n          t.mutateEvent = mutateEvent;\n          t.normalizeEventDates = normalizeEventDates;\n          t.normalizeEventTimes = normalizeEventTimes; // locals\n\n          var stickySource = {\n            events: []\n          };\n          var sources = [stickySource];\n          var rangeStart, rangeEnd;\n          var pendingSourceCnt = 0; // outstanding fetch requests, max one per source\n\n          var cache = []; // holds events that have already been expanded\n\n          var prunedCache; // like cache, but only events that intersect with rangeStart/rangeEnd\n\n          $.each((t.opt('events') ? [t.opt('events')] : []).concat(t.opt('eventSources') || []), function (i, sourceInput) {\n            var source = buildEventSource(sourceInput);\n\n            if (source) {\n              sources.push(source);\n            }\n          });\n\n          function requestEvents(start, end) {\n            if (!t.opt('lazyFetching') || isFetchNeeded(start, end)) {\n              return fetchEvents(start, end);\n            } else {\n              return Promise.resolve(prunedCache);\n            }\n          }\n\n          function reportEventChange() {\n            prunedCache = filterEventsWithinRange(cache);\n            t.trigger('eventsReset', prunedCache);\n          }\n\n          function filterEventsWithinRange(events) {\n            var filteredEvents = [];\n            var i, event;\n\n            for (i = 0; i < events.length; i++) {\n              event = events[i];\n\n              if (event.start.clone().stripZone() < rangeEnd && t.getEventEnd(event).stripZone() > rangeStart) {\n                filteredEvents.push(event);\n              }\n            }\n\n            return filteredEvents;\n          }\n\n          t.getEventCache = function () {\n            return cache;\n          };\n          /* Fetching\n          -----------------------------------------------------------------------------*/\n          // start and end are assumed to be unzoned\n\n\n          function isFetchNeeded(start, end) {\n            return !rangeStart || // nothing has been fetched yet?\n            start < rangeStart || end > rangeEnd; // is part of the new range outside of the old range?\n          }\n\n          function fetchEvents(start, end) {\n            rangeStart = start;\n            rangeEnd = end;\n            return refetchEvents();\n          } // poorly named. fetches all sources with current `rangeStart` and `rangeEnd`.\n\n\n          function refetchEvents() {\n            return fetchEventSources(sources, 'reset');\n          } // poorly named. fetches a subset of event sources.\n\n\n          function refetchEventSources(matchInputs) {\n            return fetchEventSources(getEventSourcesByMatchArray(matchInputs));\n          } // expects an array of event source objects (the originals, not copies)\n          // `specialFetchType` is an optimization parameter that affects purging of the event cache.\n\n\n          function fetchEventSources(specificSources, specialFetchType) {\n            var i, source;\n\n            if (specialFetchType === 'reset') {\n              cache = [];\n            } else if (specialFetchType !== 'add') {\n              cache = excludeEventsBySources(cache, specificSources);\n            }\n\n            for (i = 0; i < specificSources.length; i++) {\n              source = specificSources[i]; // already-pending sources have already been accounted for in pendingSourceCnt\n\n              if (source._status !== 'pending') {\n                pendingSourceCnt++;\n              }\n\n              source._fetchId = (source._fetchId || 0) + 1;\n              source._status = 'pending';\n            }\n\n            for (i = 0; i < specificSources.length; i++) {\n              source = specificSources[i];\n              tryFetchEventSource(source, source._fetchId);\n            }\n\n            if (pendingSourceCnt) {\n              return Promise.construct(function (resolve) {\n                t.one('eventsReceived', resolve); // will send prunedCache\n              });\n            } else {\n              // executed all synchronously, or no sources at all\n              return Promise.resolve(prunedCache);\n            }\n          } // fetches an event source and processes its result ONLY if it is still the current fetch.\n          // caller is responsible for incrementing pendingSourceCnt first.\n\n\n          function tryFetchEventSource(source, fetchId) {\n            _fetchEventSource(source, function (eventInputs) {\n              var isArraySource = $.isArray(source.events);\n              var i, eventInput;\n              var abstractEvent;\n\n              if ( // is this the source's most recent fetch?\n              // if not, rely on an upcoming fetch of this source to decrement pendingSourceCnt\n              fetchId === source._fetchId && // event source no longer valid?\n              source._status !== 'rejected') {\n                source._status = 'resolved';\n\n                if (eventInputs) {\n                  for (i = 0; i < eventInputs.length; i++) {\n                    eventInput = eventInputs[i];\n\n                    if (isArraySource) {\n                      // array sources have already been convert to Event Objects\n                      abstractEvent = eventInput;\n                    } else {\n                      abstractEvent = buildEventFromInput(eventInput, source);\n                    }\n\n                    if (abstractEvent) {\n                      // not false (an invalid event)\n                      cache.push.apply( // append\n                      cache, expandEvent(abstractEvent) // add individual expanded events to the cache\n                      );\n                    }\n                  }\n                }\n\n                decrementPendingSourceCnt();\n              }\n            });\n          }\n\n          function rejectEventSource(source) {\n            var wasPending = source._status === 'pending';\n            source._status = 'rejected';\n\n            if (wasPending) {\n              decrementPendingSourceCnt();\n            }\n          }\n\n          function decrementPendingSourceCnt() {\n            pendingSourceCnt--;\n\n            if (!pendingSourceCnt) {\n              reportEventChange(cache); // updates prunedCache\n\n              t.trigger('eventsReceived', prunedCache);\n            }\n          }\n\n          function _fetchEventSource(source, callback) {\n            var i;\n            var fetchers = FC.sourceFetchers;\n            var res;\n\n            for (i = 0; i < fetchers.length; i++) {\n              res = fetchers[i].call(t, // this, the Calendar object\n              source, rangeStart.clone(), rangeEnd.clone(), t.opt('timezone'), callback);\n\n              if (res === true) {\n                // the fetcher is in charge. made its own async request\n                return;\n              } else if (typeof res == 'object') {\n                // the fetcher returned a new source. process it\n                _fetchEventSource(res, callback);\n\n                return;\n              }\n            }\n\n            var events = source.events;\n\n            if (events) {\n              if ($.isFunction(events)) {\n                t.pushLoading();\n                events.call(t, // this, the Calendar object\n                rangeStart.clone(), rangeEnd.clone(), t.opt('timezone'), function (events) {\n                  callback(events);\n                  t.popLoading();\n                });\n              } else if ($.isArray(events)) {\n                callback(events);\n              } else {\n                callback();\n              }\n            } else {\n              var url = source.url;\n\n              if (url) {\n                var _success = source.success;\n                var _error = source.error;\n                var _complete = source.complete; // retrieve any outbound GET/POST $.ajax data from the options\n\n                var customData;\n\n                if ($.isFunction(source.data)) {\n                  // supplied as a function that returns a key/value object\n                  customData = source.data();\n                } else {\n                  // supplied as a straight key/value object\n                  customData = source.data;\n                } // use a copy of the custom data so we can modify the parameters\n                // and not affect the passed-in object.\n\n\n                var data = $.extend({}, customData || {});\n                var startParam = firstDefined(source.startParam, t.opt('startParam'));\n                var endParam = firstDefined(source.endParam, t.opt('endParam'));\n                var timezoneParam = firstDefined(source.timezoneParam, t.opt('timezoneParam'));\n\n                if (startParam) {\n                  data[startParam] = rangeStart.format();\n                }\n\n                if (endParam) {\n                  data[endParam] = rangeEnd.format();\n                }\n\n                if (t.opt('timezone') && t.opt('timezone') != 'local') {\n                  data[timezoneParam] = t.opt('timezone');\n                }\n\n                t.pushLoading();\n                $.ajax($.extend({}, ajaxDefaults, source, {\n                  data: data,\n                  success: function success(events) {\n                    events = events || [];\n                    var res = applyAll(_success, this, arguments);\n\n                    if ($.isArray(res)) {\n                      events = res;\n                    }\n\n                    callback(events);\n                  },\n                  error: function error() {\n                    applyAll(_error, this, arguments);\n                    callback();\n                  },\n                  complete: function complete() {\n                    applyAll(_complete, this, arguments);\n                    t.popLoading();\n                  }\n                }));\n              } else {\n                callback();\n              }\n            }\n          }\n          /* Sources\n          -----------------------------------------------------------------------------*/\n\n\n          function addEventSource(sourceInput) {\n            var source = buildEventSource(sourceInput);\n\n            if (source) {\n              sources.push(source);\n              fetchEventSources([source], 'add'); // will eventually call reportEventChange\n            }\n          }\n\n          function buildEventSource(sourceInput) {\n            // will return undefined if invalid source\n            var normalizers = FC.sourceNormalizers;\n            var source;\n            var i;\n\n            if ($.isFunction(sourceInput) || $.isArray(sourceInput)) {\n              source = {\n                events: sourceInput\n              };\n            } else if (typeof sourceInput === 'string') {\n              source = {\n                url: sourceInput\n              };\n            } else if (typeof sourceInput === 'object') {\n              source = $.extend({}, sourceInput); // shallow copy\n            }\n\n            if (source) {\n              // TODO: repeat code, same code for event classNames\n              if (source.className) {\n                if (typeof source.className === 'string') {\n                  source.className = source.className.split(/\\s+/);\n                } // otherwise, assumed to be an array\n\n              } else {\n                source.className = [];\n              } // for array sources, we convert to standard Event Objects up front\n\n\n              if ($.isArray(source.events)) {\n                source.origArray = source.events; // for removeEventSource\n\n                source.events = $.map(source.events, function (eventInput) {\n                  return buildEventFromInput(eventInput, source);\n                });\n              }\n\n              for (i = 0; i < normalizers.length; i++) {\n                normalizers[i].call(t, source);\n              }\n\n              return source;\n            }\n          }\n\n          function removeEventSource(matchInput) {\n            removeSpecificEventSources(getEventSourcesByMatch(matchInput));\n          } // if called with no arguments, removes all.\n\n\n          function removeEventSources(matchInputs) {\n            if (matchInputs == null) {\n              removeSpecificEventSources(sources, true); // isAll=true\n            } else {\n              removeSpecificEventSources(getEventSourcesByMatchArray(matchInputs));\n            }\n          }\n\n          function removeSpecificEventSources(targetSources, isAll) {\n            var i; // cancel pending requests\n\n            for (i = 0; i < targetSources.length; i++) {\n              rejectEventSource(targetSources[i]);\n            }\n\n            if (isAll) {\n              // an optimization\n              sources = [];\n              cache = [];\n            } else {\n              // remove from persisted source list\n              sources = $.grep(sources, function (source) {\n                for (i = 0; i < targetSources.length; i++) {\n                  if (source === targetSources[i]) {\n                    return false; // exclude\n                  }\n                }\n\n                return true; // include\n              });\n              cache = excludeEventsBySources(cache, targetSources);\n            }\n\n            reportEventChange();\n          }\n\n          function getEventSources() {\n            return sources.slice(1); // returns a shallow copy of sources with stickySource removed\n          }\n\n          function getEventSourceById(id) {\n            return $.grep(sources, function (source) {\n              return source.id && source.id === id;\n            })[0];\n          } // like getEventSourcesByMatch, but accepts multple match criteria (like multiple IDs)\n\n\n          function getEventSourcesByMatchArray(matchInputs) {\n            // coerce into an array\n            if (!matchInputs) {\n              matchInputs = [];\n            } else if (!$.isArray(matchInputs)) {\n              matchInputs = [matchInputs];\n            }\n\n            var matchingSources = [];\n            var i; // resolve raw inputs to real event source objects\n\n            for (i = 0; i < matchInputs.length; i++) {\n              matchingSources.push.apply( // append\n              matchingSources, getEventSourcesByMatch(matchInputs[i]));\n            }\n\n            return matchingSources;\n          } // matchInput can either by a real event source object, an ID, or the function/URL for the source.\n          // returns an array of matching source objects.\n\n\n          function getEventSourcesByMatch(matchInput) {\n            var i, source; // given an proper event source object\n\n            for (i = 0; i < sources.length; i++) {\n              source = sources[i];\n\n              if (source === matchInput) {\n                return [source];\n              }\n            } // an ID match\n\n\n            source = getEventSourceById(matchInput);\n\n            if (source) {\n              return [source];\n            }\n\n            return $.grep(sources, function (source) {\n              return isSourcesEquivalent(matchInput, source);\n            });\n          }\n\n          function isSourcesEquivalent(source1, source2) {\n            return source1 && source2 && getSourcePrimitive(source1) == getSourcePrimitive(source2);\n          }\n\n          function getSourcePrimitive(source) {\n            return (typeof source === 'object' ? // a normalized event source?\n            source.origArray || source.googleCalendarId || source.url || source.events : // get the primitive\n            null) || source; // the given argument *is* the primitive\n          } // util\n          // returns a filtered array without events that are part of any of the given sources\n\n\n          function excludeEventsBySources(specificEvents, specificSources) {\n            return $.grep(specificEvents, function (event) {\n              for (var i = 0; i < specificSources.length; i++) {\n                if (event.source === specificSources[i]) {\n                  return false; // exclude\n                }\n              }\n\n              return true; // keep\n            });\n          }\n          /* Manipulation\n          -----------------------------------------------------------------------------*/\n          // Only ever called from the externally-facing API\n\n\n          function updateEvent(event) {\n            updateEvents([event]);\n          } // Only ever called from the externally-facing API\n\n\n          function updateEvents(events) {\n            var i, event;\n\n            for (i = 0; i < events.length; i++) {\n              event = events[i]; // massage start/end values, even if date string values\n\n              event.start = t.moment(event.start);\n\n              if (event.end) {\n                event.end = t.moment(event.end);\n              } else {\n                event.end = null;\n              }\n\n              mutateEvent(event, getMiscEventProps(event)); // will handle start/end/allDay normalization\n            }\n\n            reportEventChange(); // reports event modifications (so we can redraw)\n          } // Returns a hash of misc event properties that should be copied over to related events.\n\n\n          function getMiscEventProps(event) {\n            var props = {};\n            $.each(event, function (name, val) {\n              if (isMiscEventPropName(name)) {\n                if (val !== undefined && isAtomic(val)) {\n                  // a defined non-object\n                  props[name] = val;\n                }\n              }\n            });\n            return props;\n          } // non-date-related, non-id-related, non-secret\n\n\n          function isMiscEventPropName(name) {\n            return !/^_|^(id|allDay|start|end)$/.test(name);\n          } // returns the expanded events that were created\n\n\n          function renderEvent(eventInput, stick) {\n            return renderEvents([eventInput], stick);\n          } // returns the expanded events that were created\n\n\n          function renderEvents(eventInputs, stick) {\n            var renderedEvents = [];\n            var renderableEvents;\n            var abstractEvent;\n            var i, j, event;\n\n            for (i = 0; i < eventInputs.length; i++) {\n              abstractEvent = buildEventFromInput(eventInputs[i]);\n\n              if (abstractEvent) {\n                // not false (a valid input)\n                renderableEvents = expandEvent(abstractEvent);\n\n                for (j = 0; j < renderableEvents.length; j++) {\n                  event = renderableEvents[j];\n\n                  if (!event.source) {\n                    if (stick) {\n                      stickySource.events.push(event);\n                      event.source = stickySource;\n                    }\n\n                    cache.push(event);\n                  }\n                }\n\n                renderedEvents = renderedEvents.concat(renderableEvents);\n              }\n            }\n\n            if (renderedEvents.length) {\n              // any new events rendered?\n              reportEventChange();\n            }\n\n            return renderedEvents;\n          }\n\n          function removeEvents(filter) {\n            var eventID;\n            var i;\n\n            if (filter == null) {\n              // null or undefined. remove all events\n              filter = function filter() {\n                return true;\n              }; // will always match\n\n            } else if (!$.isFunction(filter)) {\n              // an event ID\n              eventID = filter + '';\n\n              filter = function filter(event) {\n                return event._id == eventID;\n              };\n            } // Purge event(s) from our local cache\n\n\n            cache = $.grep(cache, filter, true); // inverse=true\n            // Remove events from array sources.\n            // This works because they have been converted to official Event Objects up front.\n            // (and as a result, event._id has been calculated).\n\n            for (i = 0; i < sources.length; i++) {\n              if ($.isArray(sources[i].events)) {\n                sources[i].events = $.grep(sources[i].events, filter, true);\n              }\n            }\n\n            reportEventChange();\n          }\n\n          function clientEvents(filter) {\n            if ($.isFunction(filter)) {\n              return $.grep(cache, filter);\n            } else if (filter != null) {\n              // not null, not undefined. an event ID\n              filter += '';\n              return $.grep(cache, function (e) {\n                return e._id == filter;\n              });\n            }\n\n            return cache; // else, return all\n          } // Makes sure all array event sources have their internal event objects\n          // converted over to the Calendar's current timezone.\n\n\n          t.rezoneArrayEventSources = function () {\n            var i;\n            var events;\n            var j;\n\n            for (i = 0; i < sources.length; i++) {\n              events = sources[i].events;\n\n              if ($.isArray(events)) {\n                for (j = 0; j < events.length; j++) {\n                  rezoneEventDates(events[j]);\n                }\n              }\n            }\n          };\n\n          function rezoneEventDates(event) {\n            event.start = t.moment(event.start);\n\n            if (event.end) {\n              event.end = t.moment(event.end);\n            }\n\n            backupEventDates(event);\n          }\n          /* Event Normalization\n          -----------------------------------------------------------------------------*/\n          // Given a raw object with key/value properties, returns an \"abstract\" Event object.\n          // An \"abstract\" event is an event that, if recurring, will not have been expanded yet.\n          // Will return `false` when input is invalid.\n          // `source` is optional\n\n\n          function buildEventFromInput(input, source) {\n            var calendarEventDataTransform = t.opt('eventDataTransform');\n            var out = {};\n            var start, end;\n            var allDay;\n\n            if (calendarEventDataTransform) {\n              input = calendarEventDataTransform(input);\n            }\n\n            if (source && source.eventDataTransform) {\n              input = source.eventDataTransform(input);\n            } // Copy all properties over to the resulting object.\n            // The special-case properties will be copied over afterwards.\n\n\n            $.extend(out, input);\n\n            if (source) {\n              out.source = source;\n            }\n\n            out._id = input._id || (input.id === undefined ? '_fc' + eventGUID++ : input.id + '');\n\n            if (input.className) {\n              if (typeof input.className == 'string') {\n                out.className = input.className.split(/\\s+/);\n              } else {\n                // assumed to be an array\n                out.className = input.className;\n              }\n            } else {\n              out.className = [];\n            }\n\n            start = input.start || input.date; // \"date\" is an alias for \"start\"\n\n            end = input.end; // parse as a time (Duration) if applicable\n\n            if (isTimeString(start)) {\n              start = moment.duration(start);\n            }\n\n            if (isTimeString(end)) {\n              end = moment.duration(end);\n            }\n\n            if (input.dow || moment.isDuration(start) || moment.isDuration(end)) {\n              // the event is \"abstract\" (recurring) so don't calculate exact start/end dates just yet\n              out.start = start ? moment.duration(start) : null; // will be a Duration or null\n\n              out.end = end ? moment.duration(end) : null; // will be a Duration or null\n\n              out._recurring = true; // our internal marker\n            } else {\n              if (start) {\n                start = t.moment(start);\n\n                if (!start.isValid()) {\n                  return false;\n                }\n              }\n\n              if (end) {\n                end = t.moment(end);\n\n                if (!end.isValid()) {\n                  end = null; // let defaults take over\n                }\n              }\n\n              allDay = input.allDay;\n\n              if (allDay === undefined) {\n                // still undefined? fallback to default\n                allDay = firstDefined(source ? source.allDayDefault : undefined, t.opt('allDayDefault')); // still undefined? normalizeEventDates will calculate it\n              }\n\n              assignDatesToEvent(start, end, allDay, out);\n            }\n\n            t.normalizeEvent(out); // hook for external use. a prototype method\n\n            return out;\n          }\n\n          t.buildEventFromInput = buildEventFromInput; // Normalizes and assigns the given dates to the given partially-formed event object.\n          // NOTE: mutates the given start/end moments. does not make a copy.\n\n          function assignDatesToEvent(start, end, allDay, event) {\n            event.start = start;\n            event.end = end;\n            event.allDay = allDay;\n            normalizeEventDates(event);\n            backupEventDates(event);\n          } // Ensures proper values for allDay/start/end. Accepts an Event object, or a plain object with event-ish properties.\n          // NOTE: Will modify the given object.\n\n\n          function normalizeEventDates(eventProps) {\n            normalizeEventTimes(eventProps);\n\n            if (eventProps.end && !eventProps.end.isAfter(eventProps.start)) {\n              eventProps.end = null;\n            }\n\n            if (!eventProps.end) {\n              if (t.opt('forceEventDuration')) {\n                eventProps.end = t.getDefaultEventEnd(eventProps.allDay, eventProps.start);\n              } else {\n                eventProps.end = null;\n              }\n            }\n          } // Ensures the allDay property exists and the timeliness of the start/end dates are consistent\n\n\n          function normalizeEventTimes(eventProps) {\n            if (eventProps.allDay == null) {\n              eventProps.allDay = !(eventProps.start.hasTime() || eventProps.end && eventProps.end.hasTime());\n            }\n\n            if (eventProps.allDay) {\n              eventProps.start.stripTime();\n\n              if (eventProps.end) {\n                // TODO: consider nextDayThreshold here? If so, will require a lot of testing and adjustment\n                eventProps.end.stripTime();\n              }\n            } else {\n              if (!eventProps.start.hasTime()) {\n                eventProps.start = t.applyTimezone(eventProps.start.time(0)); // will assign a 00:00 time\n              }\n\n              if (eventProps.end && !eventProps.end.hasTime()) {\n                eventProps.end = t.applyTimezone(eventProps.end.time(0)); // will assign a 00:00 time\n              }\n            }\n          } // If the given event is a recurring event, break it down into an array of individual instances.\n          // If not a recurring event, return an array with the single original event.\n          // If given a falsy input (probably because of a failed buildEventFromInput call), returns an empty array.\n          // HACK: can override the recurring window by providing custom rangeStart/rangeEnd (for businessHours).\n\n\n          function expandEvent(abstractEvent, _rangeStart, _rangeEnd) {\n            var events = [];\n            var dowHash;\n            var dow;\n            var i;\n            var date;\n            var startTime, endTime;\n            var start, end;\n            var event;\n            _rangeStart = _rangeStart || rangeStart;\n            _rangeEnd = _rangeEnd || rangeEnd;\n\n            if (abstractEvent) {\n              if (abstractEvent._recurring) {\n                // make a boolean hash as to whether the event occurs on each day-of-week\n                if (dow = abstractEvent.dow) {\n                  dowHash = {};\n\n                  for (i = 0; i < dow.length; i++) {\n                    dowHash[dow[i]] = true;\n                  }\n                } // iterate through every day in the current range\n\n\n                date = _rangeStart.clone().stripTime(); // holds the date of the current day\n\n                while (date.isBefore(_rangeEnd)) {\n                  if (!dowHash || dowHash[date.day()]) {\n                    // if everyday, or this particular day-of-week\n                    startTime = abstractEvent.start; // the stored start and end properties are times (Durations)\n\n                    endTime = abstractEvent.end; // \"\n\n                    start = date.clone();\n                    end = null;\n\n                    if (startTime) {\n                      start = start.time(startTime);\n                    }\n\n                    if (endTime) {\n                      end = date.clone().time(endTime);\n                    }\n\n                    event = $.extend({}, abstractEvent); // make a copy of the original\n\n                    assignDatesToEvent(start, end, !startTime && !endTime, // allDay?\n                    event);\n                    events.push(event);\n                  }\n\n                  date.add(1, 'days');\n                }\n              } else {\n                events.push(abstractEvent); // return the original event. will be a one-item array\n              }\n            }\n\n            return events;\n          }\n\n          t.expandEvent = expandEvent;\n          /* Event Modification Math\n          -----------------------------------------------------------------------------------------*/\n          // Modifies an event and all related events by applying the given properties.\n          // Special date-diffing logic is used for manipulation of dates.\n          // If `props` does not contain start/end dates, the updated values are assumed to be the event's current start/end.\n          // All date comparisons are done against the event's pristine _start and _end dates.\n          // Returns an object with delta information and a function to undo all operations.\n          // For making computations in a granularity greater than day/time, specify largeUnit.\n          // NOTE: The given `newProps` might be mutated for normalization purposes.\n\n          function mutateEvent(event, newProps, largeUnit) {\n            var miscProps = {};\n            var oldProps;\n            var clearEnd;\n            var startDelta;\n            var endDelta;\n            var durationDelta;\n            var undoFunc; // diffs the dates in the appropriate way, returning a duration\n\n            function diffDates(date1, date0) {\n              // date1 - date0\n              if (largeUnit) {\n                return diffByUnit(date1, date0, largeUnit);\n              } else if (newProps.allDay) {\n                return diffDay(date1, date0);\n              } else {\n                return diffDayTime(date1, date0);\n              }\n            }\n\n            newProps = newProps || {}; // normalize new date-related properties\n\n            if (!newProps.start) {\n              newProps.start = event.start.clone();\n            }\n\n            if (newProps.end === undefined) {\n              newProps.end = event.end ? event.end.clone() : null;\n            }\n\n            if (newProps.allDay == null) {\n              // is null or undefined?\n              newProps.allDay = event.allDay;\n            }\n\n            normalizeEventDates(newProps); // create normalized versions of the original props to compare against\n            // need a real end value, for diffing\n\n            oldProps = {\n              start: event._start.clone(),\n              end: event._end ? event._end.clone() : t.getDefaultEventEnd(event._allDay, event._start),\n              allDay: newProps.allDay // normalize the dates in the same regard as the new properties\n\n            };\n            normalizeEventDates(oldProps); // need to clear the end date if explicitly changed to null\n\n            clearEnd = event._end !== null && newProps.end === null; // compute the delta for moving the start date\n\n            startDelta = diffDates(newProps.start, oldProps.start); // compute the delta for moving the end date\n\n            if (newProps.end) {\n              endDelta = diffDates(newProps.end, oldProps.end);\n              durationDelta = endDelta.subtract(startDelta);\n            } else {\n              durationDelta = null;\n            } // gather all non-date-related properties\n\n\n            $.each(newProps, function (name, val) {\n              if (isMiscEventPropName(name)) {\n                if (val !== undefined) {\n                  miscProps[name] = val;\n                }\n              }\n            }); // apply the operations to the event and all related events\n\n            undoFunc = mutateEvents(clientEvents(event._id), // get events with this ID\n            clearEnd, newProps.allDay, startDelta, durationDelta, miscProps);\n            return {\n              dateDelta: startDelta,\n              durationDelta: durationDelta,\n              undo: undoFunc\n            };\n          } // Modifies an array of events in the following ways (operations are in order):\n          // - clear the event's `end`\n          // - convert the event to allDay\n          // - add `dateDelta` to the start and end\n          // - add `durationDelta` to the event's duration\n          // - assign `miscProps` to the event\n          //\n          // Returns a function that can be called to undo all the operations.\n          //\n          // TODO: don't use so many closures. possible memory issues when lots of events with same ID.\n          //\n\n\n          function mutateEvents(events, clearEnd, allDay, dateDelta, durationDelta, miscProps) {\n            var isAmbigTimezone = t.getIsAmbigTimezone();\n            var undoFunctions = []; // normalize zero-length deltas to be null\n\n            if (dateDelta && !dateDelta.valueOf()) {\n              dateDelta = null;\n            }\n\n            if (durationDelta && !durationDelta.valueOf()) {\n              durationDelta = null;\n            }\n\n            $.each(events, function (i, event) {\n              var oldProps;\n              var newProps; // build an object holding all the old values, both date-related and misc.\n              // for the undo function.\n\n              oldProps = {\n                start: event.start.clone(),\n                end: event.end ? event.end.clone() : null,\n                allDay: event.allDay\n              };\n              $.each(miscProps, function (name) {\n                oldProps[name] = event[name];\n              }); // new date-related properties. work off the original date snapshot.\n              // ok to use references because they will be thrown away when backupEventDates is called.\n\n              newProps = {\n                start: event._start,\n                end: event._end,\n                allDay: allDay // normalize the dates in the same regard as the new properties\n\n              };\n              normalizeEventDates(newProps); // massages start/end/allDay\n              // strip or ensure the end date\n\n              if (clearEnd) {\n                newProps.end = null;\n              } else if (durationDelta && !newProps.end) {\n                // the duration translation requires an end date\n                newProps.end = t.getDefaultEventEnd(newProps.allDay, newProps.start);\n              }\n\n              if (dateDelta) {\n                newProps.start.add(dateDelta);\n\n                if (newProps.end) {\n                  newProps.end.add(dateDelta);\n                }\n              }\n\n              if (durationDelta) {\n                newProps.end.add(durationDelta); // end already ensured above\n              } // if the dates have changed, and we know it is impossible to recompute the\n              // timezone offsets, strip the zone.\n\n\n              if (isAmbigTimezone && !newProps.allDay && (dateDelta || durationDelta)) {\n                newProps.start.stripZone();\n\n                if (newProps.end) {\n                  newProps.end.stripZone();\n                }\n              }\n\n              $.extend(event, miscProps, newProps); // copy over misc props, then date-related props\n\n              backupEventDates(event); // regenerate internal _start/_end/_allDay\n\n              undoFunctions.push(function () {\n                $.extend(event, oldProps);\n                backupEventDates(event); // regenerate internal _start/_end/_allDay\n              });\n            });\n            return function () {\n              for (var i = 0; i < undoFunctions.length; i++) {\n                undoFunctions[i]();\n              }\n            };\n          }\n        } // returns an undo function\n\n\n        Calendar.prototype.mutateSeg = function (seg, newProps) {\n          return this.mutateEvent(seg.event, newProps);\n        }; // hook for external libs to manipulate event properties upon creation.\n        // should manipulate the event in-place.\n\n\n        Calendar.prototype.normalizeEvent = function (event) {}; // Does the given span (start, end, and other location information)\n        // fully contain the other?\n\n\n        Calendar.prototype.spanContainsSpan = function (outerSpan, innerSpan) {\n          var eventStart = outerSpan.start.clone().stripZone();\n          var eventEnd = this.getEventEnd(outerSpan).stripZone();\n          return innerSpan.start >= eventStart && innerSpan.end <= eventEnd;\n        }; // Returns a list of events that the given event should be compared against when being considered for a move to\n        // the specified span. Attached to the Calendar's prototype because EventManager is a mixin for a Calendar.\n\n\n        Calendar.prototype.getPeerEvents = function (span, event) {\n          var cache = this.getEventCache();\n          var peerEvents = [];\n          var i, otherEvent;\n\n          for (i = 0; i < cache.length; i++) {\n            otherEvent = cache[i];\n\n            if (!event || event._id !== otherEvent._id // don't compare the event to itself or other related [repeating] events\n            ) {\n                peerEvents.push(otherEvent);\n              }\n          }\n\n          return peerEvents;\n        }; // updates the \"backup\" properties, which are preserved in order to compute diffs later on.\n\n\n        function backupEventDates(event) {\n          event._allDay = event.allDay;\n          event._start = event.start.clone();\n          event._end = event.end ? event.end.clone() : null;\n        }\n        /* Overlapping / Constraining\n        -----------------------------------------------------------------------------------------*/\n        // Determines if the given event can be relocated to the given span (unzoned start/end with other misc data)\n\n\n        Calendar.prototype.isEventSpanAllowed = function (span, event) {\n          var source = event.source || {};\n          var eventAllowFunc = this.opt('eventAllow');\n          var constraint = firstDefined(event.constraint, source.constraint, this.opt('eventConstraint'));\n          var overlap = firstDefined(event.overlap, source.overlap, this.opt('eventOverlap'));\n          return this.isSpanAllowed(span, constraint, overlap, event) && (!eventAllowFunc || eventAllowFunc(span, event) !== false);\n        }; // Determines if an external event can be relocated to the given span (unzoned start/end with other misc data)\n\n\n        Calendar.prototype.isExternalSpanAllowed = function (eventSpan, eventLocation, eventProps) {\n          var eventInput;\n          var event; // note: very similar logic is in View's reportExternalDrop\n\n          if (eventProps) {\n            eventInput = $.extend({}, eventProps, eventLocation);\n            event = this.expandEvent(this.buildEventFromInput(eventInput))[0];\n          }\n\n          if (event) {\n            return this.isEventSpanAllowed(eventSpan, event);\n          } else {\n            // treat it as a selection\n            return this.isSelectionSpanAllowed(eventSpan);\n          }\n        }; // Determines the given span (unzoned start/end with other misc data) can be selected.\n\n\n        Calendar.prototype.isSelectionSpanAllowed = function (span) {\n          var selectAllowFunc = this.opt('selectAllow');\n          return this.isSpanAllowed(span, this.opt('selectConstraint'), this.opt('selectOverlap')) && (!selectAllowFunc || selectAllowFunc(span) !== false);\n        }; // Returns true if the given span (caused by an event drop/resize or a selection) is allowed to exist\n        // according to the constraint/overlap settings.\n        // `event` is not required if checking a selection.\n\n\n        Calendar.prototype.isSpanAllowed = function (span, constraint, overlap, event) {\n          var constraintEvents;\n          var anyContainment;\n          var peerEvents;\n          var i, peerEvent;\n          var peerOverlap; // the range must be fully contained by at least one of produced constraint events\n\n          if (constraint != null) {\n            // not treated as an event! intermediate data structure\n            // TODO: use ranges in the future\n            constraintEvents = this.constraintToEvents(constraint);\n\n            if (constraintEvents) {\n              // not invalid\n              anyContainment = false;\n\n              for (i = 0; i < constraintEvents.length; i++) {\n                if (this.spanContainsSpan(constraintEvents[i], span)) {\n                  anyContainment = true;\n                  break;\n                }\n              }\n\n              if (!anyContainment) {\n                return false;\n              }\n            }\n          }\n\n          peerEvents = this.getPeerEvents(span, event);\n\n          for (i = 0; i < peerEvents.length; i++) {\n            peerEvent = peerEvents[i]; // there needs to be an actual intersection before disallowing anything\n\n            if (this.eventIntersectsRange(peerEvent, span)) {\n              // evaluate overlap for the given range and short-circuit if necessary\n              if (overlap === false) {\n                return false;\n              } // if the event's overlap is a test function, pass the peer event in question as the first param\n              else if (typeof overlap === 'function' && !overlap(peerEvent, event)) {\n                  return false;\n                } // if we are computing if the given range is allowable for an event, consider the other event's\n              // EventObject-specific or Source-specific `overlap` property\n\n\n              if (event) {\n                peerOverlap = firstDefined(peerEvent.overlap, (peerEvent.source || {}).overlap // we already considered the global `eventOverlap`\n                );\n\n                if (peerOverlap === false) {\n                  return false;\n                } // if the peer event's overlap is a test function, pass the subject event as the first param\n\n\n                if (typeof peerOverlap === 'function' && !peerOverlap(event, peerEvent)) {\n                  return false;\n                }\n              }\n            }\n          }\n\n          return true;\n        }; // Given an event input from the API, produces an array of event objects. Possible event inputs:\n        // 'businessHours'\n        // An event ID (number or string)\n        // An object with specific start/end dates or a recurring event (like what businessHours accepts)\n\n\n        Calendar.prototype.constraintToEvents = function (constraintInput) {\n          if (constraintInput === 'businessHours') {\n            return this.getCurrentBusinessHourEvents();\n          }\n\n          if (typeof constraintInput === 'object') {\n            if (constraintInput.start != null) {\n              // needs to be event-like input\n              return this.expandEvent(this.buildEventFromInput(constraintInput));\n            } else {\n              return null; // invalid\n            }\n          }\n\n          return this.clientEvents(constraintInput); // probably an ID\n        }; // Does the event's date range intersect with the given range?\n        // start/end already assumed to have stripped zones :(\n\n\n        Calendar.prototype.eventIntersectsRange = function (event, range) {\n          var eventStart = event.start.clone().stripZone();\n          var eventEnd = this.getEventEnd(event).stripZone();\n          return range.start < eventEnd && range.end > eventStart;\n        };\n        /* Business Hours\n        -----------------------------------------------------------------------------------------*/\n\n\n        var BUSINESS_HOUR_EVENT_DEFAULTS = {\n          id: '_fcBusinessHours',\n          // will relate events from different calls to expandEvent\n          start: '09:00',\n          end: '17:00',\n          dow: [1, 2, 3, 4, 5],\n          // monday - friday\n          rendering: 'inverse-background' // classNames are defined in businessHoursSegClasses\n\n        }; // Return events objects for business hours within the current view.\n        // Abuse of our event system :(\n\n        Calendar.prototype.getCurrentBusinessHourEvents = function (wholeDay) {\n          return this.computeBusinessHourEvents(wholeDay, this.opt('businessHours'));\n        }; // Given a raw input value from options, return events objects for business hours within the current view.\n\n\n        Calendar.prototype.computeBusinessHourEvents = function (wholeDay, input) {\n          if (input === true) {\n            return this.expandBusinessHourEvents(wholeDay, [{}]);\n          } else if ($.isPlainObject(input)) {\n            return this.expandBusinessHourEvents(wholeDay, [input]);\n          } else if ($.isArray(input)) {\n            return this.expandBusinessHourEvents(wholeDay, input, true);\n          } else {\n            return [];\n          }\n        }; // inputs expected to be an array of objects.\n        // if ignoreNoDow is true, will ignore entries that don't specify a day-of-week (dow) key.\n\n\n        Calendar.prototype.expandBusinessHourEvents = function (wholeDay, inputs, ignoreNoDow) {\n          var view = this.getView();\n          var events = [];\n          var i, input;\n\n          for (i = 0; i < inputs.length; i++) {\n            input = inputs[i];\n\n            if (ignoreNoDow && !input.dow) {\n              continue;\n            } // give defaults. will make a copy\n\n\n            input = $.extend({}, BUSINESS_HOUR_EVENT_DEFAULTS, input); // if a whole-day series is requested, clear the start/end times\n\n            if (wholeDay) {\n              input.start = null;\n              input.end = null;\n            }\n\n            events.push.apply(events, // append\n            this.expandEvent(this.buildEventFromInput(input), view.activeRange.start, view.activeRange.end));\n          }\n\n          return events;\n        };\n\n        ;\n        ;\n        /* An abstract class for the \"basic\" views, as well as month view. Renders one or more rows of day cells.\n        ----------------------------------------------------------------------------------------------------------------------*/\n        // It is a manager for a DayGrid subcomponent, which does most of the heavy lifting.\n        // It is responsible for managing width/height.\n\n        var BasicView = FC.BasicView = View.extend({\n          scroller: null,\n          dayGridClass: DayGrid,\n          // class the dayGrid will be instantiated from (overridable by subclasses)\n          dayGrid: null,\n          // the main subcomponent that does most of the heavy lifting\n          dayNumbersVisible: false,\n          // display day numbers on each day cell?\n          colWeekNumbersVisible: false,\n          // display week numbers along the side?\n          cellWeekNumbersVisible: false,\n          // display week numbers in day cell?\n          weekNumberWidth: null,\n          // width of all the week-number cells running down the side\n          headContainerEl: null,\n          // div that hold's the dayGrid's rendered date header\n          headRowEl: null,\n          // the fake row element of the day-of-week header\n          initialize: function initialize() {\n            this.dayGrid = this.instantiateDayGrid();\n            this.scroller = new Scroller({\n              overflowX: 'hidden',\n              overflowY: 'auto'\n            });\n          },\n          // Generates the DayGrid object this view needs. Draws from this.dayGridClass\n          instantiateDayGrid: function instantiateDayGrid() {\n            // generate a subclass on the fly with BasicView-specific behavior\n            // TODO: cache this subclass\n            var subclass = this.dayGridClass.extend(basicDayGridMethods);\n            return new subclass(this);\n          },\n          // Computes the date range that will be rendered.\n          buildRenderRange: function buildRenderRange(currentRange, currentRangeUnit) {\n            var renderRange = View.prototype.buildRenderRange.apply(this, arguments); // year and month views should be aligned with weeks. this is already done for week\n\n            if (/^(year|month)$/.test(currentRangeUnit)) {\n              renderRange.start.startOf('week'); // make end-of-week if not already\n\n              if (renderRange.end.weekday()) {\n                renderRange.end.add(1, 'week').startOf('week'); // exclusively move backwards\n              }\n            }\n\n            return this.trimHiddenDays(renderRange);\n          },\n          // Renders the view into `this.el`, which should already be assigned\n          renderDates: function renderDates() {\n            this.dayGrid.breakOnWeeks = /year|month|week/.test(this.currentRangeUnit); // do before Grid::setRange\n\n            this.dayGrid.setRange(this.renderRange);\n            this.dayNumbersVisible = this.dayGrid.rowCnt > 1; // TODO: make grid responsible\n\n            if (this.opt('weekNumbers')) {\n              if (this.opt('weekNumbersWithinDays')) {\n                this.cellWeekNumbersVisible = true;\n                this.colWeekNumbersVisible = false;\n              } else {\n                this.cellWeekNumbersVisible = false;\n                this.colWeekNumbersVisible = true;\n              }\n\n              ;\n            }\n\n            this.dayGrid.numbersVisible = this.dayNumbersVisible || this.cellWeekNumbersVisible || this.colWeekNumbersVisible;\n            this.el.addClass('fc-basic-view').html(this.renderSkeletonHtml());\n            this.renderHead();\n            this.scroller.render();\n            var dayGridContainerEl = this.scroller.el.addClass('fc-day-grid-container');\n            var dayGridEl = $('<div class=\"fc-day-grid\" />').appendTo(dayGridContainerEl);\n            this.el.find('.fc-body > tr > td').append(dayGridContainerEl);\n            this.dayGrid.setElement(dayGridEl);\n            this.dayGrid.renderDates(this.hasRigidRows());\n          },\n          // render the day-of-week headers\n          renderHead: function renderHead() {\n            this.headContainerEl = this.el.find('.fc-head-container').html(this.dayGrid.renderHeadHtml());\n            this.headRowEl = this.headContainerEl.find('.fc-row');\n          },\n          // Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,\n          // always completely kill the dayGrid's rendering.\n          unrenderDates: function unrenderDates() {\n            this.dayGrid.unrenderDates();\n            this.dayGrid.removeElement();\n            this.scroller.destroy();\n          },\n          renderBusinessHours: function renderBusinessHours() {\n            this.dayGrid.renderBusinessHours();\n          },\n          unrenderBusinessHours: function unrenderBusinessHours() {\n            this.dayGrid.unrenderBusinessHours();\n          },\n          // Builds the HTML skeleton for the view.\n          // The day-grid component will render inside of a container defined by this HTML.\n          renderSkeletonHtml: function renderSkeletonHtml() {\n            return '' + '<table>' + '<thead class=\"fc-head\">' + '<tr>' + '<td class=\"fc-head-container ' + this.widgetHeaderClass + '\"></td>' + '</tr>' + '</thead>' + '<tbody class=\"fc-body\">' + '<tr>' + '<td class=\"' + this.widgetContentClass + '\"></td>' + '</tr>' + '</tbody>' + '</table>';\n          },\n          // Generates an HTML attribute string for setting the width of the week number column, if it is known\n          weekNumberStyleAttr: function weekNumberStyleAttr() {\n            if (this.weekNumberWidth !== null) {\n              return 'style=\"width:' + this.weekNumberWidth + 'px\"';\n            }\n\n            return '';\n          },\n          // Determines whether each row should have a constant height\n          hasRigidRows: function hasRigidRows() {\n            var eventLimit = this.opt('eventLimit');\n            return eventLimit && typeof eventLimit !== 'number';\n          },\n\n          /* Dimensions\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Refreshes the horizontal dimensions of the view\n          updateWidth: function updateWidth() {\n            if (this.colWeekNumbersVisible) {\n              // Make sure all week number cells running down the side have the same width.\n              // Record the width for cells created later.\n              this.weekNumberWidth = matchCellWidths(this.el.find('.fc-week-number'));\n            }\n          },\n          // Adjusts the vertical dimensions of the view to the specified values\n          setHeight: function setHeight(totalHeight, isAuto) {\n            var eventLimit = this.opt('eventLimit');\n            var scrollerHeight;\n            var scrollbarWidths; // reset all heights to be natural\n\n            this.scroller.clear();\n            uncompensateScroll(this.headRowEl);\n            this.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n            // is the event limit a constant level number?\n\n            if (eventLimit && typeof eventLimit === 'number') {\n              this.dayGrid.limitRows(eventLimit); // limit the levels first so the height can redistribute after\n            } // distribute the height to the rows\n            // (totalHeight is a \"recommended\" value if isAuto)\n\n\n            scrollerHeight = this.computeScrollerHeight(totalHeight);\n            this.setGridHeight(scrollerHeight, isAuto); // is the event limit dynamically calculated?\n\n            if (eventLimit && typeof eventLimit !== 'number') {\n              this.dayGrid.limitRows(eventLimit); // limit the levels after the grid's row heights have been set\n            }\n\n            if (!isAuto) {\n              // should we force dimensions of the scroll container?\n              this.scroller.setHeight(scrollerHeight);\n              scrollbarWidths = this.scroller.getScrollbarWidths();\n\n              if (scrollbarWidths.left || scrollbarWidths.right) {\n                // using scrollbars?\n                compensateScroll(this.headRowEl, scrollbarWidths); // doing the scrollbar compensation might have created text overflow which created more height. redo\n\n                scrollerHeight = this.computeScrollerHeight(totalHeight);\n                this.scroller.setHeight(scrollerHeight);\n              } // guarantees the same scrollbar widths\n\n\n              this.scroller.lockOverflow(scrollbarWidths);\n            }\n          },\n          // given a desired total height of the view, returns what the height of the scroller should be\n          computeScrollerHeight: function computeScrollerHeight(totalHeight) {\n            return totalHeight - subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n          },\n          // Sets the height of just the DayGrid component in this view\n          setGridHeight: function setGridHeight(height, isAuto) {\n            if (isAuto) {\n              undistributeHeight(this.dayGrid.rowEls); // let the rows be their natural height with no expanding\n            } else {\n              distributeHeight(this.dayGrid.rowEls, height, true); // true = compensate for height-hogging rows\n            }\n          },\n\n          /* Scroll\n          ------------------------------------------------------------------------------------------------------------------*/\n          computeInitialDateScroll: function computeInitialDateScroll() {\n            return {\n              top: 0\n            };\n          },\n          queryDateScroll: function queryDateScroll() {\n            return {\n              top: this.scroller.getScrollTop()\n            };\n          },\n          applyDateScroll: function applyDateScroll(scroll) {\n            if (scroll.top !== undefined) {\n              this.scroller.setScrollTop(scroll.top);\n            }\n          },\n\n          /* Hit Areas\n          ------------------------------------------------------------------------------------------------------------------*/\n          // forward all hit-related method calls to dayGrid\n          hitsNeeded: function hitsNeeded() {\n            this.dayGrid.hitsNeeded();\n          },\n          hitsNotNeeded: function hitsNotNeeded() {\n            this.dayGrid.hitsNotNeeded();\n          },\n          prepareHits: function prepareHits() {\n            this.dayGrid.prepareHits();\n          },\n          releaseHits: function releaseHits() {\n            this.dayGrid.releaseHits();\n          },\n          queryHit: function queryHit(left, top) {\n            return this.dayGrid.queryHit(left, top);\n          },\n          getHitSpan: function getHitSpan(hit) {\n            return this.dayGrid.getHitSpan(hit);\n          },\n          getHitEl: function getHitEl(hit) {\n            return this.dayGrid.getHitEl(hit);\n          },\n\n          /* Events\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders the given events onto the view and populates the segments array\n          renderEvents: function renderEvents(events) {\n            this.dayGrid.renderEvents(events);\n            this.updateHeight(); // must compensate for events that overflow the row\n          },\n          // Retrieves all segment objects that are rendered in the view\n          getEventSegs: function getEventSegs() {\n            return this.dayGrid.getEventSegs();\n          },\n          // Unrenders all event elements and clears internal segment data\n          unrenderEvents: function unrenderEvents() {\n            this.dayGrid.unrenderEvents(); // we DON'T need to call updateHeight() because\n            // a renderEvents() call always happens after this, which will eventually call updateHeight()\n          },\n\n          /* Dragging (for both events and external elements)\n          ------------------------------------------------------------------------------------------------------------------*/\n          // A returned value of `true` signals that a mock \"helper\" event has been rendered.\n          renderDrag: function renderDrag(dropLocation, seg) {\n            return this.dayGrid.renderDrag(dropLocation, seg);\n          },\n          unrenderDrag: function unrenderDrag() {\n            this.dayGrid.unrenderDrag();\n          },\n\n          /* Selection\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders a visual indication of a selection\n          renderSelection: function renderSelection(span) {\n            this.dayGrid.renderSelection(span);\n          },\n          // Unrenders a visual indications of a selection\n          unrenderSelection: function unrenderSelection() {\n            this.dayGrid.unrenderSelection();\n          }\n        }); // Methods that will customize the rendering behavior of the BasicView's dayGrid\n\n        var basicDayGridMethods = {\n          // Generates the HTML that will go before the day-of week header cells\n          renderHeadIntroHtml: function renderHeadIntroHtml() {\n            var view = this.view;\n\n            if (view.colWeekNumbersVisible) {\n              return '' + '<th class=\"fc-week-number ' + view.widgetHeaderClass + '\" ' + view.weekNumberStyleAttr() + '>' + '<span>' + // needed for matchCellWidths\n              htmlEscape(view.opt('weekNumberTitle')) + '</span>' + '</th>';\n            }\n\n            return '';\n          },\n          // Generates the HTML that will go before content-skeleton cells that display the day/week numbers\n          renderNumberIntroHtml: function renderNumberIntroHtml(row) {\n            var view = this.view;\n            var weekStart = this.getCellDate(row, 0);\n\n            if (view.colWeekNumbersVisible) {\n              return '' + '<td class=\"fc-week-number\" ' + view.weekNumberStyleAttr() + '>' + view.buildGotoAnchorHtml( // aside from link, important for matchCellWidths\n              {\n                date: weekStart,\n                type: 'week',\n                forceOff: this.colCnt === 1\n              }, weekStart.format('w') // inner HTML\n              ) + '</td>';\n            }\n\n            return '';\n          },\n          // Generates the HTML that goes before the day bg cells for each day-row\n          renderBgIntroHtml: function renderBgIntroHtml() {\n            var view = this.view;\n\n            if (view.colWeekNumbersVisible) {\n              return '<td class=\"fc-week-number ' + view.widgetContentClass + '\" ' + view.weekNumberStyleAttr() + '></td>';\n            }\n\n            return '';\n          },\n          // Generates the HTML that goes before every other type of row generated by DayGrid.\n          // Affects helper-skeleton and highlight-skeleton rows.\n          renderIntroHtml: function renderIntroHtml() {\n            var view = this.view;\n\n            if (view.colWeekNumbersVisible) {\n              return '<td class=\"fc-week-number\" ' + view.weekNumberStyleAttr() + '></td>';\n            }\n\n            return '';\n          }\n        };\n        ;\n        ;\n        /* A month view with day cells running in rows (one-per-week) and columns\n        ----------------------------------------------------------------------------------------------------------------------*/\n\n        var MonthView = FC.MonthView = BasicView.extend({\n          // Computes the date range that will be rendered.\n          buildRenderRange: function buildRenderRange() {\n            var renderRange = BasicView.prototype.buildRenderRange.apply(this, arguments);\n            var rowCnt; // ensure 6 weeks\n\n            if (this.isFixedWeeks()) {\n              rowCnt = Math.ceil( // could be partial weeks due to hiddenDays\n              renderRange.end.diff(renderRange.start, 'weeks', true) // dontRound=true\n              );\n              renderRange.end.add(6 - rowCnt, 'weeks');\n            }\n\n            return renderRange;\n          },\n          // Overrides the default BasicView behavior to have special multi-week auto-height logic\n          setGridHeight: function setGridHeight(height, isAuto) {\n            // if auto, make the height of each row the height that it would be if there were 6 weeks\n            if (isAuto) {\n              height *= this.rowCnt / 6;\n            }\n\n            distributeHeight(this.dayGrid.rowEls, height, !isAuto); // if auto, don't compensate for height-hogging rows\n          },\n          isFixedWeeks: function isFixedWeeks() {\n            return this.opt('fixedWeekCount');\n          }\n        });\n        ;\n        ;\n        fcViews.basic = {\n          'class': BasicView\n        };\n        fcViews.basicDay = {\n          type: 'basic',\n          duration: {\n            days: 1\n          }\n        };\n        fcViews.basicWeek = {\n          type: 'basic',\n          duration: {\n            weeks: 1\n          }\n        };\n        fcViews.month = {\n          'class': MonthView,\n          duration: {\n            months: 1\n          },\n          // important for prev/next\n          defaults: {\n            fixedWeekCount: true\n          }\n        };\n        ;\n        ;\n        /* An abstract class for all agenda-related views. Displays one more columns with time slots running vertically.\n        ----------------------------------------------------------------------------------------------------------------------*/\n        // Is a manager for the TimeGrid subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n        // Responsible for managing width/height.\n\n        var AgendaView = FC.AgendaView = View.extend({\n          scroller: null,\n          timeGridClass: TimeGrid,\n          // class used to instantiate the timeGrid. subclasses can override\n          timeGrid: null,\n          // the main time-grid subcomponent of this view\n          dayGridClass: DayGrid,\n          // class used to instantiate the dayGrid. subclasses can override\n          dayGrid: null,\n          // the \"all-day\" subcomponent. if all-day is turned off, this will be null\n          axisWidth: null,\n          // the width of the time axis running down the side\n          headContainerEl: null,\n          // div that hold's the timeGrid's rendered date header\n          noScrollRowEls: null,\n          // set of fake row elements that must compensate when scroller has scrollbars\n          // when the time-grid isn't tall enough to occupy the given height, we render an <hr> underneath\n          bottomRuleEl: null,\n          // indicates that minTime/maxTime affects rendering\n          usesMinMaxTime: true,\n          initialize: function initialize() {\n            this.timeGrid = this.instantiateTimeGrid();\n\n            if (this.opt('allDaySlot')) {\n              // should we display the \"all-day\" area?\n              this.dayGrid = this.instantiateDayGrid(); // the all-day subcomponent of this view\n            }\n\n            this.scroller = new Scroller({\n              overflowX: 'hidden',\n              overflowY: 'auto'\n            });\n          },\n          // Instantiates the TimeGrid object this view needs. Draws from this.timeGridClass\n          instantiateTimeGrid: function instantiateTimeGrid() {\n            var subclass = this.timeGridClass.extend(agendaTimeGridMethods);\n            return new subclass(this);\n          },\n          // Instantiates the DayGrid object this view might need. Draws from this.dayGridClass\n          instantiateDayGrid: function instantiateDayGrid() {\n            var subclass = this.dayGridClass.extend(agendaDayGridMethods);\n            return new subclass(this);\n          },\n\n          /* Rendering\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders the view into `this.el`, which has already been assigned\n          renderDates: function renderDates() {\n            this.timeGrid.setRange(this.renderRange);\n\n            if (this.dayGrid) {\n              this.dayGrid.setRange(this.renderRange);\n            }\n\n            this.el.addClass('fc-agenda-view').html(this.renderSkeletonHtml());\n            this.renderHead();\n            this.scroller.render();\n            var timeGridWrapEl = this.scroller.el.addClass('fc-time-grid-container');\n            var timeGridEl = $('<div class=\"fc-time-grid\" />').appendTo(timeGridWrapEl);\n            this.el.find('.fc-body > tr > td').append(timeGridWrapEl);\n            this.timeGrid.setElement(timeGridEl);\n            this.timeGrid.renderDates(); // the <hr> that sometimes displays under the time-grid\n\n            this.bottomRuleEl = $('<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>').appendTo(this.timeGrid.el); // inject it into the time-grid\n\n            if (this.dayGrid) {\n              this.dayGrid.setElement(this.el.find('.fc-day-grid'));\n              this.dayGrid.renderDates(); // have the day-grid extend it's coordinate area over the <hr> dividing the two grids\n\n              this.dayGrid.bottomCoordPadding = this.dayGrid.el.next('hr').outerHeight();\n            }\n\n            this.noScrollRowEls = this.el.find('.fc-row:not(.fc-scroller *)'); // fake rows not within the scroller\n          },\n          // render the day-of-week headers\n          renderHead: function renderHead() {\n            this.headContainerEl = this.el.find('.fc-head-container').html(this.timeGrid.renderHeadHtml());\n          },\n          // Unrenders the content of the view. Since we haven't separated skeleton rendering from date rendering,\n          // always completely kill each grid's rendering.\n          unrenderDates: function unrenderDates() {\n            this.timeGrid.unrenderDates();\n            this.timeGrid.removeElement();\n\n            if (this.dayGrid) {\n              this.dayGrid.unrenderDates();\n              this.dayGrid.removeElement();\n            }\n\n            this.scroller.destroy();\n          },\n          // Builds the HTML skeleton for the view.\n          // The day-grid and time-grid components will render inside containers defined by this HTML.\n          renderSkeletonHtml: function renderSkeletonHtml() {\n            return '' + '<table>' + '<thead class=\"fc-head\">' + '<tr>' + '<td class=\"fc-head-container ' + this.widgetHeaderClass + '\"></td>' + '</tr>' + '</thead>' + '<tbody class=\"fc-body\">' + '<tr>' + '<td class=\"' + this.widgetContentClass + '\">' + (this.dayGrid ? '<div class=\"fc-day-grid\"/>' + '<hr class=\"fc-divider ' + this.widgetHeaderClass + '\"/>' : '') + '</td>' + '</tr>' + '</tbody>' + '</table>';\n          },\n          // Generates an HTML attribute string for setting the width of the axis, if it is known\n          axisStyleAttr: function axisStyleAttr() {\n            if (this.axisWidth !== null) {\n              return 'style=\"width:' + this.axisWidth + 'px\"';\n            }\n\n            return '';\n          },\n\n          /* Business Hours\n          ------------------------------------------------------------------------------------------------------------------*/\n          renderBusinessHours: function renderBusinessHours() {\n            this.timeGrid.renderBusinessHours();\n\n            if (this.dayGrid) {\n              this.dayGrid.renderBusinessHours();\n            }\n          },\n          unrenderBusinessHours: function unrenderBusinessHours() {\n            this.timeGrid.unrenderBusinessHours();\n\n            if (this.dayGrid) {\n              this.dayGrid.unrenderBusinessHours();\n            }\n          },\n\n          /* Now Indicator\n          ------------------------------------------------------------------------------------------------------------------*/\n          getNowIndicatorUnit: function getNowIndicatorUnit() {\n            return this.timeGrid.getNowIndicatorUnit();\n          },\n          renderNowIndicator: function renderNowIndicator(date) {\n            this.timeGrid.renderNowIndicator(date);\n          },\n          unrenderNowIndicator: function unrenderNowIndicator() {\n            this.timeGrid.unrenderNowIndicator();\n          },\n\n          /* Dimensions\n          ------------------------------------------------------------------------------------------------------------------*/\n          updateSize: function updateSize(isResize) {\n            this.timeGrid.updateSize(isResize);\n            View.prototype.updateSize.call(this, isResize); // call the super-method\n          },\n          // Refreshes the horizontal dimensions of the view\n          updateWidth: function updateWidth() {\n            // make all axis cells line up, and record the width so newly created axis cells will have it\n            this.axisWidth = matchCellWidths(this.el.find('.fc-axis'));\n          },\n          // Adjusts the vertical dimensions of the view to the specified values\n          setHeight: function setHeight(totalHeight, isAuto) {\n            var eventLimit;\n            var scrollerHeight;\n            var scrollbarWidths; // reset all dimensions back to the original state\n\n            this.bottomRuleEl.hide(); // .show() will be called later if this <hr> is necessary\n\n            this.scroller.clear(); // sets height to 'auto' and clears overflow\n\n            uncompensateScroll(this.noScrollRowEls); // limit number of events in the all-day area\n\n            if (this.dayGrid) {\n              this.dayGrid.removeSegPopover(); // kill the \"more\" popover if displayed\n\n              eventLimit = this.opt('eventLimit');\n\n              if (eventLimit && typeof eventLimit !== 'number') {\n                eventLimit = AGENDA_ALL_DAY_EVENT_LIMIT; // make sure \"auto\" goes to a real number\n              }\n\n              if (eventLimit) {\n                this.dayGrid.limitRows(eventLimit);\n              }\n            }\n\n            if (!isAuto) {\n              // should we force dimensions of the scroll container?\n              scrollerHeight = this.computeScrollerHeight(totalHeight);\n              this.scroller.setHeight(scrollerHeight);\n              scrollbarWidths = this.scroller.getScrollbarWidths();\n\n              if (scrollbarWidths.left || scrollbarWidths.right) {\n                // using scrollbars?\n                // make the all-day and header rows lines up\n                compensateScroll(this.noScrollRowEls, scrollbarWidths); // the scrollbar compensation might have changed text flow, which might affect height, so recalculate\n                // and reapply the desired height to the scroller.\n\n                scrollerHeight = this.computeScrollerHeight(totalHeight);\n                this.scroller.setHeight(scrollerHeight);\n              } // guarantees the same scrollbar widths\n\n\n              this.scroller.lockOverflow(scrollbarWidths); // if there's any space below the slats, show the horizontal rule.\n              // this won't cause any new overflow, because lockOverflow already called.\n\n              if (this.timeGrid.getTotalSlatHeight() < scrollerHeight) {\n                this.bottomRuleEl.show();\n              }\n            }\n          },\n          // given a desired total height of the view, returns what the height of the scroller should be\n          computeScrollerHeight: function computeScrollerHeight(totalHeight) {\n            return totalHeight - subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n          },\n\n          /* Scroll\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Computes the initial pre-configured scroll state prior to allowing the user to change it\n          computeInitialDateScroll: function computeInitialDateScroll() {\n            var scrollTime = moment.duration(this.opt('scrollTime'));\n            var top = this.timeGrid.computeTimeTop(scrollTime); // zoom can give weird floating-point values. rather scroll a little bit further\n\n            top = Math.ceil(top);\n\n            if (top) {\n              top++; // to overcome top border that slots beyond the first have. looks better\n            }\n\n            return {\n              top: top\n            };\n          },\n          queryDateScroll: function queryDateScroll() {\n            return {\n              top: this.scroller.getScrollTop()\n            };\n          },\n          applyDateScroll: function applyDateScroll(scroll) {\n            if (scroll.top !== undefined) {\n              this.scroller.setScrollTop(scroll.top);\n            }\n          },\n\n          /* Hit Areas\n          ------------------------------------------------------------------------------------------------------------------*/\n          // forward all hit-related method calls to the grids (dayGrid might not be defined)\n          hitsNeeded: function hitsNeeded() {\n            this.timeGrid.hitsNeeded();\n\n            if (this.dayGrid) {\n              this.dayGrid.hitsNeeded();\n            }\n          },\n          hitsNotNeeded: function hitsNotNeeded() {\n            this.timeGrid.hitsNotNeeded();\n\n            if (this.dayGrid) {\n              this.dayGrid.hitsNotNeeded();\n            }\n          },\n          prepareHits: function prepareHits() {\n            this.timeGrid.prepareHits();\n\n            if (this.dayGrid) {\n              this.dayGrid.prepareHits();\n            }\n          },\n          releaseHits: function releaseHits() {\n            this.timeGrid.releaseHits();\n\n            if (this.dayGrid) {\n              this.dayGrid.releaseHits();\n            }\n          },\n          queryHit: function queryHit(left, top) {\n            var hit = this.timeGrid.queryHit(left, top);\n\n            if (!hit && this.dayGrid) {\n              hit = this.dayGrid.queryHit(left, top);\n            }\n\n            return hit;\n          },\n          getHitSpan: function getHitSpan(hit) {\n            // TODO: hit.component is set as a hack to identify where the hit came from\n            return hit.component.getHitSpan(hit);\n          },\n          getHitEl: function getHitEl(hit) {\n            // TODO: hit.component is set as a hack to identify where the hit came from\n            return hit.component.getHitEl(hit);\n          },\n\n          /* Events\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders events onto the view and populates the View's segment array\n          renderEvents: function renderEvents(events) {\n            var dayEvents = [];\n            var timedEvents = [];\n            var daySegs = [];\n            var timedSegs;\n            var i; // separate the events into all-day and timed\n\n            for (i = 0; i < events.length; i++) {\n              if (events[i].allDay) {\n                dayEvents.push(events[i]);\n              } else {\n                timedEvents.push(events[i]);\n              }\n            } // render the events in the subcomponents\n\n\n            timedSegs = this.timeGrid.renderEvents(timedEvents);\n\n            if (this.dayGrid) {\n              daySegs = this.dayGrid.renderEvents(dayEvents);\n            } // the all-day area is flexible and might have a lot of events, so shift the height\n\n\n            this.updateHeight();\n          },\n          // Retrieves all segment objects that are rendered in the view\n          getEventSegs: function getEventSegs() {\n            return this.timeGrid.getEventSegs().concat(this.dayGrid ? this.dayGrid.getEventSegs() : []);\n          },\n          // Unrenders all event elements and clears internal segment data\n          unrenderEvents: function unrenderEvents() {\n            // unrender the events in the subcomponents\n            this.timeGrid.unrenderEvents();\n\n            if (this.dayGrid) {\n              this.dayGrid.unrenderEvents();\n            } // we DON'T need to call updateHeight() because\n            // a renderEvents() call always happens after this, which will eventually call updateHeight()\n\n          },\n\n          /* Dragging (for events and external elements)\n          ------------------------------------------------------------------------------------------------------------------*/\n          // A returned value of `true` signals that a mock \"helper\" event has been rendered.\n          renderDrag: function renderDrag(dropLocation, seg) {\n            if (dropLocation.start.hasTime()) {\n              return this.timeGrid.renderDrag(dropLocation, seg);\n            } else if (this.dayGrid) {\n              return this.dayGrid.renderDrag(dropLocation, seg);\n            }\n          },\n          unrenderDrag: function unrenderDrag() {\n            this.timeGrid.unrenderDrag();\n\n            if (this.dayGrid) {\n              this.dayGrid.unrenderDrag();\n            }\n          },\n\n          /* Selection\n          ------------------------------------------------------------------------------------------------------------------*/\n          // Renders a visual indication of a selection\n          renderSelection: function renderSelection(span) {\n            if (span.start.hasTime() || span.end.hasTime()) {\n              this.timeGrid.renderSelection(span);\n            } else if (this.dayGrid) {\n              this.dayGrid.renderSelection(span);\n            }\n          },\n          // Unrenders a visual indications of a selection\n          unrenderSelection: function unrenderSelection() {\n            this.timeGrid.unrenderSelection();\n\n            if (this.dayGrid) {\n              this.dayGrid.unrenderSelection();\n            }\n          }\n        }); // Methods that will customize the rendering behavior of the AgendaView's timeGrid\n        // TODO: move into TimeGrid\n\n        var agendaTimeGridMethods = {\n          // Generates the HTML that will go before the day-of week header cells\n          renderHeadIntroHtml: function renderHeadIntroHtml() {\n            var view = this.view;\n            var weekText;\n\n            if (view.opt('weekNumbers')) {\n              weekText = this.start.format(view.opt('smallWeekFormat'));\n              return '' + '<th class=\"fc-axis fc-week-number ' + view.widgetHeaderClass + '\" ' + view.axisStyleAttr() + '>' + view.buildGotoAnchorHtml( // aside from link, important for matchCellWidths\n              {\n                date: this.start,\n                type: 'week',\n                forceOff: this.colCnt > 1\n              }, htmlEscape(weekText) // inner HTML\n              ) + '</th>';\n            } else {\n              return '<th class=\"fc-axis ' + view.widgetHeaderClass + '\" ' + view.axisStyleAttr() + '></th>';\n            }\n          },\n          // Generates the HTML that goes before the bg of the TimeGrid slot area. Long vertical column.\n          renderBgIntroHtml: function renderBgIntroHtml() {\n            var view = this.view;\n            return '<td class=\"fc-axis ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '></td>';\n          },\n          // Generates the HTML that goes before all other types of cells.\n          // Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.\n          renderIntroHtml: function renderIntroHtml() {\n            var view = this.view;\n            return '<td class=\"fc-axis\" ' + view.axisStyleAttr() + '></td>';\n          }\n        }; // Methods that will customize the rendering behavior of the AgendaView's dayGrid\n\n        var agendaDayGridMethods = {\n          // Generates the HTML that goes before the all-day cells\n          renderBgIntroHtml: function renderBgIntroHtml() {\n            var view = this.view;\n            return '' + '<td class=\"fc-axis ' + view.widgetContentClass + '\" ' + view.axisStyleAttr() + '>' + '<span>' + // needed for matchCellWidths\n            view.getAllDayHtml() + '</span>' + '</td>';\n          },\n          // Generates the HTML that goes before all other types of cells.\n          // Affects content-skeleton, helper-skeleton, highlight-skeleton for both the time-grid and day-grid.\n          renderIntroHtml: function renderIntroHtml() {\n            var view = this.view;\n            return '<td class=\"fc-axis\" ' + view.axisStyleAttr() + '></td>';\n          }\n        };\n        ;\n        ;\n        var AGENDA_ALL_DAY_EVENT_LIMIT = 5; // potential nice values for the slot-duration and interval-duration\n        // from largest to smallest\n\n        var AGENDA_STOCK_SUB_DURATIONS = [{\n          hours: 1\n        }, {\n          minutes: 30\n        }, {\n          minutes: 15\n        }, {\n          seconds: 30\n        }, {\n          seconds: 15\n        }];\n        fcViews.agenda = {\n          'class': AgendaView,\n          defaults: {\n            allDaySlot: true,\n            slotDuration: '00:30:00',\n            slotEventOverlap: true // a bad name. confused with overlap/constraint system\n\n          }\n        };\n        fcViews.agendaDay = {\n          type: 'agenda',\n          duration: {\n            days: 1\n          }\n        };\n        fcViews.agendaWeek = {\n          type: 'agenda',\n          duration: {\n            weeks: 1\n          }\n        };\n        ;\n        ;\n        /*\n        Responsible for the scroller, and forwarding event-related actions into the \"grid\"\n        */\n\n        var ListView = View.extend({\n          grid: null,\n          scroller: null,\n          initialize: function initialize() {\n            this.grid = new ListViewGrid(this);\n            this.scroller = new Scroller({\n              overflowX: 'hidden',\n              overflowY: 'auto'\n            });\n          },\n          renderSkeleton: function renderSkeleton() {\n            this.el.addClass('fc-list-view ' + this.widgetContentClass);\n            this.scroller.render();\n            this.scroller.el.appendTo(this.el);\n            this.grid.setElement(this.scroller.scrollEl);\n          },\n          unrenderSkeleton: function unrenderSkeleton() {\n            this.scroller.destroy(); // will remove the Grid too\n          },\n          setHeight: function setHeight(totalHeight, isAuto) {\n            this.scroller.setHeight(this.computeScrollerHeight(totalHeight));\n          },\n          computeScrollerHeight: function computeScrollerHeight(totalHeight) {\n            return totalHeight - subtractInnerElHeight(this.el, this.scroller.el); // everything that's NOT the scroller\n          },\n          renderDates: function renderDates() {\n            this.grid.setRange(this.renderRange); // needs to process range-related options\n          },\n          renderEvents: function renderEvents(events) {\n            this.grid.renderEvents(events);\n          },\n          unrenderEvents: function unrenderEvents() {\n            this.grid.unrenderEvents();\n          },\n          isEventResizable: function isEventResizable(event) {\n            return false;\n          },\n          isEventDraggable: function isEventDraggable(event) {\n            return false;\n          }\n        });\n        /*\n        Responsible for event rendering and user-interaction.\n        Its \"el\" is the inner-content of the above view's scroller.\n        */\n\n        var ListViewGrid = Grid.extend({\n          segSelector: '.fc-list-item',\n          // which elements accept event actions\n          hasDayInteractions: false,\n          // no day selection or day clicking\n          // slices by day\n          spanToSegs: function spanToSegs(span) {\n            var view = this.view;\n            var dayStart = view.renderRange.start.clone().time(0); // timed, so segs get times!\n\n            var dayIndex = 0;\n            var seg;\n            var segs = [];\n\n            while (dayStart < view.renderRange.end) {\n              seg = intersectRanges(span, {\n                start: dayStart,\n                end: dayStart.clone().add(1, 'day')\n              });\n\n              if (seg) {\n                seg.dayIndex = dayIndex;\n                segs.push(seg);\n              }\n\n              dayStart.add(1, 'day');\n              dayIndex++; // detect when span won't go fully into the next day,\n              // and mutate the latest seg to the be the end.\n\n              if (seg && !seg.isEnd && span.end.hasTime() && span.end < dayStart.clone().add(this.view.nextDayThreshold)) {\n                seg.end = span.end.clone();\n                seg.isEnd = true;\n                break;\n              }\n            }\n\n            return segs;\n          },\n          // like \"4:00am\"\n          computeEventTimeFormat: function computeEventTimeFormat() {\n            return this.view.opt('mediumTimeFormat');\n          },\n          // for events with a url, the whole <tr> should be clickable,\n          // but it's impossible to wrap with an <a> tag. simulate this.\n          handleSegClick: function handleSegClick(seg, ev) {\n            var url;\n            Grid.prototype.handleSegClick.apply(this, arguments); // super. might prevent the default action\n            // not clicking on or within an <a> with an href\n\n            if (!$(ev.target).closest('a[href]').length) {\n              url = seg.event.url;\n\n              if (url && !ev.isDefaultPrevented()) {\n                // jsEvent not cancelled in handler\n                window.location.href = url; // simulate link click\n              }\n            }\n          },\n          // returns list of foreground segs that were actually rendered\n          renderFgSegs: function renderFgSegs(segs) {\n            segs = this.renderFgSegEls(segs); // might filter away hidden events\n\n            if (!segs.length) {\n              this.renderEmptyMessage();\n            } else {\n              this.renderSegList(segs);\n            }\n\n            return segs;\n          },\n          renderEmptyMessage: function renderEmptyMessage() {\n            this.el.html('<div class=\"fc-list-empty-wrap2\">' + // TODO: try less wraps\n            '<div class=\"fc-list-empty-wrap1\">' + '<div class=\"fc-list-empty\">' + htmlEscape(this.view.opt('noEventsMessage')) + '</div>' + '</div>' + '</div>');\n          },\n          // render the event segments in the view\n          renderSegList: function renderSegList(allSegs) {\n            var segsByDay = this.groupSegsByDay(allSegs); // sparse array\n\n            var dayIndex;\n            var daySegs;\n            var i;\n            var tableEl = $('<table class=\"fc-list-table\"><tbody/></table>');\n            var tbodyEl = tableEl.find('tbody');\n\n            for (dayIndex = 0; dayIndex < segsByDay.length; dayIndex++) {\n              daySegs = segsByDay[dayIndex];\n\n              if (daySegs) {\n                // sparse array, so might be undefined\n                // append a day header\n                tbodyEl.append(this.dayHeaderHtml(this.view.renderRange.start.clone().add(dayIndex, 'days')));\n                this.sortEventSegs(daySegs);\n\n                for (i = 0; i < daySegs.length; i++) {\n                  tbodyEl.append(daySegs[i].el); // append event row\n                }\n              }\n            }\n\n            this.el.empty().append(tableEl);\n          },\n          // Returns a sparse array of arrays, segs grouped by their dayIndex\n          groupSegsByDay: function groupSegsByDay(segs) {\n            var segsByDay = []; // sparse array\n\n            var i, seg;\n\n            for (i = 0; i < segs.length; i++) {\n              seg = segs[i];\n              (segsByDay[seg.dayIndex] || (segsByDay[seg.dayIndex] = [])).push(seg);\n            }\n\n            return segsByDay;\n          },\n          // generates the HTML for the day headers that live amongst the event rows\n          dayHeaderHtml: function dayHeaderHtml(dayDate) {\n            var view = this.view;\n            var mainFormat = view.opt('listDayFormat');\n            var altFormat = view.opt('listDayAltFormat');\n            return '<tr class=\"fc-list-heading\" data-date=\"' + dayDate.format('YYYY-MM-DD') + '\">' + '<td class=\"' + view.widgetHeaderClass + '\" colspan=\"3\">' + (mainFormat ? view.buildGotoAnchorHtml(dayDate, {\n              'class': 'fc-list-heading-main'\n            }, htmlEscape(dayDate.format(mainFormat)) // inner HTML\n            ) : '') + (altFormat ? view.buildGotoAnchorHtml(dayDate, {\n              'class': 'fc-list-heading-alt'\n            }, htmlEscape(dayDate.format(altFormat)) // inner HTML\n            ) : '') + '</td>' + '</tr>';\n          },\n          // generates the HTML for a single event row\n          fgSegHtml: function fgSegHtml(seg) {\n            var view = this.view;\n            var classes = ['fc-list-item'].concat(this.getSegCustomClasses(seg));\n            var bgColor = this.getSegBackgroundColor(seg);\n            var event = seg.event;\n            var url = event.url;\n            var timeHtml;\n\n            if (event.allDay) {\n              timeHtml = view.getAllDayHtml();\n            } else if (view.isMultiDayEvent(event)) {\n              // if the event appears to span more than one day\n              if (seg.isStart || seg.isEnd) {\n                // outer segment that probably lasts part of the day\n                timeHtml = htmlEscape(this.getEventTimeText(seg));\n              } else {\n                // inner segment that lasts the whole day\n                timeHtml = view.getAllDayHtml();\n              }\n            } else {\n              // Display the normal time text for the *event's* times\n              timeHtml = htmlEscape(this.getEventTimeText(event));\n            }\n\n            if (url) {\n              classes.push('fc-has-url');\n            }\n\n            return '<tr class=\"' + classes.join(' ') + '\">' + (this.displayEventTime ? '<td class=\"fc-list-item-time ' + view.widgetContentClass + '\">' + (timeHtml || '') + '</td>' : '') + '<td class=\"fc-list-item-marker ' + view.widgetContentClass + '\">' + '<span class=\"fc-event-dot\"' + (bgColor ? ' style=\"background-color:' + bgColor + '\"' : '') + '></span>' + '</td>' + '<td class=\"fc-list-item-title ' + view.widgetContentClass + '\">' + '<a' + (url ? ' href=\"' + htmlEscape(url) + '\"' : '') + '>' + htmlEscape(seg.event.title || '') + '</a>' + '</td>' + '</tr>';\n          }\n        });\n        ;\n        ;\n        fcViews.list = {\n          'class': ListView,\n          buttonTextKey: 'list',\n          // what to lookup in locale files\n          defaults: {\n            buttonText: 'list',\n            // text to display for English\n            listDayFormat: 'LL',\n            // like \"January 1, 2016\"\n            noEventsMessage: 'No events to display'\n          }\n        };\n        fcViews.listDay = {\n          type: 'list',\n          duration: {\n            days: 1\n          },\n          defaults: {\n            listDayFormat: 'dddd' // day-of-week is all we need. full date is probably in header\n\n          }\n        };\n        fcViews.listWeek = {\n          type: 'list',\n          duration: {\n            weeks: 1\n          },\n          defaults: {\n            listDayFormat: 'dddd',\n            // day-of-week is more important\n            listDayAltFormat: 'LL'\n          }\n        };\n        fcViews.listMonth = {\n          type: 'list',\n          duration: {\n            month: 1\n          },\n          defaults: {\n            listDayAltFormat: 'dddd' // day-of-week is nice-to-have\n\n          }\n        };\n        fcViews.listYear = {\n          type: 'list',\n          duration: {\n            year: 1\n          },\n          defaults: {\n            listDayAltFormat: 'dddd' // day-of-week is nice-to-have\n\n          }\n        };\n        ;\n        ;\n        return FC; // export for Node/CommonJS\n      });\n      /***/\n\n    },\n    /* 120 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var map = {\n        \"./af\": 2,\n        \"./af.js\": 2,\n        \"./ar\": 9,\n        \"./ar-dz\": 3,\n        \"./ar-dz.js\": 3,\n        \"./ar-kw\": 4,\n        \"./ar-kw.js\": 4,\n        \"./ar-ly\": 5,\n        \"./ar-ly.js\": 5,\n        \"./ar-ma\": 6,\n        \"./ar-ma.js\": 6,\n        \"./ar-sa\": 7,\n        \"./ar-sa.js\": 7,\n        \"./ar-tn\": 8,\n        \"./ar-tn.js\": 8,\n        \"./ar.js\": 9,\n        \"./az\": 10,\n        \"./az.js\": 10,\n        \"./be\": 11,\n        \"./be.js\": 11,\n        \"./bg\": 12,\n        \"./bg.js\": 12,\n        \"./bn\": 13,\n        \"./bn.js\": 13,\n        \"./bo\": 14,\n        \"./bo.js\": 14,\n        \"./br\": 15,\n        \"./br.js\": 15,\n        \"./bs\": 16,\n        \"./bs.js\": 16,\n        \"./ca\": 17,\n        \"./ca.js\": 17,\n        \"./cs\": 18,\n        \"./cs.js\": 18,\n        \"./cv\": 19,\n        \"./cv.js\": 19,\n        \"./cy\": 20,\n        \"./cy.js\": 20,\n        \"./da\": 21,\n        \"./da.js\": 21,\n        \"./de\": 24,\n        \"./de-at\": 22,\n        \"./de-at.js\": 22,\n        \"./de-ch\": 23,\n        \"./de-ch.js\": 23,\n        \"./de.js\": 24,\n        \"./dv\": 25,\n        \"./dv.js\": 25,\n        \"./el\": 26,\n        \"./el.js\": 26,\n        \"./en-au\": 27,\n        \"./en-au.js\": 27,\n        \"./en-ca\": 28,\n        \"./en-ca.js\": 28,\n        \"./en-gb\": 29,\n        \"./en-gb.js\": 29,\n        \"./en-ie\": 30,\n        \"./en-ie.js\": 30,\n        \"./en-nz\": 31,\n        \"./en-nz.js\": 31,\n        \"./eo\": 32,\n        \"./eo.js\": 32,\n        \"./es\": 34,\n        \"./es-do\": 33,\n        \"./es-do.js\": 33,\n        \"./es.js\": 34,\n        \"./et\": 35,\n        \"./et.js\": 35,\n        \"./eu\": 36,\n        \"./eu.js\": 36,\n        \"./fa\": 37,\n        \"./fa.js\": 37,\n        \"./fi\": 38,\n        \"./fi.js\": 38,\n        \"./fo\": 39,\n        \"./fo.js\": 39,\n        \"./fr\": 42,\n        \"./fr-ca\": 40,\n        \"./fr-ca.js\": 40,\n        \"./fr-ch\": 41,\n        \"./fr-ch.js\": 41,\n        \"./fr.js\": 42,\n        \"./fy\": 43,\n        \"./fy.js\": 43,\n        \"./gd\": 44,\n        \"./gd.js\": 44,\n        \"./gl\": 45,\n        \"./gl.js\": 45,\n        \"./gom-latn\": 46,\n        \"./gom-latn.js\": 46,\n        \"./he\": 47,\n        \"./he.js\": 47,\n        \"./hi\": 48,\n        \"./hi.js\": 48,\n        \"./hr\": 49,\n        \"./hr.js\": 49,\n        \"./hu\": 50,\n        \"./hu.js\": 50,\n        \"./hy-am\": 51,\n        \"./hy-am.js\": 51,\n        \"./id\": 52,\n        \"./id.js\": 52,\n        \"./is\": 53,\n        \"./is.js\": 53,\n        \"./it\": 54,\n        \"./it.js\": 54,\n        \"./ja\": 55,\n        \"./ja.js\": 55,\n        \"./jv\": 56,\n        \"./jv.js\": 56,\n        \"./ka\": 57,\n        \"./ka.js\": 57,\n        \"./kk\": 58,\n        \"./kk.js\": 58,\n        \"./km\": 59,\n        \"./km.js\": 59,\n        \"./kn\": 60,\n        \"./kn.js\": 60,\n        \"./ko\": 61,\n        \"./ko.js\": 61,\n        \"./ky\": 62,\n        \"./ky.js\": 62,\n        \"./lb\": 63,\n        \"./lb.js\": 63,\n        \"./lo\": 64,\n        \"./lo.js\": 64,\n        \"./lt\": 65,\n        \"./lt.js\": 65,\n        \"./lv\": 66,\n        \"./lv.js\": 66,\n        \"./me\": 67,\n        \"./me.js\": 67,\n        \"./mi\": 68,\n        \"./mi.js\": 68,\n        \"./mk\": 69,\n        \"./mk.js\": 69,\n        \"./ml\": 70,\n        \"./ml.js\": 70,\n        \"./mr\": 71,\n        \"./mr.js\": 71,\n        \"./ms\": 73,\n        \"./ms-my\": 72,\n        \"./ms-my.js\": 72,\n        \"./ms.js\": 73,\n        \"./my\": 74,\n        \"./my.js\": 74,\n        \"./nb\": 75,\n        \"./nb.js\": 75,\n        \"./ne\": 76,\n        \"./ne.js\": 76,\n        \"./nl\": 78,\n        \"./nl-be\": 77,\n        \"./nl-be.js\": 77,\n        \"./nl.js\": 78,\n        \"./nn\": 79,\n        \"./nn.js\": 79,\n        \"./pa-in\": 80,\n        \"./pa-in.js\": 80,\n        \"./pl\": 81,\n        \"./pl.js\": 81,\n        \"./pt\": 83,\n        \"./pt-br\": 82,\n        \"./pt-br.js\": 82,\n        \"./pt.js\": 83,\n        \"./ro\": 84,\n        \"./ro.js\": 84,\n        \"./ru\": 85,\n        \"./ru.js\": 85,\n        \"./sd\": 86,\n        \"./sd.js\": 86,\n        \"./se\": 87,\n        \"./se.js\": 87,\n        \"./si\": 88,\n        \"./si.js\": 88,\n        \"./sk\": 89,\n        \"./sk.js\": 89,\n        \"./sl\": 90,\n        \"./sl.js\": 90,\n        \"./sq\": 91,\n        \"./sq.js\": 91,\n        \"./sr\": 93,\n        \"./sr-cyrl\": 92,\n        \"./sr-cyrl.js\": 92,\n        \"./sr.js\": 93,\n        \"./ss\": 94,\n        \"./ss.js\": 94,\n        \"./sv\": 95,\n        \"./sv.js\": 95,\n        \"./sw\": 96,\n        \"./sw.js\": 96,\n        \"./ta\": 97,\n        \"./ta.js\": 97,\n        \"./te\": 98,\n        \"./te.js\": 98,\n        \"./tet\": 99,\n        \"./tet.js\": 99,\n        \"./th\": 100,\n        \"./th.js\": 100,\n        \"./tl-ph\": 101,\n        \"./tl-ph.js\": 101,\n        \"./tlh\": 102,\n        \"./tlh.js\": 102,\n        \"./tr\": 103,\n        \"./tr.js\": 103,\n        \"./tzl\": 104,\n        \"./tzl.js\": 104,\n        \"./tzm\": 106,\n        \"./tzm-latn\": 105,\n        \"./tzm-latn.js\": 105,\n        \"./tzm.js\": 106,\n        \"./uk\": 107,\n        \"./uk.js\": 107,\n        \"./ur\": 108,\n        \"./ur.js\": 108,\n        \"./uz\": 110,\n        \"./uz-latn\": 109,\n        \"./uz-latn.js\": 109,\n        \"./uz.js\": 110,\n        \"./vi\": 111,\n        \"./vi.js\": 111,\n        \"./x-pseudo\": 112,\n        \"./x-pseudo.js\": 112,\n        \"./yo\": 113,\n        \"./yo.js\": 113,\n        \"./zh-cn\": 114,\n        \"./zh-cn.js\": 114,\n        \"./zh-hk\": 115,\n        \"./zh-hk.js\": 115,\n        \"./zh-tw\": 116,\n        \"./zh-tw.js\": 116\n      };\n\n      function webpackContext(req) {\n        return __webpack_require__(webpackContextResolve(req));\n      }\n\n      ;\n\n      function webpackContextResolve(req) {\n        var id = map[req];\n        if (!(id + 1)) // check for number or string\n          throw new Error(\"Cannot find module '\" + req + \"'.\");\n        return id;\n      }\n\n      ;\n\n      webpackContext.keys = function webpackContextKeys() {\n        return Object.keys(map);\n      };\n\n      webpackContext.resolve = webpackContextResolve;\n      module.exports = webpackContext;\n      webpackContext.id = 120;\n      /***/\n    },\n    /* 121 */\n\n    /***/\n    function (module, exports) {\n      module.exports = function (module) {\n        if (!module.webpackPolyfill) {\n          module.deprecate = function () {};\n\n          module.paths = []; // module.parent = undefined by default\n\n          if (!module.children) module.children = [];\n          Object.defineProperty(module, \"loaded\", {\n            enumerable: true,\n            get: function get() {\n              return module.l;\n            }\n          });\n          Object.defineProperty(module, \"id\", {\n            enumerable: true,\n            get: function get() {\n              return module.i;\n            }\n          });\n          module.webpackPolyfill = 1;\n        }\n\n        return module;\n      };\n      /***/\n\n    },\n    /* 122 */\n\n    /***/\n    function (module, exports) {\n      module.exports = __WEBPACK_EXTERNAL_MODULE_122__;\n      /***/\n    },\n    /* 123 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      module.exports = __webpack_require__(117);\n      /***/\n    }])\n  );\n});","map":null,"metadata":{},"sourceType":"script"}