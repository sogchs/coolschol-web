{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _Select = require('./Select');\n\nvar _Select2 = _interopRequireDefault(_Select);\n\nvar _utilsDefaultFilterOptions = require('./utils/defaultFilterOptions');\n\nvar _utilsDefaultFilterOptions2 = _interopRequireDefault(_utilsDefaultFilterOptions);\n\nvar _utilsDefaultMenuRenderer = require('./utils/defaultMenuRenderer');\n\nvar _utilsDefaultMenuRenderer2 = _interopRequireDefault(_utilsDefaultMenuRenderer);\n\nvar Creatable = _react2['default'].createClass({\n  displayName: 'CreatableSelect',\n  propTypes: {\n    // Child function responsible for creating the inner Select component\n    // This component can be used to compose HOCs (eg Creatable and Async)\n    // (props: Object): PropTypes.element\n    children: _react2['default'].PropTypes.func,\n    // See Select.propTypes.filterOptions\n    filterOptions: _react2['default'].PropTypes.any,\n    // Searches for any matching option within the set of options.\n    // This function prevents duplicate options from being created.\n    // ({ option: Object, options: Array, labelKey: string, valueKey: string }): boolean\n    isOptionUnique: _react2['default'].PropTypes.func,\n    // Determines if the current input text represents a valid option.\n    // ({ label: string }): boolean\n    isValidNewOption: _react2['default'].PropTypes.func,\n    // See Select.propTypes.menuRenderer\n    menuRenderer: _react2['default'].PropTypes.any,\n    // Factory to create new option.\n    // ({ label: string, labelKey: string, valueKey: string }): Object\n    newOptionCreator: _react2['default'].PropTypes.func,\n    // input change handler: function (inputValue) {}\n    onInputChange: _react2['default'].PropTypes.func,\n    // input keyDown handler: function (event) {}\n    onInputKeyDown: _react2['default'].PropTypes.func,\n    // new option click handler: function (option) {}\n    onNewOptionClick: _react2['default'].PropTypes.func,\n    // See Select.propTypes.options\n    options: _react2['default'].PropTypes.array,\n    // Creates prompt/placeholder option text.\n    // (filterText: string): string\n    promptTextCreator: _react2['default'].PropTypes.func,\n    // Decides if a keyDown event (eg its `keyCode`) should result in the creation of a new option.\n    shouldKeyDownEventCreateNewOption: _react2['default'].PropTypes.func\n  },\n  // Default prop methods\n  statics: {\n    isOptionUnique: isOptionUnique,\n    isValidNewOption: isValidNewOption,\n    newOptionCreator: newOptionCreator,\n    promptTextCreator: promptTextCreator,\n    shouldKeyDownEventCreateNewOption: shouldKeyDownEventCreateNewOption\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      filterOptions: _utilsDefaultFilterOptions2['default'],\n      isOptionUnique: isOptionUnique,\n      isValidNewOption: isValidNewOption,\n      menuRenderer: _utilsDefaultMenuRenderer2['default'],\n      newOptionCreator: newOptionCreator,\n      promptTextCreator: promptTextCreator,\n      shouldKeyDownEventCreateNewOption: shouldKeyDownEventCreateNewOption\n    };\n  },\n  createNewOption: function createNewOption() {\n    var _props = this.props;\n    var isValidNewOption = _props.isValidNewOption;\n    var newOptionCreator = _props.newOptionCreator;\n    var onNewOptionClick = _props.onNewOptionClick;\n    var _props$options = _props.options;\n    var options = _props$options === undefined ? [] : _props$options;\n    var shouldKeyDownEventCreateNewOption = _props.shouldKeyDownEventCreateNewOption;\n\n    if (isValidNewOption({\n      label: this.inputValue\n    })) {\n      var option = newOptionCreator({\n        label: this.inputValue,\n        labelKey: this.labelKey,\n        valueKey: this.valueKey\n      });\n\n      var _isOptionUnique = this.isOptionUnique({\n        option: option\n      }); // Don't add the same option twice.\n\n\n      if (_isOptionUnique) {\n        if (onNewOptionClick) {\n          onNewOptionClick(option);\n        } else {\n          options.unshift(option);\n          this.select.selectValue(option);\n        }\n      }\n    }\n  },\n  filterOptions: function filterOptions() {\n    var _props2 = this.props;\n    var filterOptions = _props2.filterOptions;\n    var isValidNewOption = _props2.isValidNewOption;\n    var options = _props2.options;\n    var promptTextCreator = _props2.promptTextCreator; // TRICKY Check currently selected options as well.\n    // Don't display a create-prompt for a value that's selected.\n    // This covers async edge-cases where a newly-created Option isn't yet in the async-loaded array.\n\n    var excludeOptions = arguments[2] || [];\n    var filteredOptions = filterOptions.apply(undefined, arguments) || [];\n\n    if (isValidNewOption({\n      label: this.inputValue\n    })) {\n      var _newOptionCreator = this.props.newOptionCreator;\n\n      var option = _newOptionCreator({\n        label: this.inputValue,\n        labelKey: this.labelKey,\n        valueKey: this.valueKey\n      }); // TRICKY Compare to all options (not just filtered options) in case option has already been selected).\n      // For multi-selects, this would remove it from the filtered list.\n\n\n      var _isOptionUnique2 = this.isOptionUnique({\n        option: option,\n        options: excludeOptions.concat(filteredOptions)\n      });\n\n      if (_isOptionUnique2) {\n        var _prompt = promptTextCreator(this.inputValue);\n\n        this._createPlaceholderOption = _newOptionCreator({\n          label: _prompt,\n          labelKey: this.labelKey,\n          valueKey: this.valueKey\n        });\n        filteredOptions.unshift(this._createPlaceholderOption);\n      }\n    }\n\n    return filteredOptions;\n  },\n  isOptionUnique: function isOptionUnique(_ref2) {\n    var option = _ref2.option;\n    var options = _ref2.options;\n    var isOptionUnique = this.props.isOptionUnique;\n    options = options || this.select.filterFlatOptions();\n    return isOptionUnique({\n      labelKey: this.labelKey,\n      option: option,\n      options: options,\n      valueKey: this.valueKey\n    });\n  },\n  menuRenderer: function menuRenderer(params) {\n    var menuRenderer = this.props.menuRenderer;\n    return menuRenderer(_extends({}, params, {\n      onSelect: this.onOptionSelect,\n      selectValue: this.onOptionSelect\n    }));\n  },\n  onInputChange: function onInputChange(input) {\n    var onInputChange = this.props.onInputChange;\n\n    if (onInputChange) {\n      onInputChange(input);\n    } // This value may be needed in between Select mounts (when this.select is null)\n\n\n    this.inputValue = input;\n  },\n  onInputKeyDown: function onInputKeyDown(event) {\n    var _props3 = this.props;\n    var shouldKeyDownEventCreateNewOption = _props3.shouldKeyDownEventCreateNewOption;\n    var onInputKeyDown = _props3.onInputKeyDown;\n    var focusedOption = this.select.getFocusedOption();\n\n    if (focusedOption && focusedOption === this._createPlaceholderOption && shouldKeyDownEventCreateNewOption({\n      keyCode: event.keyCode\n    })) {\n      this.createNewOption(); // Prevent decorated Select from doing anything additional with this keyDown event\n\n      event.preventDefault();\n    } else if (onInputKeyDown) {\n      onInputKeyDown(event);\n    }\n  },\n  onOptionSelect: function onOptionSelect(option, event) {\n    if (option === this._createPlaceholderOption) {\n      this.createNewOption();\n    } else {\n      this.select.selectValue(option);\n    }\n  },\n  focus: function focus() {\n    this.select.focus();\n  },\n  render: function render() {\n    var _this = this;\n\n    var _props4 = this.props;\n    var newOptionCreator = _props4.newOptionCreator;\n    var shouldKeyDownEventCreateNewOption = _props4.shouldKeyDownEventCreateNewOption;\n\n    var restProps = _objectWithoutProperties(_props4, ['newOptionCreator', 'shouldKeyDownEventCreateNewOption']);\n\n    var children = this.props.children; // We can't use destructuring default values to set the children,\n    // because it won't apply work if `children` is null. A falsy check is\n    // more reliable in real world use-cases.\n\n    if (!children) {\n      children = defaultChildren;\n    }\n\n    var props = _extends({}, restProps, {\n      allowCreate: true,\n      filterOptions: this.filterOptions,\n      menuRenderer: this.menuRenderer,\n      onInputChange: this.onInputChange,\n      onInputKeyDown: this.onInputKeyDown,\n      ref: function ref(_ref) {\n        _this.select = _ref; // These values may be needed in between Select mounts (when this.select is null)\n\n        if (_ref) {\n          _this.labelKey = _ref.props.labelKey;\n          _this.valueKey = _ref.props.valueKey;\n        }\n      }\n    });\n\n    return children(props);\n  }\n});\n\nfunction defaultChildren(props) {\n  return _react2['default'].createElement(_Select2['default'], props);\n}\n\n;\n\nfunction isOptionUnique(_ref3) {\n  var option = _ref3.option;\n  var options = _ref3.options;\n  var labelKey = _ref3.labelKey;\n  var valueKey = _ref3.valueKey;\n  return options.filter(function (existingOption) {\n    return existingOption[labelKey] === option[labelKey] || existingOption[valueKey] === option[valueKey];\n  }).length === 0;\n}\n\n;\n\nfunction isValidNewOption(_ref4) {\n  var label = _ref4.label;\n  return !!label;\n}\n\n;\n\nfunction newOptionCreator(_ref5) {\n  var label = _ref5.label;\n  var labelKey = _ref5.labelKey;\n  var valueKey = _ref5.valueKey;\n  var option = {};\n  option[valueKey] = label;\n  option[labelKey] = label;\n  option.className = 'Select-create-option-placeholder';\n  return option;\n}\n\n;\n\nfunction promptTextCreator(label) {\n  return 'Create option \"' + label + '\"';\n}\n\nfunction shouldKeyDownEventCreateNewOption(_ref6) {\n  var keyCode = _ref6.keyCode;\n\n  switch (keyCode) {\n    case 9: // TAB\n\n    case 13: // ENTER\n\n    case 188:\n      // COMMA\n      return true;\n  }\n\n  return false;\n}\n\n;\nmodule.exports = Creatable;","map":null,"metadata":{},"sourceType":"script"}