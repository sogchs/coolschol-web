{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar separate_1 = require(\"../separate/separate\");\n\nvar identify_1 = require(\"./identify\");\n\nvar separate_2 = require(\"../separate/separate\");\n\nfunction default_1(str, options) {\n  var arr = separate_2.separate(str);\n  var identified = identify_1.default(arr, options); // custom filtering-out function\n\n  if (options.exclude) {\n    for (var index = 0; index < identified.length; index++) {\n      var element = identified[index];\n      if (typeof element === \"object\" && options.exclude(element)) identified[index] = element.raw;\n    }\n  } // return the current list (with words being filtered out)\n\n\n  if (options.list) {\n    var listed = [];\n\n    for (var i = 0; i < identified.length; i++) {\n      var fragment = identified[i];\n      if (typeof fragment !== \"string\") listed.push(fragment);\n    }\n\n    return listed;\n  } // transform objects to HTML tags\n\n\n  identified = identified.map(function (fragment) {\n    if (typeof fragment === \"string\") return fragment;\n    return url2tag(fragment, options);\n  }); // join and return\n\n  return separate_1.deSeparate(identified);\n}\n\nexports.default = default_1;\n\nfunction url2tag(fragment, options) {\n  var href = fragment.protocol + fragment.encoded;\n  var original = fragment.raw;\n\n  if (typeof options.truncate === \"number\") {\n    if (original.length > options.truncate) original = original.substring(0, options.truncate) + \"...\";\n  }\n\n  if (typeof options.truncate === \"object\") {\n    if (original.length > options.truncate[0] + options.truncate[1]) original = original.substr(0, options.truncate[0]) + \"...\" + original.substr(original.length - options.truncate[1]);\n  }\n\n  if (options.attributes === undefined) options.attributes = [];\n  return \"<a href=\\\"\" + href + \"\\\" \" + options.attributes.map(function (attribute) {\n    if (typeof attribute === 'function') {\n      var name = (attribute(fragment) || {}).name;\n      var value = (attribute(fragment) || {}).value;\n      if (name && !value) return \" name \";\n      if (name && value) return \" \" + name + \"=\\\"\" + value + \"\\\" \";\n    } else return \" \" + attribute.name + \"=\\\"\" + attribute.value + \"\\\" \";\n  }).join(\"\") + \">\" + original + \"</a>\";\n}","map":null,"metadata":{},"sourceType":"script"}