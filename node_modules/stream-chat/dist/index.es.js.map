{"version":3,"file":"index.es.js","sources":["../src/channel_state.js","../src/events.js","../src/utils.js","../src/channel.js","../src/client_state.js","../src/connection.js","../src/signing.js","../src/client.js"],"sourcesContent":["import Immutable from 'seamless-immutable';\n\n/**\n * ChannelState - A container class for the channel state.\n */\n\nfunction byDate(a, b) {\n\treturn a.created_at - b.created_at;\n}\n\nexport class ChannelState {\n\tconstructor(channel) {\n\t\tthis._channel = channel;\n\t\tthis.watcher_count = 0;\n\t\tthis.typing = Immutable({});\n\t\tthis.read = Immutable({});\n\t\tthis.messages = Immutable([]);\n\t\tthis.threads = Immutable({});\n\t\t// a list of users to hide messages from\n\t\tthis.mutedUsers = Immutable([]);\n\t\tthis.watchers = Immutable({});\n\t\tthis.members = Immutable({});\n\t}\n\n\t/**\n\t * addMessageSorted - Add a message to the state\n\t *\n\t * @param {object} newMessage A new message\n\t *\n\t */\n\taddMessageSorted(newMessage) {\n\t\treturn this.addMessagesSorted([newMessage]);\n\t}\n\n\t/**\n\t * messageToImmutable - Takes the message object. Parses the dates, sets __html\n\t * and sets the status to received if missing. Returns an immutable message object\n\t *\n\t * @param {object} message an Immutable message object\n\t *\n\t */\n\tmessageToImmutable(message) {\n\t\tmessage.__html = message.html;\n\t\t// parse the date..\n\t\tmessage.created_at = new Date(message.created_at);\n\t\tmessage.updated_at = new Date(message.updated_at);\n\t\tif (!message.status) {\n\t\t\tmessage.status = 'received';\n\t\t}\n\t\treturn Immutable(message);\n\t}\n\n\t/**\n\t * addMessagesSorted - Add the list of messages to state and resorts the messages\n\t *\n\t * @param {array} newMessages A list of messages\n\t *\n\t */\n\taddMessagesSorted(newMessages) {\n\t\t// parse all the new message dates and add __html for react\n\t\tconst parsedMessages = [];\n\t\tfor (const message of newMessages) {\n\t\t\tparsedMessages.push(this.messageToImmutable(message));\n\t\t}\n\n\t\t// update or append the messages...\n\t\tconst updatedThreads = [];\n\t\tfor (const message of parsedMessages) {\n\t\t\tconst isThreadReply = message.parent_id && !message.show_in_channel;\n\t\t\t// add to the main message list\n\t\t\tif (!isThreadReply) {\n\t\t\t\tthis.messages = this._addToMessageList(this.messages, message);\n\t\t\t}\n\t\t\t// add to the thread if applicable..\n\t\t\tconst parentID = message.parent_id;\n\t\t\tif (parentID) {\n\t\t\t\tconst thread = this.threads[parentID] || Immutable([]);\n\t\t\t\tconst threadMessages = this._addToMessageList(thread, message);\n\t\t\t\tthis.threads = this.threads.set(parentID, threadMessages);\n\t\t\t\tupdatedThreads.push(parentID);\n\t\t\t}\n\t\t}\n\n\t\t// Resort the main messages and the threads that changed...\n\t\tconst messages = [...this.messages];\n\t\tmessages.sort(byDate);\n\t\tthis.messages = Immutable(messages);\n\t\tfor (const parentID of updatedThreads) {\n\t\t\tconst threadMessages = this.threads[parentID]\n\t\t\t\t? [...this.threads[parentID]]\n\t\t\t\t: [];\n\t\t\tthreadMessages.sort(byDate);\n\t\t\tthis.threads = this.threads.set(parentID, threadMessages);\n\t\t}\n\t}\n\n\t/**\n\t * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isnt found\n\t *\n\t * @param {array} messages A list of messages\n\t * @param {object} newMessage The new message\n\t *\n\t */\n\t_addToMessageList(messages, newMessage) {\n\t\tlet updated = false;\n\n\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\tconst message = messages[i];\n\t\t\tconst idMatch = message.id && newMessage.id && message.id === newMessage.id;\n\n\t\t\tif (idMatch) {\n\t\t\t\tmessages = messages.set(i, newMessage);\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!updated) {\n\t\t\tmessages = messages.concat([newMessage]);\n\t\t}\n\n\t\treturn messages;\n\t}\n\n\t/**\n\t * removeMessage - Description\n\t *\n\t * @param {type} messageToRemove Object of the message to remove. Needs to have at id specified.\n\t *\n\t * @return {boolean} Returns if the message was removed\n\t */\n\tremoveMessage(messageToRemove) {\n\t\tlet removed = false;\n\t\tconst messages = this.messages.flatMap(message => {\n\t\t\tconst idMatch =\n\t\t\t\tmessage.id && messageToRemove.id && message.id === messageToRemove.id;\n\n\t\t\tif (idMatch) {\n\t\t\t\treturn [];\n\t\t\t} else {\n\t\t\t\tremoved = true;\n\t\t\t\treturn message;\n\t\t\t}\n\t\t});\n\n\t\tthis.messages = messages;\n\t\treturn removed;\n\t}\n\n\t/**\n\t * filterErrorMessages - Removes error messages from the channel state.\n\t *\n\t */\n\tfilterErrorMessages() {\n\t\tconst filteredMessages = this.messages.flatMap(message => {\n\t\t\tif (message.type !== 'error') {\n\t\t\t\treturn message;\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t});\n\n\t\tthis.messages = Immutable(filteredMessages);\n\t}\n\n\t/**\n\t * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n\t */\n\tclean() {\n\t\tconst now = new Date();\n\n\t\t// prevent old users from showing up as typing\n\t\tfor (const [userID, lastEvent] of Object.entries(this.typing)) {\n\t\t\tconst since = now - new Date(lastEvent.received_at);\n\t\t\tif (since > 7000) {\n\t\t\t\tthis.typing = this.typing.without(userID);\n\t\t\t\tthis._channel.client.dispatchEvent({\n\t\t\t\t\ttype: 'typing.stop',\n\t\t\t\t\tuser: { id: userID },\n\t\t\t\t\tcid: this._channel.cid,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n","export const EVENT_MAP = {\n\t'user.presence.changed': true,\n\t'user.watching.start': true,\n\t'user.watching.stop': true,\n\t'user.updated': true,\n\t'typing.start': true,\n\t'typing.stop': true,\n\t'message.new': true,\n\t'message.updated': true,\n\t'message.deleted': true,\n\t'message.read': true,\n\t'message.reaction': true,\n\t'member.added': true,\n\t'member.updated': true,\n\t'member.removed': true,\n\t'channel.updated': true,\n\t'health.check': true,\n\t'notification.message_new': true,\n\t'notification.mark_read': true,\n\t'notification.invited': true,\n\t'notification.invite_accepted': true,\n\t'notification.added_to_channel': true,\n\t'notification.removed_from_channel': true,\n\t// local events\n\t'connection.changed': true,\n\t'connection.recovered': true,\n};\n\nexport function isValidEventType(eventType) {\n\tif (eventType === 'all') {\n\t\treturn true;\n\t}\n\treturn EVENT_MAP[eventType] || false;\n}\n","/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {type} promise The promise you want to run and log\n * @param {type} name    A descriptive name of what the promise does for log output\n *\n */\n\nexport function logChatPromiseExecution(promise, name) {\n\tpromise\n\t\t.then(() => {\n\t\t\t// do nothing...\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.warn(`failed to do ${name}, ran into error: `, error);\n\t\t});\n}\n\nexport const sleep = m => new Promise(r => setTimeout(r, m));\n","import Immutable from 'seamless-immutable';\nimport { ChannelState } from './channel_state';\nimport { isValidEventType } from './events';\nimport { logChatPromiseExecution } from './utils';\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel {\n\t/**\n\t * constructor - Create a channel\n\t *\n\t * @param {Client} client the chat client\n\t * @param {string} type  the type of channel\n\t * @param {string} [id]  the id of the chat\n\t * @param {type} custom any additional custom params\n\t *\n\t * @return {Channel} Returns a new uninitialized channel\n\t */\n\tconstructor(client, type, id, data) {\n\t\tconst validTypeRe = /^[\\w_-]+$/;\n\t\tconst validIDRe = /^[\\w!_-]+$/;\n\n\t\tif (!validTypeRe.test(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`,\n\t\t\t);\n\t\t}\n\t\tif (!validIDRe.test(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`,\n\t\t\t);\n\t\t}\n\n\t\tthis.client = client;\n\t\tthis.type = type;\n\t\tthis.id = id;\n\t\t// used by the frontend, gets updated:\n\t\tthis.data = data;\n\t\t// this._data is used for the requests...\n\t\tthis._data = { ...data };\n\n\t\tthis.cid = `${type}:${id}`;\n\t\tthis.listeners = {};\n\t\t// perhaps the state variable should be private\n\t\tthis.state = new ChannelState(this);\n\t\tthis.initialized = false;\n\t\tthis.lastTypingEvent = null;\n\t\tthis.isTyping = false;\n\t}\n\n\t/**\n\t * getConfig - Get the configs for this channel type\n\t *\n\t * @return {object}\n\t */\n\tgetConfig() {\n\t\treturn this.client.configs[this.type];\n\t}\n\n\t/**\n\t * sendMessage - Send a message to this channel\n\t *\n\t * @param {object} message The Message object\n\t *\n\t * @return {object} The Server Response\n\t */\n\n\tasync sendMessage(message) {\n\t\tconst data = await this.client.post(this._channelURL() + '/message', {\n\t\t\tmessage,\n\t\t});\n\t\treturn data;\n\t}\n\n\tsendFile(uri, name, contentType, user) {\n\t\treturn this.client.sendFile(\n\t\t\t`${this._channelURL()}/file`,\n\t\t\turi,\n\t\t\tname,\n\t\t\tcontentType,\n\t\t\tuser,\n\t\t);\n\t}\n\n\tsendImage(uri, name, contentType, user) {\n\t\treturn this.client.sendFile(\n\t\t\t`${this._channelURL()}/image`,\n\t\t\turi,\n\t\t\tname,\n\t\t\tcontentType,\n\t\t\tuser,\n\t\t);\n\t}\n\n\tdeleteFile(url) {\n\t\treturn this.client.delete(`${this._channelURL()}/file`, { url });\n\t}\n\n\tdeleteImage(url) {\n\t\treturn this.client.delete(`${this._channelURL()}/image`, { url });\n\t}\n\n\t/**\n\t * sendEvent - Send an event on this channel\n\t *\n\t * @param {object} chatEvent for example {type: 'message.read'}\n\t *\n\t * @return {object} The Server Response\n\t */\n\tasync sendEvent(chatEvent) {\n\t\tthis._checkInitialized();\n\t\tconst data = await this.client.post(this._channelURL() + '/event', {\n\t\t\tevent: chatEvent,\n\t\t});\n\t\treturn data;\n\t}\n\n\t/**\n\t * sendReaction - Send a reaction about a message\n\t *\n\t * @param {string} messageID the message id\n\t * @param {object} reaction the reaction object for instance {type: 'love'}\n\t *\n\t * @return {object} The Server Response\n\t */\n\tasync sendReaction(messageID, reaction) {\n\t\tif (!messageID) {\n\t\t\tthrow Error(`Message id is missing`);\n\t\t}\n\t\tif (!reaction || Object.keys(reaction).length === 0) {\n\t\t\tthrow Error(`Reaction object is missing`);\n\t\t}\n\t\tconst body = {\n\t\t\treaction,\n\t\t};\n\t\tconst data = await this.client.post(\n\t\t\tthis.client.baseURL + `/messages/${messageID}/reaction`,\n\t\t\tbody,\n\t\t);\n\t\treturn data;\n\t}\n\n\t/**\n\t * deleteReaction - Delete a reaction by user and type\n\t *\n\t * @param {string} messageID the id of the message from which te remove the reaction\n\t * @param {string} reactionType the type of reaction that should be removed\n\t *\n\t * @return {object} The Server Response\n\t */\n\tdeleteReaction(messageID, reactionType) {\n\t\tthis._checkInitialized();\n\t\tif (!reactionType || !messageID) {\n\t\t\tthrow Error(\n\t\t\t\t'Deleting a reaction requires specifying both the message and reaction type',\n\t\t\t);\n\t\t}\n\t\tconst url =\n\t\t\tthis.client.baseURL + `/messages/${messageID}/reaction/${reactionType}`;\n\t\treturn this.client.delete(url);\n\t}\n\n\t/**\n\t * update - Edit the channel's custom properties\n\t *\n\t * @param {object} custom The object to update the custom properties of this channel with\n\t *\n\t * @return {type} The server response\n\t */\n\tasync update(channelData, updateMessage) {\n\t\tconst data = await this.client.post(this._channelURL(), {\n\t\t\tmessage: updateMessage,\n\t\t\tdata: channelData,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * delete - Delete the channel.. Messages are permanently removed.\n\t *\n\t * @return {object} The server response\n\t */\n\tasync delete() {\n\t\tconst data = await this.client.delete(this._channelURL());\n\t\treturn data;\n\t}\n\n\t/**\n\t * truncate - Removes all messages from the channel\n\t *\n\t * @return {object} The server response\n\t */\n\tasync truncate() {\n\t\tconst data = await this.client.post(this._channelURL() + '/truncate');\n\t\treturn data;\n\t}\n\n\tasync acceptInvite(options = {}) {\n\t\tconst data = await this.client.post(this._channelURL(), {\n\t\t\taccept_invite: true,\n\t\t\t...options,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync rejectInvite(options = {}) {\n\t\tconst data = await this.client.post(this._channelURL(), {\n\t\t\treject_invite: true,\n\t\t\t...options,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync addMembers(members) {\n\t\tconst data = await this.client.post(this._channelURL(), {\n\t\t\tadd_members: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync addModerators(members) {\n\t\tconst data = await this.client.post(this._channelURL(), {\n\t\t\tadd_moderators: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync removeMembers(members) {\n\t\tconst data = await this.client.post(this._channelURL(), {\n\t\t\tremove_members: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync demoteModerators(members) {\n\t\tconst data = await this.client.post(this._channelURL(), {\n\t\t\tdemote_moderators: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tsendAction(messageID, formData) {\n\t\tthis._checkInitialized();\n\t\tif (!messageID) {\n\t\t\tthrow Error(`Message id is missing`);\n\t\t}\n\t\treturn this.client.post(this.client.baseURL + `/messages/${messageID}/action`, {\n\t\t\tmessage_id: messageID,\n\t\t\tform_data: formData,\n\t\t\tid: this.id,\n\t\t\ttype: this.type,\n\t\t});\n\t}\n\n\t/**\n\t * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n\t *  Call this on every keystroke\n\t */\n\tasync keystroke() {\n\t\tif (!this.getConfig().typing_events) {\n\t\t\treturn;\n\t\t}\n\t\tconst now = new Date();\n\t\tconst diff = now - this.lastTypingEvent;\n\t\tthis.lastKeyStroke = now;\n\t\tthis.isTyping = true;\n\t\t// send a typing.start every 2 seconds\n\t\tif (diff > 2000) {\n\t\t\tthis.lastTypingEvent = new Date();\n\t\t\tawait this.sendEvent({\n\t\t\t\ttype: 'typing.start',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * stopTyping - Sets last typing to null and sends the typing.stop event\n\t */\n\tasync stopTyping() {\n\t\tif (!this.getConfig().typing_events) {\n\t\t\treturn;\n\t\t}\n\t\tthis.lastTypingEvent = null;\n\t\tthis.isTyping = false;\n\t\tawait this.sendEvent({\n\t\t\ttype: 'typing.stop',\n\t\t});\n\t}\n\n\t/**\n\t * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n\t *\n\t * @return {type} Description\n\t */\n\tlastMessage() {\n\t\t// get last 5 messages, sort, return the latest\n\t\t// get a slice of the last 5\n\t\tlet min = this.state.messages.length - 5;\n\t\tif (min < 0) {\n\t\t\tmin = 0;\n\t\t}\n\t\tconst max = this.state.messages.length + 1;\n\t\tconst messageSlice = this.state.messages.slice(min, max).asMutable();\n\n\t\t// sort by pk desc\n\t\tmessageSlice.sort((a, b) => b.created_at - a.created_at);\n\n\t\tlet lastMessage;\n\t\tif (messageSlice.length > 0) {\n\t\t\tlastMessage = messageSlice[0];\n\t\t}\n\t\treturn lastMessage;\n\t}\n\n\t/**\n\t * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n\t *\n\t * @return {Promise} Description\n\t */\n\tmarkRead() {\n\t\tthis._checkInitialized();\n\n\t\tif (!this.getConfig().read_events) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tconst lastMessage = this.lastMessage();\n\t\tlet lastMessageCreatedAt, lastMessageID;\n\t\tif (lastMessage) {\n\t\t\tlastMessageCreatedAt = lastMessage.created_at;\n\t\t\tlastMessageID = lastMessage.id;\n\t\t}\n\n\t\treturn this.sendEvent({\n\t\t\ttype: 'message.read',\n\t\t\tlastMessageID,\n\t\t\tlastMessageCreatedAt,\n\t\t});\n\t}\n\n\t/**\n\t * clean - Cleans the channel state and fires stop typing if needed\n\t */\n\tclean() {\n\t\tif (this.lastKeyStroke) {\n\t\t\tconst now = new Date();\n\t\t\tconst diff = now - this.lastKeyStroke;\n\t\t\tif (diff > 1000 && this.isTyping) {\n\t\t\t\tlogChatPromiseExecution(this.stopTyping(), 'stop typing event');\n\t\t\t}\n\t\t}\n\n\t\tthis.state.clean();\n\t}\n\n\t/**\n\t * watch - Loads the initial channel state and watches for changes\n\t *\n\t * @param {object} options additional options for the query endpoint\n\t *\n\t * @return {object} The server response\n\t */\n\tasync watch(options) {\n\t\tconst defaultOptions = {\n\t\t\tstate: true,\n\t\t\twatch: true,\n\t\t\tpresence: false,\n\t\t};\n\n\t\tif (!this.client._hasClientID()) {\n\t\t\tdefaultOptions.watch = false;\n\t\t}\n\n\t\tconst combined = { ...defaultOptions, ...options };\n\t\tconst state = await this.query(combined);\n\t\tthis.initialized = true;\n\t\tthis._initializeState(state);\n\n\t\treturn state;\n\t}\n\n\t/**\n\t * stopwatching - Stops watching the channel\n\t *\n\t * @return {object} The server response\n\t */\n\tasync stopWatching() {\n\t\tconst response = await this.client.post(\n\t\t\tthis._channelURL() + '/stop-watching',\n\t\t\t{},\n\t\t);\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * getReplies - Description\n\t *\n\t * @param {type} parent_id The message parent id, ie the top of the thread\n\t * @param {type} options   Pagination params, ie {limit:10, idlte: 10}\n\t *\n\t * @return {type} A response with a list of messages\n\t */\n\tasync getReplies(parent_id, options) {\n\t\tconst data = await this.client.get(\n\t\t\tthis.client.baseURL + `/messages/${parent_id}/replies`,\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\n\t\t// add any messages to our thread state\n\t\tif (data.messages) {\n\t\t\tthis.state.addMessagesSorted(data.messages);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * getReactions - List the reactions, supports pagination\n\t *\n\t * @param {string} message_id The message id\n\t * @param {object} options    The pagination options\n\t *\n\t * @return {object} Server response\n\t */\n\tasync getReactions(message_id, options) {\n\t\tconst data = await this.client.get(\n\t\t\tthis.client.baseURL + `/messages/${message_id}/reactions`,\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\t\treturn data;\n\t}\n\n\t/**\n\t * countUnread - Count the number of messages with a date thats newer than the last read timestamp\n\t *\n\t * @param {date} lastRead the time that the user read a message\n\t *\n\t * @return {int} Unread count\n\t */\n\tcountUnread(lastRead) {\n\t\tlet count = 0;\n\t\tfor (const m of this.state.messages) {\n\t\t\tif (m.created_at > lastRead) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * create - Description\n\t *\n\t * @return {type} Description\n\t */\n\tcreate = async () => {\n\t\tconst options = {\n\t\t\twatch: false,\n\t\t\tstate: false,\n\t\t\tpresence: false,\n\t\t};\n\t\treturn await this.query(options);\n\t};\n\n\t/**\n\t * query - Query the API, get messages, members or other channel fields\n\t *\n\t * @param {object} options The query options\n\t *\n\t * @return {object} Returns a query response\n\t */\n\tasync query(options) {\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait Promise.resolve(this.client.wsPromise);\n\n\t\tlet queryURL = `${this.client.baseURL}/channels/${this.type}`;\n\t\tif (this.id) {\n\t\t\tqueryURL += `/${this.id}`;\n\t\t}\n\n\t\tconst state = await this.client.post(queryURL + '/query', {\n\t\t\tdata: this._data,\n\t\t\tstate: true,\n\t\t\t...options,\n\t\t});\n\n\t\t// update the channel id if it was missing\n\t\tif (!this.id) {\n\t\t\tthis.id = state.channel.id;\n\t\t\tthis.cid = state.channel.cid;\n\t\t\t// set the channel as active...\n\t\t\tif (!(this.cid in this.client.activeChannels)) {\n\t\t\t\tthis.client.activeChannels[this.cid] = this;\n\t\t\t}\n\t\t}\n\n\t\tthis.client._addChannelConfig(state);\n\n\t\t// add any messages to our channel state\n\t\tthis._initializeState(state);\n\n\t\treturn state;\n\t}\n\n\t/**\n\t * banUser - Bans a user from a channel\n\t *\n\t * @param targetUserID\n\t * @param options\n\t * @returns {Promise<*>}\n\t */\n\tasync banUser(targetUserID, options) {\n\t\tthis._checkInitialized();\n\t\treturn await this.client.banUser(targetUserID, {\n\t\t\t...options,\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t});\n\t}\n\n\t/**\n\t * banUser - Removes the bans for a user on a channel\n\t *\n\t * @param targetUserID\n\t * @returns {Promise<*>}\n\t */\n\tasync unbanUser(targetUserID) {\n\t\tthis._checkInitialized();\n\t\treturn await this.client.unbanUser(targetUserID, {\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t});\n\t}\n\n\t/**\n\t * on - Listen to events on this channel.\n\t *\n\t * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n\t * or\n\t * channel.on(event => {console.log(event.type)})\n\t *\n\t * @param {string} callbackOrString  The event type to listen for (optional)\n\t * @param {function} callbackOrNothing The callback to call\n\t *\n\t * @return {type} Description\n\t */\n\ton(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\t\tthis.listeners[key].push(callback);\n\t}\n\n\t/**\n\t * off - Remove the event handler\n\t *\n\t */\n\toff(callbackOrString, callbackOrNothing) {\n\t\tthis._checkInitialized();\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\n\t\tthis.listeners[key] = this.listeners[key].filter(value => value !== callback);\n\t}\n\n\t_handleChannelEvent(event) {\n\t\tconst channel = this;\n\n\t\tconst messageUpdateEvent = {\n\t\t\t'message.updated': true,\n\t\t\t'message.deleted': true,\n\t\t\t'message.reaction': true,\n\t\t};\n\n\t\tconst s = channel.state;\n\t\tif (event.type === 'typing.start') {\n\t\t\ts.typing = s.typing.set(event.user.id, Immutable(event));\n\t\t} else if (event.type === 'typing.stop') {\n\t\t\ts.typing = s.typing.without(event.user.id);\n\t\t} else if (event.type === 'message.read') {\n\t\t\ts.read = s.read.set(event.user.id, Immutable(event));\n\t\t} else if (\n\t\t\tevent.type === 'user.watching.start' ||\n\t\t\tevent.types === 'user.updated'\n\t\t) {\n\t\t\ts.watchers = s.watchers.set(event.user.id, Immutable(event.user));\n\t\t} else if (event.type === 'user.watching.stop') {\n\t\t\ts.watchers = s.watchers.without(event.user.id);\n\t\t} else if (event.type === 'message.new') {\n\t\t\ts.addMessageSorted(event.message);\n\t\t} else if (event.type in messageUpdateEvent) {\n\t\t\ts.addMessageSorted(event.message);\n\t\t} else if (event.type === 'member.added' || event.type === 'member.updated') {\n\t\t\ts.members = s.members.set(event.member.id, Immutable(event.member));\n\t\t} else if (event.type === 'member.removed') {\n\t\t\ts.members = s.members.without(event.user.id);\n\t\t} else if (event.type === 'channel.updated') {\n\t\t\tchannel.data = Immutable(event.channel);\n\t\t}\n\n\t\t// any event can send over the online count\n\t\tif (event.watcher_count !== undefined) {\n\t\t\tchannel.state.watcher_count = event.watcher_count;\n\t\t}\n\n\t\t// gather and call the listeners\n\t\tconst listeners = [];\n\t\tif (channel.listeners.all) {\n\t\t\tlisteners.push(...channel.listeners.all);\n\t\t}\n\t\tif (channel.listeners[event.type]) {\n\t\t\tlisteners.push(...channel.listeners[event.type]);\n\t\t}\n\n\t\t// call the event and send it to the listeners\n\t\tfor (const listener of listeners) {\n\t\t\tlistener(event);\n\t\t}\n\t}\n\n\t/**\n\t * _channelURL - Returns the channel url\n\t *\n\t * @return {string} The channel url\n\t */\n\t_channelURL = () => {\n\t\tif (!this.id) {\n\t\t\tthrow new Error('channel id is not defined');\n\t\t}\n\t\tconst channelURL = `${this.client.baseURL}/channels/${this.type}/${this.id}`;\n\t\treturn channelURL;\n\t};\n\n\t_checkInitialized() {\n\t\tif (!this.initialized && !this.client._isUsingServerAuth()) {\n\t\t\tthrow Error(\n\t\t\t\t`Channel ${\n\t\t\t\t\tthis.cid\n\t\t\t\t} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n\t\t\t);\n\t\t}\n\t}\n\n\t_initializeState(state) {\n\t\t// immutable list of maps\n\t\tconst messages = state.messages || [];\n\t\tif (!this.state.messages) {\n\t\t\tthis.state.messages = Immutable([]);\n\t\t}\n\t\tthis.state.addMessagesSorted(messages);\n\t\tthis.state.watcher_count = state.watcher_count;\n\t\t// convert the arrays into objects for easier syncing...\n\t\tif (state.watchers) {\n\t\t\tfor (const watcher of state.watchers) {\n\t\t\t\tthis.state.watchers = this.state.watchers.set(watcher.id, watcher);\n\t\t\t}\n\t\t}\n\t\tif (state.read) {\n\t\t\tfor (const read of state.read) {\n\t\t\t\tthis.state.read = this.state.read.set(read.user.id, read);\n\t\t\t}\n\t\t}\n\t\tif (state.members) {\n\t\t\tfor (const m of state.members) {\n\t\t\t\tthis.state.members = this.state.members.set(m.id, m);\n\t\t\t}\n\t\t}\n\t}\n}\n","import Immutable from 'seamless-immutable';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState {\n\tconstructor() {\n\t\t// show the status for a certain user...\n\t\t// ie online, offline etc\n\t\tthis.users = Immutable({});\n\t}\n\n\tupdateUser(user) {\n\t\tif (user != null) {\n\t\t\tthis.users = this.users.set(user.id, Immutable(user));\n\t\t}\n\t}\n}\n","import isoWS from 'isomorphic-ws';\nimport { sleep } from './utils';\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection {\n\tconstructor({\n\t\twsURL,\n\t\tclientID,\n\t\tuserID,\n\t\tmessageCallback,\n\t\trecoverCallback,\n\n\t\teventCallback,\n\t}) {\n\t\tthis.wsURL = wsURL;\n\t\tthis.clientID = clientID;\n\t\tthis.userID = userID;\n\t\t/** consecutive failures influence the duration of the timeout */\n\t\tthis.consecutiveFailures = 0;\n\t\t/** keep track of the total number of failures */\n\t\tthis.totalFailures = 0;\n\n\t\t/** We only make 1 attempt to reconnect at the same time.. */\n\t\tthis.isConnecting = false;\n\t\t/** Boolean that indicates if we have a working connection to the server */\n\t\tthis.isHealthy = false;\n\n\t\t/** Callback when the connection fails and recovers */\n\t\tthis.recoverCallback = recoverCallback;\n\t\tthis.messageCallback = messageCallback;\n\t\tthis.eventCallback = eventCallback;\n\n\t\t/** Incremented when a new WS connection is made */\n\t\tthis.wsID = 1;\n\n\t\t/** Store the last event time for health checks */\n\t\tthis.lastEvent = null;\n\n\t\t/** Send a health check message every 30 seconds */\n\t\tthis.healthCheckInterval = 30 * 1000;\n\t\t/** Every second we verify that we didn't miss any health checks */\n\t\tthis.monitorInterval = 1 * 1000;\n\n\t\tthis._listenForConnectionChanges();\n\t}\n\n\t/**\n\t * connect - Connect to the WS URL\n\t *\n\t * @return {promise} Promise that completes once the first health check message is received\n\t */\n\tasync connect() {\n\t\tlet healthCheck;\n\t\tif (this.isConnecting) {\n\t\t\tthrow Error(\n\t\t\t\t`You've called connect twice, can only attempt 1 connection at the time`,\n\t\t\t);\n\t\t}\n\t\ttry {\n\t\t\tthis.isConnecting = true;\n\t\t\thealthCheck = await this._connect();\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.consecutiveFailures = 0;\n\t\t\tthis._startMonitor();\n\t\t\tthis._startHealthCheck();\n\t\t\treturn healthCheck;\n\t\t} catch (e) {\n\t\t\t// This is a permanent failure, throw the error...\n\n\t\t\tthis.isConnecting = false;\n\t\t\tif (!e.isWSFailure) {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * disconnect - Disconnect the connection and doesn't recover...\n\t *\n\t */\n\tdisconnect() {\n\t\t// start by removing all the listeners\n\t\tif (this.healthCheckIntervalRef) {\n\t\t\tclearInterval(this.healthCheckIntervalRef);\n\t\t}\n\t\tif (this.monitorIntervalRef) {\n\t\t\tclearInterval(this.monitorIntervalRef);\n\t\t}\n\n\t\tthis._removeConnectionListeners();\n\n\t\t// reset the wsID;\n\t\tthis.wsID = 1;\n\t\tthis.isHealthy = false;\n\n\t\t// remove ws handlers...\n\t\tif (this.ws && this.ws.removeAllListeners) {\n\t\t\tthis.ws.removeAllListeners();\n\t\t}\n\n\t\t// and finally close...\n\t\tif (this.ws && this.ws.close) {\n\t\t\tthis.ws.close(\n\t\t\t\t1000,\n\t\t\t\t'Manually closed connection by calling client.disconnect()',\n\t\t\t);\n\t\t}\n\n\t\tdelete this.ws;\n\t}\n\n\t/**\n\t * _connect - Connect to the WS endpoint\n\t *\n\t * @return {promise} Promise that completes once the first health check message is received\n\t */\n\t_connect() {\n\t\tthis._setupConnectionPromise();\n\t\tthis.ws = new isoWS(this.wsURL);\n\t\tthis.ws.onopen = this.onopen.bind(this, this.wsID);\n\t\tthis.ws.onclose = this.onclose.bind(this, this.wsID);\n\t\tthis.ws.onerror = this.onerror.bind(this, this.wsID);\n\t\tthis.ws.onmessage = this.onmessage.bind(this, this.wsID);\n\n\t\treturn this.connectionOpen;\n\t}\n\n\t/**\n\t * _reconnect - Description\n\t *\n\t * @param {int} interval number of ms to wait before connecting\n\t */\n\tasync _reconnect(interval) {\n\t\t// only allow 1 connection at the time\n\t\tif (this.isConnecting || this.isHealthy) {\n\t\t\treturn;\n\t\t}\n\t\tthis.isConnecting = true;\n\t\t// reconnect in case of on error or on close\n\t\t// also reconnect if the health check cycle fails\n\t\tif (interval === undefined) {\n\t\t\tinterval = this._retryInterval();\n\t\t}\n\n\t\t// cleanup the old connection\n\t\tthis._destroyCurrentWSConnection();\n\n\t\t// reconnect, or try again after a little while...\n\t\tawait sleep(interval);\n\t\ttry {\n\t\t\tconst open = await this._connect();\n\t\t\tif (this.recoverCallback) {\n\t\t\t\tawait this.recoverCallback(open);\n\t\t\t}\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.consecutiveFailures = 0;\n\t\t} catch (e) {\n\t\t\tthis.isConnecting = false;\n\t\t\tconsole.warn(`reconnect failed with error`, e);\n\t\t\t// reconnect on WS failures, dont reconnect if there is a code bug\n\t\t\tif (e.isWSFailure) {\n\t\t\t\tthis._reconnect();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n\t *\n\t * @param {object} event Event with type online or offline\n\t *\n\t */\n\tonlineStatusChanged = event => {\n\t\tif (event.type === 'offline') {\n\t\t\t// mark the connection as down\n\t\t\tthis._setHealth(false);\n\t\t} else if (event.type === 'online') {\n\t\t\t// retry right now...\n\t\t\t// We check this.isHealthy, not sure if it's always\n\t\t\t// smart to create a new WS connection if the old one is still up and running.\n\t\t\t// it's possible we didnt miss any messages, so this process is just expensive and not needed.\n\t\t\tif (!this.isHealthy) {\n\t\t\t\tthis._reconnect(10);\n\t\t\t}\n\t\t}\n\t};\n\n\tonopen = wsID => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\t// set healthy..\n\t\tthis._setHealth(true);\n\t};\n\n\tonmessage = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\t// we wait till the first message before we consider the connection open..\n\t\t// the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n\t\t// after that a ws.onclose..\n\t\tif (!this.isResolved) {\n\t\t\tthis.resolvePromise(event);\n\t\t}\n\n\t\t// trigger the event..\n\t\tthis.lastEvent = new Date();\n\t\tthis.messageCallback(event);\n\t};\n\n\tonclose = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\tif (event.code === 1000) {\n\t\t\t// this is a permanent error raised by stream..\n\t\t\t// usually caused by invalid auth details\n\t\t\tconst error = new Error(`WS connection reject with error ${event.reason}`);\n\t\t\terror.reason = event.reason;\n\t\t\tthis.rejectPromise(error);\n\t\t} else {\n\t\t\tthis.consecutiveFailures += 1;\n\t\t\tthis.totalFailures += 1;\n\t\t\tthis._setHealth(false);\n\n\t\t\tthis.rejectPromise(this._errorFromWSEvent(event));\n\n\t\t\t// reconnect if its an abnormal failure\n\t\t\tthis._reconnect();\n\t\t}\n\t};\n\n\tonerror = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\tthis.consecutiveFailures += 1;\n\t\tthis.totalFailures += 1;\n\t\tthis._setHealth(false);\n\n\t\tthis.rejectPromise(this._errorFromWSEvent(event));\n\n\t\tthis._reconnect();\n\t};\n\n\t/**\n\t * _setHealth - Sets the connection to healthy or unhealthy.\n\t * Broadcasts an event in case the connection status changed.\n\t *\n\t * @param {bool} healthy boolean indicating if the connection is healthy or not\n\t *\n\t */\n\t_setHealth = healthy => {\n\t\tif (healthy && !this.isHealthy) {\n\t\t\t// yee we are online:\n\t\t\tthis.isHealthy = true;\n\t\t\tthis.eventCallback({\n\t\t\t\ttype: 'connection.changed',\n\t\t\t\tonline: true,\n\t\t\t});\n\t\t}\n\n\t\tif (!healthy && this.isHealthy) {\n\t\t\t// bummer we are offline\n\t\t\tthis.isHealthy = false;\n\t\t\tthis.eventCallback({\n\t\t\t\ttype: 'connection.changed',\n\t\t\t\tonline: false,\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n\t * _errorFromWSEvent - Creates an error object for the WS event\n\t *\n\t */\n\t_errorFromWSEvent = event => {\n\t\tconst error = new Error(`WS failed with code ${event.code}`);\n\t\terror.code = event.code;\n\t\terror.isWSFailure = true;\n\t\treturn error;\n\t};\n\n\t/**\n\t * _listenForConnectionChanges - Adds an event listener for the browser going online or offline\n\t *\n\t */\n\t_listenForConnectionChanges = () => {\n\t\tif (\n\t\t\ttypeof window !== 'undefined' &&\n\t\t\twindow != null &&\n\t\t\twindow.addEventListener != null\n\t\t) {\n\t\t\twindow.addEventListener('offline', this.onlineStatusChanged);\n\t\t\twindow.addEventListener('online', this.onlineStatusChanged);\n\t\t}\n\t};\n\n\t_removeConnectionListeners = () => {\n\t\tif (\n\t\t\ttypeof window !== 'undefined' &&\n\t\t\twindow != null &&\n\t\t\twindow.addEventListener != null\n\t\t) {\n\t\t\twindow.removeEventListener('offline', this.onlineStatusChanged);\n\t\t\twindow.removeEventListener('online', this.onlineStatusChanged);\n\t\t}\n\t};\n\n\t/**\n\t * _destroyCurrentWSConnection - Removes the current WS connnection\n\t *\n\t */\n\t_destroyCurrentWSConnection() {\n\t\t// increment the ID, meaning we will ignore all messages from the old\n\t\t// ws connection from now on.\n\t\tthis.wsID += 1;\n\n\t\ttry {\n\t\t\tif (this.ws && this.ws.removeAllListeners) {\n\t\t\t\tthis.ws.removeAllListeners();\n\t\t\t}\n\n\t\t\tif (this.ws && this.ws.close) {\n\t\t\t\tthis.ws.close();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// we dont care\n\t\t}\n\t}\n\n\t/**\n\t * _retryInterval - A retry interval which increases after consecutive failures\n\t *\n\t * @return {int} Duration to wait in milliseconds\n\t */\n\t_retryInterval() {\n\t\t// try to reconnect in 0-5 seconds (random to spread out the load from failures)\n\t\tlet max = this.consecutiveFailures * 5000;\n\t\tif (max > 25000) {\n\t\t\tmax = 25000;\n\t\t}\n\t\tconst min = (this.consecutiveFailures - 1) * 5000;\n\t\tlet interval = Math.round(Math.random() * (max - min) + min);\n\t\tif (interval < 1000) {\n\t\t\tinterval = 1000;\n\t\t}\n\t\treturn interval;\n\t}\n\n\t/**\n\t * _setupPromise - sets up the this.connectOpen promise\n\t */\n\t_setupConnectionPromise = () => {\n\t\tconst that = this;\n\t\tthis.isResolved = false;\n\t\t/** a promise that is resolved once ws.open is called */\n\t\tthis.connectionOpen = new Promise(function(resolve, reject) {\n\t\t\tthat.resolvePromise = resolve;\n\t\t\tthat.rejectPromise = reject;\n\t\t}).then(e => {\n\t\t\tconst data = JSON.parse(e.data);\n\t\t\tif (data.error != null) {\n\t\t\t\tthrow new Error(JSON.stringify(data.error));\n\t\t\t}\n\t\t\treturn data;\n\t\t});\n\t};\n\n\t/**\n\t * _startHealthCheck - Sends a message every 30s or so to see if the ws connection still works\n\t *\n\t */\n\t_startHealthCheck() {\n\t\tconst that = this;\n\t\t// 30 seconds is the recommended interval (messenger uses this)\n\t\tthis.healthCheckIntervalRef = setInterval(() => {\n\t\t\t// send the healthcheck.., server replies with a health check event\n\t\t\tconst data = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'health.check',\n\t\t\t\t\tclientID: that.clientID,\n\t\t\t\t\tuserID: that.userID,\n\t\t\t\t},\n\t\t\t];\n\t\t\t// try to send on the connection\n\t\t\ttry {\n\t\t\t\tthat.ws.send(JSON.stringify(data));\n\t\t\t} catch (e) {\n\t\t\t\t// error will already be detected elsewhere\n\t\t\t}\n\t\t}, that.healthCheckInterval);\n\t}\n\n\t/**\n\t * _startMonitor - Verifies we didn't miss any events. Marks the connection as failed in case we did.\n\t *\n\t */\n\t_startMonitor() {\n\t\tconst that = this;\n\t\tthis.monitorIntervalRef = setInterval(() => {\n\t\t\tconst now = new Date();\n\t\t\t// means we missed a health check\n\t\t\tif (now - that.lastEvent > this.healthCheckInterval + 10 * 1000) {\n\t\t\t\tthat._setHealth(false);\n\t\t\t\tthat._reconnect();\n\t\t\t}\n\t\t}, that.monitorInterval);\n\t}\n}\n","import jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserSessionToken\n * @memberof signing\n * @private\n * @param {string} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {object} [extraData] - Extra that should be part of the JWT token\n * @param {object} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(apiSecret, userId, extraData = {}, jwtOptions = {}) {\n\tif (typeof userId !== 'string') {\n\t\tthrow new TypeError('userId should be a string');\n\t}\n\n\tconst payload = {\n\t\tuser_id: userId,\n\t\t...extraData,\n\t};\n\n\tconst opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\treturn jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret, jwtOptions = {}) {\n\tconst payload = {\n\t\tserver: true,\n\t};\n\n\tconst opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\treturn jwt.sign(payload, apiSecret, opts);\n}\n\nfunction decodeBase64(s) {\n\tconst e = {},\n\t\tw = String.fromCharCode,\n\t\tL = s.length;\n\tlet i,\n\t\tb = 0,\n\t\tc,\n\t\tx,\n\t\tl = 0,\n\t\ta,\n\t\tr = '';\n\tconst A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\tfor (i = 0; i < 64; i++) {\n\t\te[A.charAt(i)] = i;\n\t}\n\tfor (x = 0; x < L; x++) {\n\t\tc = e[s.charAt(x)];\n\t\tb = (b << 6) + c;\n\t\tl += 6;\n\t\twhile (l >= 8) {\n\t\t\t((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n\t\t}\n\t}\n\treturn r;\n}\n\n/**\n * @return {string}\n */\nexport function UserFromToken(token) {\n\tconst fragments = token.split('.');\n\tif (fragments.length !== 3) {\n\t\treturn '';\n\t}\n\tconst b64Payload = fragments[1];\n\tconst payload = decodeBase64(b64Payload);\n\tconst data = JSON.parse(payload);\n\treturn data.user_id;\n}\n\nfunction encodeBase64(s) {\n\tif (typeof window !== 'undefined' && window.btoa) {\n\t\treturn window.btoa(s);\n\t} else {\n\t\treturn Buffer.from(s.toString(), 'binary').toString('base64');\n\t}\n}\n\n/**\n *\n * @param userId {string} the id of the user\n * @return {string}\n */\nexport function DevToken(userId) {\n\treturn [\n\t\t'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n\t\tencodeBase64(JSON.stringify({ user_id: userId })),\n\t\t'devtoken', // hardcoded signature\n\t].join('.');\n}\n\n/**\n *\n * @param body {string} the signed message\n * @param secret {string} the shared secret used to generate the signature (Stream API secret)\n * @param signature {string} the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body, secret, signature) {\n\tconst key = new Buffer(secret, 'ascii');\n\tconst hash = crypto\n\t\t.createHmac('sha256', key)\n\t\t.update(body)\n\t\t.digest('hex');\n\treturn hash === signature;\n}\n","/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport axios from 'axios';\nimport uuidv4 from 'uuid/v4';\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\n\nimport { isValidEventType } from './events';\n\nimport {\n\tJWTServerToken,\n\tJWTUserToken,\n\tUserFromToken,\n\tDevToken,\n\tCheckSignature,\n} from './signing';\nimport http from 'http';\nimport https from 'https';\nimport fetch, { Headers } from 'cross-fetch';\nimport FormData from 'form-data';\n\nfunction isReadableStream(obj) {\n\treturn (\n\t\ttypeof obj === 'object' &&\n\t\ttypeof (obj._read === 'function') &&\n\t\ttypeof (obj._readableState === 'object')\n\t);\n}\n\nexport class StreamChat {\n\tconstructor(key, secretOrOptions, options) {\n\t\t// set the key\n\t\tthis.key = key;\n\t\tthis.userToken = null;\n\t\tthis.secret = null;\n\t\tthis.listeners = {};\n\t\tthis.state = new ClientState();\n\n\t\t// set the secret\n\t\tif (secretOrOptions && secretOrOptions.indexOf) {\n\t\t\tthis.secret = secretOrOptions;\n\t\t}\n\n\t\t// set the options... and figure out defaults...\n\t\toptions = options || secretOrOptions;\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tthis.browser =\n\t\t\ttypeof options.browser !== 'undefined'\n\t\t\t\t? options.browser\n\t\t\t\t: typeof window !== 'undefined';\n\t\tthis.node = !this.browser;\n\n\t\tconst defaultOptions = {\n\t\t\ttimeout: 3000,\n\t\t};\n\n\t\tif (this.node) {\n\t\t\tconst nodeOptions = {\n\t\t\t\thttpAgent: new http.Agent({ keepAlive: 3000 }),\n\t\t\t\thttpsAgent: new https.Agent({ keepAlive: 3000 }),\n\t\t\t};\n\t\t\tthis.options = { ...nodeOptions, ...defaultOptions, ...options };\n\t\t} else {\n\t\t\tthis.options = { ...defaultOptions, ...options };\n\t\t\tdelete this.options.httpAgent;\n\t\t\tdelete this.options.httpsAgent;\n\t\t}\n\n\t\tthis.setBaseURL('https://chat-us-east-1.stream-io-api.com');\n\n\t\tif (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n\t\t\tthis.setBaseURL('http://localhost:3030');\n\t\t}\n\n\t\t// WS connection is initialized when setUser is called\n\t\tthis.wsConnection = null;\n\t\tthis.wsPromise = null;\n\t\t// keeps a reference to all the channels that are in use\n\t\tthis.activeChannels = {};\n\t\t// mapping between channel groups and configs\n\t\tthis.configs = {};\n\t\tthis.anonymous = false;\n\n\t\tthis._startCleaning();\n\t}\n\n\tdevToken(userID) {\n\t\treturn DevToken(userID);\n\t}\n\n\tgetAuthType() {\n\t\treturn this.anonymous ? 'anonymous' : 'jwt';\n\t}\n\n\tsetBaseURL(baseURL) {\n\t\tthis.baseURL = baseURL;\n\t\tthis.wsBaseURL = this.baseURL.replace('http', 'ws');\n\t}\n\n\t_setupConnection() {\n\t\tthis.UUID = uuidv4();\n\t\tthis.clientID = `${this.userID}--${this.UUID}`;\n\t\tthis.connect();\n\t\treturn this.wsPromise;\n\t}\n\n\t_hasClientID = () => {\n\t\tconst hasClient = !!this.clientID;\n\t\treturn hasClient;\n\t};\n\n\t/**\n\t * setUser - Set the current user, this triggers a connection to the API\n\t *\n\t * @param {object} user Data about this user. IE {name: \"john\"}\n\t * @param {string} userToken   Token\n\t *\n\t * @return {promise} Returns a promise that resolves when the connection is setup\n\t */\n\tsetUser(user, userToken) {\n\t\tif (this.userID) {\n\t\t\tthrow new Error(\n\t\t\t\t'Use client.disconnect() before trying to connect as a different user. setUser was called twice.',\n\t\t\t);\n\t\t}\n\t\t// we generate the client id client side\n\t\tthis.userID = user.id;\n\n\t\tif (!this.userID) {\n\t\t\tthrow new Error('The \"id\" field on the user is missing');\n\t\t}\n\n\t\tthis.userToken = userToken;\n\n\t\tif (userToken == null && this.secret != null) {\n\t\t\tthis.userToken = this.createToken(this.userID);\n\t\t}\n\n\t\tif (this.userToken == null) {\n\t\t\tthrow new Error('both userToken and api secret are not provided');\n\t\t}\n\n\t\tconst tokenUserId = UserFromToken(this.userToken);\n\t\tif (\n\t\t\tuserToken != null &&\n\t\t\t(tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'userToken does not have a user_id or is not matching with user.id',\n\t\t\t);\n\t\t}\n\t\tthis._setUser(user);\n\t\tthis.anonymous = false;\n\n\t\treturn this._setupConnection();\n\t}\n\n\t_setUser(user) {\n\t\t// this one is used by the frontend\n\t\tthis.user = user;\n\t\t// this one is actually used for requests...\n\t\tthis._user = { ...user };\n\t}\n\n\t/**\n\t * updateAppSettings - updates application settings\n\t *\n\t * @param {object} options App settings.\n\t * \t\tIE: {\n\t  \t\t\t\"apn_config\": {\n\t\t\t\t\t\"auth_type\": \"token\",\n\t\t\t\t\t\"auth_key\": fs.readFileSync(\n\t\t\t\t\t\t'./apn-push-auth-key.p8',\n\t\t\t\t\t\t'utf-8',\n\t\t\t\t\t),\n\t\t\t\t\t\"key_id\": \"keyid\",\n\t\t\t\t\t\"team_id\": \"teamid\", //either ALL these 3\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\",\n\t\t\t\t\t\"bundle_id\": \"com.apple.your.app\",\n\t\t\t\t\t\"development\": true\n\t\t\t\t},\n\t\t\t\t\"firebase_config\": {\n\t\t\t\t\t\"api_key\": \"apiapiapi\",\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\"\n\t\t\t\t},\n\t\t\t\t\"webhook_url\": \"https://acme.com/my/awesome/webhook/\"\n\t\t\t}\n\t */\n\tasync updateAppSettings(options) {\n\t\tif (options.apn_config && options.apn_config.p12_cert) {\n\t\t\toptions.apn_config.p12_cert = Buffer.from(\n\t\t\t\toptions.apn_config.p12_cert,\n\t\t\t).toString('base64');\n\t\t}\n\t\treturn await this.patch(this.baseURL + '/app', options);\n\t}\n\n\t/**\n\t * getAppSettings - retrieves application settings\n\t */\n\tasync getAppSettings() {\n\t\treturn await this.get(this.baseURL + '/app');\n\t}\n\n\t/**\n\t * disconnect - closes the WS connection\n\t */\n\tdisconnect() {\n\t\t// remove the user specific fields\n\t\tdelete this.user;\n\t\tdelete this._user;\n\n\t\tdelete this.anonymous;\n\t\tdelete this.userID;\n\t\tdelete this.userToken;\n\t\tthis.connectionEstablishedCount = 0;\n\t\t// close the WS connection\n\t\tif (this.wsConnection) {\n\t\t\tthis.wsConnection.disconnect();\n\t\t}\n\t}\n\n\tsetAnonymousUser() {\n\t\tthis.anonymous = true;\n\t\tthis.userID = uuidv4();\n\t\tthis._setUser({\n\t\t\tid: this.userID,\n\t\t\tanon: true,\n\t\t});\n\t\treturn this._setupConnection();\n\t}\n\n\t/**\n\t * setGuestUser - Setup a temporary guest user\n\t *\n\t * @param {object} user Data about this user. IE {name: \"john\"}\n\t *\n\t * @return {promise} Returns a promise that resolves when the connection is setup\n\t */\n\tasync setGuestUser(user) {\n\t\tlet response;\n\t\tthis.anonymous = true;\n\t\ttry {\n\t\t\tresponse = await this.post(this.baseURL + '/guest', { user });\n\t\t} catch (e) {\n\t\t\tthis.anonymous = false;\n\t\t\tthrow e;\n\t\t}\n\t\tthis.anonymous = false;\n\t\tconst {\n\t\t\tcreated_at,\n\t\t\tupdated_at,\n\t\t\tlast_active,\n\t\t\tonline,\n\t\t\t...guestUser\n\t\t} = response.user;\n\t\treturn await this.setUser(guestUser, response.access_token);\n\t}\n\n\t/**\n\t * createToken - Creates a token to authenticate this user. This function is used server side.\n\t * The resulting token should be passed to the client side when the users registers or logs in\n\t *\n\t * @param {string}   userID         The User ID\n\t * @param {string}   exp            The expiration time for the token expressed in the number of seconds since the epoch\n\t *\n\t * @return {string} Returns a token\n\t */\n\tcreateToken(userID, exp) {\n\t\tconst extra = {};\n\t\tif (exp != null) {\n\t\t\textra.exp = exp;\n\t\t}\n\t\treturn JWTUserToken(this.secret, userID, extra, {});\n\t}\n\n\t/**\n\t * on - Listen to events on all channels and users your watching\n\t *\n\t * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n\t * or\n\t * client.on(event => {console.log(event.type)})\n\t *\n\t * @param {string} callbackOrString  The event type to listen for (optional)\n\t * @param {function} callbackOrNothing The callback to call\n\t *\n\t * @return {type} Description\n\t */\n\ton(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\t\tthis.listeners[key].push(callback);\n\t}\n\n\t/**\n\t * off - Remove the event handler\n\t *\n\t */\n\toff(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\n\t\tthis.listeners[key] = this.listeners[key].filter(value => value !== callback);\n\t}\n\n\tasync get(url, params) {\n\t\ttry {\n\t\t\tconst response = await axios.get(url, this._addClientParams(params));\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync put(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await axios.put(url, data, this._addClientParams());\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync post(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await axios.post(url, data, this._addClientParams());\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync patch(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await axios.patch(url, data, this._addClientParams());\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync delete(url, params) {\n\t\tlet response;\n\t\ttry {\n\t\t\tresponse = await axios.delete(url, this._addClientParams(params));\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendFile(url, uri, name, contentType, user) {\n\t\tconst data = new FormData();\n\t\tlet fileField;\n\n\t\tconst params = this._addClientParams();\n\t\tif (isReadableStream(uri)) {\n\t\t\tfileField = uri;\n\t\t} else {\n\t\t\tfileField = {\n\t\t\t\turi,\n\t\t\t\tname: name || uri.split('/').reverse()[0],\n\t\t\t};\n\t\t\tif (contentType != null) {\n\t\t\t\tfileField.type = contentType;\n\t\t\t}\n\t\t}\n\n\t\tif (user != null) {\n\t\t\tdata.append('user', JSON.stringify(user));\n\t\t}\n\t\tdata.append('file', fileField);\n\t\tconst response = await fetch(`${url}?api_key=${this.key}`, {\n\t\t\tmethod: 'post',\n\t\t\tbody: data,\n\t\t\theaders: new Headers({\n\t\t\t\tAuthorization: params.headers.Authorization,\n\t\t\t\t'stream-auth-type': this.getAuthType(),\n\t\t\t}),\n\t\t});\n\t\tresponse.data = await response.json();\n\t\treturn this.handleResponse(response);\n\t}\n\n\terrorFromResponse(response) {\n\t\tlet err;\n\t\terr = new Error(`StreamChat error HTTP code: ${response.status}`);\n\t\tif (response.data && response.data.code) {\n\t\t\terr = new Error(\n\t\t\t\t`StreamChat error code ${response.data.code}: ${response.data.message}`,\n\t\t\t);\n\t\t\terr.code = response.data.code;\n\t\t}\n\t\terr.response = response;\n\t\terr.status = response.status;\n\t\treturn err;\n\t}\n\n\thandleResponse(response) {\n\t\tconst data = response.data;\n\t\tif ((response.status + '')[0] !== '2') {\n\t\t\tthrow this.errorFromResponse(response);\n\t\t}\n\t\treturn data;\n\t}\n\n\tdispatchEvent = event => {\n\t\t// client event handlers\n\t\tthis._handleClientEvent(event);\n\n\t\t// channel event handlers\n\t\tconst cid = event.cid;\n\t\tconst channel = this.activeChannels[cid];\n\t\tif (channel) {\n\t\t\tchannel._handleChannelEvent(event);\n\t\t}\n\t};\n\n\thandleEvent = messageEvent => {\n\t\t// dispatch the event to the channel listeners\n\t\tconst jsonString = messageEvent.data;\n\t\tconst event = JSON.parse(jsonString);\n\t\tevent.received_at = new Date();\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t_handleClientEvent(event) {\n\t\tconst client = this;\n\n\t\t// update the client.state with any changes to users\n\t\tif (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n\t\t\tclient.state.updateUser(event.user);\n\t\t}\n\t\tif (event.type === 'health.check') {\n\t\t\tif (event.me) {\n\t\t\t\tclient.user = event.me;\n\t\t\t\tclient.state.updateUser(event.me);\n\t\t\t}\n\t\t}\n\n\t\tif (event.type === 'notification.message_new') {\n\t\t\tthis.configs[event.channel.type] = event.channel.config;\n\t\t}\n\n\t\t// gather and call the listeners\n\t\tconst listeners = [];\n\t\tif (client.listeners.all) {\n\t\t\tlisteners.push(...client.listeners.all);\n\t\t}\n\t\tif (client.listeners[event.type]) {\n\t\t\tlisteners.push(...client.listeners[event.type]);\n\t\t}\n\n\t\t// call the event and send it to the listeners\n\t\tfor (const listener of listeners) {\n\t\t\tlistener(event);\n\t\t}\n\t}\n\n\trecoverState = async () => {\n\t\tconst cids = Object.keys(this.activeChannels || {});\n\t\tconst lastMessageIDs = {};\n\t\tfor (const c of Object.values(this.activeChannels)) {\n\t\t\tconst lastMessage = c.lastMessage();\n\t\t\tlet lastMessageId;\n\t\t\tif (lastMessage) {\n\t\t\t\tlastMessageId = lastMessage.id;\n\t\t\t}\n\t\t\tlastMessageIDs[c.cid] = lastMessageId;\n\t\t}\n\t\tif (cids.length) {\n\t\t\tawait this.queryChannels(\n\t\t\t\t{ cid: { $in: cids } },\n\t\t\t\t{ last_message_at: -1 },\n\t\t\t\t{ limit: 30, recovery: true, last_message_ids: lastMessageIDs },\n\t\t\t);\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'connection.recovered',\n\t\t\t});\n\t\t}\n\t};\n\n\tconnect() {\n\t\tthis.connecting = true;\n\t\tconst client = this;\n\t\tthis.failures = 0;\n\n\t\tif (client.userID == null) {\n\t\t\tthrow Error(\n\t\t\t\t'Call setUser or setAnonymousUser before starting the connection',\n\t\t\t);\n\t\t}\n\t\tconst params = {\n\t\t\tclient_id: client.clientID,\n\t\t\tuser_id: client.userID,\n\t\t\tuser_details: client._user,\n\t\t\tuser_token: client.userToken,\n\t\t};\n\t\tconst qs = encodeURIComponent(JSON.stringify(params));\n\t\tif (qs.length > 1900) {\n\t\t\tthrow Error('User object is too large');\n\t\t}\n\n\t\tlet token = '';\n\n\t\tif (this.anonymous === false) {\n\t\t\ttoken =\n\t\t\t\tthis.userToken !== null ? this.userToken : JWTServerToken(this.secret);\n\t\t}\n\n\t\tconst authType = this.getAuthType();\n\t\tclient.wsURL = `${client.wsBaseURL}/connect?json=${qs}&api_key=${\n\t\t\tthis.key\n\t\t}&authorization=${token}&stream-auth-type=${authType}`;\n\n\t\t// The StableWSConnection handles all the reconnection logic.\n\t\tthis.wsConnection = new StableWSConnection({\n\t\t\twsURL: client.wsURL,\n\t\t\tclientID: this.clientID,\n\t\t\tuserID: this.userID,\n\t\t\trecoverCallback: this.recoverState,\n\t\t\tmessageCallback: this.handleEvent,\n\t\t\teventCallback: this.dispatchEvent,\n\t\t});\n\n\t\tthis.wsPromise = this.wsConnection.connect();\n\n\t\treturn this.wsPromise;\n\t}\n\n\t/**\n\t * queryUsers - Query users and watch user presence\n\t *\n\t * @param {object} filterConditions MongoDB style filter conditions\n\t * @param {object} sort             Sort options, for instance {last_active: -1}\n\t * @param {object} options          Option object, {presence: true}\n\t *\n\t * @return {object} User Query Response\n\t */\n\tasync queryUsers(filterConditions, sort, options) {\n\t\tif (!sort) {\n\t\t\tsort = {};\n\t\t}\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\t\tconst sortFields = [];\n\t\tfor (const [k, v] of Object.entries(sort)) {\n\t\t\tsortFields.push({ field: k, direction: v });\n\t\t}\n\n\t\tconst defaultOptions = {\n\t\t\tpresence: true,\n\t\t};\n\n\t\tif (!this._hasClientID()) {\n\t\t\tdefaultOptions.presence = false;\n\t\t}\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait Promise.resolve(this.wsPromise);\n\n\t\t// Return a list of users\n\t\tconst data = await this.get(this.baseURL + '/users', {\n\t\t\tpayload: {\n\t\t\t\tfilter_conditions: filterConditions,\n\t\t\t\tsort: sortFields,\n\t\t\t\t...defaultOptions,\n\t\t\t\t...options,\n\t\t\t},\n\t\t});\n\n\t\treturn data;\n\t}\n\n\tasync queryChannels(filterConditions, sort = {}, options = {}) {\n\t\tconst sortFields = [];\n\n\t\tfor (const [k, v] of Object.entries(sort)) {\n\t\t\tsortFields.push({ field: k, direction: v });\n\t\t}\n\n\t\tconst defaultOptions = {\n\t\t\tstate: true,\n\t\t\twatch: true,\n\t\t\tpresence: false,\n\t\t};\n\n\t\tif (!this._hasClientID()) {\n\t\t\tdefaultOptions.watch = false;\n\t\t}\n\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: filterConditions,\n\t\t\tsort: sortFields,\n\t\t\tuser_details: this._user,\n\t\t\t...defaultOptions,\n\t\t\t...options,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait Promise.resolve(this.wsPromise);\n\n\t\tconst data = await this.get(this.baseURL + '/channels', {\n\t\t\tpayload,\n\t\t});\n\n\t\tconst channels = [];\n\n\t\t// update our cache of the configs\n\t\tfor (const channelState of data.channels) {\n\t\t\tthis._addChannelConfig(channelState);\n\t\t}\n\n\t\tfor (const channelState of data.channels) {\n\t\t\tconst c = this.channel(channelState.channel.type, channelState.channel.id);\n\t\t\tc.data = channelState.channel;\n\t\t\tc.initialized = true;\n\t\t\tc._initializeState(channelState);\n\t\t\tchannels.push(c);\n\t\t}\n\t\treturn channels;\n\t}\n\n\tasync search(filterConditions, query, options = {}) {\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: filterConditions,\n\t\t\tquery,\n\t\t\t...options,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait Promise.resolve(this.wsPromise);\n\n\t\tconst data = await this.get(this.baseURL + '/search', {\n\t\t\tpayload,\n\t\t});\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * addDevice - Adds a push device for a user.\n\t *\n\t * @param {string} id the device id\n\t * @param {string} push_provider the push provider (apn or firebase)\n\t * @param {string} [userID] the user id (defaults to current user)\n\t *\n\t */\n\tasync addDevice(id, push_provider, userID = null) {\n\t\treturn await this.post(this.baseURL + '/devices', {\n\t\t\tid,\n\t\t\tpush_provider,\n\t\t\t...(userID != null ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t/**\n\t * getDevices - Returns the devices associated with a current user\n\t *\n\t * @param {string} [userID] User ID. Only works on serversidex\n\t *\n\t * @return {devices} Array of devices\n\t */\n\tasync getDevices(userID) {\n\t\treturn await this.get(\n\t\t\tthis.baseURL + '/devices',\n\t\t\tuserID ? { user_id: userID } : {},\n\t\t);\n\t}\n\n\t/**\n\t * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n\t *\n\t * @param {string} id The device id\n\t * @param {string} [userID] The user id. Only specify this for serverside requests\n\t *\n\t */\n\tasync removeDevice(id, userID = null) {\n\t\treturn await this.delete(this.baseURL + '/devices', {\n\t\t\tid,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t_addChannelConfig(channelState) {\n\t\tthis.configs[channelState.channel.type] = channelState.channel.config;\n\t}\n\n\t/**\n\t * channel - Returns a new channel with the given type and id\n\t *\n\t * @param {string} channelType The channel type\n\t * @param {string} channelID   The channel data\n\t * @param {object} [custom]      Custom data to attach to the channel\n\t *\n\t * @return {channel} The channel object, initialize it using channel.watch()\n\t */\n\tchannel(channelType, channelID, custom = {}) {\n\t\tif (!this.userID && !this._isUsingServerAuth()) {\n\t\t\tthrow Error('Call setUser or setAnonymousUser before creating a channel');\n\t\t}\n\t\tif (~channelType.indexOf(':')) {\n\t\t\tthrow Error(\n\t\t\t\t`Invalid channel group ${channelType}, cant contain the : character`,\n\t\t\t);\n\t\t}\n\n\t\tif (typeof channelID === 'string') {\n\t\t\tchannelID = channelID + '';\n\t\t\tif (~channelID.indexOf(':')) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t`Invalid channel id ${channelID}, cant contain the : character`,\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// support the 2 param init method\n\t\t\tcustom = channelID || {};\n\t\t\tchannelID = undefined;\n\t\t}\n\n\t\t// there are two ways of solving this,\n\t\t// a. only allow 1 channel object per cid\n\t\t// b. broadcast events to all channels\n\t\t// the first option seems less likely to trip up devs\n\t\tlet channel;\n\t\tif (channelID) {\n\t\t\tconst cid = `${channelType}:${channelID}`;\n\t\t\tif (cid in this.activeChannels) {\n\t\t\t\tchannel = this.activeChannels[cid];\n\t\t\t\tif (Object.keys(custom).length > 0) {\n\t\t\t\t\tchannel.data = custom;\n\t\t\t\t\tchannel._data = custom;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tchannel = new Channel(this, channelType, channelID, custom);\n\t\t\t\tthis.activeChannels[channel.cid] = channel;\n\t\t\t}\n\t\t} else {\n\t\t\tchannel = new Channel(this, channelType, undefined, custom);\n\t\t}\n\n\t\treturn channel;\n\t}\n\n\t/**\n\t * updateUser - Update or Create the given user object\n\t *\n\t * @param {object} A user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n\t *\n\t * @return {object}\n\t */\n\tasync updateUser(userObject) {\n\t\treturn await this.updateUsers([userObject]);\n\t}\n\n\t/**\n\t * updateUsers - Batch update the list of users\n\t *\n\t * @param {array} A list of users\n\t *\n\t * @return {object}\n\t */\n\tasync updateUsers(users) {\n\t\tconst userMap = {};\n\t\tfor (const userObject of users) {\n\t\t\tif (!userObject.id) {\n\t\t\t\tthrow Error('User ID is required when updating a user');\n\t\t\t}\n\t\t\tuserMap[userObject.id] = userObject;\n\t\t}\n\n\t\treturn await this.post(this.baseURL + '/users', {\n\t\t\tusers: userMap,\n\t\t});\n\t}\n\n\t/** banUser - bans a user from all channels\n\t *\n\t * @param targetUserID\n\t * @param options\n\t * @returns {Promise<*>}\n\t */\n\tasync banUser(targetUserID, options) {\n\t\treturn await this.post(this.baseURL + '/moderation/ban', {\n\t\t\ttarget_user_id: targetUserID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** unbanUser - revoke global ban for a user\n\t *\n\t * @param targetUserID\n\t * @returns {Promise<*>}\n\t */\n\tasync unbanUser(targetUserID, options) {\n\t\treturn await this.delete(this.baseURL + '/moderation/ban', {\n\t\t\ttarget_user_id: targetUserID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** muteUser - mutes a user\n\t *\n\t * @param targetID\n\t * @param [userID] Only used with serverside auth\n\t * @returns {Promise<*>}\n\t */\n\tasync muteUser(targetID, userID = null) {\n\t\treturn await this.post(this.baseURL + '/moderation/mute', {\n\t\t\ttarget_id: targetID,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t/** unmuteUser - unmutes a user\n\t *\n\t * @param targetID\n\t * @param [userID] Only used with serverside auth\n\t * @returns {Promise<*>}\n\t */\n\tasync unmuteUser(targetID, userID = null) {\n\t\treturn await this.post(this.baseURL + '/moderation/unmute', {\n\t\t\ttarget_id: targetID,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\tasync flagMessage(messageID) {\n\t\treturn await this.post(this.baseURL + '/moderation/flag', {\n\t\t\ttarget_message_id: messageID,\n\t\t});\n\t}\n\n\tasync flagUser(userID) {\n\t\treturn await this.post(this.baseURL + '/moderation/flag', {\n\t\t\ttarget_user_id: userID,\n\t\t});\n\t}\n\n\tasync unflagMessage(messageID) {\n\t\treturn await this.post(this.baseURL + '/moderation/unflag', {\n\t\t\ttarget_message_id: messageID,\n\t\t});\n\t}\n\n\tasync unflagUser(userID) {\n\t\treturn await this.post(this.baseURL + '/moderation/unflag', {\n\t\t\ttarget_user_id: userID,\n\t\t});\n\t}\n\n\tcreateChannelType(data) {\n\t\tconst channelData = Object.assign({}, { commands: ['all'] }, data);\n\t\treturn this.post(this.baseURL + '/channeltypes', channelData);\n\t}\n\n\tgetChannelType(channelType) {\n\t\treturn this.get(this.baseURL + `/channeltypes/${channelType}`);\n\t}\n\n\tupdateChannelType(channelType, data) {\n\t\treturn this.put(this.baseURL + `/channeltypes/${channelType}`, data);\n\t}\n\n\tdeleteChannelType(channelType) {\n\t\treturn this.delete(this.baseURL + `/channeltypes/${channelType}`);\n\t}\n\n\tlistChannelTypes() {\n\t\treturn this.get(this.baseURL + `/channeltypes`);\n\t}\n\n\t/**\n\t * updateMessage - Update the given message\n\t *\n\t * @param {object} message object, id needs to be specified\n\t *\n\t * @return {object} Response that includes the message\n\t */\n\tasync updateMessage(message, userId) {\n\t\tif (!message.id) {\n\t\t\tthrow Error('Please specify the message id when calling updateMesssage');\n\t\t}\n\n\t\tconst clonedMessage = Object.assign({}, message);\n\t\tdelete clonedMessage.id;\n\n\t\tconst reservedMessageFields = [\n\t\t\t'latest_reactions',\n\t\t\t'own_reactions',\n\t\t\t'reply_count',\n\t\t\t'created_at',\n\t\t\t'updated_at',\n\t\t\t'html',\n\t\t\t'command',\n\t\t\t'type',\n\t\t\t'user',\n\t\t];\n\n\t\treservedMessageFields.forEach(function(item) {\n\t\t\tif (clonedMessage[item] != null) {\n\t\t\t\tdelete clonedMessage[item];\n\t\t\t}\n\t\t});\n\n\t\tif (userId != null) {\n\t\t\tclonedMessage.user = { id: userId };\n\t\t}\n\n\t\treturn await this.post(this.baseURL + `/messages/${message.id}`, {\n\t\t\tmessage: clonedMessage,\n\t\t});\n\t}\n\n\tasync deleteMessage(messageID) {\n\t\treturn await this.delete(this.baseURL + `/messages/${messageID}`);\n\t}\n\n\t_userAgent() {\n\t\tconst description = this.node ? 'node' : 'browser';\n\t\tconst version = '1.0';\n\t\treturn `stream-chat-${description}-${version}`;\n\t}\n\n\t/**\n\t * _isUsingServerAuth - Returns true if we're using server side auth\n\t */\n\t_isUsingServerAuth = () => {\n\t\t// returns if were in server side mode or not...\n\t\tconst serverAuth = !!this.secret;\n\t\treturn serverAuth;\n\t};\n\n\t_addClientParams(params = {}) {\n\t\tlet token = '';\n\t\tif (this.secret === null && this.userToken === null && this.anonymous === false) {\n\t\t\tthrow new Error(\n\t\t\t\t'Both secret and user tokens are not set, did you forget to call client.setUser?',\n\t\t\t);\n\t\t}\n\n\t\tif (this.anonymous === false) {\n\t\t\ttoken =\n\t\t\t\tthis.userToken !== null ? this.userToken : JWTServerToken(this.secret);\n\t\t}\n\n\t\treturn {\n\t\t\t...this.options,\n\t\t\tparams: {\n\t\t\t\tuser_id: this.userID,\n\t\t\t\t...params,\n\t\t\t\tapi_key: this.key,\n\t\t\t\tclient_id: this.clientID,\n\t\t\t},\n\t\t\theaders: { Authorization: token, 'stream-auth-type': this.getAuthType() },\n\t\t};\n\t}\n\n\t_startCleaning() {\n\t\tconst that = this;\n\t\tthis.cleaningIntervalRef = setInterval(() => {\n\t\t\t// call clean on the channel, used for calling the stop.typing event etc.\n\t\t\tfor (const channel of Object.values(that.activeChannels)) {\n\t\t\t\tchannel.clean();\n\t\t\t}\n\t\t}, 500);\n\t}\n\n\tverifyWebhook(requestBody, xSignature) {\n\t\treturn CheckSignature(requestBody, this.secret, xSignature);\n\t}\n}\n"],"names":["byDate","a","b","created_at","ChannelState","channel","_channel","watcher_count","typing","Immutable","read","messages","threads","mutedUsers","watchers","members","newMessage","addMessagesSorted","message","__html","html","Date","updated_at","status","newMessages","parsedMessages","push","messageToImmutable","updatedThreads","isThreadReply","parent_id","show_in_channel","_addToMessageList","parentID","thread","threadMessages","set","sort","updated","i","length","idMatch","id","concat","messageToRemove","removed","flatMap","filteredMessages","type","now","Object","entries","userID","lastEvent","since","received_at","without","client","dispatchEvent","user","cid","EVENT_MAP","isValidEventType","eventType","logChatPromiseExecution","promise","name","then","catch","error","console","warn","sleep","m","Promise","r","setTimeout","Channel","data","options","watch","state","presence","query","Error","channelURL","baseURL","validTypeRe","validIDRe","test","_data","listeners","initialized","lastTypingEvent","isTyping","configs","post","_channelURL","uri","contentType","sendFile","url","delete","chatEvent","_checkInitialized","event","messageID","reaction","keys","body","reactionType","channelData","updateMessage","accept_invite","reject_invite","add_members","add_moderators","remove_members","demote_moderators","formData","message_id","form_data","getConfig","typing_events","diff","lastKeyStroke","sendEvent","min","max","messageSlice","slice","asMutable","lastMessage","read_events","resolve","lastMessageCreatedAt","lastMessageID","stopTyping","clean","defaultOptions","_hasClientID","combined","_initializeState","response","get","lastRead","count","wsPromise","queryURL","activeChannels","_addChannelConfig","targetUserID","banUser","unbanUser","callbackOrString","callbackOrNothing","key","valid","callback","filter","value","messageUpdateEvent","s","types","addMessageSorted","member","undefined","all","listener","_isUsingServerAuth","watcher","ClientState","users","StableWSConnection","wsURL","clientID","messageCallback","recoverCallback","eventCallback","_setHealth","isHealthy","_reconnect","wsID","isResolved","resolvePromise","code","reason","rejectPromise","consecutiveFailures","totalFailures","_errorFromWSEvent","healthy","online","isWSFailure","window","addEventListener","onlineStatusChanged","removeEventListener","that","connectionOpen","reject","e","JSON","parse","stringify","isConnecting","healthCheckInterval","monitorInterval","_listenForConnectionChanges","_connect","healthCheck","_startMonitor","_startHealthCheck","healthCheckIntervalRef","clearInterval","monitorIntervalRef","_removeConnectionListeners","ws","removeAllListeners","close","_setupConnectionPromise","isoWS","onopen","bind","onclose","onerror","onmessage","interval","_retryInterval","_destroyCurrentWSConnection","open","Math","round","random","setInterval","send","JWTUserToken","apiSecret","userId","extraData","jwtOptions","TypeError","payload","user_id","opts","algorithm","noTimestamp","jwt","sign","JWTServerToken","server","decodeBase64","w","String","fromCharCode","L","c","x","l","A","charAt","UserFromToken","token","fragments","split","b64Payload","encodeBase64","btoa","Buffer","from","toString","DevToken","join","CheckSignature","secret","signature","hash","crypto","createHmac","update","digest","isReadableStream","obj","_read","_readableState","StreamChat","secretOrOptions","hasClient","_handleClientEvent","_handleChannelEvent","messageEvent","jsonString","cids","lastMessageIDs","values","lastMessageId","queryChannels","$in","last_message_at","limit","recovery","last_message_ids","serverAuth","userToken","indexOf","browser","node","timeout","nodeOptions","httpAgent","http","Agent","keepAlive","httpsAgent","https","setBaseURL","process","env","STREAM_LOCAL_TEST_RUN","wsConnection","anonymous","_startCleaning","wsBaseURL","replace","UUID","uuidv4","connect","createToken","tokenUserId","_setUser","_setupConnection","_user","apn_config","p12_cert","patch","connectionEstablishedCount","disconnect","anon","last_active","guestUser","setUser","access_token","exp","extra","params","axios","_addClientParams","handleResponse","put","FormData","fileField","reverse","append","fetch","method","headers","Headers","Authorization","getAuthType","json","err","errorFromResponse","updateUser","me","config","connecting","failures","client_id","user_details","user_token","qs","encodeURIComponent","authType","recoverState","handleEvent","filterConditions","sortFields","k","v","field","direction","filter_conditions","channels","channelState","push_provider","channelType","channelID","custom","userObject","updateUsers","userMap","target_user_id","targetID","target_id","target_message_id","commands","clonedMessage","reservedMessageFields","forEach","item","description","version","api_key","cleaningIntervalRef","requestBody","xSignature"],"mappings":"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"}